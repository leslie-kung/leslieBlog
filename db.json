{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/bitbug.ico","path":"images/bitbug.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/image/person.png","path":"image/person.png","modified":1,"renderable":0},{"_id":"themes/next/source/images/person.png","path":"images/person.png","modified":1,"renderable":1},{"_id":"source/image/code/code1.jpg","path":"image/code/code1.jpg","modified":1,"renderable":0},{"_id":"source/image/code/code.png","path":"image/code/code.png","modified":1,"renderable":0},{"_id":"source/image/code/code3.jpg","path":"image/code/code3.jpg","modified":1,"renderable":0},{"_id":"source/image/code/clipboard.png","path":"image/code/clipboard.png","modified":1,"renderable":0},{"_id":"source/image/code/code4.jpg","path":"image/code/code4.jpg","modified":1,"renderable":0},{"_id":"source/image/code/code2.jpg","path":"image/code/code2.jpg","modified":1,"renderable":0},{"_id":"source/image/code/test1.png","path":"image/code/test1.png","modified":1,"renderable":0},{"_id":"source/image/crawl/leslie.png","path":"image/crawl/leslie.png","modified":1,"renderable":0},{"_id":"source/image/code/test2.png","path":"image/code/test2.png","modified":1,"renderable":0},{"_id":"source/image/crawl/red_heart.jpg","path":"image/crawl/red_heart.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/bai.js","path":"js/src/bai.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/crash_cheat.js","path":"js/src/crash_cheat.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/clicklove.js","path":"js/src/clicklove.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/custom.js","path":"js/src/custom.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/clipboard/clipboard-action.js","path":"lib/clipboard/clipboard-action.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/clipboard/clipboard.js","path":"lib/clipboard/clipboard.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/bg1.jpg","path":"images/bg1.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/bg4.jpg","path":"images/bg4.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/images/bg2.jpg","path":"images/bg2.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/bg.jpg","path":"images/bg.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1645778229098},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1645778229098},{"_id":"themes/next/.DS_Store","hash":"4fd42816442950ed028d8ba347bc0ebfc93b181a","modified":1646041718602},{"_id":"themes/next/.gitignore","hash":"ed6da46febdee17e1b2d889d0a922ed07f97d80a","modified":1645778229099},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1645778229098},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1645778229100},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1645778229100},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1645778229100},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1645778229100},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1645778229101},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1645778229100},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1645778229101},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1645778229102},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1645778229101},{"_id":"themes/next/_config.yml","hash":"b44f7886104cfd9e08d09d40f97173e3eda1190a","modified":1646125309114},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1645778229102},{"_id":"themes/next/package.json","hash":"b5df2993cc2326ba3cf039bce2c86a2c6dd3a8d7","modified":1645778229127},{"_id":"source/README.md","hash":"e079a1bb9f5f24a0f86f34c508c56c1fd4157517","modified":1645778229086},{"_id":"source/CNAME","hash":"56ba8a08e9aae00595b8bf9d74deba4e0f5c062d","modified":1645796475256},{"_id":"source/robots.txt","hash":"3cdc633ca8bbbee1a0be98e022346bd9320996b2","modified":1646058680613},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1645778229099},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1645778229099},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1645778229098},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1645778229099},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1645778229103},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1645778229103},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1645778229103},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1645778229103},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1645778229104},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1645778229104},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1645778229104},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1645778229104},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1645778229105},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1645778229105},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1645778229106},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1645778229106},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1645778229105},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1645778229106},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1645778229106},{"_id":"themes/next/languages/zh-Hans.yml","hash":"9cc1e2e9e8acdaddf42cdaa58a3479771c0ae08c","modified":1646122951266},{"_id":"themes/next/layout/_layout.swig","hash":"1babb18a4b8976bf906857da3a146c74c0ac1cbb","modified":1646039130106},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1645778229125},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1645778229126},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1645778229126},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1645778229126},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1645778229126},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1645778229127},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1645778229127},{"_id":"themes/next/layout/index.swig","hash":"2b509072e309dd377862601980d2b7826bfa5e21","modified":1646058080143},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1645778229128},{"_id":"themes/next/source/.DS_Store","hash":"1fa1807b98d54e121359c60130319544b3a2e786","modified":1646040756433},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1645778229219},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1645778229220},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1645778229220},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229158},{"_id":"source/archives/index.md","hash":"c96216bc1dba0162cf576ca8ae1aaee563a73501","modified":1646116363034},{"_id":"source/404/404.md","hash":"dfdb8c29f80314dc5ed01fe2cdd72df2b0d67a55","modified":1645778229086},{"_id":"source/about/index.md","hash":"3af790e0c8e30e94bec55d59fd3f7ec7e7e93962","modified":1647107468396},{"_id":"source/_posts/docker容器.md","hash":"21a7bf8e3ba9ed5c77e97131388f6fc401ade179","modified":1647172156016},{"_id":"source/_posts/jupyter搭建.md","hash":"af411caa1238b129ae674cafec41dfd760407657","modified":1647172156018},{"_id":"source/_posts/docker镜像.md","hash":"c4481596f925c7f8fcf471fb560bdc50eab3d596","modified":1647172156012},{"_id":"source/_posts/lambda函数.md","hash":"74cb8b44703dd2032106367c4c8de65998d443f0","modified":1647172156020},{"_id":"source/_posts/k8s的本质.md","hash":"604bd11da56f4d2af71f8cdbe5eddb873c21a96c","modified":1647785838335},{"_id":"source/_posts/mongo去重.md","hash":"45f476e020f13aab3c7abe9fe469f4976ccf7c20","modified":1647172156017},{"_id":"source/_posts/list去重和单例.md","hash":"aac6e55144cbdef3b795a819a0a2555a73239906","modified":1647172156022},{"_id":"source/_posts/myql查询语句优化.md","hash":"f3853158f04bc4693b401297b7873eae531190c9","modified":1647179527641},{"_id":"source/_posts/mysql导入导出数据.md","hash":"e20b247928ccad21c8f70d9b8ae78962d6c4a264","modified":1647172156030},{"_id":"source/_posts/mysql用户创建授权.md","hash":"f69648c8e87ab4df1948de3cc39f071cbbca0f11","modified":1647172156027},{"_id":"source/_posts/mysql生成sql语句.md","hash":"22636740d27f62f79a53e0b3fbec5782e29d0165","modified":1647172156025},{"_id":"source/_posts/mysql连接池.md","hash":"dc52d4a9fda5f4178bec6dbcdce671e7e2da81bf","modified":1647172156043},{"_id":"source/_posts/mysql重置root密码.md","hash":"134c7dd388946e23337cf04d73771bb967f2d1d0","modified":1647172156034},{"_id":"source/_posts/mysql的回表.md","hash":"d8c2ee9f083fcb01e69e4d4697624889475e3aa1","modified":1647179558865},{"_id":"source/_posts/mysql索引.md","hash":"290d587eda479cc48438aa27068c25f71eb40df1","modified":1647172156035},{"_id":"source/_posts/numpy学习.md","hash":"bf79c948aea44146548fcda822cc8b1187aa3eac","modified":1647172156092},{"_id":"source/_posts/python3中Unicode字符转中文.md","hash":"1e9c1ab6fe5190d6ed37b801ab9ee946805b83db","modified":1647172156038},{"_id":"source/_posts/pep8.md","hash":"4004fb96551a100817ee3c7079028cd86b24364c","modified":1647172156124},{"_id":"source/_posts/python中random库使用.md","hash":"ce8f6f2cbcedc9a57d102cab9ce5ac84a12a8b72","modified":1647172156041},{"_id":"source/_posts/python上下文管理器.md","hash":"7a2d409b1169b5120f9ee436971ded637d51a237","modified":1647785634451},{"_id":"source/_posts/python中arrow库的使用.md","hash":"4a7362a0212d8dad1de32d52595032ba2881133a","modified":1647172156045},{"_id":"source/_posts/python中元素替换.md","hash":"b23b4686cc5442c531a547cc0ae94af197bafacb","modified":1647172156046},{"_id":"source/_posts/python中对象和继承.md","hash":"e5cd8bbe87f5278086405b2f502450fce5bf6f2e","modified":1647785634448},{"_id":"source/_posts/python之copy.md","hash":"716e2b8c7d12a1989bee4addd65fbe081685aa18","modified":1647172156047},{"_id":"source/_posts/python图片转字符串.md","hash":"4689effbc957d53ec8c3ea7ccd54ac413ea6a0e1","modified":1647172156048},{"_id":"source/_posts/python中闭包和装饰器.md","hash":"fdaaa4d50edd9174d873c37c4d83891a55819b30","modified":1647172156046},{"_id":"source/_posts/python处理简单验证码.md","hash":"9ec4398fa04bbedcc9c0858f8cf931ff691fb666","modified":1647172156049},{"_id":"source/_posts/python字典多次嵌套.md","hash":"cd82435e1cb03cf3e09e4ad9f645e5a03aa139cd","modified":1647172156048},{"_id":"source/_posts/python中迭代器和生成器.md","hash":"43f3b561ef63056f3846b80837217fb220fb4910","modified":1647172156053},{"_id":"source/_posts/python常见设计模式1.md","hash":"5ca54f56005ca87cb989835c3fb1efdff14152fc","modified":1647186324905},{"_id":"source/_posts/python常见设计模式3.md","hash":"faeec90cf3a18e012d5fd4d25b6a42e1e70c5fb6","modified":1647179039834},{"_id":"source/_posts/python基础.md","hash":"af9f811c72fb56214f9ed9167ccc9a6725119601","modified":1647172156060},{"_id":"source/_posts/python常见设计模式2.md","hash":"1e21cd459a0d16be1dcc78564dc21b69c37525ec","modified":1647360387334},{"_id":"source/_posts/python返回每个月最大天数.md","hash":"217141ef9803efc7bc1a1b46089b45c66274fcc5","modified":1647172156066},{"_id":"source/_posts/python进行excel转json.md","hash":"716dcc3feafd534e4fab24964b565e310da43474","modified":1647172156064},{"_id":"source/_posts/python版布隆过滤器.md","hash":"ebc091dd54d00524e42b26746ddea18a0e5ea8d8","modified":1647179171704},{"_id":"source/_posts/redis的高可用机制.md","hash":"6ab90ee3ff346d98274554a4efe239e8f8d2a772","modified":1647179445197},{"_id":"source/_posts/redis基础信息.md","hash":"8687a862c466a71ae60574fc36e34eeef4b3af58","modified":1647179365261},{"_id":"source/_posts/redis缓存.md","hash":"a987528ca30deef68ac31fa1d5c4272b2fe614c5","modified":1647179281206},{"_id":"source/_posts/python版布隆过滤器2.md","hash":"ee699b6e976482ba32ab4e36e17a105558fcf9cc","modified":1647179214636},{"_id":"source/_posts/tcp-socket.md","hash":"ef752c65c58b089c921db6ea48d6c2918169dcd4","modified":1647172156074},{"_id":"source/_posts/百度贴吧图片抓取.md","hash":"7f873ac14aa2ab8817d9c5c992fc9aa45b8e0ee8","modified":1647172156077},{"_id":"source/_posts/搭建k8s集群.md","hash":"696813fa4963e8af19245fe2395f8d668bf4f27a","modified":1647786086625},{"_id":"source/_posts/解决api变化问题.md","hash":"0bc0ded70210040e3692f6f938d8dec984214a42","modified":1647172156080},{"_id":"source/_posts/tcp和udp的区别.md","hash":"f9ce4b39b1fa1c039d126c3e54160ba0ead0c34f","modified":1647172156083},{"_id":"source/_posts/排序.md","hash":"05d2ce167d4293e26239d14fe0f135c1cb386cc1","modified":1647172156085},{"_id":"source/guestbook/index.md","hash":"36edc13f6b393fdf3dd19adf072df8fb16eee26b","modified":1647107167605},{"_id":"source/categories/index.md","hash":"49d62dd8d2ddaa01ee08fa1ea8129fc768914310","modified":1646116392384},{"_id":"source/_posts/进程线程协程.md","hash":"c6c19e2f5727c9e444688dfbc62bd1744bf87082","modified":1647172156123},{"_id":"source/tags/index.md","hash":"d2ced0bef02cbe54ef03cf0dfc71d351f856cc66","modified":1645778229097},{"_id":"themes/next/layout/_custom/custom.swig","hash":"b212694dd305b510870074761703a00668611d80","modified":1645778229107},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1645778229107},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1645778229107},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"515cc06bc714e0de8cf164debb01eaf735eedd89","modified":1645778229108},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1645778229108},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1645778229108},{"_id":"themes/next/layout/_macro/post.swig","hash":"4f35cc6d333ac86769e53b1e53d5c1ce79b2972b","modified":1645778229108},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1645778229109},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1645778229109},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1645778229110},{"_id":"themes/next/layout/_partials/footer-bak.swig.bak","hash":"7ecf13c7e96a2c8aa73fc5b435c950c8de1d430d","modified":1645778229110},{"_id":"themes/next/layout/_partials/footer.swig","hash":"383ab44dd08eb19ac50725ebe9ee74373a0738b5","modified":1645778229110},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1624af9b0ef1e4ecfde66653cd07e3dcbf9b2464","modified":1646120961500},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1645778229113},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1645778229112},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"fe514aed6cc31770c224ee998cf2ffa5d5dea9e7","modified":1645778229113},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1645778229113},{"_id":"themes/next/layout/_partials/head.swig","hash":"31d3e86e7df92e2cbb4a6007892c1ca4e19c7438","modified":1646119577192},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1645778229122},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1645778229122},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1645778229122},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1645778229123},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1645778229123},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1645778229123},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1645778229123},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1645778229115},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1645778229115},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1645778229117},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1645778229128},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1645778229128},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1645778229129},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1645778229129},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1645778229129},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1645778229129},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1645778229130},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1645778229130},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1645778229130},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1645778229158},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1645778229158},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1645778229160},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1645778229160},{"_id":"themes/next/source/images/.DS_Store","hash":"a8cc3dd444e5994b1e7ef73fd13c6196025c85b7","modified":1646040756435},{"_id":"themes/next/source/images/bitbug.ico","hash":"eacf4fafffb3bd22c0a4a35d00f953f328237374","modified":1645778229167},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1645778229168},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1645778229168},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1645778229167},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1645778229168},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1645778229168},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1645778229169},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1645778229169},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1645778229169},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1645778229169},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1645778229169},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1645778229170},{"_id":"themes/next/source/images/favicon.ico","hash":"d08ec0c0e6b1d9559eeba084a7057c7a56c13978","modified":1646036597496},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1645778229170},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1645778229171},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1645778229171},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1645778229171},{"_id":"source/image/person.png","hash":"7c7337c6087ad318301704701b7f75c8c6b7f8c3","modified":1645778229097},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229116},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229116},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229149},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229149},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229150},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229157},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229157},{"_id":"themes/next/source/images/person.png","hash":"7c7337c6087ad318301704701b7f75c8c6b7f8c3","modified":1645778229170},{"_id":"source/image/code/code1.jpg","hash":"552eba9de819bd0d5c9c955b19903dd9a3a926dd","modified":1645778229093},{"_id":"source/image/code/code.png","hash":"e32688196e5b2c805ed464502dc0765e93ab7d25","modified":1645778229093},{"_id":"source/image/code/code3.jpg","hash":"26e585ecde73ce911c232d631fa320db664771c9","modified":1645778229094},{"_id":"source/image/code/clipboard.png","hash":"5e6ef3d386b3f6a5076d9cfc7380dceb0e551503","modified":1647785343495},{"_id":"source/image/code/code4.jpg","hash":"9fd7c541554a6959ae539e5315fdb066fb3ee582","modified":1645778229094},{"_id":"source/image/code/code2.jpg","hash":"dcfed35715be15603262103e7ee8bd586cee68a1","modified":1645778229093},{"_id":"source/image/code/test1.png","hash":"ce1d2dda5d25916e958c8f242585ff5f84538d72","modified":1645778229095},{"_id":"source/image/crawl/leslie.png","hash":"76fe398b6630fb79980c1b3319a287619a6cff52","modified":1645778229096},{"_id":"source/image/code/test2.png","hash":"4edcf30135a40b9261253882c2e78945325cc255","modified":1645778229095},{"_id":"source/image/crawl/red_heart.jpg","hash":"4a43ecd11b0e50fcb3711dc4aed41c779eed8a97","modified":1645778229096},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1645778229112},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1645778229112},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1645778229113},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1645778229114},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1645778229114},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1645778229114},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1645778229115},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1645778229114},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1645778229117},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1645778229115},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1645778229117},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1645778229118},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1645778229118},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1645778229118},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1645778229118},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1645778229118},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1645778229119},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1645778229119},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1645778229119},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1645778229119},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1645778229120},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1645778229120},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1645778229120},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1645778229120},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1645778229120},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1645778229121},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1645778229121},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1645778229121},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1645778229121},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1645778229122},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1645778229122},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1645778229124},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1645778229125},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1645778229124},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1645778229116},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1645778229125},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1645778229116},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1645778229116},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1645778229149},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1645778229150},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1645778229150},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"293dcd718bbed67ddfd5729eedcbf080cc8f0614","modified":1646121372674},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1645778229157},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1645778229156},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1645778229156},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1645778229157},{"_id":"themes/next/source/js/src/bai.js","hash":"41dd22b64eb15fe191983d9a0f26a968e7dee0e7","modified":1646059095912},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1645778229173},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1645778229173},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1645778229173},{"_id":"themes/next/source/js/src/crash_cheat.js","hash":"38450bee383082cab5fe63002af5c8855327a157","modified":1645778229173},{"_id":"themes/next/source/js/src/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1645778229173},{"_id":"themes/next/source/js/src/custom.js","hash":"0231b7b49aca7adce98475fa0b754db4592a16e3","modified":1645778229174},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1645778229174},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1645778229174},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1645778229175},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1645778229175},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1645778229175},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1645778229176},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1645778229176},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1645778229176},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1645778229184},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1645778229183},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1645778229180},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1645778229192},{"_id":"themes/next/source/lib/clipboard/clipboard-action.js","hash":"8129a822aec2c10d043f423a9350998c8e35eb35","modified":1645778229187},{"_id":"themes/next/source/lib/clipboard/clipboard.js","hash":"58de9e9688c6d4bd796d1eb88b6df3b7eb3d0182","modified":1645778229187},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1645778229193},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1645778229194},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1645778229193},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1645778229193},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1645778229195},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1645778229195},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1645778229194},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1645778229195},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1645778229205},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1645778229208},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"eae81667a7e4dc2d7850f8c9c7c5f69856ac7454","modified":1645778229172},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1645778229208},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1645778229208},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1645778229206},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1645778229206},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1645778229207},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1645778229206},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1645778229207},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1645778229207},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1645778229209},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1645778229209},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1645778229209},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1645778229209},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1645778229210},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1645778229210},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1645778229210},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1645778229210},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1645778229210},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1645778229211},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1645778229211},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1645778229211},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1645778229211},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1645778229211},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1645778229212},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1645778229212},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1645778229212},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1645778229216},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1645778229217},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1645778229218},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1645778229219},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1645778229219},{"_id":"themes/next/source/images/alipay.jpg","hash":"2cc8ff91bc8399d330e321cd8d548b6e6712220b","modified":1645778229160},{"_id":"themes/next/source/images/bg1.jpg","hash":"8d91b7a4b25ea165f234228c65105ad195d12d44","modified":1645778229163},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1645778229206},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1645778229124},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1645778229124},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1645778229131},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1645778229131},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1645778229131},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1645778229131},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1645778229132},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1645778229136},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1645778229142},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1645778229147},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1645778229147},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1645778229147},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1645778229148},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1645778229148},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1645778229148},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1645778229149},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1645778229151},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1645778229151},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1645778229151},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1645778229151},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1645778229151},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1645778229152},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1645778229152},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1645778229152},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1645778229153},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1645778229153},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1645778229154},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1645778229154},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1645778229154},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"428157368e062b7c4c0de26dec1539e4f07903dc","modified":1645778229155},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1645778229155},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1645778229155},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1645778229155},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1645778229156},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1645778229156},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1645778229175},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1645778229180},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1645778229178},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1645778229179},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1645778229188},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1645778229189},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1645778229188},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1645778229189},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1645778229189},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1645778229191},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1645778229189},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1645778229192},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1645778229192},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1645778229194},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1645778229194},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1645778229196},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1645778229196},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1645778229195},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1645778229216},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1645778229216},{"_id":"themes/next/source/images/bg4.jpg","hash":"f0c1de81d8cc9a663d8dc97270e29e9fea509a89","modified":1646038219475},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1645778229204},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1645778229204},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1645778229218},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1645778229132},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1645778229132},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1645778229133},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1645778229133},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1645778229133},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1645778229133},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1645778229134},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1645778229134},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1645778229135},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1645778229135},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1645778229134},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1645778229135},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1645778229135},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1645778229135},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"fe2a87f0daabccb44740d9b28e378a07d5f30090","modified":1645778229136},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1645778229136},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1645778229137},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1645778229137},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1645778229137},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1645778229137},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1645778229137},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1645778229138},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1645778229139},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1645778229138},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1645778229138},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1645778229139},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"9ff94d0df95e53afeb4333c9c94083435b547c6a","modified":1645778229138},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1645778229139},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"36a72cc1d45a13e8ddbe29e5e1f2d893c6eac253","modified":1645778229140},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1645778229139},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1645778229140},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1645778229140},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"fe4a9392160e57d20bb06b61861ee1ba5c4deb28","modified":1645778229140},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1645778229141},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1645778229140},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1645778229141},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1645778229142},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1645778229141},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1645778229142},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1645778229143},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1645778229143},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1645778229141},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1645778229143},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1645778229144},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1645778229143},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1645778229144},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1645778229144},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1645778229144},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1645778229145},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1645778229144},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1645778229145},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1645778229145},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1645778229146},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1645778229145},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1645778229146},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1645778229147},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1645778229146},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1645778229146},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1645778229146},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1645778229152},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1645778229153},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1645778229155},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1645778229177},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1645778229177},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1645778229177},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1645778229178},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1645778229178},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1645778229190},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1645778229190},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1645778229190},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1645778229179},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1645778229190},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1645778229191},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1645778229191},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1645778229198},{"_id":"themes/next/source/images/bg2.jpg","hash":"cfa4a0ebeb8f87dd659d96811818d79a9c386578","modified":1645778229164},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1645778229203},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1645778229199},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1645778229183},{"_id":"themes/next/source/images/bg.jpg","hash":"5eccb3427a93723ab0a95ed9bf1a6f056cac80de","modified":1646038229681},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1645778229215},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1645778229202},{"_id":"public/baidusitemap.xml","hash":"cc0d23e9836f2c7408a2eac3dc92bc58d37f8235","modified":1647786249606},{"_id":"public/search.xml","hash":"dd07c8792a365f7333d19e9e95763255db64ed08","modified":1647786249606},{"_id":"public/sitemap.xml","hash":"6eb59f93926ae0e4ed638b240e8580d03631f6e8","modified":1647786249606},{"_id":"public/404.html","hash":"e0d7bb1b4fded783ca9131415b01732f6fb57b1b","modified":1647786249606},{"_id":"public/archives/index.html","hash":"9071044d18fa7a7cd45f3042df934ca935ad36c5","modified":1647786249606},{"_id":"public/about/index.html","hash":"8b8519f101413a7720cd4a45f3352e30fb472a6f","modified":1647786249606},{"_id":"public/guestbook/index.html","hash":"f9ecc1c08ad2279153270f68e15336f38a3aeb28","modified":1647786249606},{"_id":"public/categories/index.html","hash":"46abc8d556210e30050f8b819224a4200528d743","modified":1647786249606},{"_id":"public/tags/index.html","hash":"5d38e8ff5d88afec0d5f28b42bcb91182f471726","modified":1647786249606},{"_id":"public/posts/1883251673.html","hash":"5d6c959c26ff96915f2be9fc667c12561f5b87d4","modified":1647786249606},{"_id":"public/posts/495928604.html","hash":"f777ccfdb7fcc6fcf51f8aeb77f12ba8e9f825b2","modified":1647786249606},{"_id":"public/posts/3338556279.html","hash":"069d7df87075b9514562cd7ac07df49520671c7e","modified":1647786249606},{"_id":"public/posts/3262789355.html","hash":"cae3fa9e27e034cc750ecf42dc72028be65db88c","modified":1647786249606},{"_id":"public/posts/100580167.html","hash":"03d6d607e32f6032c5a414de4eb5c061f64921a3","modified":1647786249606},{"_id":"public/posts/2064489324.html","hash":"6d50de2583b022bbef50e35fcc10488b11822e49","modified":1647786249606},{"_id":"public/posts/2865700901.html","hash":"df172bcf1f3ca3bcf2510b70074e65afc757affc","modified":1647786249606},{"_id":"public/posts/3766336343.html","hash":"a444cfc02b609b8a7f74f839d7cb81ecd0d51447","modified":1647786249606},{"_id":"public/posts/2570087719.html","hash":"705b99c1c8d750fa2e7b31f0e31d87cb1c313f47","modified":1647786249606},{"_id":"public/posts/1376421695.html","hash":"6fa2994481ceef81a79fcce0b7c292aca494b5c1","modified":1647786249606},{"_id":"public/posts/3531308952.html","hash":"dd71e718852dc883bff7e74f96f95a84bc4bcb52","modified":1647786249606},{"_id":"public/posts/2025154759.html","hash":"c9bba95755c086f65136e8918ab921defd7883b2","modified":1647786249606},{"_id":"public/posts/2149736776.html","hash":"b877ede2e7d0a815e4c6e4a9620534e448b6f4d4","modified":1647786249606},{"_id":"public/posts/1895910490.html","hash":"08e4ab94fcc38134b1ad1bcd085dc6f0eaadc1ac","modified":1647786249606},{"_id":"public/posts/2175988927.html","hash":"6a182f127bbb027add6cbe161d80b88752a7b144","modified":1647786249606},{"_id":"public/posts/2767789526.html","hash":"4356f47e363c52bc46cdfabb3342465d6ea9ea27","modified":1647786249606},{"_id":"public/posts/810003588.html","hash":"0cb915a19e92f6268f05a8f6a2236db9ae245630","modified":1647786249606},{"_id":"public/posts/1755581907.html","hash":"f2d673afa0086f07aa1b5c7f4bce84a950d31bbe","modified":1647786249606},{"_id":"public/posts/3022795043.html","hash":"9d03f6984cc94555a3bd92712ab5170ce8118692","modified":1647786249606},{"_id":"public/posts/2755965992.html","hash":"1611bbec101c3534efc32d60b4f0895dfdcbd77f","modified":1647786249606},{"_id":"public/posts/1191503966.html","hash":"49e0768652de620f6fdd9c76af96c2d31e6762d4","modified":1647786249606},{"_id":"public/posts/1939127260.html","hash":"11fef1115d05265a325902fa3f1485fd14cd5cf1","modified":1647786249606},{"_id":"public/posts/3789975200.html","hash":"c5b179af92bca8479d8a8ef20c6e1132a574b307","modified":1647786249606},{"_id":"public/posts/2052509888.html","hash":"34df0896971a85cb5669b53b7abd0990adb39c55","modified":1647786249606},{"_id":"public/posts/1938337745.html","hash":"dab13a063a0c21bd4a67f3c33324f9ea3a938ea8","modified":1647786249606},{"_id":"public/posts/2868157989.html","hash":"faf13ca34706a709dd6320815914617734739ed3","modified":1647786249606},{"_id":"public/posts/2299316085.html","hash":"dbbb2510f8df66fcf0e4b99a6e63945baea1781d","modified":1647786249606},{"_id":"public/posts/3939334463.html","hash":"ed6c9865d80324780dc5033fec56be7c6ed5a8a4","modified":1647786249606},{"_id":"public/posts/3901035388.html","hash":"189b3c7d2b1e8e0748c6749aa99cce24b86620ad","modified":1647786249606},{"_id":"public/posts/273296454.html","hash":"85e7d8d34829024b33477d5c557ea90621230719","modified":1647786249606},{"_id":"public/posts/546221521.html","hash":"c1659d37587d1c0bb79bb55f41c484896bcff471","modified":1647786249606},{"_id":"public/posts/865398304.html","hash":"683e2db2ff4b6896570994ccc0b7f1df1114519d","modified":1647786249606},{"_id":"public/posts/676622553.html","hash":"519cbe81040743f2647efda3567f5127b6110993","modified":1647786249606},{"_id":"public/posts/282659514.html","hash":"ec54cfb23641ebbf87cef7ff84d2ccbb4661075b","modified":1647786249606},{"_id":"public/posts/685354991.html","hash":"2cc4bd2db534c5ae22e0b5d221584bc0fc753caa","modified":1647786249606},{"_id":"public/posts/1415965986.html","hash":"38c66944a6390efc61ebed1fba67a036e32c5fb3","modified":1647786249606},{"_id":"public/posts/4070324110.html","hash":"e239cf0495d0811e83176da1b05b99dcf080b5d8","modified":1647786249606},{"_id":"public/posts/1524522455.html","hash":"30f4825d04e87c35d2a255e0949da29730420a2e","modified":1647786249606},{"_id":"public/posts/2386226701.html","hash":"bfeba94059fadd9f20edb30e73a02f2dcc32c3c3","modified":1647786249606},{"_id":"public/posts/393345394.html","hash":"3a3a8d5300ff0e957850f295200d801d1e6271c1","modified":1647786249606},{"_id":"public/posts/587870288.html","hash":"0a3db058c9593d86febfdc5aaba1a651c91e20ef","modified":1647786249606},{"_id":"public/posts/1410141908.html","hash":"9a544a768d00d5e99e40bcd1f01fb4da889647b0","modified":1647786249606},{"_id":"public/posts/1404355314.html","hash":"9a9e31c354d7132cc02c8ccbcb9dbaafcda089bc","modified":1647786249606},{"_id":"public/posts/2800827854.html","hash":"2c46370b8d997ea47c227cb192866aa512f79881","modified":1647786249606},{"_id":"public/posts/3745698069.html","hash":"68b341028f04dc643df2ce9888505748291be45e","modified":1647786249606},{"_id":"public/posts/1886603895.html","hash":"ed5c97024477f8ad9041710ec763160ff8058d0c","modified":1647786249606},{"_id":"public/posts/1562858183.html","hash":"cc2855f41d2de0c131875053b70d192249e75b3d","modified":1647786249606},{"_id":"public/archives/page/2/index.html","hash":"55ce84c082a509b520513ac33206c68fde095de6","modified":1647786249606},{"_id":"public/archives/page/3/index.html","hash":"4528aac171ed71624d34742767aa4fadeaab0939","modified":1647786249606},{"_id":"public/archives/page/4/index.html","hash":"1b5df6c56ba017f3b5b4f06bbec3fc211fa21d6e","modified":1647786249606},{"_id":"public/archives/page/5/index.html","hash":"d4cce326480c0e0952b9374f57e813ccb55aaf4c","modified":1647786249606},{"_id":"public/archives/2019/index.html","hash":"13f0e77411c9a32fea865d4fc4f7d92b12f76485","modified":1647786249606},{"_id":"public/archives/2019/12/index.html","hash":"13c660c844d3c13d227700acba3761c0ca584f8c","modified":1647786249606},{"_id":"public/archives/2020/index.html","hash":"e9618d181a93efc53e8c737e183aceb6cb4f8956","modified":1647786249606},{"_id":"public/archives/2020/page/2/index.html","hash":"7a46e41e1d81ee8a612b6ba90337247798793c3f","modified":1647786249606},{"_id":"public/archives/2020/01/index.html","hash":"23197ce4e89f2b7f38681641d881b57ab78e9887","modified":1647786249606},{"_id":"public/archives/2020/01/page/2/index.html","hash":"b80b11ad9a83de5feb246f0eea446841cbb7a49d","modified":1647786249606},{"_id":"public/archives/2022/index.html","hash":"0420f86c4f01f65f89901d10841565a96f8dd7c0","modified":1647786249606},{"_id":"public/archives/2022/page/2/index.html","hash":"c6c0811564402a4b6be4d68afeca399e582657c3","modified":1647786249606},{"_id":"public/archives/2022/page/3/index.html","hash":"c1dbd521fed8f6fc79393a407392a1a1b311f732","modified":1647786249606},{"_id":"public/archives/2022/02/index.html","hash":"d657c29218913b719142eb3b1225231deb4b8663","modified":1647786249606},{"_id":"public/archives/2022/03/index.html","hash":"1b3336de6d998f3e5889328f8812bb5718cfe27d","modified":1647786249606},{"_id":"public/archives/2022/03/page/2/index.html","hash":"d768b9697fbda809b295393d866f03a1ca82360a","modified":1647786249606},{"_id":"public/categories/docker/index.html","hash":"d25c5259e8bfcfa4fcf7e7c16889928f5e15bf5d","modified":1647786249606},{"_id":"public/categories/python/index.html","hash":"7cd92aa36fc421b5e495301a994c962597ed70a0","modified":1647786249606},{"_id":"public/categories/python/page/2/index.html","hash":"c466ace5414c369c094281c51dba9c2d3b9cc5b1","modified":1647786249606},{"_id":"public/categories/python/page/3/index.html","hash":"357b77e50088f38f6dc0cb49a0df20159eb563ac","modified":1647786249606},{"_id":"public/categories/数据库/index.html","hash":"6c53d212bff70a0f4f785133397634c994e4ce53","modified":1647786249606},{"_id":"public/categories/数据库/page/2/index.html","hash":"0911e98e7856527f7b30a3f49602bd1fdd4118ec","modified":1647786249606},{"_id":"public/categories/k8s/index.html","hash":"6d9e5a29dfb769c6f8b794bf91e84bb0be0fc660","modified":1647786249606},{"_id":"public/categories/python/jupyter/index.html","hash":"1eb677d7a88e96886786130f906012b206bd918d","modified":1647786249606},{"_id":"public/categories/python/基础/index.html","hash":"ce92dcb63ed636f99fd6f0c0ce023088147e9bde","modified":1647786249606},{"_id":"public/categories/python/基础/page/2/index.html","hash":"5c5a7cbc6e80eecbea1ddaccaba90f32f905b50c","modified":1647786249606},{"_id":"public/categories/数据库/mysql/index.html","hash":"84afdf60a25cf90b2b0190c137f5660fe2c62e70","modified":1647786249606},{"_id":"public/categories/数据库/mongo/index.html","hash":"d68a24ed5103f6d8a7a2bae0bf6a1737da0372ea","modified":1647786249606},{"_id":"public/categories/python/爬虫/index.html","hash":"dbf7eb4f7715c0b3235f07576aea545f752cf609","modified":1647786249606},{"_id":"public/categories/python/项目/index.html","hash":"f7dbcaf9e9a1aa0e6407cbebab0f850f1b404564","modified":1647786249606},{"_id":"public/categories/python/设计模式/index.html","hash":"7040f40f76bae27d04bb96da4726cf15c9a682ac","modified":1647786249606},{"_id":"public/categories/python/数据分析/index.html","hash":"9dc49c0cca9c7625cd9607add5f1b4531a3528f3","modified":1647786249606},{"_id":"public/categories/数据库/redis/index.html","hash":"f4e0cf4b5c5b5af0abb581dd6d9d2caa157b3599","modified":1647786249606},{"_id":"public/categories/python/tcp/index.html","hash":"21e65a9a8f62c6bdbb89182e30730bffe0e8a992","modified":1647786249606},{"_id":"public/categories/python/排序/index.html","hash":"4a8e9c5aa5eb56619dc5b27e10609f9b1a43d756","modified":1647786249606},{"_id":"public/index.html","hash":"fceae26635d8d00d12433976c707ddc6137abd3f","modified":1647786249606},{"_id":"public/page/2/index.html","hash":"4d356cb39dbe22f29e49e76febf6986cf12b5406","modified":1647786249606},{"_id":"public/page/3/index.html","hash":"b8e866bc7969e219b8d6b38785a2bb189bd647f3","modified":1647786249606},{"_id":"public/page/4/index.html","hash":"65954889d2561ea60ff8061f321dd48103ae946f","modified":1647786249606},{"_id":"public/page/5/index.html","hash":"60bc34624f1dc5f712723eea41419262036683c0","modified":1647786249606},{"_id":"public/tags/docker/index.html","hash":"f001cd1f9e1a7ba44793b271c9abeddd90a207b7","modified":1647786249606},{"_id":"public/tags/jupyter/index.html","hash":"3009e0ef4f3c76b472de2d2a330b4365905a57ca","modified":1647786249606},{"_id":"public/tags/python/index.html","hash":"ee72f6a2232cb26b3c1bd0a1f5c69144ea60ae57","modified":1647786249606},{"_id":"public/tags/python/page/2/index.html","hash":"4aa152835998421b407fbaba6e55075c9d5f1452","modified":1647786249606},{"_id":"public/tags/python/page/3/index.html","hash":"4dd8e6736113659f7081898abe60aa2ba873d395","modified":1647786249606},{"_id":"public/tags/基础/page/2/index.html","hash":"13fd95be14874c81fd2f33941333ec8c1b9ceabf","modified":1647786249606},{"_id":"public/tags/数据库/index.html","hash":"e2977197494d7174c7613a9be8783c6b90e1642d","modified":1647786249606},{"_id":"public/tags/基础/index.html","hash":"18f9e072ad4eef117cc32894fd8e4a0790513f91","modified":1647786249606},{"_id":"public/tags/数据库/page/2/index.html","hash":"cd6ca0ef70d75d973ee62ea546248eb7cd4b1a60","modified":1647786249606},{"_id":"public/tags/mongo/index.html","hash":"b3f59f877fb24b1a896b762c6a12370f19b14374","modified":1647786249606},{"_id":"public/tags/k8s/index.html","hash":"cf6248ea1f980988eff289558092da771929910c","modified":1647786249606},{"_id":"public/tags/mysql/index.html","hash":"8304e6fa5e84f8e709c25bcc07e5baa71d805aab","modified":1647786249606},{"_id":"public/tags/爬虫/index.html","hash":"07d81a9e2881b6c47173e945b6ebc8908ea1955f","modified":1647786249606},{"_id":"public/tags/项目/index.html","hash":"fc8eac78bc4648a642f6c4209eeb0df7cc226b18","modified":1647786249606},{"_id":"public/tags/设计模式/index.html","hash":"347b45abe60997f75d4d88b9e904067774b8b6df","modified":1647786249606},{"_id":"public/tags/数据分析/index.html","hash":"843e212ca4d491a29ea5eaafc59c5c895e38aee7","modified":1647786249606},{"_id":"public/tags/redis/index.html","hash":"e5545b09e70413640837e083cf63ee3a02a118e6","modified":1647786249606},{"_id":"public/tags/tcp/index.html","hash":"24f32fa5184489231893964128072132cefbe5bb","modified":1647786249606},{"_id":"public/tags/socket/index.html","hash":"c3665d6a30bdc7a54cd43081b9e23e402ffe219a","modified":1647786249606},{"_id":"public/tags/requests/index.html","hash":"19d50c6a95d3fee9928806bc1ade41981d5c71cf","modified":1647786249606},{"_id":"public/tags/jsdom/index.html","hash":"bcf59f2f5d36207344e566a85ce96ef2c90c06b5","modified":1647786249606},{"_id":"public/tags/python-tcp-udp/index.html","hash":"c4836c9003de2ac16f0791ddd40a9767b5129525","modified":1647786249606},{"_id":"public/tags/排序/index.html","hash":"27c5882a668914fc3776e1ccd9d8caf2b476ac34","modified":1647786249606},{"_id":"public/tags/编码规范/index.html","hash":"35a10b7c3efd37c51963436b1fc5b49bdd8d11fd","modified":1647786249606},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1647786249606},{"_id":"public/README.md","hash":"e079a1bb9f5f24a0f86f34c508c56c1fd4157517","modified":1647786249606},{"_id":"public/robots.txt","hash":"3cdc633ca8bbbee1a0be98e022346bd9320996b2","modified":1647786249606},{"_id":"public/CNAME","hash":"56ba8a08e9aae00595b8bf9d74deba4e0f5c062d","modified":1647786249606},{"_id":"public/images/bitbug.ico","hash":"eacf4fafffb3bd22c0a4a35d00f953f328237374","modified":1647786249606},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1647786249606},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1647786249606},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1647786249606},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1647786249606},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1647786249606},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1647786249606},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1647786249606},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1647786249606},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1647786249606},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1647786249606},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1647786249606},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1647786249606},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1647786249606},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1647786249606},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1647786249606},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1647786249606},{"_id":"public/images/favicon.ico","hash":"d08ec0c0e6b1d9559eeba084a7057c7a56c13978","modified":1647786249606},{"_id":"public/image/code/code.png","hash":"e32688196e5b2c805ed464502dc0765e93ab7d25","modified":1647786249606},{"_id":"public/image/code/code1.jpg","hash":"552eba9de819bd0d5c9c955b19903dd9a3a926dd","modified":1647786249606},{"_id":"public/image/code/code4.jpg","hash":"9fd7c541554a6959ae539e5315fdb066fb3ee582","modified":1647786249606},{"_id":"public/image/code/code3.jpg","hash":"26e585ecde73ce911c232d631fa320db664771c9","modified":1647786249606},{"_id":"public/image/code/code2.jpg","hash":"dcfed35715be15603262103e7ee8bd586cee68a1","modified":1647786249606},{"_id":"public/image/code/clipboard.png","hash":"5e6ef3d386b3f6a5076d9cfc7380dceb0e551503","modified":1647786249606},{"_id":"public/image/crawl/red_heart.jpg","hash":"4a43ecd11b0e50fcb3711dc4aed41c779eed8a97","modified":1647786249606},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1647786249606},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1647786249606},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1647786249606},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1647786249606},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1647786249606},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1647786249606},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1647786249606},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1647786249606},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1647786249606},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1647786249606},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1647786249606},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1647786249606},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1647786249606},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1647786249606},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1647786249606},{"_id":"public/live2dw/assets/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1647786249606},{"_id":"public/live2dw/assets/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1647786249606},{"_id":"public/live2dw/assets/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1647786249606},{"_id":"public/live2dw/assets/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/idle_00.mtn","hash":"f9fa4acb170959ed665690d18790fc618cea6bd2","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/idle_01.mtn","hash":"fe824e9209bda79277f4785a637c38bf3b8e1cad","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/idle_02.mtn","hash":"58b87745d9c2b2b5667549a52a781b6bfea44927","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1647786249606},{"_id":"public/live2dw/assets/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1647786249606},{"_id":"public/live2dw/assets/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1647786249606},{"_id":"public/live2dw/assets/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1647786249606},{"_id":"public/live2dw/assets/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1647786249606},{"_id":"public/live2dw/assets/package.json","hash":"ab3e843484492ab7f5d4522132fbd3eecc4a40eb","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1647786249606},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1647786249606},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1647786249606},{"_id":"public/image/person.png","hash":"7c7337c6087ad318301704701b7f75c8c6b7f8c3","modified":1647786249606},{"_id":"public/images/person.png","hash":"7c7337c6087ad318301704701b7f75c8c6b7f8c3","modified":1647786249606},{"_id":"public/image/crawl/leslie.png","hash":"76fe398b6630fb79980c1b3319a287619a6cff52","modified":1647786249606},{"_id":"public/image/code/test1.png","hash":"ce1d2dda5d25916e958c8f242585ff5f84538d72","modified":1647786249606},{"_id":"public/image/code/test2.png","hash":"4edcf30135a40b9261253882c2e78945325cc255","modified":1647786249606},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1647786249606},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1647786249606},{"_id":"public/live2dw/assets/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1647786249606},{"_id":"public/live2dw/assets/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1647786249606},{"_id":"public/live2dw/assets/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1647786249606},{"_id":"public/live2dw/assets/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1647786249606},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1647786249606},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1647786249606},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1647786249606},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1647786249606},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1647786249606},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1647786249606},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1647786249606},{"_id":"public/js/src/crash_cheat.js","hash":"38450bee383082cab5fe63002af5c8855327a157","modified":1647786249606},{"_id":"public/js/src/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1647786249606},{"_id":"public/js/src/custom.js","hash":"0231b7b49aca7adce98475fa0b754db4592a16e3","modified":1647786249606},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1647786249606},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1647786249606},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1647786249606},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1647786249606},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1647786249606},{"_id":"public/js/src/bai.js","hash":"41dd22b64eb15fe191983d9a0f26a968e7dee0e7","modified":1647786249606},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1647786249606},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1647786249606},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1647786249606},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1647786249606},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1647786249606},{"_id":"public/lib/clipboard/clipboard-action.js","hash":"8129a822aec2c10d043f423a9350998c8e35eb35","modified":1647786249606},{"_id":"public/lib/clipboard/clipboard.js","hash":"58de9e9688c6d4bd796d1eb88b6df3b7eb3d0182","modified":1647786249606},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1647786249606},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1647786249606},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1647786249606},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1647786249606},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1647786249606},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1647786249606},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1647786249606},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1647786249606},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1647786249606},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1647786249606},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1647786249606},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1647786249606},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1647786249606},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1647786249606},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1647786249606},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1647786249606},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1647786249606},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1647786249606},{"_id":"public/lib/fastclick/README.html","hash":"6798f64f44437fc93a703c75dd5c3d2f4787c8b8","modified":1647786249606},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"968cca88b93213b5dd6d12f0fbaadea82f453c62","modified":1647786249606},{"_id":"public/lib/jquery_lazyload/README.html","hash":"c8f3ba1b41e892194d8593e4195151143a105f6a","modified":1647786249606},{"_id":"public/images/wechatpay.jpg","hash":"eae81667a7e4dc2d7850f8c9c7c5f69856ac7454","modified":1647786249606},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1647786249606},{"_id":"public/live2dw/assets/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1647786249606},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1647786249606},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647786249606},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"67ce5eeefe00d847edac4e105ef116d4bd69280c","modified":1647786249606},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"239c8adfd97744308c835dddd38af51da16d9bdc","modified":1647786249606},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"24ee4450c6dfb34d1107932ea9cecadbcf7892cc","modified":1647786249606},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1647786249606},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1647786249606},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1647786249606},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1647786249606},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1647786249606},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1647786249606},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1647786249606},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1647786249606},{"_id":"public/css/main.css","hash":"48e9c3fb5da46d59dd72d9c755a2e7a8a4fabfff","modified":1647786249606},{"_id":"public/images/alipay.jpg","hash":"2cc8ff91bc8399d330e321cd8d548b6e6712220b","modified":1647786249606},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1647786249606},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1647786249606},{"_id":"public/live2dw/assets/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1647786249606},{"_id":"public/live2dw/assets/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1647786249606},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1647786249606},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1647786249606},{"_id":"public/images/bg1.jpg","hash":"8d91b7a4b25ea165f234228c65105ad195d12d44","modified":1647786249606},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1647786249606},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1647786249606},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1647786249606},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1647786249606},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1647786249606},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1647786249606},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1647786249606},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1647786249606},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"02bf2e0c03c0312f10ed38728113214710b2ed1d","modified":1647786249606},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1647786249606},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1647786249606},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"8f0abdf99c1fd415724ead2adb5a3cef8a36a3a1","modified":1647786249606},{"_id":"public/images/bg4.jpg","hash":"f0c1de81d8cc9a663d8dc97270e29e9fea509a89","modified":1647786249606},{"_id":"public/lib/Han/dist/han.css","hash":"d165da63baf4b55987b39d6b582090a350a2be9e","modified":1647786249606},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1647786249606},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1647786249606},{"_id":"public/images/bg2.jpg","hash":"cfa4a0ebeb8f87dd659d96811818d79a9c386578","modified":1647786249606},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1647786249606},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1647786249606},{"_id":"public/live2dw/assets/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1647786249606},{"_id":"public/images/bg.jpg","hash":"5eccb3427a93723ab0a95ed9bf1a6f056cac80de","modified":1647786249606},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1647786249606},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1647786249606},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1647786249606}],"Category":[{"name":"docker","_id":"cl0zde06n00049jx386nb2e83"},{"name":"python","_id":"cl0zde073000c9jx35txobufw"},{"name":"数据库","_id":"cl0zde07b000q9jx3bv6u9eli"},{"name":"k8s","_id":"cl0zde07f000u9jx3daaceons"},{"name":"jupyter","parent":"cl0zde073000c9jx35txobufw","_id":"cl0zde07h00109jx33lcf5yig"},{"name":"基础","parent":"cl0zde073000c9jx35txobufw","_id":"cl0zde07k00169jx35hh4byhu"},{"name":"mysql","parent":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde07v00219jx30wjhayq3"},{"name":"mongo","parent":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde07z00299jx3dg16f3o2"},{"name":"爬虫","parent":"cl0zde073000c9jx35txobufw","_id":"cl0zde08d003d9jx3ggeh6hik"},{"name":"项目","parent":"cl0zde073000c9jx35txobufw","_id":"cl0zde08v00499jx34ghx38t0"},{"name":"设计模式","parent":"cl0zde073000c9jx35txobufw","_id":"cl0zde08w004h9jx3hcjq3jrc"},{"name":"数据分析","parent":"cl0zde073000c9jx35txobufw","_id":"cl0zde08z00549jx3bimpcc8x"},{"name":"redis","parent":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde090005b9jx38ibaaozs"},{"name":"tcp","parent":"cl0zde073000c9jx35txobufw","_id":"cl0zde093005y9jx3alq77xtr"},{"name":"排序","parent":"cl0zde073000c9jx35txobufw","_id":"cl0zde098006i9jx3ej5hcaja"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <!-- <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script> -->\n  <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"返回\"></script>\n</body>\n</html>","source":"404/404.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <!-- <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script> -->\n  <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"返回\"></script>\n</body>\n</html>","date":"2022-02-25T08:37:09.086Z","updated":"2022-02-25T08:37:09.086Z","path":"/404.html","layout":"page","_id":"cl0zde06a00009jx38vcuf9kf","content":"<!DOCTYPE HTML><html><head><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><meta name=\"robots\" content=\"all\"><meta name=\"robots\" content=\"index,follow\"><link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\"><meta name=\"generator\" content=\"Hexo 4.2.0\"></head><body><script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"返回\"></script><script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/assets/shizuku.model.json\"},\"display\":{\"position\":\"right\",\"width\":250,\"height\":450},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body></html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML><html><head><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><meta name=\"robots\" content=\"all\"><meta name=\"robots\" content=\"index,follow\"><link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\"><meta name=\"generator\" content=\"Hexo 4.2.0\"></head><body><script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"返回\"></script><script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/assets/shizuku.model.json\"},\"display\":{\"position\":\"right\",\"width\":250,\"height\":450},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body></html>"},{"title":"archives","date":"2022-03-01T06:31:14.000Z","type":"archives","comments":0,"_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2022-03-01 14:31:14\ntype: archives\ncomments: false\n---\n","updated":"2022-03-01T06:32:43.034Z","path":"archives/index.html","layout":"page","_id":"cl0zde06k00029jx3avkmf9uh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2019-12-30T07:41:09.000Z","type":"about","comments":0,"_content":"\n## 关于我是谁\n***\n**一个可爱的人**\n\n**一个纯粹的人**\n\n**一个脱离低级趣味的人**\n\n**一个喜欢编程善用python的人**\n\n**邮箱：** beenchange@163.com\n\n**微信：** iu943344\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-12-30 15:41:09\ntype: \"about\"\ncomments: false\n---\n\n## 关于我是谁\n***\n**一个可爱的人**\n\n**一个纯粹的人**\n\n**一个脱离低级趣味的人**\n\n**一个喜欢编程善用python的人**\n\n**邮箱：** beenchange@163.com\n\n**微信：** iu943344\n\n","updated":"2022-03-12T17:51:08.396Z","path":"about/index.html","layout":"page","_id":"cl0zde06p00069jx3dkbuawjq","content":"<h2 id=\"关于我是谁\"><a href=\"#关于我是谁\" class=\"headerlink\" title=\"关于我是谁\"></a>关于我是谁</h2><hr><p><strong>一个可爱的人</strong></p><p><strong>一个纯粹的人</strong></p><p><strong>一个脱离低级趣味的人</strong></p><p><strong>一个喜欢编程善用python的人</strong></p><p><strong>邮箱：</strong> beenchange@163.com</p><p><strong>微信：</strong> iu943344</p>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我是谁\"><a href=\"#关于我是谁\" class=\"headerlink\" title=\"关于我是谁\"></a>关于我是谁</h2><hr><p><strong>一个可爱的人</strong></p><p><strong>一个纯粹的人</strong></p><p><strong>一个脱离低级趣味的人</strong></p><p><strong>一个喜欢编程善用python的人</strong></p><p><strong>邮箱：</strong> beenchange@163.com</p><p><strong>微信：</strong> iu943344</p>"},{"title":"留言板","date":"2022-03-01T08:16:32.000Z","_content":"\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n","source":"guestbook/index.md","raw":"---\ntitle: 留言板\ndate: 2022-03-01 16:16:32\n---\n\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>\n","updated":"2022-03-12T17:46:07.605Z","path":"guestbook/index.html","comments":1,"layout":"page","_id":"cl0zde06s00089jx3glov8hpf","content":"<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>","site":{"data":{}},"excerpt":"","more":"<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div>"},{"title":"分类","date":"2019-12-30T07:40:18.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-12-30 15:40:18\ntype: \"categories\"\ncomments: false\n---\n","updated":"2022-03-01T06:33:12.384Z","path":"categories/index.html","layout":"page","_id":"cl0zde06u000a9jx30ucwa0yx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-12-30T07:38:02.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-12-30 15:38:02\ntype: \"tags\"\ncomments: false\n---\n","updated":"2022-02-25T08:37:09.097Z","path":"tags/index.html","layout":"page","_id":"cl0zde074000f9jx33c7001mc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"docker容器","type":"categories","copyright":true,"abbrlink":2868157989,"date":"2020-01-02T09:02:31.000Z","_content":"\n## docker容器\n### 容器介绍\n&emsp;&emsp;容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统和跑在上面的应用。\n\n### 新建启动容器\n&emsp;&emsp;启动容器的主要命令是docker run，下面的命令输出一个“hello world”，之后终止容器\n<!--more-->\n\n```sh\n$ sudo docker run ubuntu:14.04 /bin/echo 'Hello world'\nHello world\n```\n&emsp;&emsp;下面命令启动一个bash终端，允许用户进行交互\n```sh\n$ sudo docker run -t -i ubuntu:14.04 /bin/bash\nroot@af8bae53bdd3:/#\n```\n&emsp;&emsp;命令中的-t 表示让docker分配一个伪终端并绑定到容器的标准输入上，-i 则表示让容器的标准输入持续打开\n\n&emsp;&emsp;利用docker run 来创建容器时，docker 在后台运行的标准操作包括：\n\n* 检查本地是否存在指定的镜像，不存在从公有仓库进行下载；\n* 利用镜像创建并启动一个容器；\n* 分配一个文件系统，并在只读的镜像层外面挂载一个可读写层；\n* 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中；\n* 从地址池配置一个IP地址给容器；\n* 执行用户指定的应用程序；\n* 执行完毕后容器被终止\n\n### 启动已经终止的容器\n可以使用docker start 命令，启动一个已经终止的容器\n```sh\n$ docker start 容器ID \n```\n\n### 后台运行容器\n如果需要让docker 后台运行，可以通过添加-d 参数来启动容器\n```sh\n$ sudo docker run -d ubuntu:14.04 /bin/sh -c \"while true; do ech\no hello world; sleep 1; done\"\n```\n&emsp;&emsp;-d参数启动后会返回一个唯一的id，可以通过docker ps 查看容器信息；要获取容器输入信息，可以通过docker logs命令进行查看\n\n### 终止容器\n\n&emsp;&emsp;可以使用docker stop命令来终止一个已经运行的容器，此外，当docker 容器中指定的应用结束时，容器也自动终止。当docker 启动终端时，可以通过exit或ctrl+d来退出终端，容器立刻终止；\n\n终止后的容器可以通过docker ps -a 进行查看；\n\ndocker restart命令会将一个运行态的容器终止，然后重新启动它；\n```sh\n# 终止容器\n$ docker stop 容器ID\n# 查看容器\n$ docker ps -a\n```\n\n### 进入容器\nattach 命令\n\n&emsp;&emsp;docker attach命令是docker自带的命令，命令后面接容器，可以进入到该容器，打开终端；但是使用 attach 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。\n\nnsenter命令\n\n&emsp;&emsp;nsenter 工具在 util-linux 包2.23版本后包含。 如果系统中 util-linux 包没有该命令，可以按照下面的方法从源码安装。\n```sh\n$ cd /tmp; curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-; cd util-linux-2.24;\n$ ./configure --without-ncurses\n$ make nsenter && sudo cp nsenter /usr/local/bin\n```\n为了连接到容器，需要找到容器的第一个进程的pid,可以通过下面命令获取；\n```sh\nPID=$(docker inspect --format \"{{ .State.Pid }}\" <container>)\n```\n通过这个pid可以连接到这个容器\n```sh\n$ nsenter --target $PID --mount --uts --ipc --net --pid\n```\n#### 完整的demo\n```sh\n$ sudo docker run -idt ubuntu\n# 返回的容器id\n243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550\n$ sudo docker ps\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\n243c32535da7 ubuntu:latest \"/bin/bash\" 18 seconds ago Up 17 seconds nostalgic_hypatia\n$ PID=$(docker-pid 243c32535da7)\n10981\n$ sudo nsenter --target 10981 --mount --uts --ipc --net --pid\nroot@243c32535da7:/#\n```\n### 导出容器\n如果要导出本地某个容器，可以使用docker export 命令\n```sh\n$ sudo docker ps -a\nCONTAINER ID IMAGE COMMAND CREA\nTED STATUS PORTS NA\nMES\n7691a814370e ubuntu:14.04 \"/bin/bash\" 36 h\nours ago Exited (0) 21 hours ago te\nst\n$ sudo docker export 7691a814370e > ubuntu.tar\n```\n\n### 导入容器快照\n可以使用docker import 命令从容器快照文件中再导入为镜像\n```sh\n$ cat ubuntu.tar | sudo docker import - test/ubuntu:v1.0\n$ sudo docker images\nREPOSITORY TAG IMAGE ID CREA\nTED VIRTUAL SIZE\ntest/ubuntu v1.0 9d37a6082e97 Abou\nt a minute ago 171.3 MB\n```\n也可以通过指定的url或目录来导入\n```sh\n$ sudo docker import http://example.com/exampleimage.tgz example/imagerepo\n```\n\n&emsp;&emsp;用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容\n器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状\n态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入\n时可以重新指定标签等元数据信息。\n\n### 删除容器\n可以使用docker rm 来删除一个处于终止状态的容器\n```sh\n$ sudo docker rm trusting_newton\ntrusting_newton\n```\n如果要删除一个正在运行的容器，可以添加 -f 参数，docker 会发送SIGKILL信号给容器。\n\n### 清理所有处于终止状态的容器\n使用命令 \n```\ndocker rm $(docker ps -a -q)\n```\n","source":"_posts/docker容器.md","raw":"---\ntitle: docker容器\ntype: categories\ncopyright: true\ntags:\n  - docker\ncategories: docker\nabbrlink: 2868157989\ndate: 2020-01-02 17:02:31\n---\n\n## docker容器\n### 容器介绍\n&emsp;&emsp;容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统和跑在上面的应用。\n\n### 新建启动容器\n&emsp;&emsp;启动容器的主要命令是docker run，下面的命令输出一个“hello world”，之后终止容器\n<!--more-->\n\n```sh\n$ sudo docker run ubuntu:14.04 /bin/echo 'Hello world'\nHello world\n```\n&emsp;&emsp;下面命令启动一个bash终端，允许用户进行交互\n```sh\n$ sudo docker run -t -i ubuntu:14.04 /bin/bash\nroot@af8bae53bdd3:/#\n```\n&emsp;&emsp;命令中的-t 表示让docker分配一个伪终端并绑定到容器的标准输入上，-i 则表示让容器的标准输入持续打开\n\n&emsp;&emsp;利用docker run 来创建容器时，docker 在后台运行的标准操作包括：\n\n* 检查本地是否存在指定的镜像，不存在从公有仓库进行下载；\n* 利用镜像创建并启动一个容器；\n* 分配一个文件系统，并在只读的镜像层外面挂载一个可读写层；\n* 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中；\n* 从地址池配置一个IP地址给容器；\n* 执行用户指定的应用程序；\n* 执行完毕后容器被终止\n\n### 启动已经终止的容器\n可以使用docker start 命令，启动一个已经终止的容器\n```sh\n$ docker start 容器ID \n```\n\n### 后台运行容器\n如果需要让docker 后台运行，可以通过添加-d 参数来启动容器\n```sh\n$ sudo docker run -d ubuntu:14.04 /bin/sh -c \"while true; do ech\no hello world; sleep 1; done\"\n```\n&emsp;&emsp;-d参数启动后会返回一个唯一的id，可以通过docker ps 查看容器信息；要获取容器输入信息，可以通过docker logs命令进行查看\n\n### 终止容器\n\n&emsp;&emsp;可以使用docker stop命令来终止一个已经运行的容器，此外，当docker 容器中指定的应用结束时，容器也自动终止。当docker 启动终端时，可以通过exit或ctrl+d来退出终端，容器立刻终止；\n\n终止后的容器可以通过docker ps -a 进行查看；\n\ndocker restart命令会将一个运行态的容器终止，然后重新启动它；\n```sh\n# 终止容器\n$ docker stop 容器ID\n# 查看容器\n$ docker ps -a\n```\n\n### 进入容器\nattach 命令\n\n&emsp;&emsp;docker attach命令是docker自带的命令，命令后面接容器，可以进入到该容器，打开终端；但是使用 attach 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。\n\nnsenter命令\n\n&emsp;&emsp;nsenter 工具在 util-linux 包2.23版本后包含。 如果系统中 util-linux 包没有该命令，可以按照下面的方法从源码安装。\n```sh\n$ cd /tmp; curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-; cd util-linux-2.24;\n$ ./configure --without-ncurses\n$ make nsenter && sudo cp nsenter /usr/local/bin\n```\n为了连接到容器，需要找到容器的第一个进程的pid,可以通过下面命令获取；\n```sh\nPID=$(docker inspect --format \"{{ .State.Pid }}\" <container>)\n```\n通过这个pid可以连接到这个容器\n```sh\n$ nsenter --target $PID --mount --uts --ipc --net --pid\n```\n#### 完整的demo\n```sh\n$ sudo docker run -idt ubuntu\n# 返回的容器id\n243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550\n$ sudo docker ps\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\n243c32535da7 ubuntu:latest \"/bin/bash\" 18 seconds ago Up 17 seconds nostalgic_hypatia\n$ PID=$(docker-pid 243c32535da7)\n10981\n$ sudo nsenter --target 10981 --mount --uts --ipc --net --pid\nroot@243c32535da7:/#\n```\n### 导出容器\n如果要导出本地某个容器，可以使用docker export 命令\n```sh\n$ sudo docker ps -a\nCONTAINER ID IMAGE COMMAND CREA\nTED STATUS PORTS NA\nMES\n7691a814370e ubuntu:14.04 \"/bin/bash\" 36 h\nours ago Exited (0) 21 hours ago te\nst\n$ sudo docker export 7691a814370e > ubuntu.tar\n```\n\n### 导入容器快照\n可以使用docker import 命令从容器快照文件中再导入为镜像\n```sh\n$ cat ubuntu.tar | sudo docker import - test/ubuntu:v1.0\n$ sudo docker images\nREPOSITORY TAG IMAGE ID CREA\nTED VIRTUAL SIZE\ntest/ubuntu v1.0 9d37a6082e97 Abou\nt a minute ago 171.3 MB\n```\n也可以通过指定的url或目录来导入\n```sh\n$ sudo docker import http://example.com/exampleimage.tgz example/imagerepo\n```\n\n&emsp;&emsp;用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容\n器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状\n态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入\n时可以重新指定标签等元数据信息。\n\n### 删除容器\n可以使用docker rm 来删除一个处于终止状态的容器\n```sh\n$ sudo docker rm trusting_newton\ntrusting_newton\n```\n如果要删除一个正在运行的容器，可以添加 -f 参数，docker 会发送SIGKILL信号给容器。\n\n### 清理所有处于终止状态的容器\n使用命令 \n```\ndocker rm $(docker ps -a -q)\n```\n","slug":"docker容器","published":1,"updated":"2022-03-13T11:49:16.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde06g00019jx35q7bcyv1","content":"<h2 id=\"docker容器\"><a href=\"#docker容器\" class=\"headerlink\" title=\"docker容器\"></a>docker容器</h2><h3 id=\"容器介绍\"><a href=\"#容器介绍\" class=\"headerlink\" title=\"容器介绍\"></a>容器介绍</h3><p>&emsp;&emsp;容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统和跑在上面的应用。</p><h3 id=\"新建启动容器\"><a href=\"#新建启动容器\" class=\"headerlink\" title=\"新建启动容器\"></a>新建启动容器</h3><p>&emsp;&emsp;启动容器的主要命令是docker run，下面的命令输出一个“hello world”，之后终止容器</p><a id=\"more\"></a><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run ubuntu:14.04 /bin/<span class=\"built_in\">echo</span> <span class=\"string\">'Hello world'</span></span><br><span class=\"line\">Hello world</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;下面命令启动一个bash终端，允许用户进行交互</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -t -i ubuntu:14.04 /bin/bash</span><br><span class=\"line\">root@af8bae53bdd3:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;命令中的-t 表示让docker分配一个伪终端并绑定到容器的标准输入上，-i 则表示让容器的标准输入持续打开</p><p>&emsp;&emsp;利用docker run 来创建容器时，docker 在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在从公有仓库进行下载；</li><li>利用镜像创建并启动一个容器；</li><li>分配一个文件系统，并在只读的镜像层外面挂载一个可读写层；</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中；</li><li>从地址池配置一个IP地址给容器；</li><li>执行用户指定的应用程序；</li><li>执行完毕后容器被终止</li></ul><h3 id=\"启动已经终止的容器\"><a href=\"#启动已经终止的容器\" class=\"headerlink\" title=\"启动已经终止的容器\"></a>启动已经终止的容器</h3><p>可以使用docker start 命令，启动一个已经终止的容器</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start 容器ID</span><br></pre></td></tr></table></figure><h3 id=\"后台运行容器\"><a href=\"#后台运行容器\" class=\"headerlink\" title=\"后台运行容器\"></a>后台运行容器</h3><p>如果需要让docker 后台运行，可以通过添加-d 参数来启动容器</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -d ubuntu:14.04 /bin/sh -c <span class=\"string\">\"while true; do ech</span></span><br><span class=\"line\"><span class=\"string\">o hello world; sleep 1; done\"</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;-d参数启动后会返回一个唯一的id，可以通过docker ps 查看容器信息；要获取容器输入信息，可以通过docker logs命令进行查看</p><h3 id=\"终止容器\"><a href=\"#终止容器\" class=\"headerlink\" title=\"终止容器\"></a>终止容器</h3><p>&emsp;&emsp;可以使用docker stop命令来终止一个已经运行的容器，此外，当docker 容器中指定的应用结束时，容器也自动终止。当docker 启动终端时，可以通过exit或ctrl+d来退出终端，容器立刻终止；</p><p>终止后的容器可以通过docker ps -a 进行查看；</p><p>docker restart命令会将一个运行态的容器终止，然后重新启动它；</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 终止容器</span></span><br><span class=\"line\">$ docker stop 容器ID</span><br><span class=\"line\"><span class=\"comment\"># 查看容器</span></span><br><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure><h3 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h3><p>attach 命令</p><p>&emsp;&emsp;docker attach命令是docker自带的命令，命令后面接容器，可以进入到该容器，打开终端；但是使用 attach 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。</p><p>nsenter命令</p><p>&emsp;&emsp;nsenter 工具在 util-linux 包2.23版本后包含。 如果系统中 util-linux 包没有该命令，可以按照下面的方法从源码安装。</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /tmp; curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-; <span class=\"built_in\">cd</span> util-linux-2.24;</span><br><span class=\"line\">$ ./configure --without-ncurses</span><br><span class=\"line\">$ make nsenter &amp;&amp; sudo cp nsenter /usr/<span class=\"built_in\">local</span>/bin</span><br></pre></td></tr></table></figure><p>为了连接到容器，需要找到容器的第一个进程的pid,可以通过下面命令获取；</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID=$(docker inspect --format <span class=\"string\">\"&#123;&#123; .State.Pid &#125;&#125;\"</span> &lt;container&gt;)</span><br></pre></td></tr></table></figure><p>通过这个pid可以连接到这个容器</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nsenter --target <span class=\"variable\">$PID</span> --mount --uts --ipc --net --pid</span><br></pre></td></tr></table></figure><h4 id=\"完整的demo\"><a href=\"#完整的demo\" class=\"headerlink\" title=\"完整的demo\"></a>完整的demo</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -idt ubuntu</span><br><span class=\"line\"><span class=\"comment\"># 返回的容器id</span></span><br><span class=\"line\">243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550</span><br><span class=\"line\">$ sudo docker ps</span><br><span class=\"line\">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class=\"line\">243c32535da7 ubuntu:latest <span class=\"string\">\"/bin/bash\"</span> 18 seconds ago Up 17 seconds nostalgic_hypatia</span><br><span class=\"line\">$ PID=$(docker-pid 243c32535da7)</span><br><span class=\"line\">10981</span><br><span class=\"line\">$ sudo nsenter --target 10981 --mount --uts --ipc --net --pid</span><br><span class=\"line\">root@243c32535da7:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure><h3 id=\"导出容器\"><a href=\"#导出容器\" class=\"headerlink\" title=\"导出容器\"></a>导出容器</h3><p>如果要导出本地某个容器，可以使用docker export 命令</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker ps -a</span><br><span class=\"line\">CONTAINER ID IMAGE COMMAND CREA</span><br><span class=\"line\">TED STATUS PORTS NA</span><br><span class=\"line\">MES</span><br><span class=\"line\">7691a814370e ubuntu:14.04 <span class=\"string\">\"/bin/bash\"</span> 36 h</span><br><span class=\"line\">ours ago Exited (0) 21 hours ago te</span><br><span class=\"line\">st</span><br><span class=\"line\">$ sudo docker <span class=\"built_in\">export</span> 7691a814370e &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><h3 id=\"导入容器快照\"><a href=\"#导入容器快照\" class=\"headerlink\" title=\"导入容器快照\"></a>导入容器快照</h3><p>可以使用docker import 命令从容器快照文件中再导入为镜像</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ubuntu.tar | sudo docker import - <span class=\"built_in\">test</span>/ubuntu:v1.0</span><br><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY TAG IMAGE ID CREA</span><br><span class=\"line\">TED VIRTUAL SIZE</span><br><span class=\"line\"><span class=\"built_in\">test</span>/ubuntu v1.0 9d37a6082e97 Abou</span><br><span class=\"line\">t a minute ago 171.3 MB</span><br></pre></td></tr></table></figure><p>也可以通过指定的url或目录来导入</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容<br>器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状<br>态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入<br>时可以重新指定标签等元数据信息。</p><h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><p>可以使用docker rm 来删除一个处于终止状态的容器</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker rm trusting_newton</span><br><span class=\"line\">trusting_newton</span><br></pre></td></tr></table></figure><p>如果要删除一个正在运行的容器，可以添加 -f 参数，docker 会发送SIGKILL信号给容器。</p><h3 id=\"清理所有处于终止状态的容器\"><a href=\"#清理所有处于终止状态的容器\" class=\"headerlink\" title=\"清理所有处于终止状态的容器\"></a>清理所有处于终止状态的容器</h3><p>使用命令</p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm <span class=\"constructor\">$(<span class=\"params\">docker</span> <span class=\"params\">ps</span> -<span class=\"params\">a</span> -<span class=\"params\">q</span>)</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"docker容器\"><a href=\"#docker容器\" class=\"headerlink\" title=\"docker容器\"></a>docker容器</h2><h3 id=\"容器介绍\"><a href=\"#容器介绍\" class=\"headerlink\" title=\"容器介绍\"></a>容器介绍</h3><p>&emsp;&emsp;容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统和跑在上面的应用。</p><h3 id=\"新建启动容器\"><a href=\"#新建启动容器\" class=\"headerlink\" title=\"新建启动容器\"></a>新建启动容器</h3><p>&emsp;&emsp;启动容器的主要命令是docker run，下面的命令输出一个“hello world”，之后终止容器</p>","more":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run ubuntu:14.04 /bin/<span class=\"built_in\">echo</span> <span class=\"string\">'Hello world'</span></span><br><span class=\"line\">Hello world</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;下面命令启动一个bash终端，允许用户进行交互</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -t -i ubuntu:14.04 /bin/bash</span><br><span class=\"line\">root@af8bae53bdd3:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;命令中的-t 表示让docker分配一个伪终端并绑定到容器的标准输入上，-i 则表示让容器的标准输入持续打开</p><p>&emsp;&emsp;利用docker run 来创建容器时，docker 在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在从公有仓库进行下载；</li><li>利用镜像创建并启动一个容器；</li><li>分配一个文件系统，并在只读的镜像层外面挂载一个可读写层；</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中；</li><li>从地址池配置一个IP地址给容器；</li><li>执行用户指定的应用程序；</li><li>执行完毕后容器被终止</li></ul><h3 id=\"启动已经终止的容器\"><a href=\"#启动已经终止的容器\" class=\"headerlink\" title=\"启动已经终止的容器\"></a>启动已经终止的容器</h3><p>可以使用docker start 命令，启动一个已经终止的容器</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start 容器ID</span><br></pre></td></tr></table></figure><h3 id=\"后台运行容器\"><a href=\"#后台运行容器\" class=\"headerlink\" title=\"后台运行容器\"></a>后台运行容器</h3><p>如果需要让docker 后台运行，可以通过添加-d 参数来启动容器</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -d ubuntu:14.04 /bin/sh -c <span class=\"string\">\"while true; do ech</span></span><br><span class=\"line\"><span class=\"string\">o hello world; sleep 1; done\"</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;-d参数启动后会返回一个唯一的id，可以通过docker ps 查看容器信息；要获取容器输入信息，可以通过docker logs命令进行查看</p><h3 id=\"终止容器\"><a href=\"#终止容器\" class=\"headerlink\" title=\"终止容器\"></a>终止容器</h3><p>&emsp;&emsp;可以使用docker stop命令来终止一个已经运行的容器，此外，当docker 容器中指定的应用结束时，容器也自动终止。当docker 启动终端时，可以通过exit或ctrl+d来退出终端，容器立刻终止；</p><p>终止后的容器可以通过docker ps -a 进行查看；</p><p>docker restart命令会将一个运行态的容器终止，然后重新启动它；</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 终止容器</span></span><br><span class=\"line\">$ docker stop 容器ID</span><br><span class=\"line\"><span class=\"comment\"># 查看容器</span></span><br><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure><h3 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h3><p>attach 命令</p><p>&emsp;&emsp;docker attach命令是docker自带的命令，命令后面接容器，可以进入到该容器，打开终端；但是使用 attach 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。</p><p>nsenter命令</p><p>&emsp;&emsp;nsenter 工具在 util-linux 包2.23版本后包含。 如果系统中 util-linux 包没有该命令，可以按照下面的方法从源码安装。</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /tmp; curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-; <span class=\"built_in\">cd</span> util-linux-2.24;</span><br><span class=\"line\">$ ./configure --without-ncurses</span><br><span class=\"line\">$ make nsenter &amp;&amp; sudo cp nsenter /usr/<span class=\"built_in\">local</span>/bin</span><br></pre></td></tr></table></figure><p>为了连接到容器，需要找到容器的第一个进程的pid,可以通过下面命令获取；</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID=$(docker inspect --format <span class=\"string\">\"&#123;&#123; .State.Pid &#125;&#125;\"</span> &lt;container&gt;)</span><br></pre></td></tr></table></figure><p>通过这个pid可以连接到这个容器</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nsenter --target <span class=\"variable\">$PID</span> --mount --uts --ipc --net --pid</span><br></pre></td></tr></table></figure><h4 id=\"完整的demo\"><a href=\"#完整的demo\" class=\"headerlink\" title=\"完整的demo\"></a>完整的demo</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -idt ubuntu</span><br><span class=\"line\"><span class=\"comment\"># 返回的容器id</span></span><br><span class=\"line\">243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550</span><br><span class=\"line\">$ sudo docker ps</span><br><span class=\"line\">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class=\"line\">243c32535da7 ubuntu:latest <span class=\"string\">\"/bin/bash\"</span> 18 seconds ago Up 17 seconds nostalgic_hypatia</span><br><span class=\"line\">$ PID=$(docker-pid 243c32535da7)</span><br><span class=\"line\">10981</span><br><span class=\"line\">$ sudo nsenter --target 10981 --mount --uts --ipc --net --pid</span><br><span class=\"line\">root@243c32535da7:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure><h3 id=\"导出容器\"><a href=\"#导出容器\" class=\"headerlink\" title=\"导出容器\"></a>导出容器</h3><p>如果要导出本地某个容器，可以使用docker export 命令</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker ps -a</span><br><span class=\"line\">CONTAINER ID IMAGE COMMAND CREA</span><br><span class=\"line\">TED STATUS PORTS NA</span><br><span class=\"line\">MES</span><br><span class=\"line\">7691a814370e ubuntu:14.04 <span class=\"string\">\"/bin/bash\"</span> 36 h</span><br><span class=\"line\">ours ago Exited (0) 21 hours ago te</span><br><span class=\"line\">st</span><br><span class=\"line\">$ sudo docker <span class=\"built_in\">export</span> 7691a814370e &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><h3 id=\"导入容器快照\"><a href=\"#导入容器快照\" class=\"headerlink\" title=\"导入容器快照\"></a>导入容器快照</h3><p>可以使用docker import 命令从容器快照文件中再导入为镜像</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ubuntu.tar | sudo docker import - <span class=\"built_in\">test</span>/ubuntu:v1.0</span><br><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY TAG IMAGE ID CREA</span><br><span class=\"line\">TED VIRTUAL SIZE</span><br><span class=\"line\"><span class=\"built_in\">test</span>/ubuntu v1.0 9d37a6082e97 Abou</span><br><span class=\"line\">t a minute ago 171.3 MB</span><br></pre></td></tr></table></figure><p>也可以通过指定的url或目录来导入</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容<br>器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状<br>态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入<br>时可以重新指定标签等元数据信息。</p><h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><p>可以使用docker rm 来删除一个处于终止状态的容器</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker rm trusting_newton</span><br><span class=\"line\">trusting_newton</span><br></pre></td></tr></table></figure><p>如果要删除一个正在运行的容器，可以添加 -f 参数，docker 会发送SIGKILL信号给容器。</p><h3 id=\"清理所有处于终止状态的容器\"><a href=\"#清理所有处于终止状态的容器\" class=\"headerlink\" title=\"清理所有处于终止状态的容器\"></a>清理所有处于终止状态的容器</h3><p>使用命令</p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm <span class=\"constructor\">$(<span class=\"params\">docker</span> <span class=\"params\">ps</span> -<span class=\"params\">a</span> -<span class=\"params\">q</span>)</span></span><br></pre></td></tr></table></figure>"},{"title":"jupyter搭建","type":"categories","copyright":true,"abbrlink":273296454,"date":"2020-01-02T08:11:45.000Z","_content":"\n## 搭建jupyter服务器\n\n### 安装jupyter\n\n### 一、选择安装anaconda\n\n1. 根目录下创建一个文件夹用来放anaconda安装包\n\n2. 下载anaconda安装包（可以在官网上自行选择版本）\n    ```\n    wget https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh\n    ```\n<!--more-->\n3. 运行安装程序，安装anaconda\n    ```\n    Anaconda3-4.4.0-Linux-x86_64.sh\n    ```\n    **PS:** 该文件是一个可执行文件，如果下载的文件没有可执行权限，执行命令 chmod  641  Anaconda3-4.4.0-Linux-x86_64.sh 修改权限。\n4. 配置环境变量\n    ```\n    vim /etc/environment\n    ```\n    将anaconda的bin文件夹的路径添加到环境变量中去（一般安装目录为/root/anaconda3/bin）\n    ```python\n    source /etc/environment  # 使文件生效\n    ```\n\n### 二、配置jupyter notebook 的配置文件\n\n1. 生成jupyter notebook 的配置文件\n    ```python\n    # 该命令对于root用户\n    jupyter notebook  --allow-root  --generate-config\n    # 或者\n    # 对于一般用户\n    jupyter notebook  --generate-config \n    ```\n    执行完该命令后会在 .jupyter文件夹下生成一个jupyter_notebook_config.py的配置文件\n\n2. 修改配置\n    ```python\n    vim jupyter_notebook_config.py # 打开文件修改配置项\n    ```\n    ```python\n    #  星号为允许任意ip访问服务\n    c.NotebookApp.ip='*'\n    # 该处设置登录jupyter 的密码\n    c.NotebookApp.password = u'此处填写密码'\n    # 该项为启动服务默认打开浏览器，设置为False默认不打开\n    c.NotebookApp.open_browser = False\n    # 端口号\n    c.NotebookApp.port =8080\n    # 该项设置notebook 的工作目录\n    c.NotebookApp.notebook_dir = '/home/ubuntu/anaconda'\n    ```\n    **PS:** 对于密码的配置，我们不应该直接配置明文密码，因此需要对密码进行加密处理\n\n    #### 打开ipython\n    ```python\n    from notebook.auth import passwd\n    passwd()\n    ```\n    该命令会让你输入密码，确认密码，然后返回一串加密后的字符串，类似于：sha1:f97cc330b40c:fb618ac068bd66fb36563e15da4f7462131ad5ee\n\n    配置完成之后保存文件。\n\n## 三、启动jupyter notebook应用\n```python\n# 启动 notebook 服务\nnohup jupyter notebook &\n\n# 或者更加高级的用法\nnohup jupyter notebook > /dev/null 2>&1 &\n```\n&emsp;&emsp;其中 nohup 是让进程在ssh连接断开时正常运行，&是为了让进程在后台运行。如果想结束该进程，通过 ps aux|grep jupyter-notebook 查找到进程的pid，通过kill命令结束进程。\n\n&emsp;&emsp;/dev/null : 代表空设备文件，2：代表标准错误， 1：代表标准输出\n\n&emsp;&emsp;该命令是将标准输出重定向到文件/dev/null，标准错误输出重定向到标准输出，最终都重定向到/dev/null 文件中.\n\n&emsp;&emsp;服务启动后，我们就可以通过公网ip + 端口访问我们的服务了。\n\n&emsp;&emsp;ps：如果是普通用户启动jupyter notebook应用的话，可能会报错  Permission denied: '/run/user/0/jupyter'，这时可以打开文件~/.bashrc，添加一行export XDG_RUNTIME_DIR=\"\"，可以解决这个权限问题。\n\n&emsp;&emsp;如果在创建新的文件的时候出现 Permission denied: Untitled.ipynb的问题，找到你的jupyter的工作家目录，ls -al 查看你的文件的权限， chmod 777 yourdir/ 修改文件的权限。\n\n## 总结\n&emsp;&emsp; 该服务的搭建过程中，有些重要的对方没有做，没有进行nginx反向代理，没有添加ssl证书。\n\n","source":"_posts/jupyter搭建.md","raw":"---\ntitle: jupyter搭建\ntype: categories\ncopyright: true\ntags:\n  - jupyter\ncategories:\n  - python\n  - jupyter\nabbrlink: 273296454\ndate: 2020-01-02 16:11:45\n---\n\n## 搭建jupyter服务器\n\n### 安装jupyter\n\n### 一、选择安装anaconda\n\n1. 根目录下创建一个文件夹用来放anaconda安装包\n\n2. 下载anaconda安装包（可以在官网上自行选择版本）\n    ```\n    wget https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh\n    ```\n<!--more-->\n3. 运行安装程序，安装anaconda\n    ```\n    Anaconda3-4.4.0-Linux-x86_64.sh\n    ```\n    **PS:** 该文件是一个可执行文件，如果下载的文件没有可执行权限，执行命令 chmod  641  Anaconda3-4.4.0-Linux-x86_64.sh 修改权限。\n4. 配置环境变量\n    ```\n    vim /etc/environment\n    ```\n    将anaconda的bin文件夹的路径添加到环境变量中去（一般安装目录为/root/anaconda3/bin）\n    ```python\n    source /etc/environment  # 使文件生效\n    ```\n\n### 二、配置jupyter notebook 的配置文件\n\n1. 生成jupyter notebook 的配置文件\n    ```python\n    # 该命令对于root用户\n    jupyter notebook  --allow-root  --generate-config\n    # 或者\n    # 对于一般用户\n    jupyter notebook  --generate-config \n    ```\n    执行完该命令后会在 .jupyter文件夹下生成一个jupyter_notebook_config.py的配置文件\n\n2. 修改配置\n    ```python\n    vim jupyter_notebook_config.py # 打开文件修改配置项\n    ```\n    ```python\n    #  星号为允许任意ip访问服务\n    c.NotebookApp.ip='*'\n    # 该处设置登录jupyter 的密码\n    c.NotebookApp.password = u'此处填写密码'\n    # 该项为启动服务默认打开浏览器，设置为False默认不打开\n    c.NotebookApp.open_browser = False\n    # 端口号\n    c.NotebookApp.port =8080\n    # 该项设置notebook 的工作目录\n    c.NotebookApp.notebook_dir = '/home/ubuntu/anaconda'\n    ```\n    **PS:** 对于密码的配置，我们不应该直接配置明文密码，因此需要对密码进行加密处理\n\n    #### 打开ipython\n    ```python\n    from notebook.auth import passwd\n    passwd()\n    ```\n    该命令会让你输入密码，确认密码，然后返回一串加密后的字符串，类似于：sha1:f97cc330b40c:fb618ac068bd66fb36563e15da4f7462131ad5ee\n\n    配置完成之后保存文件。\n\n## 三、启动jupyter notebook应用\n```python\n# 启动 notebook 服务\nnohup jupyter notebook &\n\n# 或者更加高级的用法\nnohup jupyter notebook > /dev/null 2>&1 &\n```\n&emsp;&emsp;其中 nohup 是让进程在ssh连接断开时正常运行，&是为了让进程在后台运行。如果想结束该进程，通过 ps aux|grep jupyter-notebook 查找到进程的pid，通过kill命令结束进程。\n\n&emsp;&emsp;/dev/null : 代表空设备文件，2：代表标准错误， 1：代表标准输出\n\n&emsp;&emsp;该命令是将标准输出重定向到文件/dev/null，标准错误输出重定向到标准输出，最终都重定向到/dev/null 文件中.\n\n&emsp;&emsp;服务启动后，我们就可以通过公网ip + 端口访问我们的服务了。\n\n&emsp;&emsp;ps：如果是普通用户启动jupyter notebook应用的话，可能会报错  Permission denied: '/run/user/0/jupyter'，这时可以打开文件~/.bashrc，添加一行export XDG_RUNTIME_DIR=\"\"，可以解决这个权限问题。\n\n&emsp;&emsp;如果在创建新的文件的时候出现 Permission denied: Untitled.ipynb的问题，找到你的jupyter的工作家目录，ls -al 查看你的文件的权限， chmod 777 yourdir/ 修改文件的权限。\n\n## 总结\n&emsp;&emsp; 该服务的搭建过程中，有些重要的对方没有做，没有进行nginx反向代理，没有添加ssl证书。\n\n","slug":"jupyter搭建","published":1,"updated":"2022-03-13T11:49:16.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde06l00039jx38sw51cn5","content":"<h2 id=\"搭建jupyter服务器\"><a href=\"#搭建jupyter服务器\" class=\"headerlink\" title=\"搭建jupyter服务器\"></a>搭建jupyter服务器</h2><h3 id=\"安装jupyter\"><a href=\"#安装jupyter\" class=\"headerlink\" title=\"安装jupyter\"></a>安装jupyter</h3><h3 id=\"一、选择安装anaconda\"><a href=\"#一、选择安装anaconda\" class=\"headerlink\" title=\"一、选择安装anaconda\"></a>一、选择安装anaconda</h3><ol><li><p>根目录下创建一个文件夹用来放anaconda安装包</p></li><li><p>下载anaconda安装包（可以在官网上自行选择版本）</p><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:<span class=\"regexp\">//</span>repo.continuum.io<span class=\"regexp\">/archive/</span>Anaconda3-<span class=\"number\">4.4</span>.<span class=\"number\">0</span>-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><a id=\"more\"></a></li><li><p>运行安装程序，安装anaconda</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">Anaconda3-4</span><span class=\"selector-class\">.4</span><span class=\"selector-class\">.0-Linux-x86_64</span><span class=\"selector-class\">.sh</span></span><br></pre></td></tr></table></figure><p><strong>PS:</strong> 该文件是一个可执行文件，如果下载的文件没有可执行权限，执行命令 chmod 641 Anaconda3-4.4.0-Linux-x86_64.sh 修改权限。</p></li><li><p>配置环境变量</p><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>environment</span><br></pre></td></tr></table></figure><p>将anaconda的bin文件夹的路径添加到环境变量中去（一般安装目录为/root/anaconda3/bin）</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/environment  <span class=\"comment\"># 使文件生效</span></span><br></pre></td></tr></table></figure></li></ol><h3 id=\"二、配置jupyter-notebook-的配置文件\"><a href=\"#二、配置jupyter-notebook-的配置文件\" class=\"headerlink\" title=\"二、配置jupyter notebook 的配置文件\"></a>二、配置jupyter notebook 的配置文件</h3><ol><li><p>生成jupyter notebook 的配置文件</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该命令对于root用户</span></span><br><span class=\"line\">jupyter notebook  --allow-root  --generate-config</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"comment\"># 对于一般用户</span></span><br><span class=\"line\">jupyter notebook  --generate-config</span><br></pre></td></tr></table></figure><p>执行完该命令后会在 .jupyter文件夹下生成一个jupyter_notebook_config.py的配置文件</p></li><li><p>修改配置</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim jupyter_notebook_config.py <span class=\"comment\"># 打开文件修改配置项</span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  星号为允许任意ip访问服务</span></span><br><span class=\"line\">c.NotebookApp.ip=<span class=\"string\">'*'</span></span><br><span class=\"line\"><span class=\"comment\"># 该处设置登录jupyter 的密码</span></span><br><span class=\"line\">c.NotebookApp.password = <span class=\"string\">u'此处填写密码'</span></span><br><span class=\"line\"><span class=\"comment\"># 该项为启动服务默认打开浏览器，设置为False默认不打开</span></span><br><span class=\"line\">c.NotebookApp.open_browser = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"comment\"># 端口号</span></span><br><span class=\"line\">c.NotebookApp.port =<span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"comment\"># 该项设置notebook 的工作目录</span></span><br><span class=\"line\">c.NotebookApp.notebook_dir = <span class=\"string\">'/home/ubuntu/anaconda'</span></span><br></pre></td></tr></table></figure><p><strong>PS:</strong> 对于密码的配置，我们不应该直接配置明文密码，因此需要对密码进行加密处理</p><h4 id=\"打开ipython\"><a href=\"#打开ipython\" class=\"headerlink\" title=\"打开ipython\"></a>打开ipython</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> notebook.auth <span class=\"keyword\">import</span> passwd</span><br><span class=\"line\">passwd()</span><br></pre></td></tr></table></figure><p>该命令会让你输入密码，确认密码，然后返回一串加密后的字符串，类似于：sha1:f97cc330b40c:fb618ac068bd66fb36563e15da4f7462131ad5ee</p><p>配置完成之后保存文件。</p></li></ol><h2 id=\"三、启动jupyter-notebook应用\"><a href=\"#三、启动jupyter-notebook应用\" class=\"headerlink\" title=\"三、启动jupyter notebook应用\"></a>三、启动jupyter notebook应用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 notebook 服务</span></span><br><span class=\"line\">nohup jupyter notebook &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者更加高级的用法</span></span><br><span class=\"line\">nohup jupyter notebook &gt; /dev/null <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span> &amp;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中 nohup 是让进程在ssh连接断开时正常运行，&amp;是为了让进程在后台运行。如果想结束该进程，通过 ps aux|grep jupyter-notebook 查找到进程的pid，通过kill命令结束进程。</p><p>&emsp;&emsp;/dev/null : 代表空设备文件，2：代表标准错误， 1：代表标准输出</p><p>&emsp;&emsp;该命令是将标准输出重定向到文件/dev/null，标准错误输出重定向到标准输出，最终都重定向到/dev/null 文件中.</p><p>&emsp;&emsp;服务启动后，我们就可以通过公网ip + 端口访问我们的服务了。</p><p>&emsp;&emsp;ps：如果是普通用户启动jupyter notebook应用的话，可能会报错 Permission denied: ‘/run/user/0/jupyter’，这时可以打开文件~/.bashrc，添加一行export XDG_RUNTIME_DIR=””，可以解决这个权限问题。</p><p>&emsp;&emsp;如果在创建新的文件的时候出现 Permission denied: Untitled.ipynb的问题，找到你的jupyter的工作家目录，ls -al 查看你的文件的权限， chmod 777 yourdir/ 修改文件的权限。</p><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>&emsp;&emsp; 该服务的搭建过程中，有些重要的对方没有做，没有进行nginx反向代理，没有添加ssl证书。</p>","site":{"data":{}},"excerpt":"<h2 id=\"搭建jupyter服务器\"><a href=\"#搭建jupyter服务器\" class=\"headerlink\" title=\"搭建jupyter服务器\"></a>搭建jupyter服务器</h2><h3 id=\"安装jupyter\"><a href=\"#安装jupyter\" class=\"headerlink\" title=\"安装jupyter\"></a>安装jupyter</h3><h3 id=\"一、选择安装anaconda\"><a href=\"#一、选择安装anaconda\" class=\"headerlink\" title=\"一、选择安装anaconda\"></a>一、选择安装anaconda</h3><ol><li><p>根目录下创建一个文件夹用来放anaconda安装包</p></li><li><p>下载anaconda安装包（可以在官网上自行选择版本）</p><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:<span class=\"regexp\">//</span>repo.continuum.io<span class=\"regexp\">/archive/</span>Anaconda3-<span class=\"number\">4.4</span>.<span class=\"number\">0</span>-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>","more":"</li><li><p>运行安装程序，安装anaconda</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">Anaconda3-4</span><span class=\"selector-class\">.4</span><span class=\"selector-class\">.0-Linux-x86_64</span><span class=\"selector-class\">.sh</span></span><br></pre></td></tr></table></figure><p><strong>PS:</strong> 该文件是一个可执行文件，如果下载的文件没有可执行权限，执行命令 chmod 641 Anaconda3-4.4.0-Linux-x86_64.sh 修改权限。</p></li><li><p>配置环境变量</p><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>environment</span><br></pre></td></tr></table></figure><p>将anaconda的bin文件夹的路径添加到环境变量中去（一般安装目录为/root/anaconda3/bin）</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/environment  <span class=\"comment\"># 使文件生效</span></span><br></pre></td></tr></table></figure></li></ol><h3 id=\"二、配置jupyter-notebook-的配置文件\"><a href=\"#二、配置jupyter-notebook-的配置文件\" class=\"headerlink\" title=\"二、配置jupyter notebook 的配置文件\"></a>二、配置jupyter notebook 的配置文件</h3><ol><li><p>生成jupyter notebook 的配置文件</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该命令对于root用户</span></span><br><span class=\"line\">jupyter notebook  --allow-root  --generate-config</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"comment\"># 对于一般用户</span></span><br><span class=\"line\">jupyter notebook  --generate-config</span><br></pre></td></tr></table></figure><p>执行完该命令后会在 .jupyter文件夹下生成一个jupyter_notebook_config.py的配置文件</p></li><li><p>修改配置</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim jupyter_notebook_config.py <span class=\"comment\"># 打开文件修改配置项</span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  星号为允许任意ip访问服务</span></span><br><span class=\"line\">c.NotebookApp.ip=<span class=\"string\">'*'</span></span><br><span class=\"line\"><span class=\"comment\"># 该处设置登录jupyter 的密码</span></span><br><span class=\"line\">c.NotebookApp.password = <span class=\"string\">u'此处填写密码'</span></span><br><span class=\"line\"><span class=\"comment\"># 该项为启动服务默认打开浏览器，设置为False默认不打开</span></span><br><span class=\"line\">c.NotebookApp.open_browser = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"comment\"># 端口号</span></span><br><span class=\"line\">c.NotebookApp.port =<span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"comment\"># 该项设置notebook 的工作目录</span></span><br><span class=\"line\">c.NotebookApp.notebook_dir = <span class=\"string\">'/home/ubuntu/anaconda'</span></span><br></pre></td></tr></table></figure><p><strong>PS:</strong> 对于密码的配置，我们不应该直接配置明文密码，因此需要对密码进行加密处理</p><h4 id=\"打开ipython\"><a href=\"#打开ipython\" class=\"headerlink\" title=\"打开ipython\"></a>打开ipython</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> notebook.auth <span class=\"keyword\">import</span> passwd</span><br><span class=\"line\">passwd()</span><br></pre></td></tr></table></figure><p>该命令会让你输入密码，确认密码，然后返回一串加密后的字符串，类似于：sha1:f97cc330b40c:fb618ac068bd66fb36563e15da4f7462131ad5ee</p><p>配置完成之后保存文件。</p></li></ol><h2 id=\"三、启动jupyter-notebook应用\"><a href=\"#三、启动jupyter-notebook应用\" class=\"headerlink\" title=\"三、启动jupyter notebook应用\"></a>三、启动jupyter notebook应用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 notebook 服务</span></span><br><span class=\"line\">nohup jupyter notebook &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者更加高级的用法</span></span><br><span class=\"line\">nohup jupyter notebook &gt; /dev/null <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span> &amp;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中 nohup 是让进程在ssh连接断开时正常运行，&amp;是为了让进程在后台运行。如果想结束该进程，通过 ps aux|grep jupyter-notebook 查找到进程的pid，通过kill命令结束进程。</p><p>&emsp;&emsp;/dev/null : 代表空设备文件，2：代表标准错误， 1：代表标准输出</p><p>&emsp;&emsp;该命令是将标准输出重定向到文件/dev/null，标准错误输出重定向到标准输出，最终都重定向到/dev/null 文件中.</p><p>&emsp;&emsp;服务启动后，我们就可以通过公网ip + 端口访问我们的服务了。</p><p>&emsp;&emsp;ps：如果是普通用户启动jupyter notebook应用的话，可能会报错 Permission denied: ‘/run/user/0/jupyter’，这时可以打开文件~/.bashrc，添加一行export XDG_RUNTIME_DIR=””，可以解决这个权限问题。</p><p>&emsp;&emsp;如果在创建新的文件的时候出现 Permission denied: Untitled.ipynb的问题，找到你的jupyter的工作家目录，ls -al 查看你的文件的权限， chmod 777 yourdir/ 修改文件的权限。</p><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>&emsp;&emsp; 该服务的搭建过程中，有些重要的对方没有做，没有进行nginx反向代理，没有添加ssl证书。</p>"},{"title":"lambda函数","type":"categories","copyright":true,"abbrlink":676622553,"date":"2020-01-02T07:41:29.000Z","_content":"\n## 记一次项目中lambda函数的应用\n\nlambda函数也叫做匿名函数，它允许我们快速定义，并且让代码更简洁\n此次记录一下在项目中使用到lambda函数的场景\n\n<!--more-->\n\n### 代码\n```python\n\ndef get(self, url=None, headers=None, encode=False, login_info=None, proxy_ip=None, path=None,  verify=False, retry_times=3, decision=lambda x: True, **kwargs):\n    proxies = None\n    if proxy_ip:\n        proxies = {\"http\": proxy_ip, \"https\": proxy_ip}\n    res = None\n    data = kwargs['params'] if 'params' in kwargs else None\n    for i in range(retry_times):\n        try:\n            flag = True\n            res = self.session.get(url=url, headers=headers, proxies=proxies, verify=verify, **kwargs)\n            self.save_src(url=url, headers=headers, data=data, res=res, login_info=login_info, path=path, encode=encode)\n            flag = False\n            if res.status_code != 200:\n                logger.error('crawl_session get: internet error! url: %s' % url)\n            if res.status_code >= 500:\n                continue\n            elif res.status_code == 200 and not decision(res):\n                continue\n            else:\n                break\n        except:\n```\n\n这里封装了一下requests的get方法，加入了一个decision参数，该参数是一个匿名函数，retry_times是重试次数，通过匿名函数对res结果进行判断，对爬取结果进行预处理；\n\n```python\ndef decision(res):\n    if 'java.lang.NullPointerException' in res.text:\n        return False\n    return True\n```\n上面的函数是我们在爬虫中定义的一个判断函数，当我们如果知道爬取结果中必定会有某个特殊的返回值时，通过该函数我们可以判断爬取的结果是否是正确的；简单的例子，当有可能我们请求服务端json数据时，返回状态码是200，response的json确是一个空值，而我们确定该json一定不是空值，这是我们可以通过lambda函数预处理进行重爬。\n\n","source":"_posts/lambda函数.md","raw":"---\ntitle: lambda函数\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 基础\ncategories:\n  - python\n  - 基础\nabbrlink: 676622553\ndate: 2020-01-02 15:41:29\n---\n\n## 记一次项目中lambda函数的应用\n\nlambda函数也叫做匿名函数，它允许我们快速定义，并且让代码更简洁\n此次记录一下在项目中使用到lambda函数的场景\n\n<!--more-->\n\n### 代码\n```python\n\ndef get(self, url=None, headers=None, encode=False, login_info=None, proxy_ip=None, path=None,  verify=False, retry_times=3, decision=lambda x: True, **kwargs):\n    proxies = None\n    if proxy_ip:\n        proxies = {\"http\": proxy_ip, \"https\": proxy_ip}\n    res = None\n    data = kwargs['params'] if 'params' in kwargs else None\n    for i in range(retry_times):\n        try:\n            flag = True\n            res = self.session.get(url=url, headers=headers, proxies=proxies, verify=verify, **kwargs)\n            self.save_src(url=url, headers=headers, data=data, res=res, login_info=login_info, path=path, encode=encode)\n            flag = False\n            if res.status_code != 200:\n                logger.error('crawl_session get: internet error! url: %s' % url)\n            if res.status_code >= 500:\n                continue\n            elif res.status_code == 200 and not decision(res):\n                continue\n            else:\n                break\n        except:\n```\n\n这里封装了一下requests的get方法，加入了一个decision参数，该参数是一个匿名函数，retry_times是重试次数，通过匿名函数对res结果进行判断，对爬取结果进行预处理；\n\n```python\ndef decision(res):\n    if 'java.lang.NullPointerException' in res.text:\n        return False\n    return True\n```\n上面的函数是我们在爬虫中定义的一个判断函数，当我们如果知道爬取结果中必定会有某个特殊的返回值时，通过该函数我们可以判断爬取的结果是否是正确的；简单的例子，当有可能我们请求服务端json数据时，返回状态码是200，response的json确是一个空值，而我们确定该json一定不是空值，这是我们可以通过lambda函数预处理进行重爬。\n\n","slug":"lambda函数","published":1,"updated":"2022-03-13T11:49:16.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde06r00079jx302xybrq2","content":"<h2 id=\"记一次项目中lambda函数的应用\"><a href=\"#记一次项目中lambda函数的应用\" class=\"headerlink\" title=\"记一次项目中lambda函数的应用\"></a>记一次项目中lambda函数的应用</h2><p>lambda函数也叫做匿名函数，它允许我们快速定义，并且让代码更简洁<br>此次记录一下在项目中使用到lambda函数的场景</p><a id=\"more\"></a><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, url=None, headers=None, encode=False, login_info=None, proxy_ip=None, path=None,  verify=False, retry_times=<span class=\"number\">3</span>, decision=lambda x: True, **kwargs)</span>:</span></span><br><span class=\"line\">    proxies = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> proxy_ip:</span><br><span class=\"line\">        proxies = &#123;<span class=\"string\">\"http\"</span>: proxy_ip, <span class=\"string\">\"https\"</span>: proxy_ip&#125;</span><br><span class=\"line\">    res = <span class=\"literal\">None</span></span><br><span class=\"line\">    data = kwargs[<span class=\"string\">'params'</span>] <span class=\"keyword\">if</span> <span class=\"string\">'params'</span> <span class=\"keyword\">in</span> kwargs <span class=\"keyword\">else</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(retry_times):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            flag = <span class=\"literal\">True</span></span><br><span class=\"line\">            res = self.session.get(url=url, headers=headers, proxies=proxies, verify=verify, **kwargs)</span><br><span class=\"line\">            self.save_src(url=url, headers=headers, data=data, res=res, login_info=login_info, path=path, encode=encode)</span><br><span class=\"line\">            flag = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> res.status_code != <span class=\"number\">200</span>:</span><br><span class=\"line\">                logger.error(<span class=\"string\">'crawl_session get: internet error! url: %s'</span> % url)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res.status_code &gt;= <span class=\"number\">500</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> res.status_code == <span class=\"number\">200</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> decision(res):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br></pre></td></tr></table></figure><p>这里封装了一下requests的get方法，加入了一个decision参数，该参数是一个匿名函数，retry_times是重试次数，通过匿名函数对res结果进行判断，对爬取结果进行预处理；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decision</span><span class=\"params\">(res)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'java.lang.NullPointerException'</span> <span class=\"keyword\">in</span> res.text:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><p>上面的函数是我们在爬虫中定义的一个判断函数，当我们如果知道爬取结果中必定会有某个特殊的返回值时，通过该函数我们可以判断爬取的结果是否是正确的；简单的例子，当有可能我们请求服务端json数据时，返回状态码是200，response的json确是一个空值，而我们确定该json一定不是空值，这是我们可以通过lambda函数预处理进行重爬。</p>","site":{"data":{}},"excerpt":"<h2 id=\"记一次项目中lambda函数的应用\"><a href=\"#记一次项目中lambda函数的应用\" class=\"headerlink\" title=\"记一次项目中lambda函数的应用\"></a>记一次项目中lambda函数的应用</h2><p>lambda函数也叫做匿名函数，它允许我们快速定义，并且让代码更简洁<br>此次记录一下在项目中使用到lambda函数的场景</p>","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, url=None, headers=None, encode=False, login_info=None, proxy_ip=None, path=None,  verify=False, retry_times=<span class=\"number\">3</span>, decision=lambda x: True, **kwargs)</span>:</span></span><br><span class=\"line\">    proxies = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> proxy_ip:</span><br><span class=\"line\">        proxies = &#123;<span class=\"string\">\"http\"</span>: proxy_ip, <span class=\"string\">\"https\"</span>: proxy_ip&#125;</span><br><span class=\"line\">    res = <span class=\"literal\">None</span></span><br><span class=\"line\">    data = kwargs[<span class=\"string\">'params'</span>] <span class=\"keyword\">if</span> <span class=\"string\">'params'</span> <span class=\"keyword\">in</span> kwargs <span class=\"keyword\">else</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(retry_times):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            flag = <span class=\"literal\">True</span></span><br><span class=\"line\">            res = self.session.get(url=url, headers=headers, proxies=proxies, verify=verify, **kwargs)</span><br><span class=\"line\">            self.save_src(url=url, headers=headers, data=data, res=res, login_info=login_info, path=path, encode=encode)</span><br><span class=\"line\">            flag = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> res.status_code != <span class=\"number\">200</span>:</span><br><span class=\"line\">                logger.error(<span class=\"string\">'crawl_session get: internet error! url: %s'</span> % url)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res.status_code &gt;= <span class=\"number\">500</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> res.status_code == <span class=\"number\">200</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> decision(res):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br></pre></td></tr></table></figure><p>这里封装了一下requests的get方法，加入了一个decision参数，该参数是一个匿名函数，retry_times是重试次数，通过匿名函数对res结果进行判断，对爬取结果进行预处理；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decision</span><span class=\"params\">(res)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'java.lang.NullPointerException'</span> <span class=\"keyword\">in</span> res.text:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><p>上面的函数是我们在爬虫中定义的一个判断函数，当我们如果知道爬取结果中必定会有某个特殊的返回值时，通过该函数我们可以判断爬取的结果是否是正确的；简单的例子，当有可能我们请求服务端json数据时，返回状态码是200，response的json确是一个空值，而我们确定该json一定不是空值，这是我们可以通过lambda函数预处理进行重爬。</p>"},{"title":"mongo去重","type":"categories","copyright":true,"abbrlink":546221521,"date":"2020-01-02T08:06:51.000Z","_content":"\n## mongo 去重\n\n进入到Mongo的安装目录，进入到bin文件夹下\n\n导出数据：\n```\nmongoexport.exe -d database -c collection -o filename.json\n```\n导入数据：\n<!--more-->\n```\nmongoimport.exe -d database -c collection --file file\n```\n\n查询集合中存在重复的数据：\n```\ndb.collection.aggregate([{$group:{_id:{字段名:'$字段名'},count:{$sum:1}}},{$match:{count:{$gt:1}}}])\n```\n\n删除重复数据：\n```\ndb.collection.aggregate([\n{\n$group:{_id:{字段名:'$字段名'},count:{$sum:1},dups:{$addToSet:'$_id'}}\n},\n{\n$match:{count:{$gt:1}}\n}]).forEach(function(doc){\ndoc.dups.shift();\ndb.collection.remove({_id:{$in:doc.dups}});\n});\n```\n\n","source":"_posts/mongo去重.md","raw":"---\ntitle: mongo去重\ntype: categories\ncopyright: true\ntags:\n  - 数据库\n  - mongo\ncategories:\n  - 数据库\n  - mongo\nabbrlink: 546221521\ndate: 2020-01-02 16:06:51\n---\n\n## mongo 去重\n\n进入到Mongo的安装目录，进入到bin文件夹下\n\n导出数据：\n```\nmongoexport.exe -d database -c collection -o filename.json\n```\n导入数据：\n<!--more-->\n```\nmongoimport.exe -d database -c collection --file file\n```\n\n查询集合中存在重复的数据：\n```\ndb.collection.aggregate([{$group:{_id:{字段名:'$字段名'},count:{$sum:1}}},{$match:{count:{$gt:1}}}])\n```\n\n删除重复数据：\n```\ndb.collection.aggregate([\n{\n$group:{_id:{字段名:'$字段名'},count:{$sum:1},dups:{$addToSet:'$_id'}}\n},\n{\n$match:{count:{$gt:1}}\n}]).forEach(function(doc){\ndoc.dups.shift();\ndb.collection.remove({_id:{$in:doc.dups}});\n});\n```\n\n","slug":"mongo去重","published":1,"updated":"2022-03-13T11:49:16.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde06t00099jx35oh58ryd","content":"<h2 id=\"mongo-去重\"><a href=\"#mongo-去重\" class=\"headerlink\" title=\"mongo 去重\"></a>mongo 去重</h2><p>进入到Mongo的安装目录，进入到bin文件夹下</p><p>导出数据：</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mongoexport</span><span class=\"selector-class\">.exe</span> <span class=\"selector-tag\">-d</span> <span class=\"selector-tag\">database</span> <span class=\"selector-tag\">-c</span> <span class=\"selector-tag\">collection</span> <span class=\"selector-tag\">-o</span> <span class=\"selector-tag\">filename</span><span class=\"selector-class\">.json</span></span><br></pre></td></tr></table></figure><p>导入数据：</p><a id=\"more\"></a><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongoimport.<span class=\"keyword\">exe</span> -d database -<span class=\"keyword\">c</span> collection --<span class=\"keyword\">file</span> <span class=\"keyword\">file</span></span><br></pre></td></tr></table></figure><p>查询集合中存在重复的数据：</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.aggregate([&#123;<span class=\"string\">$group:</span>&#123;<span class=\"string\">_id:</span>&#123;字段名:<span class=\"string\">'$字段名'</span>&#125;,<span class=\"string\">count:</span>&#123;<span class=\"string\">$sum:</span><span class=\"number\">1</span>&#125;&#125;&#125;,&#123;<span class=\"string\">$match:</span>&#123;<span class=\"string\">count:</span>&#123;<span class=\"string\">$gt:</span><span class=\"number\">1</span>&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure><p>删除重复数据：</p><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"built_in\">.collection</span>.aggregate([</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"variable\">$group:</span>&#123;_id:&#123;字段名:<span class=\"string\">'$字段名'</span>&#125;<span class=\"built_in\">,count</span>:&#123;<span class=\"variable\">$sum:1</span>&#125;,dups:&#123;<span class=\"variable\">$addToSet:</span><span class=\"string\">'$_id'</span>&#125;&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"variable\">$match:</span><span class=\"built_in\">&#123;count</span>:&#123;<span class=\"variable\">$gt:1</span>&#125;&#125;</span><br><span class=\"line\">&#125;]).forEach(<span class=\"keyword\">function</span><span class=\"built_in\">(doc</span>)&#123;</span><br><span class=\"line\">doc.dups.shift();</span><br><span class=\"line\">db<span class=\"built_in\">.collection</span><span class=\"built_in\">.remove</span>(&#123;_id:&#123;<span class=\"variable\">$in:doc</span>.dups&#125;&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"mongo-去重\"><a href=\"#mongo-去重\" class=\"headerlink\" title=\"mongo 去重\"></a>mongo 去重</h2><p>进入到Mongo的安装目录，进入到bin文件夹下</p><p>导出数据：</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mongoexport</span><span class=\"selector-class\">.exe</span> <span class=\"selector-tag\">-d</span> <span class=\"selector-tag\">database</span> <span class=\"selector-tag\">-c</span> <span class=\"selector-tag\">collection</span> <span class=\"selector-tag\">-o</span> <span class=\"selector-tag\">filename</span><span class=\"selector-class\">.json</span></span><br></pre></td></tr></table></figure><p>导入数据：</p>","more":"<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongoimport.<span class=\"keyword\">exe</span> -d database -<span class=\"keyword\">c</span> collection --<span class=\"keyword\">file</span> <span class=\"keyword\">file</span></span><br></pre></td></tr></table></figure><p>查询集合中存在重复的数据：</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.aggregate([&#123;<span class=\"string\">$group:</span>&#123;<span class=\"string\">_id:</span>&#123;字段名:<span class=\"string\">'$字段名'</span>&#125;,<span class=\"string\">count:</span>&#123;<span class=\"string\">$sum:</span><span class=\"number\">1</span>&#125;&#125;&#125;,&#123;<span class=\"string\">$match:</span>&#123;<span class=\"string\">count:</span>&#123;<span class=\"string\">$gt:</span><span class=\"number\">1</span>&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure><p>删除重复数据：</p><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"built_in\">.collection</span>.aggregate([</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"variable\">$group:</span>&#123;_id:&#123;字段名:<span class=\"string\">'$字段名'</span>&#125;<span class=\"built_in\">,count</span>:&#123;<span class=\"variable\">$sum:1</span>&#125;,dups:&#123;<span class=\"variable\">$addToSet:</span><span class=\"string\">'$_id'</span>&#125;&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"variable\">$match:</span><span class=\"built_in\">&#123;count</span>:&#123;<span class=\"variable\">$gt:1</span>&#125;&#125;</span><br><span class=\"line\">&#125;]).forEach(<span class=\"keyword\">function</span><span class=\"built_in\">(doc</span>)&#123;</span><br><span class=\"line\">doc.dups.shift();</span><br><span class=\"line\">db<span class=\"built_in\">.collection</span><span class=\"built_in\">.remove</span>(&#123;_id:&#123;<span class=\"variable\">$in:doc</span>.dups&#125;&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"k8s的本质","type":"categories","copyright":true,"keywords":"kubernetes","abbrlink":495928604,"date":"2022-03-20T14:03:07.000Z","_content":"\n### 容器\n一个‘容器’， 实际上是一个由Linux namespace、 Linux cgroups和rootfs 三种技术构建出来的进程的隔离环境。\n\n#### 架构\n一旦要追求项目的普适性，就一定要从顶层开始做好设计\n<!-- more -->\n\n#### K8s 项目架构\n- k8s 由master和node两种节点组成， 即控制节点和计算节点；\n- master节点，有三个紧密协作的独立组件组合而成;\n    - kube-apiserver： 负责API服务;\n    - kube-scheduler： 负责调度;\n    - kube-controller-manager：负责容器编排。\n- 集群的持久化数据，由kube-apiserver 处理后保存在Ectd 中。\n- node节点核心组件： kubelet\n    > kubelet 主要负责同容器运行时（docker项目）打交道。交互所依赖的，是一个称作CRI（Container Runtime Interface）的远程调用接口，这个接口定义了容器运行时的各项核心操作。比如：启动一个容器需要的所有参数。\n- 此外， kubelet还通过gRPC协议同一个叫做Device Plugin的插件进行交互，这个插件是用来管理GPU等宿主机物理设备的主要组件，也是基于kubernetes项目进行机器学习训练、高性能作业支持等工作必须关注的功能\n- kubelet的另一个重要功能则是调用网络插件和存储插件为容器配置网络和持久化存储。\n- k8s 将一些需要频繁的交互和访问或直接通过本地文件进行信息交换的应用划分为一个 pod, pod的容器共享一个网段，同一组数据卷，从而达到高效率交换信息的目的。\n    - pod是k8s项目中最基础的一个对象。\n    - k8s 项目为pod对象绑定一个service服务，service服务声明的ip地址等信息不变，主要作用是作为pod 的代理入口，代理pod对外暴露一个固定的网络地址。\n- 除了应用与应用之间的关系外， 应用运行的形态时影响‘如何容器化这个应用’的第二个重要因素。\n    - k8s 定义新的，基于pod改进后的对象：\n    - Job, 用来描述一次性运行的pod(比如大数据任务);\n    - DaemonSet, 用来描述每个宿主机必须且只能运行一个副本的守护进程服务;\n    - CronJob, 用于描述定时任务;\n\n#### 声明式API\n>  首先， 通过一个“编排对象”，比如Pod、Job、CronJob等，来描述你试图管理的应用；\n 然后，再为它定义一些“服务对象”，比如Service、Secret、Horizontal Pod Autoscaler(自动水平扩展器)等， 这些对象，会负责具体的平台级功能\n\n#### k8s项目全景图\n![k8s项目全景图](/image/code/clipboard.png)\n\n按照这幅图的线索，我们从容器这个最基础的概念出发，首先遇到了容器间“紧密协作”关系的难 题，于是就扩展到了 Pod；\n\n有了 Pod 之后，我们希望能一次启动多个应用的实例，这样就需要 Deployment 这个 Pod 的多实例管理器；\n\n而有了这样一组相同的 Pod 后，我们又需要通过一个 固定的 IP 地址和端口以负载均衡的方式访问它，于是就有了 Service;\n\n可是，如果现在两个不同 Pod 之间不仅有“访问关系”，还要求在发起时加上授权信息。最典型 的例子就是 Web 应用对数据库访问时需要 Credential（数据库的用户名和密码）信息。那么， 在 Kubernetes 中这样的关系又如何处理呢？\n\nKubernetes 项目提供了一种叫作 Secret 的对象，它其实是一个保存在 Etcd 里的键值对数据。 这样，你把 Credential 信息以 Secret 的方式存在 Etcd 里，Kubernetes 就会在你指定的 Pod（比如，Web 应用的 Pod）启动时，自动把 Secret 里的数据以 Volume 的方式挂载到容器 里。这样，这个 Web 应用就可以访问数据库了。\n\n","source":"_posts/k8s的本质.md","raw":"---\ntitle: k8s的本质\ntype: categories\ncopyright: true\ntags:\n  - k8s\ncategories:\n  - k8s\nkeywords: kubernetes\nabbrlink: 495928604\ndate: 2022-03-20 22:03:07\n---\n\n### 容器\n一个‘容器’， 实际上是一个由Linux namespace、 Linux cgroups和rootfs 三种技术构建出来的进程的隔离环境。\n\n#### 架构\n一旦要追求项目的普适性，就一定要从顶层开始做好设计\n<!-- more -->\n\n#### K8s 项目架构\n- k8s 由master和node两种节点组成， 即控制节点和计算节点；\n- master节点，有三个紧密协作的独立组件组合而成;\n    - kube-apiserver： 负责API服务;\n    - kube-scheduler： 负责调度;\n    - kube-controller-manager：负责容器编排。\n- 集群的持久化数据，由kube-apiserver 处理后保存在Ectd 中。\n- node节点核心组件： kubelet\n    > kubelet 主要负责同容器运行时（docker项目）打交道。交互所依赖的，是一个称作CRI（Container Runtime Interface）的远程调用接口，这个接口定义了容器运行时的各项核心操作。比如：启动一个容器需要的所有参数。\n- 此外， kubelet还通过gRPC协议同一个叫做Device Plugin的插件进行交互，这个插件是用来管理GPU等宿主机物理设备的主要组件，也是基于kubernetes项目进行机器学习训练、高性能作业支持等工作必须关注的功能\n- kubelet的另一个重要功能则是调用网络插件和存储插件为容器配置网络和持久化存储。\n- k8s 将一些需要频繁的交互和访问或直接通过本地文件进行信息交换的应用划分为一个 pod, pod的容器共享一个网段，同一组数据卷，从而达到高效率交换信息的目的。\n    - pod是k8s项目中最基础的一个对象。\n    - k8s 项目为pod对象绑定一个service服务，service服务声明的ip地址等信息不变，主要作用是作为pod 的代理入口，代理pod对外暴露一个固定的网络地址。\n- 除了应用与应用之间的关系外， 应用运行的形态时影响‘如何容器化这个应用’的第二个重要因素。\n    - k8s 定义新的，基于pod改进后的对象：\n    - Job, 用来描述一次性运行的pod(比如大数据任务);\n    - DaemonSet, 用来描述每个宿主机必须且只能运行一个副本的守护进程服务;\n    - CronJob, 用于描述定时任务;\n\n#### 声明式API\n>  首先， 通过一个“编排对象”，比如Pod、Job、CronJob等，来描述你试图管理的应用；\n 然后，再为它定义一些“服务对象”，比如Service、Secret、Horizontal Pod Autoscaler(自动水平扩展器)等， 这些对象，会负责具体的平台级功能\n\n#### k8s项目全景图\n![k8s项目全景图](/image/code/clipboard.png)\n\n按照这幅图的线索，我们从容器这个最基础的概念出发，首先遇到了容器间“紧密协作”关系的难 题，于是就扩展到了 Pod；\n\n有了 Pod 之后，我们希望能一次启动多个应用的实例，这样就需要 Deployment 这个 Pod 的多实例管理器；\n\n而有了这样一组相同的 Pod 后，我们又需要通过一个 固定的 IP 地址和端口以负载均衡的方式访问它，于是就有了 Service;\n\n可是，如果现在两个不同 Pod 之间不仅有“访问关系”，还要求在发起时加上授权信息。最典型 的例子就是 Web 应用对数据库访问时需要 Credential（数据库的用户名和密码）信息。那么， 在 Kubernetes 中这样的关系又如何处理呢？\n\nKubernetes 项目提供了一种叫作 Secret 的对象，它其实是一个保存在 Etcd 里的键值对数据。 这样，你把 Credential 信息以 Secret 的方式存在 Etcd 里，Kubernetes 就会在你指定的 Pod（比如，Web 应用的 Pod）启动时，自动把 Secret 里的数据以 Volume 的方式挂载到容器 里。这样，这个 Web 应用就可以访问数据库了。\n\n","slug":"k8s的本质","published":1,"updated":"2022-03-20T14:17:18.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde070000b9jx33rmt9l44","content":"<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><p>一个‘容器’， 实际上是一个由Linux namespace、 Linux cgroups和rootfs 三种技术构建出来的进程的隔离环境。</p><h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><p>一旦要追求项目的普适性，就一定要从顶层开始做好设计</p><a id=\"more\"></a><h4 id=\"K8s-项目架构\"><a href=\"#K8s-项目架构\" class=\"headerlink\" title=\"K8s 项目架构\"></a>K8s 项目架构</h4><ul><li>k8s 由master和node两种节点组成， 即控制节点和计算节点；</li><li>master节点，有三个紧密协作的独立组件组合而成;<ul><li>kube-apiserver： 负责API服务;</li><li>kube-scheduler： 负责调度;</li><li>kube-controller-manager：负责容器编排。</li></ul></li><li>集群的持久化数据，由kube-apiserver 处理后保存在Ectd 中。</li><li>node节点核心组件： kubelet<blockquote><p>kubelet 主要负责同容器运行时（docker项目）打交道。交互所依赖的，是一个称作CRI（Container Runtime Interface）的远程调用接口，这个接口定义了容器运行时的各项核心操作。比如：启动一个容器需要的所有参数。</p></blockquote></li><li>此外， kubelet还通过gRPC协议同一个叫做Device Plugin的插件进行交互，这个插件是用来管理GPU等宿主机物理设备的主要组件，也是基于kubernetes项目进行机器学习训练、高性能作业支持等工作必须关注的功能</li><li>kubelet的另一个重要功能则是调用网络插件和存储插件为容器配置网络和持久化存储。</li><li>k8s 将一些需要频繁的交互和访问或直接通过本地文件进行信息交换的应用划分为一个 pod, pod的容器共享一个网段，同一组数据卷，从而达到高效率交换信息的目的。<ul><li>pod是k8s项目中最基础的一个对象。</li><li>k8s 项目为pod对象绑定一个service服务，service服务声明的ip地址等信息不变，主要作用是作为pod 的代理入口，代理pod对外暴露一个固定的网络地址。</li></ul></li><li>除了应用与应用之间的关系外， 应用运行的形态时影响‘如何容器化这个应用’的第二个重要因素。<ul><li>k8s 定义新的，基于pod改进后的对象：</li><li>Job, 用来描述一次性运行的pod(比如大数据任务);</li><li>DaemonSet, 用来描述每个宿主机必须且只能运行一个副本的守护进程服务;</li><li>CronJob, 用于描述定时任务;</li></ul></li></ul><h4 id=\"声明式API\"><a href=\"#声明式API\" class=\"headerlink\" title=\"声明式API\"></a>声明式API</h4><blockquote><p>首先， 通过一个“编排对象”，比如Pod、Job、CronJob等，来描述你试图管理的应用；<br>然后，再为它定义一些“服务对象”，比如Service、Secret、Horizontal Pod Autoscaler(自动水平扩展器)等， 这些对象，会负责具体的平台级功能</p></blockquote><h4 id=\"k8s项目全景图\"><a href=\"#k8s项目全景图\" class=\"headerlink\" title=\"k8s项目全景图\"></a>k8s项目全景图</h4><p><img src=\"/image/code/clipboard.png\" alt=\"k8s项目全景图\"></p><p>按照这幅图的线索，我们从容器这个最基础的概念出发，首先遇到了容器间“紧密协作”关系的难 题，于是就扩展到了 Pod；</p><p>有了 Pod 之后，我们希望能一次启动多个应用的实例，这样就需要 Deployment 这个 Pod 的多实例管理器；</p><p>而有了这样一组相同的 Pod 后，我们又需要通过一个 固定的 IP 地址和端口以负载均衡的方式访问它，于是就有了 Service;</p><p>可是，如果现在两个不同 Pod 之间不仅有“访问关系”，还要求在发起时加上授权信息。最典型 的例子就是 Web 应用对数据库访问时需要 Credential（数据库的用户名和密码）信息。那么， 在 Kubernetes 中这样的关系又如何处理呢？</p><p>Kubernetes 项目提供了一种叫作 Secret 的对象，它其实是一个保存在 Etcd 里的键值对数据。 这样，你把 Credential 信息以 Secret 的方式存在 Etcd 里，Kubernetes 就会在你指定的 Pod（比如，Web 应用的 Pod）启动时，自动把 Secret 里的数据以 Volume 的方式挂载到容器 里。这样，这个 Web 应用就可以访问数据库了。</p>","site":{"data":{}},"excerpt":"<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><p>一个‘容器’， 实际上是一个由Linux namespace、 Linux cgroups和rootfs 三种技术构建出来的进程的隔离环境。</p><h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><p>一旦要追求项目的普适性，就一定要从顶层开始做好设计</p>","more":"<h4 id=\"K8s-项目架构\"><a href=\"#K8s-项目架构\" class=\"headerlink\" title=\"K8s 项目架构\"></a>K8s 项目架构</h4><ul><li>k8s 由master和node两种节点组成， 即控制节点和计算节点；</li><li>master节点，有三个紧密协作的独立组件组合而成;<ul><li>kube-apiserver： 负责API服务;</li><li>kube-scheduler： 负责调度;</li><li>kube-controller-manager：负责容器编排。</li></ul></li><li>集群的持久化数据，由kube-apiserver 处理后保存在Ectd 中。</li><li>node节点核心组件： kubelet<blockquote><p>kubelet 主要负责同容器运行时（docker项目）打交道。交互所依赖的，是一个称作CRI（Container Runtime Interface）的远程调用接口，这个接口定义了容器运行时的各项核心操作。比如：启动一个容器需要的所有参数。</p></blockquote></li><li>此外， kubelet还通过gRPC协议同一个叫做Device Plugin的插件进行交互，这个插件是用来管理GPU等宿主机物理设备的主要组件，也是基于kubernetes项目进行机器学习训练、高性能作业支持等工作必须关注的功能</li><li>kubelet的另一个重要功能则是调用网络插件和存储插件为容器配置网络和持久化存储。</li><li>k8s 将一些需要频繁的交互和访问或直接通过本地文件进行信息交换的应用划分为一个 pod, pod的容器共享一个网段，同一组数据卷，从而达到高效率交换信息的目的。<ul><li>pod是k8s项目中最基础的一个对象。</li><li>k8s 项目为pod对象绑定一个service服务，service服务声明的ip地址等信息不变，主要作用是作为pod 的代理入口，代理pod对外暴露一个固定的网络地址。</li></ul></li><li>除了应用与应用之间的关系外， 应用运行的形态时影响‘如何容器化这个应用’的第二个重要因素。<ul><li>k8s 定义新的，基于pod改进后的对象：</li><li>Job, 用来描述一次性运行的pod(比如大数据任务);</li><li>DaemonSet, 用来描述每个宿主机必须且只能运行一个副本的守护进程服务;</li><li>CronJob, 用于描述定时任务;</li></ul></li></ul><h4 id=\"声明式API\"><a href=\"#声明式API\" class=\"headerlink\" title=\"声明式API\"></a>声明式API</h4><blockquote><p>首先， 通过一个“编排对象”，比如Pod、Job、CronJob等，来描述你试图管理的应用；<br>然后，再为它定义一些“服务对象”，比如Service、Secret、Horizontal Pod Autoscaler(自动水平扩展器)等， 这些对象，会负责具体的平台级功能</p></blockquote><h4 id=\"k8s项目全景图\"><a href=\"#k8s项目全景图\" class=\"headerlink\" title=\"k8s项目全景图\"></a>k8s项目全景图</h4><p><img src=\"/image/code/clipboard.png\" alt=\"k8s项目全景图\"></p><p>按照这幅图的线索，我们从容器这个最基础的概念出发，首先遇到了容器间“紧密协作”关系的难 题，于是就扩展到了 Pod；</p><p>有了 Pod 之后，我们希望能一次启动多个应用的实例，这样就需要 Deployment 这个 Pod 的多实例管理器；</p><p>而有了这样一组相同的 Pod 后，我们又需要通过一个 固定的 IP 地址和端口以负载均衡的方式访问它，于是就有了 Service;</p><p>可是，如果现在两个不同 Pod 之间不仅有“访问关系”，还要求在发起时加上授权信息。最典型 的例子就是 Web 应用对数据库访问时需要 Credential（数据库的用户名和密码）信息。那么， 在 Kubernetes 中这样的关系又如何处理呢？</p><p>Kubernetes 项目提供了一种叫作 Secret 的对象，它其实是一个保存在 Etcd 里的键值对数据。 这样，你把 Credential 信息以 Secret 的方式存在 Etcd 里，Kubernetes 就会在你指定的 Pod（比如，Web 应用的 Pod）启动时，自动把 Secret 里的数据以 Volume 的方式挂载到容器 里。这样，这个 Web 应用就可以访问数据库了。</p>"},{"title":"docker镜像","type":"categories","copyright":true,"abbrlink":2299316085,"date":"2020-01-02T08:49:05.000Z","_content":"\n## docker 镜像\n### 获取镜像\n\n&emsp;&emsp;镜像是docker的三大组件之一，docker运行容器需要本地存在对应的镜像，如果镜像不存在，docker会从镜像仓库下载，默认是从docker hub 公共注册服务器的仓库中下载。可以通过 docker pull 命令从仓库中获取需要的镜像；\n\n<!--more-->\n```sh\n# 拉取Ubuntu12.04镜像\n1 $ sudo docker pull ubuntu:12.04\n2 Pulling repository ubuntu\n3 ab8e2728644c: Pulling dependent layers\n4 511136ea3c5a: Download complete\n5 5f0ffaa9455e: Download complete\n6 a300658979be: Download complete\n7 904483ae0c30: Download complete\n8 ffdaafd1ca50: Download complete\n9 d047ae21eeaf: Download complete\n```\n下载过程中会输出获取每一层镜像的信息\n该命令相当于\n```sh\n$ sudo docker pull\nregistry.hub.docker.com/ubuntu:12.04 \n```\n&emsp;&emsp;如果官方注册服务器下载比较慢的时候，可以选择从其他仓库进行下载，从其他仓库下载需要指定完整的仓库注册服务器的地址；\n\n```sh\n1 $ sudo docker pull dl.dockerpool.com:5000/ubuntu:12.04\n2 Pulling dl.dockerpool.com:5000/ubuntu\n3 ab8e2728644c: Pulling dependent layers\n4 511136ea3c5a: Download complete\n5 5f0ffaa9455e: Download complete\n6 a300658979be: Download complete\n7 904483ae0c30: Download complete\n8 ffdaafd1ca50: Download complete\n9 d047ae21eeaf: Download complete\n```\n下载镜像完成后，就可以使用镜像了。\n\n### 使用 docker images 列出本地所有镜像\n```sh\n$ sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB\nubuntu              14.04               578c3e61a98c        3 weeks ago         223MB\nubuntu              latest              113a43faa138        3 weeks ago         81.2MB\nhello-world         latest              e38bc07ac18e        2 months ago        1.85kB\nubuntu              12.04               5b117edd0b76        14 months ago       104MB\n```\n可以看到本地已有镜像的信息，包括镜像名，镜像标记，镜像ID，镜像的创建时间和镜像的大小；\n\n利用创建的镜像来启动容器\n```sh\n$ sudo docker run -t -i ubuntu:16.04 /bin/bash\nroot@4af941efaebf:/# ls\n```\n\n### 可以用 docker tag 命令来修改镜像的标签\n```sh\n$ sudo docker tag 5e8b97a2a082 ubuntu16.04:my\n$ sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu16.04         latest              5e8b97a2a082        3 weeks ago         114MB\nubuntu16.04         my                  5e8b97a2a082        3 weeks ago         114MB\nubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB\nubuntu              14.04               578c3e61a98c        3 weeks ago         223MB\nubuntu              latest              113a43faa138        3 weeks ago         81.2MB\nhello-world         latest              e38bc07ac18e        2 months ago        1.85kB\nubuntu              12.04               5b117edd0b76        14 months ago       104MB\n```\n\n### 本地导入镜像\n先下载一个镜像，比如Ubuntu14.04，之后使用以下命令进行导入\n```sh\n$ sudo cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04\n```\n\n### 上传镜像\n&emsp;&emsp;用户可以通过docker push 命令来上传自己创建的镜像到仓库中进行共享。例如，用户在Docker Hub上注册后可以推送自己的镜像到仓库中\n```sh\n$ sudo docker push ouruser/sinatra\nThe push refers to a repository [ouruser/sinatra] (len: 1)\nSending image list\nPushing repository ouruser/sinatra (3 tags)\n```\n\n### 存储镜像\n可以使用docker save 命令，导出docker 镜像到本地文件中\n```sh\n$ sudo docker save -o ubuntu_14.04.tar ubuntu:14.04\n```\n\n### 载入镜像\n可以使用docker load 命令，将本地文件的镜像导入到本地镜像库\n```sh\n$ sudo docker load --input ubuntu_14.04.tar\n# 或者\n$ sudo docker load < ubuntu_14.04.tar\n```\n\n### 移除本地镜像\n可以使用docker rmi 命令移除本地镜像；移除镜像前需要先使用**docker rm**命令删除依赖该镜像的所有容器\n```sh\n$ sudo docker rmi Ubuntu16.04\n```\n\n### 清理所有未打过标签的本地镜像\n```sh\n$ sudo docker rmi $(docker images -q -f \"dangling=true\")\n# 或者\n$ sudo docker rmi $(docker images --quiet --filter \"dangling=true\")\n```\n","source":"_posts/docker镜像.md","raw":"---\ntitle: docker镜像\ntype: categories\ncopyright: true\ntags:\n  - docker\ncategories: docker\nabbrlink: 2299316085\ndate: 2020-01-02 16:49:05\n---\n\n## docker 镜像\n### 获取镜像\n\n&emsp;&emsp;镜像是docker的三大组件之一，docker运行容器需要本地存在对应的镜像，如果镜像不存在，docker会从镜像仓库下载，默认是从docker hub 公共注册服务器的仓库中下载。可以通过 docker pull 命令从仓库中获取需要的镜像；\n\n<!--more-->\n```sh\n# 拉取Ubuntu12.04镜像\n1 $ sudo docker pull ubuntu:12.04\n2 Pulling repository ubuntu\n3 ab8e2728644c: Pulling dependent layers\n4 511136ea3c5a: Download complete\n5 5f0ffaa9455e: Download complete\n6 a300658979be: Download complete\n7 904483ae0c30: Download complete\n8 ffdaafd1ca50: Download complete\n9 d047ae21eeaf: Download complete\n```\n下载过程中会输出获取每一层镜像的信息\n该命令相当于\n```sh\n$ sudo docker pull\nregistry.hub.docker.com/ubuntu:12.04 \n```\n&emsp;&emsp;如果官方注册服务器下载比较慢的时候，可以选择从其他仓库进行下载，从其他仓库下载需要指定完整的仓库注册服务器的地址；\n\n```sh\n1 $ sudo docker pull dl.dockerpool.com:5000/ubuntu:12.04\n2 Pulling dl.dockerpool.com:5000/ubuntu\n3 ab8e2728644c: Pulling dependent layers\n4 511136ea3c5a: Download complete\n5 5f0ffaa9455e: Download complete\n6 a300658979be: Download complete\n7 904483ae0c30: Download complete\n8 ffdaafd1ca50: Download complete\n9 d047ae21eeaf: Download complete\n```\n下载镜像完成后，就可以使用镜像了。\n\n### 使用 docker images 列出本地所有镜像\n```sh\n$ sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB\nubuntu              14.04               578c3e61a98c        3 weeks ago         223MB\nubuntu              latest              113a43faa138        3 weeks ago         81.2MB\nhello-world         latest              e38bc07ac18e        2 months ago        1.85kB\nubuntu              12.04               5b117edd0b76        14 months ago       104MB\n```\n可以看到本地已有镜像的信息，包括镜像名，镜像标记，镜像ID，镜像的创建时间和镜像的大小；\n\n利用创建的镜像来启动容器\n```sh\n$ sudo docker run -t -i ubuntu:16.04 /bin/bash\nroot@4af941efaebf:/# ls\n```\n\n### 可以用 docker tag 命令来修改镜像的标签\n```sh\n$ sudo docker tag 5e8b97a2a082 ubuntu16.04:my\n$ sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu16.04         latest              5e8b97a2a082        3 weeks ago         114MB\nubuntu16.04         my                  5e8b97a2a082        3 weeks ago         114MB\nubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB\nubuntu              14.04               578c3e61a98c        3 weeks ago         223MB\nubuntu              latest              113a43faa138        3 weeks ago         81.2MB\nhello-world         latest              e38bc07ac18e        2 months ago        1.85kB\nubuntu              12.04               5b117edd0b76        14 months ago       104MB\n```\n\n### 本地导入镜像\n先下载一个镜像，比如Ubuntu14.04，之后使用以下命令进行导入\n```sh\n$ sudo cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04\n```\n\n### 上传镜像\n&emsp;&emsp;用户可以通过docker push 命令来上传自己创建的镜像到仓库中进行共享。例如，用户在Docker Hub上注册后可以推送自己的镜像到仓库中\n```sh\n$ sudo docker push ouruser/sinatra\nThe push refers to a repository [ouruser/sinatra] (len: 1)\nSending image list\nPushing repository ouruser/sinatra (3 tags)\n```\n\n### 存储镜像\n可以使用docker save 命令，导出docker 镜像到本地文件中\n```sh\n$ sudo docker save -o ubuntu_14.04.tar ubuntu:14.04\n```\n\n### 载入镜像\n可以使用docker load 命令，将本地文件的镜像导入到本地镜像库\n```sh\n$ sudo docker load --input ubuntu_14.04.tar\n# 或者\n$ sudo docker load < ubuntu_14.04.tar\n```\n\n### 移除本地镜像\n可以使用docker rmi 命令移除本地镜像；移除镜像前需要先使用**docker rm**命令删除依赖该镜像的所有容器\n```sh\n$ sudo docker rmi Ubuntu16.04\n```\n\n### 清理所有未打过标签的本地镜像\n```sh\n$ sudo docker rmi $(docker images -q -f \"dangling=true\")\n# 或者\n$ sudo docker rmi $(docker images --quiet --filter \"dangling=true\")\n```\n","slug":"docker镜像","published":1,"updated":"2022-03-13T11:49:16.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde075000g9jx3c1b28jcn","content":"<h2 id=\"docker-镜像\"><a href=\"#docker-镜像\" class=\"headerlink\" title=\"docker 镜像\"></a>docker 镜像</h2><h3 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h3><p>&emsp;&emsp;镜像是docker的三大组件之一，docker运行容器需要本地存在对应的镜像，如果镜像不存在，docker会从镜像仓库下载，默认是从docker hub 公共注册服务器的仓库中下载。可以通过 docker pull 命令从仓库中获取需要的镜像；</p><a id=\"more\"></a><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取Ubuntu12.04镜像</span></span><br><span class=\"line\">1 $ sudo docker pull ubuntu:12.04</span><br><span class=\"line\">2 Pulling repository ubuntu</span><br><span class=\"line\">3 ab8e2728644c: Pulling dependent layers</span><br><span class=\"line\">4 511136ea3c5a: Download complete</span><br><span class=\"line\">5 5f0ffaa9455e: Download complete</span><br><span class=\"line\">6 a300658979be: Download complete</span><br><span class=\"line\">7 904483ae0c30: Download complete</span><br><span class=\"line\">8 ffdaafd1ca50: Download complete</span><br><span class=\"line\">9 d047ae21eeaf: Download complete</span><br></pre></td></tr></table></figure><p>下载过程中会输出获取每一层镜像的信息<br>该命令相当于</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker pull</span><br><span class=\"line\">registry.hub.docker.com/ubuntu:12.04</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果官方注册服务器下载比较慢的时候，可以选择从其他仓库进行下载，从其他仓库下载需要指定完整的仓库注册服务器的地址；</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 $ sudo docker pull dl.dockerpool.com:5000/ubuntu:12.04</span><br><span class=\"line\">2 Pulling dl.dockerpool.com:5000/ubuntu</span><br><span class=\"line\">3 ab8e2728644c: Pulling dependent layers</span><br><span class=\"line\">4 511136ea3c5a: Download complete</span><br><span class=\"line\">5 5f0ffaa9455e: Download complete</span><br><span class=\"line\">6 a300658979be: Download complete</span><br><span class=\"line\">7 904483ae0c30: Download complete</span><br><span class=\"line\">8 ffdaafd1ca50: Download complete</span><br><span class=\"line\">9 d047ae21eeaf: Download complete</span><br></pre></td></tr></table></figure><p>下载镜像完成后，就可以使用镜像了。</p><h3 id=\"使用-docker-images-列出本地所有镜像\"><a href=\"#使用-docker-images-列出本地所有镜像\" class=\"headerlink\" title=\"使用 docker images 列出本地所有镜像\"></a>使用 docker images 列出本地所有镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu              14.04               578c3e61a98c        3 weeks ago         223MB</span><br><span class=\"line\">ubuntu              latest              113a43faa138        3 weeks ago         81.2MB</span><br><span class=\"line\">hello-world         latest              e38bc07ac18e        2 months ago        1.85kB</span><br><span class=\"line\">ubuntu              12.04               5b117edd0b76        14 months ago       104MB</span><br></pre></td></tr></table></figure><p>可以看到本地已有镜像的信息，包括镜像名，镜像标记，镜像ID，镜像的创建时间和镜像的大小；</p><p>利用创建的镜像来启动容器</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -t -i ubuntu:16.04 /bin/bash</span><br><span class=\"line\">root@4af941efaebf:/<span class=\"comment\"># ls</span></span><br></pre></td></tr></table></figure><h3 id=\"可以用-docker-tag-命令来修改镜像的标签\"><a href=\"#可以用-docker-tag-命令来修改镜像的标签\" class=\"headerlink\" title=\"可以用 docker tag 命令来修改镜像的标签\"></a>可以用 docker tag 命令来修改镜像的标签</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker tag 5e8b97a2a082 ubuntu16.04:my</span><br><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu16.04         latest              5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu16.04         my                  5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu              14.04               578c3e61a98c        3 weeks ago         223MB</span><br><span class=\"line\">ubuntu              latest              113a43faa138        3 weeks ago         81.2MB</span><br><span class=\"line\">hello-world         latest              e38bc07ac18e        2 months ago        1.85kB</span><br><span class=\"line\">ubuntu              12.04               5b117edd0b76        14 months ago       104MB</span><br></pre></td></tr></table></figure><h3 id=\"本地导入镜像\"><a href=\"#本地导入镜像\" class=\"headerlink\" title=\"本地导入镜像\"></a>本地导入镜像</h3><p>先下载一个镜像，比如Ubuntu14.04，之后使用以下命令进行导入</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04</span><br></pre></td></tr></table></figure><h3 id=\"上传镜像\"><a href=\"#上传镜像\" class=\"headerlink\" title=\"上传镜像\"></a>上传镜像</h3><p>&emsp;&emsp;用户可以通过docker push 命令来上传自己创建的镜像到仓库中进行共享。例如，用户在Docker Hub上注册后可以推送自己的镜像到仓库中</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker push ouruser/sinatra</span><br><span class=\"line\">The push refers to a repository [ouruser/sinatra] (len: 1)</span><br><span class=\"line\">Sending image list</span><br><span class=\"line\">Pushing repository ouruser/sinatra (3 tags)</span><br></pre></td></tr></table></figure><h3 id=\"存储镜像\"><a href=\"#存储镜像\" class=\"headerlink\" title=\"存储镜像\"></a>存储镜像</h3><p>可以使用docker save 命令，导出docker 镜像到本地文件中</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker save -o ubuntu_14.04.tar ubuntu:14.04</span><br></pre></td></tr></table></figure><h3 id=\"载入镜像\"><a href=\"#载入镜像\" class=\"headerlink\" title=\"载入镜像\"></a>载入镜像</h3><p>可以使用docker load 命令，将本地文件的镜像导入到本地镜像库</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker load --input ubuntu_14.04.tar</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ sudo docker load &lt; ubuntu_14.04.tar</span><br></pre></td></tr></table></figure><h3 id=\"移除本地镜像\"><a href=\"#移除本地镜像\" class=\"headerlink\" title=\"移除本地镜像\"></a>移除本地镜像</h3><p>可以使用docker rmi 命令移除本地镜像；移除镜像前需要先使用<strong>docker rm</strong>命令删除依赖该镜像的所有容器</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker rmi Ubuntu16.04</span><br></pre></td></tr></table></figure><h3 id=\"清理所有未打过标签的本地镜像\"><a href=\"#清理所有未打过标签的本地镜像\" class=\"headerlink\" title=\"清理所有未打过标签的本地镜像\"></a>清理所有未打过标签的本地镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker rmi $(docker images -q -f <span class=\"string\">\"dangling=true\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ sudo docker rmi $(docker images --quiet --filter <span class=\"string\">\"dangling=true\"</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"docker-镜像\"><a href=\"#docker-镜像\" class=\"headerlink\" title=\"docker 镜像\"></a>docker 镜像</h2><h3 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h3><p>&emsp;&emsp;镜像是docker的三大组件之一，docker运行容器需要本地存在对应的镜像，如果镜像不存在，docker会从镜像仓库下载，默认是从docker hub 公共注册服务器的仓库中下载。可以通过 docker pull 命令从仓库中获取需要的镜像；</p>","more":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取Ubuntu12.04镜像</span></span><br><span class=\"line\">1 $ sudo docker pull ubuntu:12.04</span><br><span class=\"line\">2 Pulling repository ubuntu</span><br><span class=\"line\">3 ab8e2728644c: Pulling dependent layers</span><br><span class=\"line\">4 511136ea3c5a: Download complete</span><br><span class=\"line\">5 5f0ffaa9455e: Download complete</span><br><span class=\"line\">6 a300658979be: Download complete</span><br><span class=\"line\">7 904483ae0c30: Download complete</span><br><span class=\"line\">8 ffdaafd1ca50: Download complete</span><br><span class=\"line\">9 d047ae21eeaf: Download complete</span><br></pre></td></tr></table></figure><p>下载过程中会输出获取每一层镜像的信息<br>该命令相当于</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker pull</span><br><span class=\"line\">registry.hub.docker.com/ubuntu:12.04</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果官方注册服务器下载比较慢的时候，可以选择从其他仓库进行下载，从其他仓库下载需要指定完整的仓库注册服务器的地址；</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 $ sudo docker pull dl.dockerpool.com:5000/ubuntu:12.04</span><br><span class=\"line\">2 Pulling dl.dockerpool.com:5000/ubuntu</span><br><span class=\"line\">3 ab8e2728644c: Pulling dependent layers</span><br><span class=\"line\">4 511136ea3c5a: Download complete</span><br><span class=\"line\">5 5f0ffaa9455e: Download complete</span><br><span class=\"line\">6 a300658979be: Download complete</span><br><span class=\"line\">7 904483ae0c30: Download complete</span><br><span class=\"line\">8 ffdaafd1ca50: Download complete</span><br><span class=\"line\">9 d047ae21eeaf: Download complete</span><br></pre></td></tr></table></figure><p>下载镜像完成后，就可以使用镜像了。</p><h3 id=\"使用-docker-images-列出本地所有镜像\"><a href=\"#使用-docker-images-列出本地所有镜像\" class=\"headerlink\" title=\"使用 docker images 列出本地所有镜像\"></a>使用 docker images 列出本地所有镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu              14.04               578c3e61a98c        3 weeks ago         223MB</span><br><span class=\"line\">ubuntu              latest              113a43faa138        3 weeks ago         81.2MB</span><br><span class=\"line\">hello-world         latest              e38bc07ac18e        2 months ago        1.85kB</span><br><span class=\"line\">ubuntu              12.04               5b117edd0b76        14 months ago       104MB</span><br></pre></td></tr></table></figure><p>可以看到本地已有镜像的信息，包括镜像名，镜像标记，镜像ID，镜像的创建时间和镜像的大小；</p><p>利用创建的镜像来启动容器</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -t -i ubuntu:16.04 /bin/bash</span><br><span class=\"line\">root@4af941efaebf:/<span class=\"comment\"># ls</span></span><br></pre></td></tr></table></figure><h3 id=\"可以用-docker-tag-命令来修改镜像的标签\"><a href=\"#可以用-docker-tag-命令来修改镜像的标签\" class=\"headerlink\" title=\"可以用 docker tag 命令来修改镜像的标签\"></a>可以用 docker tag 命令来修改镜像的标签</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker tag 5e8b97a2a082 ubuntu16.04:my</span><br><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu16.04         latest              5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu16.04         my                  5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu              14.04               578c3e61a98c        3 weeks ago         223MB</span><br><span class=\"line\">ubuntu              latest              113a43faa138        3 weeks ago         81.2MB</span><br><span class=\"line\">hello-world         latest              e38bc07ac18e        2 months ago        1.85kB</span><br><span class=\"line\">ubuntu              12.04               5b117edd0b76        14 months ago       104MB</span><br></pre></td></tr></table></figure><h3 id=\"本地导入镜像\"><a href=\"#本地导入镜像\" class=\"headerlink\" title=\"本地导入镜像\"></a>本地导入镜像</h3><p>先下载一个镜像，比如Ubuntu14.04，之后使用以下命令进行导入</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04</span><br></pre></td></tr></table></figure><h3 id=\"上传镜像\"><a href=\"#上传镜像\" class=\"headerlink\" title=\"上传镜像\"></a>上传镜像</h3><p>&emsp;&emsp;用户可以通过docker push 命令来上传自己创建的镜像到仓库中进行共享。例如，用户在Docker Hub上注册后可以推送自己的镜像到仓库中</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker push ouruser/sinatra</span><br><span class=\"line\">The push refers to a repository [ouruser/sinatra] (len: 1)</span><br><span class=\"line\">Sending image list</span><br><span class=\"line\">Pushing repository ouruser/sinatra (3 tags)</span><br></pre></td></tr></table></figure><h3 id=\"存储镜像\"><a href=\"#存储镜像\" class=\"headerlink\" title=\"存储镜像\"></a>存储镜像</h3><p>可以使用docker save 命令，导出docker 镜像到本地文件中</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker save -o ubuntu_14.04.tar ubuntu:14.04</span><br></pre></td></tr></table></figure><h3 id=\"载入镜像\"><a href=\"#载入镜像\" class=\"headerlink\" title=\"载入镜像\"></a>载入镜像</h3><p>可以使用docker load 命令，将本地文件的镜像导入到本地镜像库</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker load --input ubuntu_14.04.tar</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ sudo docker load &lt; ubuntu_14.04.tar</span><br></pre></td></tr></table></figure><h3 id=\"移除本地镜像\"><a href=\"#移除本地镜像\" class=\"headerlink\" title=\"移除本地镜像\"></a>移除本地镜像</h3><p>可以使用docker rmi 命令移除本地镜像；移除镜像前需要先使用<strong>docker rm</strong>命令删除依赖该镜像的所有容器</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker rmi Ubuntu16.04</span><br></pre></td></tr></table></figure><h3 id=\"清理所有未打过标签的本地镜像\"><a href=\"#清理所有未打过标签的本地镜像\" class=\"headerlink\" title=\"清理所有未打过标签的本地镜像\"></a>清理所有未打过标签的本地镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker rmi $(docker images -q -f <span class=\"string\">\"dangling=true\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ sudo docker rmi $(docker images --quiet --filter <span class=\"string\">\"dangling=true\"</span>)</span><br></pre></td></tr></table></figure>"},{"title":"list去重和单例","type":"categories","copyright":true,"keywords":["单例","列表去重"],"top":77,"abbrlink":2767789526,"date":"2022-03-03T08:11:51.000Z","_content":"\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n## python里面re模块match()和search()的区别\n- match()函数指检测re是不是在str的开始位置匹配\n- search()会扫描整个str查找匹配，会扫描整个字符串并返回第一个成功的匹配\n\n也就是说match()只有在0位置匹配成功的话才有返回，如果不是开始位置匹配成功的话，返回none\n\n## python传递可变默认参数类型，默认指向同一个引用\n<!-- more -->\n```python\ndef f(x,l=[]):  \n    for i in range(x):  \n        l.append(i*i)  \n    print(l)  \nf(2)#[0,1]  \nf(3,[3,2,1])#[3,2,1,0,1,4]  \nf(3)#[0,1,0,1,4]  \n```\n## 列表的去重方法\n- 集合方法\n```python\nli = [1, 1, 2, 3, 3, 4, 4, 5, 5, 6]  \na = []  \n# 列表去重方法一：集合方法  \nb = set(li)  \nprint(b) \n```\n- 遍历统计次数，删除重复选项 \n```python\nfor i in li:  \n    while li.count(i) > 1:  \n        del li[li.index(i)]  \nprint(li) \n```\n- 遍历列表，添加新列表对比 \n```python\na = []  \nfor i in li:  \n    if i in li:  \n        if i not in a:  \n            a.append(i)  \nprint(a)  \n```\n- 先对元素进行排序，然后从列表的最后开始扫描\n```python\nlist = [1, 1, 2, 3, 3, 4, 4, 5, 5, 6]  \nif list:  \n    list.sort()  \n    last = list[-1]  \n  \n    for i in range(len(list)-2,-1,-1):  \n        if last == list[i]:  \n            del list[i]  \n        else:last = list[i]  \n  \nprint(list)  \n```\n- 利用map的fromkeys来自动过滤重复值\n```python\nl1 = [1, 1, 2, 3, 3, 4, 4, 5, 5, 6]  \nl2 = {}.fromkeys(l1).keys()  \nprint(l2)  \n```\n\n## 单例\n所谓单例，是指一个类的实例从始至终只能被创建一次。 \n\n### 方法一\n```python\n# 如果想使得某个类从始至终最多只有一个实例，使用__new__方法会很简单。Python中类是通过__new__来创建实例的：  \n  \nclass Singleton(object):  \n    _instance = None  \n  \n    def __new__(cls, *args, **kw):  \n        if not cls._instance:  \n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kw)  \n        return cls._instance  \n  \nclass MyClass(Singleton):  \n    a = 1  \none=MyClass()  \ntwo=MyClass()  \nprint(id(one),id(two))  \n```\n结果：id相同  \n在上面的代码中，我们将类的实例和一个类变量 _instance 关联起来，  \n如果 cls._instance 为 None 则创建实例，否则直接返回 cls._instance。  \n\n### 方法二\n```python\n# 有时候我们并不关心生成的实例是否具有同一id，而只关心其状态和行为方式。  \n# 我们可以允许许多个实例被创建，但所有的实例都共享状态和行为方式：  \n  \nclass Borg(object):     \n    _shared_state={}     \n    def __new__(cls,*args,**kwargs):       \n        obj=super(Borg,cls).__new__(cls,*args,**kwargs)       \n        obj.__dict__=cls._shared_state       \n        return obj   \n```\n>将所有实例的__dict__指向同一个字典，这样实例就共享相同的方法和属性。  \n\n>对任何实例的名字属性的设置，无论是在__init__中修改还是直接修改，所有的实例都会受到影响。\n\n>不过实例的id是不同的。要保证类实例能共享属性，但不和子类共享，注意使用cls._shared_state,  \n\n>而不是Borg._shared_state。  \n>因为实例是不同的id，所以每个实例都可以做字典的key： \n\n如果这种行为不是你想要的，可以为Borg类添加__eq__和__hash__方法，  \n使其更接近于单例模式的行为：  \n```python\nclass Borg(object):     \n    _shared_state={}     \n    def __new__(cls,*args,**kwargs):       \n        obj=super(Borg,cls).__new__(cls,*args,**kwargs)       \n        obj.__dict__=cls._shared_state       \n        return obj     \n    def __hash__(self):       \n        return 1    \n    def __eq__(self,other):       \n        try:         \n            return self.__dict__ is other.__dict__       \n        except:         \n            return False  \n\n\nif __name__=='__main__':     \n    class Example(Borg):       \n        pass    \n    a=Example()     \n    b=Example()     \n    c=Example()     \n    adict={}     \n    j=0    \n    for i in a,b,c:       \n        adict[i]=j       \n        j+=1    \n    for i in a,b,c:       \n        print(adict[i])  \n\n# 所有的实例都能当一个key使用了。  \n```\n### 方法三\n\n当你编写一个类的时候，某种机制会使用类名字，基类元组，类字典来创建一个类对象。新型类中这种机制默认为type，而且这种机制是可编程的，称为元类__metaclass__ 。\n```python\nclass Singleton(type):     \n    def __init__(self,name,bases,class_dict):       \n        super(Singleton,self).__init__(name,bases,class_dict)       \n        self._instance=None    \n    def __call__(self,*args,**kwargs):       \n        if self._instance is None:         \n            self._instance=super(Singleton,self).__call__(*args,**kwargs)    \n        return self._instance   \nif __name__=='__main__':     \n    class A(object):       \n        __metaclass__=Singleton         \n    a=A()     \n    b=A()     \n    print (id(a),id(b))  \n# 结果：  \n# 34248016 34248016  \n# id是相同的。 \n``` \n- 例子中我们构造了一个Singleton元类，并使用__call__方法使其能够模拟函数的行为。  \n- 构造类A时，将其元类设为Singleton，那么创建类对象A时，行为发生如下：  \n- A=Singleton(name,bases,class_dict),A其实为Singleton类的一个实例。  \n- 创建A的实例时，A()=Singleton(name,bases,class_dict)()=Singleton(name,bases,class_dict).\\_\\_call__()，这样就将A的所有实例都指向了A的属性_instance上，这种方法与方法1其实是相同的。  \n\n### 方法四\npython中的模块module在程序中只被加载一次，本身就是单例的。可以直接写一个模块，将你需要的方法和属性，写在模块中当做函数和模块作用域的全局变量即可，根本不需要写类。 \n```python\nclass _singleton(object):     \n    class ConstError(TypeError):       \n        pass    \n    def __setattr__(self,name,value):       \n        if name in self.__dict__:         \n            raise self.ConstError       \n            self.__dict__[name]=value     \n    def __delattr__(self,name):       \n        if name in self.__dict__:         \n            raise self.ConstError       \n        raise NameError   \nimport sys   \nsys.modules[__name__]=_singleton()   \n# python并不会对sys.modules进行检查以确保他们是模块对象，  \n# 我们利用这一点将模块绑定向一个类对象，而且以后都会绑定向同一个对象了。  \n# 将代码存放在single.py中： \n```\n```\nimport single   \nsingle.a=1  \nsingle.a=2   \n  \nConstError  \n  \n>>> del single.a  \nConstError   \n```\n### 方法五\n```python\n# 最简单的方法：  \n  \nclass singleton(object):     \n    pass  \nsingleton=singleton()   \n# 将名字singleton绑定到实例上，singleton就是它自己类的唯一对象了\n```\n\n","source":"_posts/list去重和单例.md","raw":"---\ntitle: list去重和单例\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 基础\ncategories:\n  - python\n  - 基础\nkeywords:\n  - 单例\n  - 列表去重\ntop: 77\nabbrlink: 2767789526\ndate: 2022-03-03 16:11:51\n---\n\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n## python里面re模块match()和search()的区别\n- match()函数指检测re是不是在str的开始位置匹配\n- search()会扫描整个str查找匹配，会扫描整个字符串并返回第一个成功的匹配\n\n也就是说match()只有在0位置匹配成功的话才有返回，如果不是开始位置匹配成功的话，返回none\n\n## python传递可变默认参数类型，默认指向同一个引用\n<!-- more -->\n```python\ndef f(x,l=[]):  \n    for i in range(x):  \n        l.append(i*i)  \n    print(l)  \nf(2)#[0,1]  \nf(3,[3,2,1])#[3,2,1,0,1,4]  \nf(3)#[0,1,0,1,4]  \n```\n## 列表的去重方法\n- 集合方法\n```python\nli = [1, 1, 2, 3, 3, 4, 4, 5, 5, 6]  \na = []  \n# 列表去重方法一：集合方法  \nb = set(li)  \nprint(b) \n```\n- 遍历统计次数，删除重复选项 \n```python\nfor i in li:  \n    while li.count(i) > 1:  \n        del li[li.index(i)]  \nprint(li) \n```\n- 遍历列表，添加新列表对比 \n```python\na = []  \nfor i in li:  \n    if i in li:  \n        if i not in a:  \n            a.append(i)  \nprint(a)  \n```\n- 先对元素进行排序，然后从列表的最后开始扫描\n```python\nlist = [1, 1, 2, 3, 3, 4, 4, 5, 5, 6]  \nif list:  \n    list.sort()  \n    last = list[-1]  \n  \n    for i in range(len(list)-2,-1,-1):  \n        if last == list[i]:  \n            del list[i]  \n        else:last = list[i]  \n  \nprint(list)  \n```\n- 利用map的fromkeys来自动过滤重复值\n```python\nl1 = [1, 1, 2, 3, 3, 4, 4, 5, 5, 6]  \nl2 = {}.fromkeys(l1).keys()  \nprint(l2)  \n```\n\n## 单例\n所谓单例，是指一个类的实例从始至终只能被创建一次。 \n\n### 方法一\n```python\n# 如果想使得某个类从始至终最多只有一个实例，使用__new__方法会很简单。Python中类是通过__new__来创建实例的：  \n  \nclass Singleton(object):  \n    _instance = None  \n  \n    def __new__(cls, *args, **kw):  \n        if not cls._instance:  \n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kw)  \n        return cls._instance  \n  \nclass MyClass(Singleton):  \n    a = 1  \none=MyClass()  \ntwo=MyClass()  \nprint(id(one),id(two))  \n```\n结果：id相同  \n在上面的代码中，我们将类的实例和一个类变量 _instance 关联起来，  \n如果 cls._instance 为 None 则创建实例，否则直接返回 cls._instance。  \n\n### 方法二\n```python\n# 有时候我们并不关心生成的实例是否具有同一id，而只关心其状态和行为方式。  \n# 我们可以允许许多个实例被创建，但所有的实例都共享状态和行为方式：  \n  \nclass Borg(object):     \n    _shared_state={}     \n    def __new__(cls,*args,**kwargs):       \n        obj=super(Borg,cls).__new__(cls,*args,**kwargs)       \n        obj.__dict__=cls._shared_state       \n        return obj   \n```\n>将所有实例的__dict__指向同一个字典，这样实例就共享相同的方法和属性。  \n\n>对任何实例的名字属性的设置，无论是在__init__中修改还是直接修改，所有的实例都会受到影响。\n\n>不过实例的id是不同的。要保证类实例能共享属性，但不和子类共享，注意使用cls._shared_state,  \n\n>而不是Borg._shared_state。  \n>因为实例是不同的id，所以每个实例都可以做字典的key： \n\n如果这种行为不是你想要的，可以为Borg类添加__eq__和__hash__方法，  \n使其更接近于单例模式的行为：  \n```python\nclass Borg(object):     \n    _shared_state={}     \n    def __new__(cls,*args,**kwargs):       \n        obj=super(Borg,cls).__new__(cls,*args,**kwargs)       \n        obj.__dict__=cls._shared_state       \n        return obj     \n    def __hash__(self):       \n        return 1    \n    def __eq__(self,other):       \n        try:         \n            return self.__dict__ is other.__dict__       \n        except:         \n            return False  \n\n\nif __name__=='__main__':     \n    class Example(Borg):       \n        pass    \n    a=Example()     \n    b=Example()     \n    c=Example()     \n    adict={}     \n    j=0    \n    for i in a,b,c:       \n        adict[i]=j       \n        j+=1    \n    for i in a,b,c:       \n        print(adict[i])  \n\n# 所有的实例都能当一个key使用了。  \n```\n### 方法三\n\n当你编写一个类的时候，某种机制会使用类名字，基类元组，类字典来创建一个类对象。新型类中这种机制默认为type，而且这种机制是可编程的，称为元类__metaclass__ 。\n```python\nclass Singleton(type):     \n    def __init__(self,name,bases,class_dict):       \n        super(Singleton,self).__init__(name,bases,class_dict)       \n        self._instance=None    \n    def __call__(self,*args,**kwargs):       \n        if self._instance is None:         \n            self._instance=super(Singleton,self).__call__(*args,**kwargs)    \n        return self._instance   \nif __name__=='__main__':     \n    class A(object):       \n        __metaclass__=Singleton         \n    a=A()     \n    b=A()     \n    print (id(a),id(b))  \n# 结果：  \n# 34248016 34248016  \n# id是相同的。 \n``` \n- 例子中我们构造了一个Singleton元类，并使用__call__方法使其能够模拟函数的行为。  \n- 构造类A时，将其元类设为Singleton，那么创建类对象A时，行为发生如下：  \n- A=Singleton(name,bases,class_dict),A其实为Singleton类的一个实例。  \n- 创建A的实例时，A()=Singleton(name,bases,class_dict)()=Singleton(name,bases,class_dict).\\_\\_call__()，这样就将A的所有实例都指向了A的属性_instance上，这种方法与方法1其实是相同的。  \n\n### 方法四\npython中的模块module在程序中只被加载一次，本身就是单例的。可以直接写一个模块，将你需要的方法和属性，写在模块中当做函数和模块作用域的全局变量即可，根本不需要写类。 \n```python\nclass _singleton(object):     \n    class ConstError(TypeError):       \n        pass    \n    def __setattr__(self,name,value):       \n        if name in self.__dict__:         \n            raise self.ConstError       \n            self.__dict__[name]=value     \n    def __delattr__(self,name):       \n        if name in self.__dict__:         \n            raise self.ConstError       \n        raise NameError   \nimport sys   \nsys.modules[__name__]=_singleton()   \n# python并不会对sys.modules进行检查以确保他们是模块对象，  \n# 我们利用这一点将模块绑定向一个类对象，而且以后都会绑定向同一个对象了。  \n# 将代码存放在single.py中： \n```\n```\nimport single   \nsingle.a=1  \nsingle.a=2   \n  \nConstError  \n  \n>>> del single.a  \nConstError   \n```\n### 方法五\n```python\n# 最简单的方法：  \n  \nclass singleton(object):     \n    pass  \nsingleton=singleton()   \n# 将名字singleton绑定到实例上，singleton就是它自己类的唯一对象了\n```\n\n","slug":"list去重和单例","published":1,"updated":"2022-03-13T11:49:16.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde076000h9jx3e58vbwrg","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><h2 id=\"python里面re模块match-和search-的区别\"><a href=\"#python里面re模块match-和search-的区别\" class=\"headerlink\" title=\"python里面re模块match()和search()的区别\"></a>python里面re模块match()和search()的区别</h2><ul><li>match()函数指检测re是不是在str的开始位置匹配</li><li>search()会扫描整个str查找匹配，会扫描整个字符串并返回第一个成功的匹配</li></ul><p>也就是说match()只有在0位置匹配成功的话才有返回，如果不是开始位置匹配成功的话，返回none</p><h2 id=\"python传递可变默认参数类型，默认指向同一个引用\"><a href=\"#python传递可变默认参数类型，默认指向同一个引用\" class=\"headerlink\" title=\"python传递可变默认参数类型，默认指向同一个引用\"></a>python传递可变默认参数类型，默认指向同一个引用</h2><a id=\"more\"></a><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x,l=[])</span>:</span>  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(x):  </span><br><span class=\"line\">        l.append(i*i)  </span><br><span class=\"line\">    print(l)  </span><br><span class=\"line\">f(<span class=\"number\">2</span>)<span class=\"comment\">#[0,1]  </span></span><br><span class=\"line\">f(<span class=\"number\">3</span>,[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>])<span class=\"comment\">#[3,2,1,0,1,4]  </span></span><br><span class=\"line\">f(<span class=\"number\">3</span>)<span class=\"comment\">#[0,1,0,1,4]</span></span><br></pre></td></tr></table></figure><h2 id=\"列表的去重方法\"><a href=\"#列表的去重方法\" class=\"headerlink\" title=\"列表的去重方法\"></a>列表的去重方法</h2><ul><li>集合方法<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]  </span><br><span class=\"line\">a = []  </span><br><span class=\"line\"><span class=\"comment\"># 列表去重方法一：集合方法  </span></span><br><span class=\"line\">b = set(li)  </span><br><span class=\"line\">print(b)</span><br></pre></td></tr></table></figure></li><li>遍历统计次数，删除重复选项<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> li:  </span><br><span class=\"line\">    <span class=\"keyword\">while</span> li.count(i) &gt; <span class=\"number\">1</span>:  </span><br><span class=\"line\">        <span class=\"keyword\">del</span> li[li.index(i)]  </span><br><span class=\"line\">print(li)</span><br></pre></td></tr></table></figure></li><li>遍历列表，添加新列表对比<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = []  </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> li:  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> li:  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> a:  </span><br><span class=\"line\">            a.append(i)  </span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure></li><li>先对元素进行排序，然后从列表的最后开始扫描<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]  </span><br><span class=\"line\"><span class=\"keyword\">if</span> list:  </span><br><span class=\"line\">    list.sort()  </span><br><span class=\"line\">    last = list[<span class=\"number\">-1</span>]  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(list)<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> last == list[i]:  </span><br><span class=\"line\">            <span class=\"keyword\">del</span> list[i]  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:last = list[i]  </span><br><span class=\"line\">  </span><br><span class=\"line\">print(list)</span><br></pre></td></tr></table></figure></li><li>利用map的fromkeys来自动过滤重复值<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">l1 = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]  </span><br><span class=\"line\">l2 = &#123;&#125;.fromkeys(l1).keys()  </span><br><span class=\"line\">print(l2)</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"单例\"><a href=\"#单例\" class=\"headerlink\" title=\"单例\"></a>单例</h2><p>所谓单例，是指一个类的实例从始至终只能被创建一次。</p><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果想使得某个类从始至终最多只有一个实例，使用__new__方法会很简单。Python中类是通过__new__来创建实例的：  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(object)</span>:</span>  </span><br><span class=\"line\">    _instance = <span class=\"literal\">None</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kw)</span>:</span>  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cls._instance:  </span><br><span class=\"line\">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kw)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">(Singleton)</span>:</span>  </span><br><span class=\"line\">    a = <span class=\"number\">1</span>  </span><br><span class=\"line\">one=MyClass()  </span><br><span class=\"line\">two=MyClass()  </span><br><span class=\"line\">print(id(one),id(two))</span><br></pre></td></tr></table></figure><p>结果：id相同<br>在上面的代码中，我们将类的实例和一个类变量 _instance 关联起来，<br>如果 cls._instance 为 None 则创建实例，否则直接返回 cls._instance。</p><h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 有时候我们并不关心生成的实例是否具有同一id，而只关心其状态和行为方式。  </span></span><br><span class=\"line\"><span class=\"comment\"># 我们可以允许许多个实例被创建，但所有的实例都共享状态和行为方式：  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Borg</span><span class=\"params\">(object)</span>:</span>     </span><br><span class=\"line\">    _shared_state=&#123;&#125;     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls,*args,**kwargs)</span>:</span>       </span><br><span class=\"line\">        obj=super(Borg,cls).__new__(cls,*args,**kwargs)       </span><br><span class=\"line\">        obj.__dict__=cls._shared_state       </span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br></pre></td></tr></table></figure><blockquote><p>将所有实例的<strong>dict</strong>指向同一个字典，这样实例就共享相同的方法和属性。</p></blockquote><blockquote><p>对任何实例的名字属性的设置，无论是在<strong>init</strong>中修改还是直接修改，所有的实例都会受到影响。</p></blockquote><blockquote><p>不过实例的id是不同的。要保证类实例能共享属性，但不和子类共享，注意使用cls._shared_state,</p></blockquote><blockquote><p>而不是Borg._shared_state。<br>因为实例是不同的id，所以每个实例都可以做字典的key：</p></blockquote><p>如果这种行为不是你想要的，可以为Borg类添加<strong>eq</strong>和<strong>hash</strong>方法，<br>使其更接近于单例模式的行为：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Borg</span><span class=\"params\">(object)</span>:</span>     </span><br><span class=\"line\">    _shared_state=&#123;&#125;     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls,*args,**kwargs)</span>:</span>       </span><br><span class=\"line\">        obj=super(Borg,cls).__new__(cls,*args,**kwargs)       </span><br><span class=\"line\">        obj.__dict__=cls._shared_state       </span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__hash__</span><span class=\"params\">(self)</span>:</span>       </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__eq__</span><span class=\"params\">(self,other)</span>:</span>       </span><br><span class=\"line\">        <span class=\"keyword\">try</span>:         </span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.__dict__ <span class=\"keyword\">is</span> other.__dict__       </span><br><span class=\"line\">        <span class=\"keyword\">except</span>:         </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:     </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span><span class=\"params\">(Borg)</span>:</span>       </span><br><span class=\"line\">        <span class=\"keyword\">pass</span>    </span><br><span class=\"line\">    a=Example()     </span><br><span class=\"line\">    b=Example()     </span><br><span class=\"line\">    c=Example()     </span><br><span class=\"line\">    adict=&#123;&#125;     </span><br><span class=\"line\">    j=<span class=\"number\">0</span>    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> a,b,c:       </span><br><span class=\"line\">        adict[i]=j       </span><br><span class=\"line\">        j+=<span class=\"number\">1</span>    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> a,b,c:       </span><br><span class=\"line\">        print(adict[i])  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 所有的实例都能当一个key使用了。</span></span><br></pre></td></tr></table></figure><h3 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h3><p>当你编写一个类的时候，某种机制会使用类名字，基类元组，类字典来创建一个类对象。新型类中这种机制默认为type，而且这种机制是可编程的，称为元类<strong>metaclass</strong> 。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(type)</span>:</span>     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,bases,class_dict)</span>:</span>       </span><br><span class=\"line\">        super(Singleton,self).__init__(name,bases,class_dict)       </span><br><span class=\"line\">        self._instance=<span class=\"literal\">None</span>    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self,*args,**kwargs)</span>:</span>       </span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._instance <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:         </span><br><span class=\"line\">            self._instance=super(Singleton,self).__call__(*args,**kwargs)    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._instance   </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:     </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span>       </span><br><span class=\"line\">        __metaclass__=Singleton         </span><br><span class=\"line\">    a=A()     </span><br><span class=\"line\">    b=A()     </span><br><span class=\"line\">    <span class=\"keyword\">print</span> (id(a),id(b))  </span><br><span class=\"line\"><span class=\"comment\"># 结果：  </span></span><br><span class=\"line\"><span class=\"comment\"># 34248016 34248016  </span></span><br><span class=\"line\"><span class=\"comment\"># id是相同的。 </span></span><br><span class=\"line\">``` </span><br><span class=\"line\">- 例子中我们构造了一个Singleton元类，并使用__call__方法使其能够模拟函数的行为。  </span><br><span class=\"line\">- 构造类A时，将其元类设为Singleton，那么创建类对象A时，行为发生如下：  </span><br><span class=\"line\">- A=Singleton(name,bases,class_dict),A其实为Singleton类的一个实例。  </span><br><span class=\"line\">- 创建A的实例时，A()=Singleton(name,bases,class_dict)()=Singleton(name,bases,class_dict).\\_\\_call__()，这样就将A的所有实例都指向了A的属性_instance上，这种方法与方法<span class=\"number\">1</span>其实是相同的。  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 方法四</span></span><br><span class=\"line\">python中的模块module在程序中只被加载一次，本身就是单例的。可以直接写一个模块，将你需要的方法和属性，写在模块中当做函数和模块作用域的全局变量即可，根本不需要写类。 </span><br><span class=\"line\">```python</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_singleton</span><span class=\"params\">(object)</span>:</span>     </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConstError</span><span class=\"params\">(TypeError)</span>:</span>       </span><br><span class=\"line\">        <span class=\"keyword\">pass</span>    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self,name,value)</span>:</span>       </span><br><span class=\"line\">        <span class=\"keyword\">if</span> name <span class=\"keyword\">in</span> self.__dict__:         </span><br><span class=\"line\">            <span class=\"keyword\">raise</span> self.ConstError       </span><br><span class=\"line\">            self.__dict__[name]=value     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__delattr__</span><span class=\"params\">(self,name)</span>:</span>       </span><br><span class=\"line\">        <span class=\"keyword\">if</span> name <span class=\"keyword\">in</span> self.__dict__:         </span><br><span class=\"line\">            <span class=\"keyword\">raise</span> self.ConstError       </span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NameError   </span><br><span class=\"line\"><span class=\"keyword\">import</span> sys   </span><br><span class=\"line\">sys.modules[__name__]=_singleton()   </span><br><span class=\"line\"><span class=\"comment\"># python并不会对sys.modules进行检查以确保他们是模块对象，  </span></span><br><span class=\"line\"><span class=\"comment\"># 我们利用这一点将模块绑定向一个类对象，而且以后都会绑定向同一个对象了。  </span></span><br><span class=\"line\"><span class=\"comment\"># 将代码存放在single.py中：</span></span><br></pre></td></tr></table></figure><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import single   </span><br><span class=\"line\">single.<span class=\"attribute\">a</span>=1  </span><br><span class=\"line\">single.<span class=\"attribute\">a</span>=2   </span><br><span class=\"line\">  </span><br><span class=\"line\">ConstError  </span><br><span class=\"line\">  </span><br><span class=\"line\">&gt;&gt;&gt; del single.a  </span><br><span class=\"line\">ConstError</span><br></pre></td></tr></table></figure><h3 id=\"方法五\"><a href=\"#方法五\" class=\"headerlink\" title=\"方法五\"></a>方法五</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 最简单的方法：  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">singleton</span><span class=\"params\">(object)</span>:</span>     </span><br><span class=\"line\">    <span class=\"keyword\">pass</span>  </span><br><span class=\"line\">singleton=singleton()   </span><br><span class=\"line\"><span class=\"comment\"># 将名字singleton绑定到实例上，singleton就是它自己类的唯一对象了</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><h2 id=\"python里面re模块match-和search-的区别\"><a href=\"#python里面re模块match-和search-的区别\" class=\"headerlink\" title=\"python里面re模块match()和search()的区别\"></a>python里面re模块match()和search()的区别</h2><ul><li>match()函数指检测re是不是在str的开始位置匹配</li><li>search()会扫描整个str查找匹配，会扫描整个字符串并返回第一个成功的匹配</li></ul><p>也就是说match()只有在0位置匹配成功的话才有返回，如果不是开始位置匹配成功的话，返回none</p><h2 id=\"python传递可变默认参数类型，默认指向同一个引用\"><a href=\"#python传递可变默认参数类型，默认指向同一个引用\" class=\"headerlink\" title=\"python传递可变默认参数类型，默认指向同一个引用\"></a>python传递可变默认参数类型，默认指向同一个引用</h2>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x,l=[])</span>:</span>  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(x):  </span><br><span class=\"line\">        l.append(i*i)  </span><br><span class=\"line\">    print(l)  </span><br><span class=\"line\">f(<span class=\"number\">2</span>)<span class=\"comment\">#[0,1]  </span></span><br><span class=\"line\">f(<span class=\"number\">3</span>,[<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>])<span class=\"comment\">#[3,2,1,0,1,4]  </span></span><br><span class=\"line\">f(<span class=\"number\">3</span>)<span class=\"comment\">#[0,1,0,1,4]</span></span><br></pre></td></tr></table></figure><h2 id=\"列表的去重方法\"><a href=\"#列表的去重方法\" class=\"headerlink\" title=\"列表的去重方法\"></a>列表的去重方法</h2><ul><li>集合方法<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">li = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]  </span><br><span class=\"line\">a = []  </span><br><span class=\"line\"><span class=\"comment\"># 列表去重方法一：集合方法  </span></span><br><span class=\"line\">b = set(li)  </span><br><span class=\"line\">print(b)</span><br></pre></td></tr></table></figure></li><li>遍历统计次数，删除重复选项<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> li:  </span><br><span class=\"line\">    <span class=\"keyword\">while</span> li.count(i) &gt; <span class=\"number\">1</span>:  </span><br><span class=\"line\">        <span class=\"keyword\">del</span> li[li.index(i)]  </span><br><span class=\"line\">print(li)</span><br></pre></td></tr></table></figure></li><li>遍历列表，添加新列表对比<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = []  </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> li:  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> li:  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> i <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> a:  </span><br><span class=\"line\">            a.append(i)  </span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure></li><li>先对元素进行排序，然后从列表的最后开始扫描<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]  </span><br><span class=\"line\"><span class=\"keyword\">if</span> list:  </span><br><span class=\"line\">    list.sort()  </span><br><span class=\"line\">    last = list[<span class=\"number\">-1</span>]  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(list)<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> last == list[i]:  </span><br><span class=\"line\">            <span class=\"keyword\">del</span> list[i]  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:last = list[i]  </span><br><span class=\"line\">  </span><br><span class=\"line\">print(list)</span><br></pre></td></tr></table></figure></li><li>利用map的fromkeys来自动过滤重复值<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">l1 = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]  </span><br><span class=\"line\">l2 = &#123;&#125;.fromkeys(l1).keys()  </span><br><span class=\"line\">print(l2)</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"单例\"><a href=\"#单例\" class=\"headerlink\" title=\"单例\"></a>单例</h2><p>所谓单例，是指一个类的实例从始至终只能被创建一次。</p><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果想使得某个类从始至终最多只有一个实例，使用__new__方法会很简单。Python中类是通过__new__来创建实例的：  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(object)</span>:</span>  </span><br><span class=\"line\">    _instance = <span class=\"literal\">None</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kw)</span>:</span>  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cls._instance:  </span><br><span class=\"line\">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kw)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span><span class=\"params\">(Singleton)</span>:</span>  </span><br><span class=\"line\">    a = <span class=\"number\">1</span>  </span><br><span class=\"line\">one=MyClass()  </span><br><span class=\"line\">two=MyClass()  </span><br><span class=\"line\">print(id(one),id(two))</span><br></pre></td></tr></table></figure><p>结果：id相同<br>在上面的代码中，我们将类的实例和一个类变量 _instance 关联起来，<br>如果 cls._instance 为 None 则创建实例，否则直接返回 cls._instance。</p><h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 有时候我们并不关心生成的实例是否具有同一id，而只关心其状态和行为方式。  </span></span><br><span class=\"line\"><span class=\"comment\"># 我们可以允许许多个实例被创建，但所有的实例都共享状态和行为方式：  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Borg</span><span class=\"params\">(object)</span>:</span>     </span><br><span class=\"line\">    _shared_state=&#123;&#125;     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls,*args,**kwargs)</span>:</span>       </span><br><span class=\"line\">        obj=super(Borg,cls).__new__(cls,*args,**kwargs)       </span><br><span class=\"line\">        obj.__dict__=cls._shared_state       </span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br></pre></td></tr></table></figure><blockquote><p>将所有实例的<strong>dict</strong>指向同一个字典，这样实例就共享相同的方法和属性。</p></blockquote><blockquote><p>对任何实例的名字属性的设置，无论是在<strong>init</strong>中修改还是直接修改，所有的实例都会受到影响。</p></blockquote><blockquote><p>不过实例的id是不同的。要保证类实例能共享属性，但不和子类共享，注意使用cls._shared_state,</p></blockquote><blockquote><p>而不是Borg._shared_state。<br>因为实例是不同的id，所以每个实例都可以做字典的key：</p></blockquote><p>如果这种行为不是你想要的，可以为Borg类添加<strong>eq</strong>和<strong>hash</strong>方法，<br>使其更接近于单例模式的行为：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Borg</span><span class=\"params\">(object)</span>:</span>     </span><br><span class=\"line\">    _shared_state=&#123;&#125;     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls,*args,**kwargs)</span>:</span>       </span><br><span class=\"line\">        obj=super(Borg,cls).__new__(cls,*args,**kwargs)       </span><br><span class=\"line\">        obj.__dict__=cls._shared_state       </span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__hash__</span><span class=\"params\">(self)</span>:</span>       </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__eq__</span><span class=\"params\">(self,other)</span>:</span>       </span><br><span class=\"line\">        <span class=\"keyword\">try</span>:         </span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.__dict__ <span class=\"keyword\">is</span> other.__dict__       </span><br><span class=\"line\">        <span class=\"keyword\">except</span>:         </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:     </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span><span class=\"params\">(Borg)</span>:</span>       </span><br><span class=\"line\">        <span class=\"keyword\">pass</span>    </span><br><span class=\"line\">    a=Example()     </span><br><span class=\"line\">    b=Example()     </span><br><span class=\"line\">    c=Example()     </span><br><span class=\"line\">    adict=&#123;&#125;     </span><br><span class=\"line\">    j=<span class=\"number\">0</span>    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> a,b,c:       </span><br><span class=\"line\">        adict[i]=j       </span><br><span class=\"line\">        j+=<span class=\"number\">1</span>    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> a,b,c:       </span><br><span class=\"line\">        print(adict[i])  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 所有的实例都能当一个key使用了。</span></span><br></pre></td></tr></table></figure><h3 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h3><p>当你编写一个类的时候，某种机制会使用类名字，基类元组，类字典来创建一个类对象。新型类中这种机制默认为type，而且这种机制是可编程的，称为元类<strong>metaclass</strong> 。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(type)</span>:</span>     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,bases,class_dict)</span>:</span>       </span><br><span class=\"line\">        super(Singleton,self).__init__(name,bases,class_dict)       </span><br><span class=\"line\">        self._instance=<span class=\"literal\">None</span>    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self,*args,**kwargs)</span>:</span>       </span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._instance <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:         </span><br><span class=\"line\">            self._instance=super(Singleton,self).__call__(*args,**kwargs)    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._instance   </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:     </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span>       </span><br><span class=\"line\">        __metaclass__=Singleton         </span><br><span class=\"line\">    a=A()     </span><br><span class=\"line\">    b=A()     </span><br><span class=\"line\">    <span class=\"keyword\">print</span> (id(a),id(b))  </span><br><span class=\"line\"><span class=\"comment\"># 结果：  </span></span><br><span class=\"line\"><span class=\"comment\"># 34248016 34248016  </span></span><br><span class=\"line\"><span class=\"comment\"># id是相同的。 </span></span><br><span class=\"line\">``` </span><br><span class=\"line\">- 例子中我们构造了一个Singleton元类，并使用__call__方法使其能够模拟函数的行为。  </span><br><span class=\"line\">- 构造类A时，将其元类设为Singleton，那么创建类对象A时，行为发生如下：  </span><br><span class=\"line\">- A=Singleton(name,bases,class_dict),A其实为Singleton类的一个实例。  </span><br><span class=\"line\">- 创建A的实例时，A()=Singleton(name,bases,class_dict)()=Singleton(name,bases,class_dict).\\_\\_call__()，这样就将A的所有实例都指向了A的属性_instance上，这种方法与方法<span class=\"number\">1</span>其实是相同的。  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 方法四</span></span><br><span class=\"line\">python中的模块module在程序中只被加载一次，本身就是单例的。可以直接写一个模块，将你需要的方法和属性，写在模块中当做函数和模块作用域的全局变量即可，根本不需要写类。 </span><br><span class=\"line\">```python</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_singleton</span><span class=\"params\">(object)</span>:</span>     </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConstError</span><span class=\"params\">(TypeError)</span>:</span>       </span><br><span class=\"line\">        <span class=\"keyword\">pass</span>    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self,name,value)</span>:</span>       </span><br><span class=\"line\">        <span class=\"keyword\">if</span> name <span class=\"keyword\">in</span> self.__dict__:         </span><br><span class=\"line\">            <span class=\"keyword\">raise</span> self.ConstError       </span><br><span class=\"line\">            self.__dict__[name]=value     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__delattr__</span><span class=\"params\">(self,name)</span>:</span>       </span><br><span class=\"line\">        <span class=\"keyword\">if</span> name <span class=\"keyword\">in</span> self.__dict__:         </span><br><span class=\"line\">            <span class=\"keyword\">raise</span> self.ConstError       </span><br><span class=\"line\">        <span class=\"keyword\">raise</span> NameError   </span><br><span class=\"line\"><span class=\"keyword\">import</span> sys   </span><br><span class=\"line\">sys.modules[__name__]=_singleton()   </span><br><span class=\"line\"><span class=\"comment\"># python并不会对sys.modules进行检查以确保他们是模块对象，  </span></span><br><span class=\"line\"><span class=\"comment\"># 我们利用这一点将模块绑定向一个类对象，而且以后都会绑定向同一个对象了。  </span></span><br><span class=\"line\"><span class=\"comment\"># 将代码存放在single.py中：</span></span><br></pre></td></tr></table></figure><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import single   </span><br><span class=\"line\">single.<span class=\"attribute\">a</span>=1  </span><br><span class=\"line\">single.<span class=\"attribute\">a</span>=2   </span><br><span class=\"line\">  </span><br><span class=\"line\">ConstError  </span><br><span class=\"line\">  </span><br><span class=\"line\">&gt;&gt;&gt; del single.a  </span><br><span class=\"line\">ConstError</span><br></pre></td></tr></table></figure><h3 id=\"方法五\"><a href=\"#方法五\" class=\"headerlink\" title=\"方法五\"></a>方法五</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 最简单的方法：  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">singleton</span><span class=\"params\">(object)</span>:</span>     </span><br><span class=\"line\">    <span class=\"keyword\">pass</span>  </span><br><span class=\"line\">singleton=singleton()   </span><br><span class=\"line\"><span class=\"comment\"># 将名字singleton绑定到实例上，singleton就是它自己类的唯一对象了</span></span><br></pre></td></tr></table></figure>"},{"title":"mysql导入导出数据","type":"categories","copyright":true,"abbrlink":1191503966,"date":"2022-02-27T13:50:13.000Z","_content":"\n## mysql导入导出数据\nmysql数据库导出数据的命令\n- mysqldump -u用戶名 -p密码 -d 数据库名 表名 > 脚本名;\n\n1、导出整个数据库结构和数据\n```\nmysqldump -h localhost -uroot -p123456 database > dump.sql\n```\n\n2、导出单个数据表结构和数据\n```\nmysqldump -h localhost -uroot -p123456  database table > dump.sql\n```\n<!-- more -->\n\n3、导出整个数据库结构（不包含数据）\n```\nmysqldump -h localhost -uroot -p123456  -d database > dump.sql\n```\n4、导出单个数据表结构（不包含数据）\n```\nmysqldump -h localhost -uroot -p123456  -d database table > dump.sql\n```\n\n### Linux 下：\n#### 一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\n\n1、导出数据和表结构：\n```\nmysqldump -u用户名 -p密码 数据库名 > 数据库名.sql\n#/usr/local/mysql/bin/   mysqldump -uroot -p abc > abc.sql\n```\n敲回车后会提示输入密码\n\n2、只导出表结构\n```\nmysqldump -u用户名 -p密码 -d 数据库名 > 数据库名.sql\n#/usr/local/mysql/bin/   mysqldump -uroot -p -d abc > abc.sql\n```\n注：/usr/local/mysql/bin/  --->  mysql的data目录\n\n#### 二、导入数据库\n\n1、首先建空数据库\n```\nmysql>create database abc;\n```\n2、导入数据库\n- 方法一：\n\n（1）选择数据库\n```\nmysql>use abc;\n```\n（2）设置数据库编码\n```\nmysql>set names utf8;\n```\n（3）导入数据（注意sql文件的路径）\n```\nmysql>source /home/abc/abc.sql;\n```\n- 方法二：\n```\nmysql -u用户名 -p密码 数据库名 < 数据库名.sql\n#mysql -uabc_f -p abc < abc.sql\n```\n\n***\n\n### windows下：\n1.导出整个数据库\n```\nmysqldump -u 用户名 -p 数据库名 > 导出的文件名\nmysqldump -u dbuser -p dbname > dbname.sql\n```\n\n2.导出一个表\n```\nmysqldump -u 用户名 -p 数据库名 表名> 导出的文件名\nmysqldump -u dbuser -p dbname users> dbname_users.sql\n```\n\n3.导出一个数据库结构\n```\nmysqldump -u dbuser -p -d --add-drop-table dbname >d:/dbname_db.sql\n```\n-d 没有数据 --add-drop-table 在每个create语句之前增加一个drop table\n\n4.导入数据库\n\n常用source 命令\n进入mysql数据库控制台，如\nmysql -u root -p\nmysql>use 数据库\n然后使用source命令，后面参数为脚本文件(如这里用到的.sql)\nmysql>source d:/dbname.sql","source":"_posts/mysql导入导出数据.md","raw":"---\ntitle: mysql导入导出数据\ntype: categories\ncopyright: true\ntags:\n  - 数据库\n  - mysql\ncategories:\n  - 数据库\n  - mysql\nabbrlink: 1191503966\ndate: 2022-02-27 21:50:13\n---\n\n## mysql导入导出数据\nmysql数据库导出数据的命令\n- mysqldump -u用戶名 -p密码 -d 数据库名 表名 > 脚本名;\n\n1、导出整个数据库结构和数据\n```\nmysqldump -h localhost -uroot -p123456 database > dump.sql\n```\n\n2、导出单个数据表结构和数据\n```\nmysqldump -h localhost -uroot -p123456  database table > dump.sql\n```\n<!-- more -->\n\n3、导出整个数据库结构（不包含数据）\n```\nmysqldump -h localhost -uroot -p123456  -d database > dump.sql\n```\n4、导出单个数据表结构（不包含数据）\n```\nmysqldump -h localhost -uroot -p123456  -d database table > dump.sql\n```\n\n### Linux 下：\n#### 一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\n\n1、导出数据和表结构：\n```\nmysqldump -u用户名 -p密码 数据库名 > 数据库名.sql\n#/usr/local/mysql/bin/   mysqldump -uroot -p abc > abc.sql\n```\n敲回车后会提示输入密码\n\n2、只导出表结构\n```\nmysqldump -u用户名 -p密码 -d 数据库名 > 数据库名.sql\n#/usr/local/mysql/bin/   mysqldump -uroot -p -d abc > abc.sql\n```\n注：/usr/local/mysql/bin/  --->  mysql的data目录\n\n#### 二、导入数据库\n\n1、首先建空数据库\n```\nmysql>create database abc;\n```\n2、导入数据库\n- 方法一：\n\n（1）选择数据库\n```\nmysql>use abc;\n```\n（2）设置数据库编码\n```\nmysql>set names utf8;\n```\n（3）导入数据（注意sql文件的路径）\n```\nmysql>source /home/abc/abc.sql;\n```\n- 方法二：\n```\nmysql -u用户名 -p密码 数据库名 < 数据库名.sql\n#mysql -uabc_f -p abc < abc.sql\n```\n\n***\n\n### windows下：\n1.导出整个数据库\n```\nmysqldump -u 用户名 -p 数据库名 > 导出的文件名\nmysqldump -u dbuser -p dbname > dbname.sql\n```\n\n2.导出一个表\n```\nmysqldump -u 用户名 -p 数据库名 表名> 导出的文件名\nmysqldump -u dbuser -p dbname users> dbname_users.sql\n```\n\n3.导出一个数据库结构\n```\nmysqldump -u dbuser -p -d --add-drop-table dbname >d:/dbname_db.sql\n```\n-d 没有数据 --add-drop-table 在每个create语句之前增加一个drop table\n\n4.导入数据库\n\n常用source 命令\n进入mysql数据库控制台，如\nmysql -u root -p\nmysql>use 数据库\n然后使用source命令，后面参数为脚本文件(如这里用到的.sql)\nmysql>source d:/dbname.sql","slug":"mysql导入导出数据","published":1,"updated":"2022-03-13T11:49:16.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde079000m9jx36u6k7rkj","content":"<h2 id=\"mysql导入导出数据\"><a href=\"#mysql导入导出数据\" class=\"headerlink\" title=\"mysql导入导出数据\"></a>mysql导入导出数据</h2><p>mysql数据库导出数据的命令</p><ul><li>mysqldump -u用戶名 -p密码 -d 数据库名 表名 &gt; 脚本名;</li></ul><p>1、导出整个数据库结构和数据</p><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456 <span class=\"keyword\">database</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure><p>2、导出单个数据表结构和数据</p><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456  <span class=\"keyword\">database</span> <span class=\"keyword\">table</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure><a id=\"more\"></a><p>3、导出整个数据库结构（不包含数据）</p><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456  -d <span class=\"keyword\">database</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure><p>4、导出单个数据表结构（不包含数据）</p><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456  -d <span class=\"keyword\">database</span> <span class=\"keyword\">table</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure><h3 id=\"Linux-下：\"><a href=\"#Linux-下：\" class=\"headerlink\" title=\"Linux 下：\"></a>Linux 下：</h3><h4 id=\"一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\"><a href=\"#一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\" class=\"headerlink\" title=\"一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\"></a>一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：</h4><p>1、导出数据和表结构：</p><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 数据库名 &gt; 数据库名.<span class=\"keyword\">sql</span></span><br><span class=\"line\">#/usr/<span class=\"keyword\">local</span>/mysql/bin/   mysqldump -uroot -p abc &gt; abc.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure><p>敲回车后会提示输入密码</p><p>2、只导出表结构</p><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.<span class=\"keyword\">sql</span></span><br><span class=\"line\">#/usr/<span class=\"keyword\">local</span>/mysql/bin/   mysqldump -uroot -p -d abc &gt; abc.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure><p>注：/usr/local/mysql/bin/ —&gt; mysql的data目录</p><h4 id=\"二、导入数据库\"><a href=\"#二、导入数据库\" class=\"headerlink\" title=\"二、导入数据库\"></a>二、导入数据库</h4><p>1、首先建空数据库</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">create</span> <span class=\"keyword\">database</span> abc;</span><br></pre></td></tr></table></figure><p>2、导入数据库</p><ul><li>方法一：</li></ul><p>（1）选择数据库</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">use</span> <span class=\"title\">abc</span>;</span><br></pre></td></tr></table></figure><p>（2）设置数据库编码</p><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">set</span> names <span class=\"comment\">utf8</span>;</span><br></pre></td></tr></table></figure><p>（3）导入数据（注意sql文件的路径）</p><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">source</span> <span class=\"regexp\">/home/</span>abc<span class=\"regexp\">/abc.sql;</span></span><br></pre></td></tr></table></figure><ul><li>方法二：<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mysql</span> <span class=\"selector-tag\">-u</span>用户名 <span class=\"selector-tag\">-p</span>密码 数据库名 &lt; 数据库名<span class=\"selector-class\">.sql</span></span><br><span class=\"line\"><span class=\"selector-id\">#mysql</span> <span class=\"selector-tag\">-uabc_f</span> <span class=\"selector-tag\">-p</span> <span class=\"selector-tag\">abc</span> &lt; <span class=\"selector-tag\">abc</span><span class=\"selector-class\">.sql</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id=\"windows下：\"><a href=\"#windows下：\" class=\"headerlink\" title=\"windows下：\"></a>windows下：</h3><p>1.导出整个数据库</p><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u 用户名 -p 数据库名 &gt; 导出的文件名</span></span><br><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u dbuser -p dbname &gt; dbname.sql</span></span><br></pre></td></tr></table></figure><p>2.导出一个表</p><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u 用户名 -p 数据库名 表名&gt; 导出的文件名</span></span><br><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u dbuser -p dbname users&gt; dbname_users.sql</span></span><br></pre></td></tr></table></figure><p>3.导出一个数据库结构</p><figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u dbuser -p -d --<span class=\"meta\">add</span>-<span class=\"meta\">drop</span>-<span class=\"meta\">table</span> dbname &gt;d:/dbname_db.sql</span><br></pre></td></tr></table></figure><p>-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table</p><p>4.导入数据库</p><p>常用source 命令<br>进入mysql数据库控制台，如<br>mysql -u root -p<br>mysql&gt;use 数据库<br>然后使用source命令，后面参数为脚本文件(如这里用到的.sql)<br>mysql&gt;source d:/dbname.sql</p>","site":{"data":{}},"excerpt":"<h2 id=\"mysql导入导出数据\"><a href=\"#mysql导入导出数据\" class=\"headerlink\" title=\"mysql导入导出数据\"></a>mysql导入导出数据</h2><p>mysql数据库导出数据的命令</p><ul><li>mysqldump -u用戶名 -p密码 -d 数据库名 表名 &gt; 脚本名;</li></ul><p>1、导出整个数据库结构和数据</p><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456 <span class=\"keyword\">database</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure><p>2、导出单个数据表结构和数据</p><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456  <span class=\"keyword\">database</span> <span class=\"keyword\">table</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>","more":"<p>3、导出整个数据库结构（不包含数据）</p><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456  -d <span class=\"keyword\">database</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure><p>4、导出单个数据表结构（不包含数据）</p><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456  -d <span class=\"keyword\">database</span> <span class=\"keyword\">table</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure><h3 id=\"Linux-下：\"><a href=\"#Linux-下：\" class=\"headerlink\" title=\"Linux 下：\"></a>Linux 下：</h3><h4 id=\"一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\"><a href=\"#一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\" class=\"headerlink\" title=\"一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\"></a>一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：</h4><p>1、导出数据和表结构：</p><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 数据库名 &gt; 数据库名.<span class=\"keyword\">sql</span></span><br><span class=\"line\">#/usr/<span class=\"keyword\">local</span>/mysql/bin/   mysqldump -uroot -p abc &gt; abc.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure><p>敲回车后会提示输入密码</p><p>2、只导出表结构</p><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.<span class=\"keyword\">sql</span></span><br><span class=\"line\">#/usr/<span class=\"keyword\">local</span>/mysql/bin/   mysqldump -uroot -p -d abc &gt; abc.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure><p>注：/usr/local/mysql/bin/ —&gt; mysql的data目录</p><h4 id=\"二、导入数据库\"><a href=\"#二、导入数据库\" class=\"headerlink\" title=\"二、导入数据库\"></a>二、导入数据库</h4><p>1、首先建空数据库</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">create</span> <span class=\"keyword\">database</span> abc;</span><br></pre></td></tr></table></figure><p>2、导入数据库</p><ul><li>方法一：</li></ul><p>（1）选择数据库</p><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">use</span> <span class=\"title\">abc</span>;</span><br></pre></td></tr></table></figure><p>（2）设置数据库编码</p><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">set</span> names <span class=\"comment\">utf8</span>;</span><br></pre></td></tr></table></figure><p>（3）导入数据（注意sql文件的路径）</p><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">source</span> <span class=\"regexp\">/home/</span>abc<span class=\"regexp\">/abc.sql;</span></span><br></pre></td></tr></table></figure><ul><li>方法二：<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mysql</span> <span class=\"selector-tag\">-u</span>用户名 <span class=\"selector-tag\">-p</span>密码 数据库名 &lt; 数据库名<span class=\"selector-class\">.sql</span></span><br><span class=\"line\"><span class=\"selector-id\">#mysql</span> <span class=\"selector-tag\">-uabc_f</span> <span class=\"selector-tag\">-p</span> <span class=\"selector-tag\">abc</span> &lt; <span class=\"selector-tag\">abc</span><span class=\"selector-class\">.sql</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id=\"windows下：\"><a href=\"#windows下：\" class=\"headerlink\" title=\"windows下：\"></a>windows下：</h3><p>1.导出整个数据库</p><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u 用户名 -p 数据库名 &gt; 导出的文件名</span></span><br><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u dbuser -p dbname &gt; dbname.sql</span></span><br></pre></td></tr></table></figure><p>2.导出一个表</p><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u 用户名 -p 数据库名 表名&gt; 导出的文件名</span></span><br><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u dbuser -p dbname users&gt; dbname_users.sql</span></span><br></pre></td></tr></table></figure><p>3.导出一个数据库结构</p><figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u dbuser -p -d --<span class=\"meta\">add</span>-<span class=\"meta\">drop</span>-<span class=\"meta\">table</span> dbname &gt;d:/dbname_db.sql</span><br></pre></td></tr></table></figure><p>-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table</p><p>4.导入数据库</p><p>常用source 命令<br>进入mysql数据库控制台，如<br>mysql -u root -p<br>mysql&gt;use 数据库<br>然后使用source命令，后面参数为脚本文件(如这里用到的.sql)<br>mysql&gt;source d:/dbname.sql</p>"},{"title":"mysql生成sql语句","type":"categories","copyright":true,"abbrlink":2052509888,"date":"2022-02-27T13:26:45.000Z","_content":"\n\n## 使用python自动生成mysql的sql语句\n\n平时我们在工作当中有的时候使用数据库没有用orm模型，这个时候就需要我们手写sql语句，因此写了一个脚本自动来生成sql语句\n\n<!-- more -->\n\n```python\ndef gen_sql(opt='select', data=None, condition=None, table=None):\n    \"\"\"\n    sql语句生成模块\n    :param opt: 操作符，默认是查询select\n    :param data: 数据\n    :param condition: 条件\n    :param table: 表名\n    :return:\n    \"\"\"\n    if not data or not isinstance(data, dict):\n        print(\"没有需要处理的数据或者数据格式不是字典类型\")\n        return\n    if not table:\n        print(\"缺少表名\")\n        return\n    where_str = None  # sql判断条件\n    if condition and isinstance(condition, dict):\n        where_str = ' and '.join([f\"{key}='{value}'\" if isinstance(value, str) else f\"{key}={value}\"\n                                  for key, value in condition.items()])\n    k_list, v_list = [], []\n    for k, v in data.items():\n        k_list.append(k)\n        v_list.append(v)\n    key_str = ','.join(k_list)\n\n    message = None  # 返回的信息\n    if opt.lower() == 'select':  # 查询\n        if not where_str:\n            sql = \"select {} from {}\".format(key_str, table)\n        else:\n            sql = \"select {} from {} where {}\".format(key_str, table, where_str)\n    elif opt.lower() == 'insert':  # 新增\n        sql = \"insert ignore into {}({}) values {}\".format(table, key_str, tuple(v_list))\n    elif opt.lower() == 'update':  # 更新\n        set_value = ' and '.join([f\"{key}='{value}'\" if isinstance(value, str) else f\"{key}={value}\"\n                                  for key, value in data.items()])\n        sql = \"update {} set {} where {}\".format(table, set_value, where_str)\n    else:\n        sql = None\n        message = \"未定义的操作符:{}\".format(opt)\n\n    return sql, message\n\n\ndef test():\n    data = {\n        \"name\": \"joe\",\n        \"age\": 18,\n        \"gender\": \"man\"\n    }\n    condition = {\n        \"id\": 100\n    }\n    table = \"student\"\n\n    sql, msg = gen_sql(opt=\"select\", data=data, condition=condition, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"update\", data=data, condition=condition, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"insert\", data=data, condition=condition, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"select\", data=data, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"delete\", data=data, condition=condition, table=table)\n    print(sql, msg)\n\n\nif __name__ == '__main__':\n    test()\n\n```","source":"_posts/mysql生成sql语句.md","raw":"---\ntitle: mysql生成sql语句\ntype: categories\ncopyright: true\ntags:\n  - 数据库\n  - mysql\ncategories:\n  - 数据库\n  - mysql\nabbrlink: 2052509888\ndate: 2022-02-27 21:26:45\n---\n\n\n## 使用python自动生成mysql的sql语句\n\n平时我们在工作当中有的时候使用数据库没有用orm模型，这个时候就需要我们手写sql语句，因此写了一个脚本自动来生成sql语句\n\n<!-- more -->\n\n```python\ndef gen_sql(opt='select', data=None, condition=None, table=None):\n    \"\"\"\n    sql语句生成模块\n    :param opt: 操作符，默认是查询select\n    :param data: 数据\n    :param condition: 条件\n    :param table: 表名\n    :return:\n    \"\"\"\n    if not data or not isinstance(data, dict):\n        print(\"没有需要处理的数据或者数据格式不是字典类型\")\n        return\n    if not table:\n        print(\"缺少表名\")\n        return\n    where_str = None  # sql判断条件\n    if condition and isinstance(condition, dict):\n        where_str = ' and '.join([f\"{key}='{value}'\" if isinstance(value, str) else f\"{key}={value}\"\n                                  for key, value in condition.items()])\n    k_list, v_list = [], []\n    for k, v in data.items():\n        k_list.append(k)\n        v_list.append(v)\n    key_str = ','.join(k_list)\n\n    message = None  # 返回的信息\n    if opt.lower() == 'select':  # 查询\n        if not where_str:\n            sql = \"select {} from {}\".format(key_str, table)\n        else:\n            sql = \"select {} from {} where {}\".format(key_str, table, where_str)\n    elif opt.lower() == 'insert':  # 新增\n        sql = \"insert ignore into {}({}) values {}\".format(table, key_str, tuple(v_list))\n    elif opt.lower() == 'update':  # 更新\n        set_value = ' and '.join([f\"{key}='{value}'\" if isinstance(value, str) else f\"{key}={value}\"\n                                  for key, value in data.items()])\n        sql = \"update {} set {} where {}\".format(table, set_value, where_str)\n    else:\n        sql = None\n        message = \"未定义的操作符:{}\".format(opt)\n\n    return sql, message\n\n\ndef test():\n    data = {\n        \"name\": \"joe\",\n        \"age\": 18,\n        \"gender\": \"man\"\n    }\n    condition = {\n        \"id\": 100\n    }\n    table = \"student\"\n\n    sql, msg = gen_sql(opt=\"select\", data=data, condition=condition, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"update\", data=data, condition=condition, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"insert\", data=data, condition=condition, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"select\", data=data, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"delete\", data=data, condition=condition, table=table)\n    print(sql, msg)\n\n\nif __name__ == '__main__':\n    test()\n\n```","slug":"mysql生成sql语句","published":1,"updated":"2022-03-13T11:49:16.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07b000o9jx3g1vk1t2j","content":"<h2 id=\"使用python自动生成mysql的sql语句\"><a href=\"#使用python自动生成mysql的sql语句\" class=\"headerlink\" title=\"使用python自动生成mysql的sql语句\"></a>使用python自动生成mysql的sql语句</h2><p>平时我们在工作当中有的时候使用数据库没有用orm模型，这个时候就需要我们手写sql语句，因此写了一个脚本自动来生成sql语句</p><a id=\"more\"></a><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_sql</span><span class=\"params\">(opt=<span class=\"string\">'select'</span>, data=None, condition=None, table=None)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    sql语句生成模块</span></span><br><span class=\"line\"><span class=\"string\">    :param opt: 操作符，默认是查询select</span></span><br><span class=\"line\"><span class=\"string\">    :param data: 数据</span></span><br><span class=\"line\"><span class=\"string\">    :param condition: 条件</span></span><br><span class=\"line\"><span class=\"string\">    :param table: 表名</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> isinstance(data, dict):</span><br><span class=\"line\">        print(<span class=\"string\">\"没有需要处理的数据或者数据格式不是字典类型\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> table:</span><br><span class=\"line\">        print(<span class=\"string\">\"缺少表名\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    where_str = <span class=\"literal\">None</span>  <span class=\"comment\"># sql判断条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> condition <span class=\"keyword\">and</span> isinstance(condition, dict):</span><br><span class=\"line\">        where_str = <span class=\"string\">' and '</span>.join([<span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>='<span class=\"subst\">&#123;value&#125;</span>'\"</span> <span class=\"keyword\">if</span> isinstance(value, str) <span class=\"keyword\">else</span> <span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>=<span class=\"subst\">&#123;value&#125;</span>\"</span></span><br><span class=\"line\">                                  <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> condition.items()])</span><br><span class=\"line\">    k_list, v_list = [], []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> data.items():</span><br><span class=\"line\">        k_list.append(k)</span><br><span class=\"line\">        v_list.append(v)</span><br><span class=\"line\">    key_str = <span class=\"string\">','</span>.join(k_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    message = <span class=\"literal\">None</span>  <span class=\"comment\"># 返回的信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> opt.lower() == <span class=\"string\">'select'</span>:  <span class=\"comment\"># 查询</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> where_str:</span><br><span class=\"line\">            sql = <span class=\"string\">\"select &#123;&#125; from &#123;&#125;\"</span>.format(key_str, table)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            sql = <span class=\"string\">\"select &#123;&#125; from &#123;&#125; where &#123;&#125;\"</span>.format(key_str, table, where_str)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> opt.lower() == <span class=\"string\">'insert'</span>:  <span class=\"comment\"># 新增</span></span><br><span class=\"line\">        sql = <span class=\"string\">\"insert ignore into &#123;&#125;(&#123;&#125;) values &#123;&#125;\"</span>.format(table, key_str, tuple(v_list))</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> opt.lower() == <span class=\"string\">'update'</span>:  <span class=\"comment\"># 更新</span></span><br><span class=\"line\">        set_value = <span class=\"string\">' and '</span>.join([<span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>='<span class=\"subst\">&#123;value&#125;</span>'\"</span> <span class=\"keyword\">if</span> isinstance(value, str) <span class=\"keyword\">else</span> <span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>=<span class=\"subst\">&#123;value&#125;</span>\"</span></span><br><span class=\"line\">                                  <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> data.items()])</span><br><span class=\"line\">        sql = <span class=\"string\">\"update &#123;&#125; set &#123;&#125; where &#123;&#125;\"</span>.format(table, set_value, where_str)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        sql = <span class=\"literal\">None</span></span><br><span class=\"line\">        message = <span class=\"string\">\"未定义的操作符:&#123;&#125;\"</span>.format(opt)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sql, message</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"age\"</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">        <span class=\"string\">\"gender\"</span>: <span class=\"string\">\"man\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    condition = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table = <span class=\"string\">\"student\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"select\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"update\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"insert\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"select\"</span>, data=data, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"delete\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    test()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"使用python自动生成mysql的sql语句\"><a href=\"#使用python自动生成mysql的sql语句\" class=\"headerlink\" title=\"使用python自动生成mysql的sql语句\"></a>使用python自动生成mysql的sql语句</h2><p>平时我们在工作当中有的时候使用数据库没有用orm模型，这个时候就需要我们手写sql语句，因此写了一个脚本自动来生成sql语句</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_sql</span><span class=\"params\">(opt=<span class=\"string\">'select'</span>, data=None, condition=None, table=None)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    sql语句生成模块</span></span><br><span class=\"line\"><span class=\"string\">    :param opt: 操作符，默认是查询select</span></span><br><span class=\"line\"><span class=\"string\">    :param data: 数据</span></span><br><span class=\"line\"><span class=\"string\">    :param condition: 条件</span></span><br><span class=\"line\"><span class=\"string\">    :param table: 表名</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> isinstance(data, dict):</span><br><span class=\"line\">        print(<span class=\"string\">\"没有需要处理的数据或者数据格式不是字典类型\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> table:</span><br><span class=\"line\">        print(<span class=\"string\">\"缺少表名\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    where_str = <span class=\"literal\">None</span>  <span class=\"comment\"># sql判断条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> condition <span class=\"keyword\">and</span> isinstance(condition, dict):</span><br><span class=\"line\">        where_str = <span class=\"string\">' and '</span>.join([<span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>='<span class=\"subst\">&#123;value&#125;</span>'\"</span> <span class=\"keyword\">if</span> isinstance(value, str) <span class=\"keyword\">else</span> <span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>=<span class=\"subst\">&#123;value&#125;</span>\"</span></span><br><span class=\"line\">                                  <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> condition.items()])</span><br><span class=\"line\">    k_list, v_list = [], []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> data.items():</span><br><span class=\"line\">        k_list.append(k)</span><br><span class=\"line\">        v_list.append(v)</span><br><span class=\"line\">    key_str = <span class=\"string\">','</span>.join(k_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    message = <span class=\"literal\">None</span>  <span class=\"comment\"># 返回的信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> opt.lower() == <span class=\"string\">'select'</span>:  <span class=\"comment\"># 查询</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> where_str:</span><br><span class=\"line\">            sql = <span class=\"string\">\"select &#123;&#125; from &#123;&#125;\"</span>.format(key_str, table)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            sql = <span class=\"string\">\"select &#123;&#125; from &#123;&#125; where &#123;&#125;\"</span>.format(key_str, table, where_str)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> opt.lower() == <span class=\"string\">'insert'</span>:  <span class=\"comment\"># 新增</span></span><br><span class=\"line\">        sql = <span class=\"string\">\"insert ignore into &#123;&#125;(&#123;&#125;) values &#123;&#125;\"</span>.format(table, key_str, tuple(v_list))</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> opt.lower() == <span class=\"string\">'update'</span>:  <span class=\"comment\"># 更新</span></span><br><span class=\"line\">        set_value = <span class=\"string\">' and '</span>.join([<span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>='<span class=\"subst\">&#123;value&#125;</span>'\"</span> <span class=\"keyword\">if</span> isinstance(value, str) <span class=\"keyword\">else</span> <span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>=<span class=\"subst\">&#123;value&#125;</span>\"</span></span><br><span class=\"line\">                                  <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> data.items()])</span><br><span class=\"line\">        sql = <span class=\"string\">\"update &#123;&#125; set &#123;&#125; where &#123;&#125;\"</span>.format(table, set_value, where_str)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        sql = <span class=\"literal\">None</span></span><br><span class=\"line\">        message = <span class=\"string\">\"未定义的操作符:&#123;&#125;\"</span>.format(opt)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sql, message</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"age\"</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">        <span class=\"string\">\"gender\"</span>: <span class=\"string\">\"man\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    condition = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table = <span class=\"string\">\"student\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"select\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"update\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"insert\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"select\"</span>, data=data, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"delete\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    test()</span><br></pre></td></tr></table></figure>"},{"title":"mysql用户创建授权","type":"categories","copyright":true,"abbrlink":1939127260,"date":"2022-02-27T13:45:55.000Z","_content":"\n## mysql创建用户并授权\n\n### 创建用户\n```\ncreate user 'username'@'host' identified by 'password'\n```\n### 授权\n```\ngrant all privileges on 数据库名.表名 to 'username'@'host'\n```\n### 用户创建并授权\n<!-- more -->\n```\ngrant all privileges on database.table to 'username'@'host' identified by 'password'\n```\n### 刷新权限\n```\nflush privileges\n```\n- localhost 表示只能在本地连，\"%\" 表示可以在任意一台机器连，\"host\" 指定ip 表示可以在指定机器上连\n- database: 指定数据库，如果是所有数据库可以用 * 代替\n- table: 指定表，如果是所有表可以用 * 代替\n- all privileges ： 赋予所有权限\n\n### 设置&修改用户密码\n```\nset password for 'username'@'host'=password('newpassowrd')\n```\n### 撤销用户权限\n```\nREVOKE privilege ON databasename.tablename FROM 'username'@'host'\n```\n- 假如你在给用户'dog'@'localhost'授权的时候是这样的(或类似的): GRANT SELECT ON test.user TO 'dog'@'localhost',则在使用REVOKE SELECT ON \\*.\\* FROM 'dog'@'localhost',命令并不能撤销该用户对test数据库中user表的SELECT 操作\n- 相反,如果授权使用的是GRANT SELECT ON \\*.\\* TO 'dog'@'localhost',则REVOKE SELECT ON test.user FROM 'dog'@'localhost'命令也不能撤销该用户对test数据库中user表的Select 权限\n\n### 查看用户权限\n```\nshow grants for 'username'@'host'\n```\n### 删除用户\n```\nDROP USER 'username'@'host'\n```","source":"_posts/mysql用户创建授权.md","raw":"---\ntitle: mysql用户创建授权\ntype: categories\ncopyright: true\ntags:\n  - 数据库\n  - mysql\ncategories:\n  - 数据库\n  - mysql\nabbrlink: 1939127260\ndate: 2022-02-27 21:45:55\n---\n\n## mysql创建用户并授权\n\n### 创建用户\n```\ncreate user 'username'@'host' identified by 'password'\n```\n### 授权\n```\ngrant all privileges on 数据库名.表名 to 'username'@'host'\n```\n### 用户创建并授权\n<!-- more -->\n```\ngrant all privileges on database.table to 'username'@'host' identified by 'password'\n```\n### 刷新权限\n```\nflush privileges\n```\n- localhost 表示只能在本地连，\"%\" 表示可以在任意一台机器连，\"host\" 指定ip 表示可以在指定机器上连\n- database: 指定数据库，如果是所有数据库可以用 * 代替\n- table: 指定表，如果是所有表可以用 * 代替\n- all privileges ： 赋予所有权限\n\n### 设置&修改用户密码\n```\nset password for 'username'@'host'=password('newpassowrd')\n```\n### 撤销用户权限\n```\nREVOKE privilege ON databasename.tablename FROM 'username'@'host'\n```\n- 假如你在给用户'dog'@'localhost'授权的时候是这样的(或类似的): GRANT SELECT ON test.user TO 'dog'@'localhost',则在使用REVOKE SELECT ON \\*.\\* FROM 'dog'@'localhost',命令并不能撤销该用户对test数据库中user表的SELECT 操作\n- 相反,如果授权使用的是GRANT SELECT ON \\*.\\* TO 'dog'@'localhost',则REVOKE SELECT ON test.user FROM 'dog'@'localhost'命令也不能撤销该用户对test数据库中user表的Select 权限\n\n### 查看用户权限\n```\nshow grants for 'username'@'host'\n```\n### 删除用户\n```\nDROP USER 'username'@'host'\n```","slug":"mysql用户创建授权","published":1,"updated":"2022-03-13T11:49:16.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07c000s9jx39pt23ign","content":"<h2 id=\"mysql创建用户并授权\"><a href=\"#mysql创建用户并授权\" class=\"headerlink\" title=\"mysql创建用户并授权\"></a>mysql创建用户并授权</h2><h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create<span class=\"built_in\"> user </span><span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> identified by <span class=\"string\">'password'</span></span><br></pre></td></tr></table></figure><h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> 数据库名.表名 <span class=\"keyword\">to</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure><h3 id=\"用户创建并授权\"><a href=\"#用户创建并授权\" class=\"headerlink\" title=\"用户创建并授权\"></a>用户创建并授权</h3><a id=\"more\"></a><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> <span class=\"keyword\">database</span>.<span class=\"keyword\">table</span> <span class=\"keyword\">to</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> identified <span class=\"keyword\">by</span> <span class=\"string\">'password'</span></span><br></pre></td></tr></table></figure><h3 id=\"刷新权限\"><a href=\"#刷新权限\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span></span><br></pre></td></tr></table></figure><ul><li>localhost 表示只能在本地连，”%” 表示可以在任意一台机器连，”host” 指定ip 表示可以在指定机器上连</li><li>database: 指定数据库，如果是所有数据库可以用 * 代替</li><li>table: 指定表，如果是所有表可以用 * 代替</li><li>all privileges ： 赋予所有权限</li></ul><h3 id=\"设置-amp-修改用户密码\"><a href=\"#设置-amp-修改用户密码\" class=\"headerlink\" title=\"设置&amp;修改用户密码\"></a>设置&amp;修改用户密码</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">password</span> <span class=\"keyword\">for</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span>=<span class=\"keyword\">password</span>(<span class=\"string\">'newpassowrd'</span>)</span><br></pre></td></tr></table></figure><h3 id=\"撤销用户权限\"><a href=\"#撤销用户权限\" class=\"headerlink\" title=\"撤销用户权限\"></a>撤销用户权限</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span> privilege <span class=\"keyword\">ON</span> databasename.tablename <span class=\"keyword\">FROM</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure><ul><li>假如你在给用户‘dog’@’localhost’授权的时候是这样的(或类似的): GRANT SELECT ON test.user TO ‘dog’@’localhost’,则在使用REVOKE SELECT ON *.* FROM ‘dog’@’localhost’,命令并不能撤销该用户对test数据库中user表的SELECT 操作</li><li>相反,如果授权使用的是GRANT SELECT ON *.* TO ‘dog’@’localhost’,则REVOKE SELECT ON test.user FROM ‘dog’@’localhost’命令也不能撤销该用户对test数据库中user表的Select 权限</li></ul><h3 id=\"查看用户权限\"><a href=\"#查看用户权限\" class=\"headerlink\" title=\"查看用户权限\"></a>查看用户权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grants</span> <span class=\"keyword\">for</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure><h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP<span class=\"built_in\"> USER </span><span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"mysql创建用户并授权\"><a href=\"#mysql创建用户并授权\" class=\"headerlink\" title=\"mysql创建用户并授权\"></a>mysql创建用户并授权</h2><h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create<span class=\"built_in\"> user </span><span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> identified by <span class=\"string\">'password'</span></span><br></pre></td></tr></table></figure><h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> 数据库名.表名 <span class=\"keyword\">to</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure><h3 id=\"用户创建并授权\"><a href=\"#用户创建并授权\" class=\"headerlink\" title=\"用户创建并授权\"></a>用户创建并授权</h3>","more":"<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> <span class=\"keyword\">database</span>.<span class=\"keyword\">table</span> <span class=\"keyword\">to</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> identified <span class=\"keyword\">by</span> <span class=\"string\">'password'</span></span><br></pre></td></tr></table></figure><h3 id=\"刷新权限\"><a href=\"#刷新权限\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span></span><br></pre></td></tr></table></figure><ul><li>localhost 表示只能在本地连，”%” 表示可以在任意一台机器连，”host” 指定ip 表示可以在指定机器上连</li><li>database: 指定数据库，如果是所有数据库可以用 * 代替</li><li>table: 指定表，如果是所有表可以用 * 代替</li><li>all privileges ： 赋予所有权限</li></ul><h3 id=\"设置-amp-修改用户密码\"><a href=\"#设置-amp-修改用户密码\" class=\"headerlink\" title=\"设置&amp;修改用户密码\"></a>设置&amp;修改用户密码</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">password</span> <span class=\"keyword\">for</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span>=<span class=\"keyword\">password</span>(<span class=\"string\">'newpassowrd'</span>)</span><br></pre></td></tr></table></figure><h3 id=\"撤销用户权限\"><a href=\"#撤销用户权限\" class=\"headerlink\" title=\"撤销用户权限\"></a>撤销用户权限</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span> privilege <span class=\"keyword\">ON</span> databasename.tablename <span class=\"keyword\">FROM</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure><ul><li>假如你在给用户‘dog’@’localhost’授权的时候是这样的(或类似的): GRANT SELECT ON test.user TO ‘dog’@’localhost’,则在使用REVOKE SELECT ON *.* FROM ‘dog’@’localhost’,命令并不能撤销该用户对test数据库中user表的SELECT 操作</li><li>相反,如果授权使用的是GRANT SELECT ON *.* TO ‘dog’@’localhost’,则REVOKE SELECT ON test.user FROM ‘dog’@’localhost’命令也不能撤销该用户对test数据库中user表的Select 权限</li></ul><h3 id=\"查看用户权限\"><a href=\"#查看用户权限\" class=\"headerlink\" title=\"查看用户权限\"></a>查看用户权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grants</span> <span class=\"keyword\">for</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure><h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP<span class=\"built_in\"> USER </span><span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure>"},{"title":"mysql连接池","type":"categories","copyright":true,"password":"leslie","abbrlink":1938337745,"date":"2022-02-27T13:08:22.000Z","_content":"\n## mysql连接池\n\n1、执行带参数的ＳＱＬ时，请先用sql语句指定需要输入的条件列表，然后再用tuple/list进行条件批配\n\n２、在格式ＳＱＬ中不需要使用引号指定数据类型，系统会根据输入参数自动识别\n\n３、在输入的值中不需要使用转意函数，系统会自动处理\n<!--more-->\n\n\n```python\nimport pymysql\nfrom pymysql.cursors import DictCursor\nfrom DBUtils.PooledDB import PooledDB\n\n\nclass Mysql(object):\n    \"\"\"\n    MYSQL数据库对象，负责产生数据库连接 , 此类中的连接采用连接池实现获取连接对象：conn = Mysql.getConn()\n    释放连接对象;conn.close()或del conn\n    \"\"\"\n    # 连接池对象\n    __pool = None\n\n    def __init__(self, config):\n        # 数据库构造函数，从连接池中取出连接，并生成操作游标\n        self._conn = Mysql.__getConn(config)\n        self._cursor = self._conn.cursor()\n\n    @staticmethod\n    def __getConn(config):\n        \"\"\"\n        @summary: 静态方法，从连接池中取出连接\n        @return MySQLdb.connection\n        \"\"\"\n        host = config.get('host', 'localhost')\n        port = config.get('port', 3306)\n        user = config.get('username')\n        passwd = config.get('password')\n        db = config.get('database')\n        charset = config.get('charset', 'utf8mb4')\n        mincached = config.get('mincached', 1)\n        maxcached = config.get('maxcached', 20)\n        if Mysql.__pool is None:\n            __pool = PooledDB(creator=pymysql, mincached=mincached, maxcached=maxcached,\n                              host=host, port=port, user=user, passwd=passwd,\n                              db=db, use_unicode=False, charset=charset, cursorclass=DictCursor)\n        return __pool.connection()\n\n    def getAll(self, sql, param=None):\n        \"\"\"\n        @summary: 执行查询，并取出所有结果集\n        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来\n        @param param: 可选参数，条件列表值（元组/列表）\n        @return: result list(字典对象)/boolean 查询到的结果集\n        \"\"\"\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        if count > 0:\n            result = self._cursor.fetchall()\n        else:\n            result = False\n        return result\n\n    def getOne(self, sql, param=None):\n        \"\"\"\n        @summary: 执行查询，并取出第一条\n        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来\n        @param param: 可选参数，条件列表值（元组/列表）\n        @return: result list/boolean 查询到的结果集\n        \"\"\"\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        if count > 0:\n            result = self._cursor.fetchone()\n        else:\n            result = False\n        return result\n\n    def getMany(self, sql, num, param=None):\n        \"\"\"\n        @summary: 执行查询，并取出num条结果\n        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来\n        @param num:取得的结果条数\n        @param param: 可选参数，条件列表值（元组/列表）\n        @return: result list/boolean 查询到的结果集\n        \"\"\"\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        if count > 0:\n            result = self._cursor.fetchmany(num)\n        else:\n            result = False\n        return result\n\n    def insertOne(self, sql, value):\n        \"\"\"\n        @summary: 向数据表插入一条记录\n        @param sql:要插入的ＳＱＬ格式\n        @param value:要插入的记录数据tuple/list\n        @return: insertId 受影响的行数\n        \"\"\"\n        self._cursor.execute(sql, value)\n        return self.__getInsertId()\n\n    def insertMany(self, sql, values):\n        \"\"\"\n        @summary: 向数据表插入多条记录\n        @param sql:要插入的ＳＱＬ格式\n        @param values:要插入的记录数据tuple(tuple)/list[list]\n        @return: count 受影响的行数\n        \"\"\"\n        count = self._cursor.executemany(sql, values)\n        return count\n\n    def __getInsertId(self):\n        \"\"\"\n        获取当前连接最后一次插入操作生成的id,如果没有则为0\n        \"\"\"\n        self._cursor.execute(\"SELECT @@IDENTITY AS id\")\n        result = self._cursor.fetchall()\n        return result[0]['id']\n\n    def __query(self, sql, param=None):\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        return count\n\n    def update(self, sql, param=None):\n        \"\"\"\n        @summary: 更新数据表记录\n        @param sql: ＳＱＬ格式及条件，使用(%s,%s)\n        @param param: 要更新的  值 tuple/list\n        @return: count 受影响的行数\n        \"\"\"\n        return self.__query(sql, param)\n\n    def delete(self, sql, param=None):\n        \"\"\"\n        @summary: 删除数据表记录\n        @param sql: ＳＱＬ格式及条件，使用(%s,%s)\n        @param param: 要删除的条件 值 tuple/list\n        @return: count 受影响的行数\n        \"\"\"\n        return self.__query(sql, param)\n\n    def begin(self):\n        \"\"\"\n        @summary: 开启事务\n        \"\"\"\n        self._conn.autocommit(0)\n\n    def end(self, option='commit'):\n        \"\"\"\n        @summary: 结束事务\n        \"\"\"\n        if option == 'commit':\n            self._conn.commit()\n        else:\n            self._conn.rollback()\n\n    def dispose(self, is_end=1):\n        \"\"\"\n        @summary: 释放连接池资源\n        \"\"\"\n        if is_end == 1:\n            self.end('commit')\n        else:\n            self.end('rollback')\n        self._cursor.close()\n        self._conn.close()\n```\n\n\n\n","source":"_posts/mysql连接池.md","raw":"---\ntitle: mysql连接池\ntype: categories\ncopyright: true\ntags:\n  - 数据库\n  - mysql\ncategories:\n  - 数据库\n  - mysql\npassword: leslie\nabbrlink: 1938337745\ndate: 2022-02-27 21:08:22\n---\n\n## mysql连接池\n\n1、执行带参数的ＳＱＬ时，请先用sql语句指定需要输入的条件列表，然后再用tuple/list进行条件批配\n\n２、在格式ＳＱＬ中不需要使用引号指定数据类型，系统会根据输入参数自动识别\n\n３、在输入的值中不需要使用转意函数，系统会自动处理\n<!--more-->\n\n\n```python\nimport pymysql\nfrom pymysql.cursors import DictCursor\nfrom DBUtils.PooledDB import PooledDB\n\n\nclass Mysql(object):\n    \"\"\"\n    MYSQL数据库对象，负责产生数据库连接 , 此类中的连接采用连接池实现获取连接对象：conn = Mysql.getConn()\n    释放连接对象;conn.close()或del conn\n    \"\"\"\n    # 连接池对象\n    __pool = None\n\n    def __init__(self, config):\n        # 数据库构造函数，从连接池中取出连接，并生成操作游标\n        self._conn = Mysql.__getConn(config)\n        self._cursor = self._conn.cursor()\n\n    @staticmethod\n    def __getConn(config):\n        \"\"\"\n        @summary: 静态方法，从连接池中取出连接\n        @return MySQLdb.connection\n        \"\"\"\n        host = config.get('host', 'localhost')\n        port = config.get('port', 3306)\n        user = config.get('username')\n        passwd = config.get('password')\n        db = config.get('database')\n        charset = config.get('charset', 'utf8mb4')\n        mincached = config.get('mincached', 1)\n        maxcached = config.get('maxcached', 20)\n        if Mysql.__pool is None:\n            __pool = PooledDB(creator=pymysql, mincached=mincached, maxcached=maxcached,\n                              host=host, port=port, user=user, passwd=passwd,\n                              db=db, use_unicode=False, charset=charset, cursorclass=DictCursor)\n        return __pool.connection()\n\n    def getAll(self, sql, param=None):\n        \"\"\"\n        @summary: 执行查询，并取出所有结果集\n        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来\n        @param param: 可选参数，条件列表值（元组/列表）\n        @return: result list(字典对象)/boolean 查询到的结果集\n        \"\"\"\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        if count > 0:\n            result = self._cursor.fetchall()\n        else:\n            result = False\n        return result\n\n    def getOne(self, sql, param=None):\n        \"\"\"\n        @summary: 执行查询，并取出第一条\n        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来\n        @param param: 可选参数，条件列表值（元组/列表）\n        @return: result list/boolean 查询到的结果集\n        \"\"\"\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        if count > 0:\n            result = self._cursor.fetchone()\n        else:\n            result = False\n        return result\n\n    def getMany(self, sql, num, param=None):\n        \"\"\"\n        @summary: 执行查询，并取出num条结果\n        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来\n        @param num:取得的结果条数\n        @param param: 可选参数，条件列表值（元组/列表）\n        @return: result list/boolean 查询到的结果集\n        \"\"\"\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        if count > 0:\n            result = self._cursor.fetchmany(num)\n        else:\n            result = False\n        return result\n\n    def insertOne(self, sql, value):\n        \"\"\"\n        @summary: 向数据表插入一条记录\n        @param sql:要插入的ＳＱＬ格式\n        @param value:要插入的记录数据tuple/list\n        @return: insertId 受影响的行数\n        \"\"\"\n        self._cursor.execute(sql, value)\n        return self.__getInsertId()\n\n    def insertMany(self, sql, values):\n        \"\"\"\n        @summary: 向数据表插入多条记录\n        @param sql:要插入的ＳＱＬ格式\n        @param values:要插入的记录数据tuple(tuple)/list[list]\n        @return: count 受影响的行数\n        \"\"\"\n        count = self._cursor.executemany(sql, values)\n        return count\n\n    def __getInsertId(self):\n        \"\"\"\n        获取当前连接最后一次插入操作生成的id,如果没有则为0\n        \"\"\"\n        self._cursor.execute(\"SELECT @@IDENTITY AS id\")\n        result = self._cursor.fetchall()\n        return result[0]['id']\n\n    def __query(self, sql, param=None):\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        return count\n\n    def update(self, sql, param=None):\n        \"\"\"\n        @summary: 更新数据表记录\n        @param sql: ＳＱＬ格式及条件，使用(%s,%s)\n        @param param: 要更新的  值 tuple/list\n        @return: count 受影响的行数\n        \"\"\"\n        return self.__query(sql, param)\n\n    def delete(self, sql, param=None):\n        \"\"\"\n        @summary: 删除数据表记录\n        @param sql: ＳＱＬ格式及条件，使用(%s,%s)\n        @param param: 要删除的条件 值 tuple/list\n        @return: count 受影响的行数\n        \"\"\"\n        return self.__query(sql, param)\n\n    def begin(self):\n        \"\"\"\n        @summary: 开启事务\n        \"\"\"\n        self._conn.autocommit(0)\n\n    def end(self, option='commit'):\n        \"\"\"\n        @summary: 结束事务\n        \"\"\"\n        if option == 'commit':\n            self._conn.commit()\n        else:\n            self._conn.rollback()\n\n    def dispose(self, is_end=1):\n        \"\"\"\n        @summary: 释放连接池资源\n        \"\"\"\n        if is_end == 1:\n            self.end('commit')\n        else:\n            self.end('rollback')\n        self._cursor.close()\n        self._conn.close()\n```\n\n\n\n","slug":"mysql连接池","published":1,"updated":"2022-03-13T11:49:16.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07d000t9jx33tx86j3j","content":"<h2 id=\"mysql连接池\"><a href=\"#mysql连接池\" class=\"headerlink\" title=\"mysql连接池\"></a>mysql连接池</h2><p>1、执行带参数的ＳＱＬ时，请先用sql语句指定需要输入的条件列表，然后再用tuple/list进行条件批配</p><p>２、在格式ＳＱＬ中不需要使用引号指定数据类型，系统会根据输入参数自动识别</p><p>３、在输入的值中不需要使用转意函数，系统会自动处理</p><a id=\"more\"></a><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">from</span> pymysql.cursors <span class=\"keyword\">import</span> DictCursor</span><br><span class=\"line\"><span class=\"keyword\">from</span> DBUtils.PooledDB <span class=\"keyword\">import</span> PooledDB</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mysql</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    MYSQL数据库对象，负责产生数据库连接 , 此类中的连接采用连接池实现获取连接对象：conn = Mysql.getConn()</span></span><br><span class=\"line\"><span class=\"string\">    释放连接对象;conn.close()或del conn</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 连接池对象</span></span><br><span class=\"line\">    __pool = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, config)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 数据库构造函数，从连接池中取出连接，并生成操作游标</span></span><br><span class=\"line\">        self._conn = Mysql.__getConn(config)</span><br><span class=\"line\">        self._cursor = self._conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getConn</span><span class=\"params\">(config)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 静态方法，从连接池中取出连接</span></span><br><span class=\"line\"><span class=\"string\">        @return MySQLdb.connection</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        host = config.get(<span class=\"string\">'host'</span>, <span class=\"string\">'localhost'</span>)</span><br><span class=\"line\">        port = config.get(<span class=\"string\">'port'</span>, <span class=\"number\">3306</span>)</span><br><span class=\"line\">        user = config.get(<span class=\"string\">'username'</span>)</span><br><span class=\"line\">        passwd = config.get(<span class=\"string\">'password'</span>)</span><br><span class=\"line\">        db = config.get(<span class=\"string\">'database'</span>)</span><br><span class=\"line\">        charset = config.get(<span class=\"string\">'charset'</span>, <span class=\"string\">'utf8mb4'</span>)</span><br><span class=\"line\">        mincached = config.get(<span class=\"string\">'mincached'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        maxcached = config.get(<span class=\"string\">'maxcached'</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Mysql.__pool <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            __pool = PooledDB(creator=pymysql, mincached=mincached, maxcached=maxcached,</span><br><span class=\"line\">                              host=host, port=port, user=user, passwd=passwd,</span><br><span class=\"line\">                              db=db, use_unicode=<span class=\"literal\">False</span>, charset=charset, cursorclass=DictCursor)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> __pool.connection()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAll</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 执行查询，并取出所有结果集</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class=\"line\"><span class=\"string\">        @return: result list(字典对象)/boolean 查询到的结果集</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            result = self._cursor.fetchall()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getOne</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 执行查询，并取出第一条</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class=\"line\"><span class=\"string\">        @return: result list/boolean 查询到的结果集</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            result = self._cursor.fetchone()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMany</span><span class=\"params\">(self, sql, num, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 执行查询，并取出num条结果</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class=\"line\"><span class=\"string\">        @param num:取得的结果条数</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class=\"line\"><span class=\"string\">        @return: result list/boolean 查询到的结果集</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            result = self._cursor.fetchmany(num)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertOne</span><span class=\"params\">(self, sql, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 向数据表插入一条记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:要插入的ＳＱＬ格式</span></span><br><span class=\"line\"><span class=\"string\">        @param value:要插入的记录数据tuple/list</span></span><br><span class=\"line\"><span class=\"string\">        @return: insertId 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self._cursor.execute(sql, value)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__getInsertId()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertMany</span><span class=\"params\">(self, sql, values)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 向数据表插入多条记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:要插入的ＳＱＬ格式</span></span><br><span class=\"line\"><span class=\"string\">        @param values:要插入的记录数据tuple(tuple)/list[list]</span></span><br><span class=\"line\"><span class=\"string\">        @return: count 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        count = self._cursor.executemany(sql, values)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getInsertId</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        获取当前连接最后一次插入操作生成的id,如果没有则为0</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self._cursor.execute(<span class=\"string\">\"SELECT @@IDENTITY AS id\"</span>)</span><br><span class=\"line\">        result = self._cursor.fetchall()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result[<span class=\"number\">0</span>][<span class=\"string\">'id'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__query</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 更新数据表记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql: ＳＱＬ格式及条件，使用(%s,%s)</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 要更新的  值 tuple/list</span></span><br><span class=\"line\"><span class=\"string\">        @return: count 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__query(sql, param)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 删除数据表记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql: ＳＱＬ格式及条件，使用(%s,%s)</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 要删除的条件 值 tuple/list</span></span><br><span class=\"line\"><span class=\"string\">        @return: count 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__query(sql, param)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">begin</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 开启事务</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self._conn.autocommit(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">end</span><span class=\"params\">(self, option=<span class=\"string\">'commit'</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 结束事务</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> option == <span class=\"string\">'commit'</span>:</span><br><span class=\"line\">            self._conn.commit()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self._conn.rollback()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dispose</span><span class=\"params\">(self, is_end=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 释放连接池资源</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_end == <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.end(<span class=\"string\">'commit'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.end(<span class=\"string\">'rollback'</span>)</span><br><span class=\"line\">        self._cursor.close()</span><br><span class=\"line\">        self._conn.close()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"mysql连接池\"><a href=\"#mysql连接池\" class=\"headerlink\" title=\"mysql连接池\"></a>mysql连接池</h2><p>1、执行带参数的ＳＱＬ时，请先用sql语句指定需要输入的条件列表，然后再用tuple/list进行条件批配</p><p>２、在格式ＳＱＬ中不需要使用引号指定数据类型，系统会根据输入参数自动识别</p><p>３、在输入的值中不需要使用转意函数，系统会自动处理</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">from</span> pymysql.cursors <span class=\"keyword\">import</span> DictCursor</span><br><span class=\"line\"><span class=\"keyword\">from</span> DBUtils.PooledDB <span class=\"keyword\">import</span> PooledDB</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mysql</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    MYSQL数据库对象，负责产生数据库连接 , 此类中的连接采用连接池实现获取连接对象：conn = Mysql.getConn()</span></span><br><span class=\"line\"><span class=\"string\">    释放连接对象;conn.close()或del conn</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 连接池对象</span></span><br><span class=\"line\">    __pool = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, config)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 数据库构造函数，从连接池中取出连接，并生成操作游标</span></span><br><span class=\"line\">        self._conn = Mysql.__getConn(config)</span><br><span class=\"line\">        self._cursor = self._conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getConn</span><span class=\"params\">(config)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 静态方法，从连接池中取出连接</span></span><br><span class=\"line\"><span class=\"string\">        @return MySQLdb.connection</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        host = config.get(<span class=\"string\">'host'</span>, <span class=\"string\">'localhost'</span>)</span><br><span class=\"line\">        port = config.get(<span class=\"string\">'port'</span>, <span class=\"number\">3306</span>)</span><br><span class=\"line\">        user = config.get(<span class=\"string\">'username'</span>)</span><br><span class=\"line\">        passwd = config.get(<span class=\"string\">'password'</span>)</span><br><span class=\"line\">        db = config.get(<span class=\"string\">'database'</span>)</span><br><span class=\"line\">        charset = config.get(<span class=\"string\">'charset'</span>, <span class=\"string\">'utf8mb4'</span>)</span><br><span class=\"line\">        mincached = config.get(<span class=\"string\">'mincached'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        maxcached = config.get(<span class=\"string\">'maxcached'</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Mysql.__pool <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            __pool = PooledDB(creator=pymysql, mincached=mincached, maxcached=maxcached,</span><br><span class=\"line\">                              host=host, port=port, user=user, passwd=passwd,</span><br><span class=\"line\">                              db=db, use_unicode=<span class=\"literal\">False</span>, charset=charset, cursorclass=DictCursor)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> __pool.connection()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAll</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 执行查询，并取出所有结果集</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class=\"line\"><span class=\"string\">        @return: result list(字典对象)/boolean 查询到的结果集</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            result = self._cursor.fetchall()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getOne</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 执行查询，并取出第一条</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class=\"line\"><span class=\"string\">        @return: result list/boolean 查询到的结果集</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            result = self._cursor.fetchone()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMany</span><span class=\"params\">(self, sql, num, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 执行查询，并取出num条结果</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class=\"line\"><span class=\"string\">        @param num:取得的结果条数</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class=\"line\"><span class=\"string\">        @return: result list/boolean 查询到的结果集</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            result = self._cursor.fetchmany(num)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertOne</span><span class=\"params\">(self, sql, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 向数据表插入一条记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:要插入的ＳＱＬ格式</span></span><br><span class=\"line\"><span class=\"string\">        @param value:要插入的记录数据tuple/list</span></span><br><span class=\"line\"><span class=\"string\">        @return: insertId 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self._cursor.execute(sql, value)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__getInsertId()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertMany</span><span class=\"params\">(self, sql, values)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 向数据表插入多条记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:要插入的ＳＱＬ格式</span></span><br><span class=\"line\"><span class=\"string\">        @param values:要插入的记录数据tuple(tuple)/list[list]</span></span><br><span class=\"line\"><span class=\"string\">        @return: count 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        count = self._cursor.executemany(sql, values)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getInsertId</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        获取当前连接最后一次插入操作生成的id,如果没有则为0</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self._cursor.execute(<span class=\"string\">\"SELECT @@IDENTITY AS id\"</span>)</span><br><span class=\"line\">        result = self._cursor.fetchall()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result[<span class=\"number\">0</span>][<span class=\"string\">'id'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__query</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 更新数据表记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql: ＳＱＬ格式及条件，使用(%s,%s)</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 要更新的  值 tuple/list</span></span><br><span class=\"line\"><span class=\"string\">        @return: count 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__query(sql, param)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 删除数据表记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql: ＳＱＬ格式及条件，使用(%s,%s)</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 要删除的条件 值 tuple/list</span></span><br><span class=\"line\"><span class=\"string\">        @return: count 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__query(sql, param)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">begin</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 开启事务</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self._conn.autocommit(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">end</span><span class=\"params\">(self, option=<span class=\"string\">'commit'</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 结束事务</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> option == <span class=\"string\">'commit'</span>:</span><br><span class=\"line\">            self._conn.commit()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self._conn.rollback()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dispose</span><span class=\"params\">(self, is_end=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 释放连接池资源</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_end == <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.end(<span class=\"string\">'commit'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.end(<span class=\"string\">'rollback'</span>)</span><br><span class=\"line\">        self._cursor.close()</span><br><span class=\"line\">        self._conn.close()</span><br></pre></td></tr></table></figure>"},{"title":"mysql重置root密码","type":"categories","copyright":true,"abbrlink":3789975200,"date":"2022-02-27T13:37:21.000Z","_content":"\n## mysql重置root密码\n\n#### 方法一：\n\n1）：编辑mysqld.cnf文件\n```sh\nsudo vi /etc/mysql/mysql.conf.d/mysqld.cnf\n```\n\n2）：在文件中的skip-external-locking一行的下面添加一行：\n\nskip-grant-tables\n\n3）：重启MySQL服务\n```sh\nsudo service mysql restart\n```\n<!-- more -->\n\n4）：终端输入mysql进入MySQL，输入USE mysql切换至mysql数据库\n```sh\nmysql\nuse mysql\n```\n\n5）：把root用户的密码修改为000000\n```sh\nUPDATE mysql.user SET authentication_string=password('000000') WHERE User='root' AND Host ='localhost';\n```\n\n6）：修改字段plugin\n```sh\nUPDATE user SET plugin=\"mysql_native_password\";\n```\n\n7）：刷新权限\n```sh\nflush privileges;\n```\n\n8）：退出\n```sh\nquit;\n```\n\n9）：注释掉/etc/mysql/mysql.conf.d/mysqld.cnf文件中添加的一行\n\n#### 方法二：\n\n利用mysql自带的用户debian-sys-maint进行重置密码，只有Debian或Ubuntu服务器才有，存在于/etc/mysql/debian.cnf文件中\n\n打开/etc/mysql/目录下的debian.cnf文件，里面包括用户名和密码\n```sh\nsudo vim /etc/mysql/debian.cnf\n```\n\n使用文件中提供的用户名和密码进入mysql\n```sh\nmysql -u debian-sys-maint -p\n\nuse mysql;\n\nupdate user set authentication_string=password('123456') where user='root';\n```\n\n","source":"_posts/mysql重置root密码.md","raw":"---\ntitle: mysql重置root密码\ntype: categories\ncopyright: true\ntags:\n  - 数据库\n  - mysql\ncategories:\n  - 数据库\n  - mysql\nabbrlink: 3789975200\ndate: 2022-02-27 21:37:21\n---\n\n## mysql重置root密码\n\n#### 方法一：\n\n1）：编辑mysqld.cnf文件\n```sh\nsudo vi /etc/mysql/mysql.conf.d/mysqld.cnf\n```\n\n2）：在文件中的skip-external-locking一行的下面添加一行：\n\nskip-grant-tables\n\n3）：重启MySQL服务\n```sh\nsudo service mysql restart\n```\n<!-- more -->\n\n4）：终端输入mysql进入MySQL，输入USE mysql切换至mysql数据库\n```sh\nmysql\nuse mysql\n```\n\n5）：把root用户的密码修改为000000\n```sh\nUPDATE mysql.user SET authentication_string=password('000000') WHERE User='root' AND Host ='localhost';\n```\n\n6）：修改字段plugin\n```sh\nUPDATE user SET plugin=\"mysql_native_password\";\n```\n\n7）：刷新权限\n```sh\nflush privileges;\n```\n\n8）：退出\n```sh\nquit;\n```\n\n9）：注释掉/etc/mysql/mysql.conf.d/mysqld.cnf文件中添加的一行\n\n#### 方法二：\n\n利用mysql自带的用户debian-sys-maint进行重置密码，只有Debian或Ubuntu服务器才有，存在于/etc/mysql/debian.cnf文件中\n\n打开/etc/mysql/目录下的debian.cnf文件，里面包括用户名和密码\n```sh\nsudo vim /etc/mysql/debian.cnf\n```\n\n使用文件中提供的用户名和密码进入mysql\n```sh\nmysql -u debian-sys-maint -p\n\nuse mysql;\n\nupdate user set authentication_string=password('123456') where user='root';\n```\n\n","slug":"mysql重置root密码","published":1,"updated":"2022-03-13T11:49:16.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07g000w9jx335rg20zd","content":"<h2 id=\"mysql重置root密码\"><a href=\"#mysql重置root密码\" class=\"headerlink\" title=\"mysql重置root密码\"></a>mysql重置root密码</h2><h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><p>1）：编辑mysqld.cnf文件</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>2）：在文件中的skip-external-locking一行的下面添加一行：</p><p>skip-grant-tables</p><p>3）：重启MySQL服务</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service mysql restart</span><br></pre></td></tr></table></figure><a id=\"more\"></a><p>4）：终端输入mysql进入MySQL，输入USE mysql切换至mysql数据库</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql</span><br><span class=\"line\">use mysql</span><br></pre></td></tr></table></figure><p>5）：把root用户的密码修改为000000</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE mysql.user SET authentication_string=password(<span class=\"string\">'000000'</span>) WHERE User=<span class=\"string\">'root'</span> AND Host =<span class=\"string\">'localhost'</span>;</span><br></pre></td></tr></table></figure><p>6）：修改字段plugin</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE user SET plugin=<span class=\"string\">\"mysql_native_password\"</span>;</span><br></pre></td></tr></table></figure><p>7）：刷新权限</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure><p>8）：退出</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quit;</span><br></pre></td></tr></table></figure><p>9）：注释掉/etc/mysql/mysql.conf.d/mysqld.cnf文件中添加的一行</p><h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><p>利用mysql自带的用户debian-sys-maint进行重置密码，只有Debian或Ubuntu服务器才有，存在于/etc/mysql/debian.cnf文件中</p><p>打开/etc/mysql/目录下的debian.cnf文件，里面包括用户名和密码</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure><p>使用文件中提供的用户名和密码进入mysql</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u debian-sys-maint -p</span><br><span class=\"line\"></span><br><span class=\"line\">use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\">update user <span class=\"built_in\">set</span> authentication_string=password(<span class=\"string\">'123456'</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">'root'</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"mysql重置root密码\"><a href=\"#mysql重置root密码\" class=\"headerlink\" title=\"mysql重置root密码\"></a>mysql重置root密码</h2><h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><p>1）：编辑mysqld.cnf文件</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>2）：在文件中的skip-external-locking一行的下面添加一行：</p><p>skip-grant-tables</p><p>3）：重启MySQL服务</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service mysql restart</span><br></pre></td></tr></table></figure>","more":"<p>4）：终端输入mysql进入MySQL，输入USE mysql切换至mysql数据库</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql</span><br><span class=\"line\">use mysql</span><br></pre></td></tr></table></figure><p>5）：把root用户的密码修改为000000</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE mysql.user SET authentication_string=password(<span class=\"string\">'000000'</span>) WHERE User=<span class=\"string\">'root'</span> AND Host =<span class=\"string\">'localhost'</span>;</span><br></pre></td></tr></table></figure><p>6）：修改字段plugin</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE user SET plugin=<span class=\"string\">\"mysql_native_password\"</span>;</span><br></pre></td></tr></table></figure><p>7）：刷新权限</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure><p>8）：退出</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quit;</span><br></pre></td></tr></table></figure><p>9）：注释掉/etc/mysql/mysql.conf.d/mysqld.cnf文件中添加的一行</p><h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><p>利用mysql自带的用户debian-sys-maint进行重置密码，只有Debian或Ubuntu服务器才有，存在于/etc/mysql/debian.cnf文件中</p><p>打开/etc/mysql/目录下的debian.cnf文件，里面包括用户名和密码</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure><p>使用文件中提供的用户名和密码进入mysql</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u debian-sys-maint -p</span><br><span class=\"line\"></span><br><span class=\"line\">use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\">update user <span class=\"built_in\">set</span> authentication_string=password(<span class=\"string\">'123456'</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">'root'</span>;</span><br></pre></td></tr></table></figure>"},{"title":"mysql的回表","type":"categories","copyright":true,"keywords":"mysql回表","abbrlink":2570087719,"date":"2022-03-12T15:47:11.000Z","_content":"\n\n## mysql回表查询的简单介绍\n\nInnoDB为引擎的mysql数据库有两大类索引，一类为聚集索引，另一类为普通索引；\n- 聚集索引\n\n&emsp;&emsp; 聚集索引的叶子节点存储行记录，因此innoDB必须要有且只能有一个聚集索引；\n\n&emsp;&emsp; 如果表定义了主键，那么主键就是聚集索引；\n\n&emsp;&emsp; 如果表没有定义主键，那么第一个非空唯一的列就是聚集索引；\n\n&emsp;&emsp; 如果既没有定义主键，也没有非空唯一的列，那么innoDB会创建一个隐藏的rowid作为聚集索引；\n\n<!-- more -->\n- 普通索引\n\n&emsp;&emsp; 普通索引的叶子节点存储的是主键值(MyISAM引擎则是存储的行记录头指针)；\n\n### 回表查询\n\n简单来说，回表查询就是当我们通过普通索引去查询行记录的时候，先通过扫描普通索引的B+索引树，找到行记录的主键值，然后根据主键值扫描聚集索引的B+索引树定位到要查找的行记录；\n\n这个过程中，我们扫描了两遍索引树，第一遍先定位行记录的主键，第二遍根据主键定位到行记录，整个过程就是回表查询；回表查询相对于主键查询多了一次扫描索引树的过程，性能要低一些；\n\n### 索引覆盖\n\n索引覆盖是一种避免回表查询的优化策略，简单来说就是将我们要查询的数据建立普通索引，可以是单列索引，也可以是和其他字段一起的联合索引；这样我们查询的数据就是索引值，可以直接返回结果；\n\n当我们需要查询的数据列本身就是索引时，我们应当避免进行\n```\nselect * from table where ...\n```\n的查询，这会回表查询整个行记录；\n\n要注意的是，不是所有类型的索引都可以成为覆盖索引的。因为覆盖索引必须要存储索引的列值，而哈希索引、空间索引和全文索引等都不存储索引列值，索引MySQL只能使用B-Tree索引做覆盖索引。\n\n另外，当发起一个被索引覆盖的查询(索引覆盖查询)时，在explain(执行计划)的Extra列可以看到【Using Index】的信息。\n\n## mysql的脏读，幻读和不可重复读\n\n### 脏读\n读取到了没有提交的数据（如果事物回滚了，那么第二个事物就读到了脏数据）\n可能的原因：\n- 有一个交叉的事物有一个新的提交commit，导致了数据的改变；\n- 一个数据库被多个实例操作时，同一事物的其他实例在该实例操作期间进行了新的提交commit；\n\n### 幻读\n幻读是指当用户进行范围查询时，另一个事物在该范围内进行了插入或删除的操作，当用户再次查询时会发现多了或者少了行记录；\n\nInnoDB通过多版本并发控制(MVCC)机制解决了该问题；\n\n### 不可重复读\n不可重复读是指在同一个事物中，对同一数据执行完全相同的查询语句得到的结果不一样；\n\n\n### mysql事物隔离级别\n- 未提交读\n\n&emsp;&emsp; 会出现脏读，幻读，不可重复读；\n\n- 已提交读\n\n&emsp;&emsp; 会出现幻读，不可重复读，不会出现脏读；\n\n- 可重复读\n\n&emsp;&emsp; 不会脏读，幻读，InnoDB不会出现不可重复读；\n\n- 串行化\n\n&emsp;&emsp; 不会脏读，幻读，不可重复读；\n\n","source":"_posts/mysql的回表.md","raw":"---\ntitle: mysql的回表\ntype: categories\ncopyright: true\ntags:\n  - 数据库\n  - mysql\ncategories:\n  - 数据库\n  - mysql\nkeywords: mysql回表\nabbrlink: 2570087719\ndate: 2022-03-12 23:47:11\n---\n\n\n## mysql回表查询的简单介绍\n\nInnoDB为引擎的mysql数据库有两大类索引，一类为聚集索引，另一类为普通索引；\n- 聚集索引\n\n&emsp;&emsp; 聚集索引的叶子节点存储行记录，因此innoDB必须要有且只能有一个聚集索引；\n\n&emsp;&emsp; 如果表定义了主键，那么主键就是聚集索引；\n\n&emsp;&emsp; 如果表没有定义主键，那么第一个非空唯一的列就是聚集索引；\n\n&emsp;&emsp; 如果既没有定义主键，也没有非空唯一的列，那么innoDB会创建一个隐藏的rowid作为聚集索引；\n\n<!-- more -->\n- 普通索引\n\n&emsp;&emsp; 普通索引的叶子节点存储的是主键值(MyISAM引擎则是存储的行记录头指针)；\n\n### 回表查询\n\n简单来说，回表查询就是当我们通过普通索引去查询行记录的时候，先通过扫描普通索引的B+索引树，找到行记录的主键值，然后根据主键值扫描聚集索引的B+索引树定位到要查找的行记录；\n\n这个过程中，我们扫描了两遍索引树，第一遍先定位行记录的主键，第二遍根据主键定位到行记录，整个过程就是回表查询；回表查询相对于主键查询多了一次扫描索引树的过程，性能要低一些；\n\n### 索引覆盖\n\n索引覆盖是一种避免回表查询的优化策略，简单来说就是将我们要查询的数据建立普通索引，可以是单列索引，也可以是和其他字段一起的联合索引；这样我们查询的数据就是索引值，可以直接返回结果；\n\n当我们需要查询的数据列本身就是索引时，我们应当避免进行\n```\nselect * from table where ...\n```\n的查询，这会回表查询整个行记录；\n\n要注意的是，不是所有类型的索引都可以成为覆盖索引的。因为覆盖索引必须要存储索引的列值，而哈希索引、空间索引和全文索引等都不存储索引列值，索引MySQL只能使用B-Tree索引做覆盖索引。\n\n另外，当发起一个被索引覆盖的查询(索引覆盖查询)时，在explain(执行计划)的Extra列可以看到【Using Index】的信息。\n\n## mysql的脏读，幻读和不可重复读\n\n### 脏读\n读取到了没有提交的数据（如果事物回滚了，那么第二个事物就读到了脏数据）\n可能的原因：\n- 有一个交叉的事物有一个新的提交commit，导致了数据的改变；\n- 一个数据库被多个实例操作时，同一事物的其他实例在该实例操作期间进行了新的提交commit；\n\n### 幻读\n幻读是指当用户进行范围查询时，另一个事物在该范围内进行了插入或删除的操作，当用户再次查询时会发现多了或者少了行记录；\n\nInnoDB通过多版本并发控制(MVCC)机制解决了该问题；\n\n### 不可重复读\n不可重复读是指在同一个事物中，对同一数据执行完全相同的查询语句得到的结果不一样；\n\n\n### mysql事物隔离级别\n- 未提交读\n\n&emsp;&emsp; 会出现脏读，幻读，不可重复读；\n\n- 已提交读\n\n&emsp;&emsp; 会出现幻读，不可重复读，不会出现脏读；\n\n- 可重复读\n\n&emsp;&emsp; 不会脏读，幻读，InnoDB不会出现不可重复读；\n\n- 串行化\n\n&emsp;&emsp; 不会脏读，幻读，不可重复读；\n\n","slug":"mysql的回表","published":1,"updated":"2022-03-13T13:52:38.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07h000y9jx3f6qkfx3l","content":"<h2 id=\"mysql回表查询的简单介绍\"><a href=\"#mysql回表查询的简单介绍\" class=\"headerlink\" title=\"mysql回表查询的简单介绍\"></a>mysql回表查询的简单介绍</h2><p>InnoDB为引擎的mysql数据库有两大类索引，一类为聚集索引，另一类为普通索引；</p><ul><li>聚集索引</li></ul><p>&emsp;&emsp; 聚集索引的叶子节点存储行记录，因此innoDB必须要有且只能有一个聚集索引；</p><p>&emsp;&emsp; 如果表定义了主键，那么主键就是聚集索引；</p><p>&emsp;&emsp; 如果表没有定义主键，那么第一个非空唯一的列就是聚集索引；</p><p>&emsp;&emsp; 如果既没有定义主键，也没有非空唯一的列，那么innoDB会创建一个隐藏的rowid作为聚集索引；</p><a id=\"more\"></a><ul><li>普通索引</li></ul><p>&emsp;&emsp; 普通索引的叶子节点存储的是主键值(MyISAM引擎则是存储的行记录头指针)；</p><h3 id=\"回表查询\"><a href=\"#回表查询\" class=\"headerlink\" title=\"回表查询\"></a>回表查询</h3><p>简单来说，回表查询就是当我们通过普通索引去查询行记录的时候，先通过扫描普通索引的B+索引树，找到行记录的主键值，然后根据主键值扫描聚集索引的B+索引树定位到要查找的行记录；</p><p>这个过程中，我们扫描了两遍索引树，第一遍先定位行记录的主键，第二遍根据主键定位到行记录，整个过程就是回表查询；回表查询相对于主键查询多了一次扫描索引树的过程，性能要低一些；</p><h3 id=\"索引覆盖\"><a href=\"#索引覆盖\" class=\"headerlink\" title=\"索引覆盖\"></a>索引覆盖</h3><p>索引覆盖是一种避免回表查询的优化策略，简单来说就是将我们要查询的数据建立普通索引，可以是单列索引，也可以是和其他字段一起的联合索引；这样我们查询的数据就是索引值，可以直接返回结果；</p><p>当我们需要查询的数据列本身就是索引时，我们应当避免进行</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> ...</span><br></pre></td></tr></table></figure><p>的查询，这会回表查询整个行记录；</p><p>要注意的是，不是所有类型的索引都可以成为覆盖索引的。因为覆盖索引必须要存储索引的列值，而哈希索引、空间索引和全文索引等都不存储索引列值，索引MySQL只能使用B-Tree索引做覆盖索引。</p><p>另外，当发起一个被索引覆盖的查询(索引覆盖查询)时，在explain(执行计划)的Extra列可以看到【Using Index】的信息。</p><h2 id=\"mysql的脏读，幻读和不可重复读\"><a href=\"#mysql的脏读，幻读和不可重复读\" class=\"headerlink\" title=\"mysql的脏读，幻读和不可重复读\"></a>mysql的脏读，幻读和不可重复读</h2><h3 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h3><p>读取到了没有提交的数据（如果事物回滚了，那么第二个事物就读到了脏数据）<br>可能的原因：</p><ul><li>有一个交叉的事物有一个新的提交commit，导致了数据的改变；</li><li>一个数据库被多个实例操作时，同一事物的其他实例在该实例操作期间进行了新的提交commit；</li></ul><h3 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h3><p>幻读是指当用户进行范围查询时，另一个事物在该范围内进行了插入或删除的操作，当用户再次查询时会发现多了或者少了行记录；</p><p>InnoDB通过多版本并发控制(MVCC)机制解决了该问题；</p><h3 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h3><p>不可重复读是指在同一个事物中，对同一数据执行完全相同的查询语句得到的结果不一样；</p><h3 id=\"mysql事物隔离级别\"><a href=\"#mysql事物隔离级别\" class=\"headerlink\" title=\"mysql事物隔离级别\"></a>mysql事物隔离级别</h3><ul><li>未提交读</li></ul><p>&emsp;&emsp; 会出现脏读，幻读，不可重复读；</p><ul><li>已提交读</li></ul><p>&emsp;&emsp; 会出现幻读，不可重复读，不会出现脏读；</p><ul><li>可重复读</li></ul><p>&emsp;&emsp; 不会脏读，幻读，InnoDB不会出现不可重复读；</p><ul><li>串行化</li></ul><p>&emsp;&emsp; 不会脏读，幻读，不可重复读；</p>","site":{"data":{}},"excerpt":"<h2 id=\"mysql回表查询的简单介绍\"><a href=\"#mysql回表查询的简单介绍\" class=\"headerlink\" title=\"mysql回表查询的简单介绍\"></a>mysql回表查询的简单介绍</h2><p>InnoDB为引擎的mysql数据库有两大类索引，一类为聚集索引，另一类为普通索引；</p><ul><li>聚集索引</li></ul><p>&emsp;&emsp; 聚集索引的叶子节点存储行记录，因此innoDB必须要有且只能有一个聚集索引；</p><p>&emsp;&emsp; 如果表定义了主键，那么主键就是聚集索引；</p><p>&emsp;&emsp; 如果表没有定义主键，那么第一个非空唯一的列就是聚集索引；</p><p>&emsp;&emsp; 如果既没有定义主键，也没有非空唯一的列，那么innoDB会创建一个隐藏的rowid作为聚集索引；</p>","more":"<ul><li>普通索引</li></ul><p>&emsp;&emsp; 普通索引的叶子节点存储的是主键值(MyISAM引擎则是存储的行记录头指针)；</p><h3 id=\"回表查询\"><a href=\"#回表查询\" class=\"headerlink\" title=\"回表查询\"></a>回表查询</h3><p>简单来说，回表查询就是当我们通过普通索引去查询行记录的时候，先通过扫描普通索引的B+索引树，找到行记录的主键值，然后根据主键值扫描聚集索引的B+索引树定位到要查找的行记录；</p><p>这个过程中，我们扫描了两遍索引树，第一遍先定位行记录的主键，第二遍根据主键定位到行记录，整个过程就是回表查询；回表查询相对于主键查询多了一次扫描索引树的过程，性能要低一些；</p><h3 id=\"索引覆盖\"><a href=\"#索引覆盖\" class=\"headerlink\" title=\"索引覆盖\"></a>索引覆盖</h3><p>索引覆盖是一种避免回表查询的优化策略，简单来说就是将我们要查询的数据建立普通索引，可以是单列索引，也可以是和其他字段一起的联合索引；这样我们查询的数据就是索引值，可以直接返回结果；</p><p>当我们需要查询的数据列本身就是索引时，我们应当避免进行</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> ...</span><br></pre></td></tr></table></figure><p>的查询，这会回表查询整个行记录；</p><p>要注意的是，不是所有类型的索引都可以成为覆盖索引的。因为覆盖索引必须要存储索引的列值，而哈希索引、空间索引和全文索引等都不存储索引列值，索引MySQL只能使用B-Tree索引做覆盖索引。</p><p>另外，当发起一个被索引覆盖的查询(索引覆盖查询)时，在explain(执行计划)的Extra列可以看到【Using Index】的信息。</p><h2 id=\"mysql的脏读，幻读和不可重复读\"><a href=\"#mysql的脏读，幻读和不可重复读\" class=\"headerlink\" title=\"mysql的脏读，幻读和不可重复读\"></a>mysql的脏读，幻读和不可重复读</h2><h3 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h3><p>读取到了没有提交的数据（如果事物回滚了，那么第二个事物就读到了脏数据）<br>可能的原因：</p><ul><li>有一个交叉的事物有一个新的提交commit，导致了数据的改变；</li><li>一个数据库被多个实例操作时，同一事物的其他实例在该实例操作期间进行了新的提交commit；</li></ul><h3 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h3><p>幻读是指当用户进行范围查询时，另一个事物在该范围内进行了插入或删除的操作，当用户再次查询时会发现多了或者少了行记录；</p><p>InnoDB通过多版本并发控制(MVCC)机制解决了该问题；</p><h3 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h3><p>不可重复读是指在同一个事物中，对同一数据执行完全相同的查询语句得到的结果不一样；</p><h3 id=\"mysql事物隔离级别\"><a href=\"#mysql事物隔离级别\" class=\"headerlink\" title=\"mysql事物隔离级别\"></a>mysql事物隔离级别</h3><ul><li>未提交读</li></ul><p>&emsp;&emsp; 会出现脏读，幻读，不可重复读；</p><ul><li>已提交读</li></ul><p>&emsp;&emsp; 会出现幻读，不可重复读，不会出现脏读；</p><ul><li>可重复读</li></ul><p>&emsp;&emsp; 不会脏读，幻读，InnoDB不会出现不可重复读；</p><ul><li>串行化</li></ul><p>&emsp;&emsp; 不会脏读，幻读，不可重复读；</p>"},{"title":"mysql索引","type":"categories","copyright":true,"keywords":["mysql","索引"],"abbrlink":1895910490,"date":"2022-03-03T09:20:21.000Z","_content":"\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n##  mysql索引\n\n### 索引的优点\n- 可以大大加快数据的检索速度，这也是创建索引的最主要的原因。\n- 通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。\n\n### 索引的缺点\n- 时间方面：创建索引和维护索引要耗费时间，具体地，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，会降低增/改/删的执行效率；\n- 空间方面：索引需要占物理空间。\n\n<!-- more -->\n从存储结构上来划分：BTree索引（B-Tree或B+Tree索引），Hash索引，full-index全文索引，R-Tree索引。这里所描述的是索引存储时保存的形式，\n\n从应用层次来分：普通索引，唯一索引，复合索引。\n- 普通索引：即一个索引只包含单个列，一个表可以有多个单列索引\n- 唯一索引：索引列的值必须唯一，但允许有空值\n- 复合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并\n- 聚簇索引(聚集索引)：并不是一种单独的索引类型，而是一种数据存储方式。具体细节取决于不同的实现，InnoDB的聚簇索引其实就是在同一个结构中保存了B-Tree索引(技术上来说是B+Tree)和数据行。\n- 非聚簇索引： 不是聚簇索引，就是非聚簇索引\n\n根据中数据的物理顺序与键值的逻辑（索引）顺序关系： 聚集索引，非聚集索引。\n\n### 联合索引\n\nMySQL可以使用多个字段同时建立一个索引，叫做联合索引。在联合索引中，如果想要命中索引，需要按照建立索引时的字段顺序挨个使用，否则无法命中索引。\n\n具体原因为:\n\nMySQL使用索引时需要索引有序，假设现在建立了\"name，age，school\"的联合索引，那么索引的排序为: 先按照name排序，如果name相同，则按照age排序，如果age的值也相等，则按照school进行排序。\n\n当进行查询时，此时索引仅仅按照name严格有序，因此必须首先使用name字段进行等值查询，之后对于匹配到的列而言，其按照age字段严格有序，此时可以使用age字段用做索引查找，以此类推。因此在建立联合索引的时候应该注意索引列的顺序，一般情况下，将查询需求频繁或者字段选择性高的列放在前面。此外可以根据特例的查询或者表结构进行单独的调整。\n\n### 最左前缀原则\n最左前缀原则就是最左优先，在创建多列索引时，要根据业务需求，where子句中使用最频繁的一列放在最左边。\n\nmysql会一直向右匹配直到遇到范围查询(>、<、between、like)就停止匹配，比如a = 1 and b = 2 and c > 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。\n\n=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。\n\n### 前缀索引\n因为可能我们索引的字段非常长，这既占内存空间，也不利于维护。所以我们就想，如果只把很长字段的前面的公共部分作为一个索引，就会产生超级加倍的效果。但是，我们需要注意，order by不支持前缀索引 。\n- 先计算完整列的选择性 : select count(distinct col_1)/count(1) from table_1\n- 再计算不同前缀长度的选择性 : select count(distinct left(col_1,4))/count(1) from table_1\n- 找到最优长度之后，创建前缀索引 : create index idx_front on table_1 (col_1(4))\n\n### 索引下推\nMySQL 5.6引入了索引下推优化。默认开启，使用SET optimizer_switch = ‘index_condition_pushdown=off’;可以将其关闭。\n- 有了索引下推优化，可以在减少回表次数\n- 在InnoDB中只针对二级索引有效\n\n官方文档中给的例子和解释如下：\n\n在 people_table中有一个二级索引(zipcode，lastname，address)，查询是SELECT * FROM people WHERE zipcode=’95054′ AND lastname LIKE ‘%etrunia%’ AND address LIKE ‘%Main Street%’\n- 如果没有使用索引下推技术，则MySQL会通过zipcode=’95054’从存储引擎中查询对应的数据，返回到MySQL服务端，然后MySQL服务端基于lastname LIKE ‘%etrunia%’ and address LIKE ‘%Main Street%’来判断数据是否符合条件\n- 如果使用了索引下推技术，则MYSQL首先会返回符合zipcode=’95054’的索引，然后根据lastname LIKE ‘%etrunia%’ and address LIKE ‘%Main Street%’来判断索引是否符合条件。如果符合条件，则根据该索引来定位对应的数据，如果不符合，则直接reject掉。\n\n### 索引失效\n- 使用!= 或者 <> 导致索引失效\n- 类型不一致导致的索引失效\n- 函数导致的索引失效\n```\n# 如果使用函数在索引列，这是不走索引的。\nSELECT * FROM `user` WHERE DATE(create_time) = '2020-09-03';\n```\n- 运算符导致的索引失效\n```\nSELECT * FROM `user` WHERE age - 1 = 20;\n```\n- OR引起的索引失效\n```\nSELECT * FROM `user` WHERE `name` = '张三' OR height = '175';\n```\nOR导致索引是在特定情况下的，并不是所有的OR都是使索引失效，如果OR连接的是同一个字段，那么索引不会失效，反之索引失效。\n\n- 模糊搜索导致的索引失效\n```\nSELECT * FROM `user` WHERE `name` LIKE '%冰';\n```\n当%放在匹配字段前是不走索引的，放在后面才会走索引。\n- NOT IN、NOT EXISTS导致索引失效\n\n\n\n","source":"_posts/mysql索引.md","raw":"---\ntitle: mysql索引\ntype: categories\ncopyright: true\ntags:\n  - 数据库\n  - mysql\ncategories:\n  - 数据库\n  - mysql\nkeywords:\n  - mysql\n  - 索引\nabbrlink: 1895910490\ndate: 2022-03-03 17:20:21\n---\n\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n##  mysql索引\n\n### 索引的优点\n- 可以大大加快数据的检索速度，这也是创建索引的最主要的原因。\n- 通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。\n\n### 索引的缺点\n- 时间方面：创建索引和维护索引要耗费时间，具体地，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，会降低增/改/删的执行效率；\n- 空间方面：索引需要占物理空间。\n\n<!-- more -->\n从存储结构上来划分：BTree索引（B-Tree或B+Tree索引），Hash索引，full-index全文索引，R-Tree索引。这里所描述的是索引存储时保存的形式，\n\n从应用层次来分：普通索引，唯一索引，复合索引。\n- 普通索引：即一个索引只包含单个列，一个表可以有多个单列索引\n- 唯一索引：索引列的值必须唯一，但允许有空值\n- 复合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并\n- 聚簇索引(聚集索引)：并不是一种单独的索引类型，而是一种数据存储方式。具体细节取决于不同的实现，InnoDB的聚簇索引其实就是在同一个结构中保存了B-Tree索引(技术上来说是B+Tree)和数据行。\n- 非聚簇索引： 不是聚簇索引，就是非聚簇索引\n\n根据中数据的物理顺序与键值的逻辑（索引）顺序关系： 聚集索引，非聚集索引。\n\n### 联合索引\n\nMySQL可以使用多个字段同时建立一个索引，叫做联合索引。在联合索引中，如果想要命中索引，需要按照建立索引时的字段顺序挨个使用，否则无法命中索引。\n\n具体原因为:\n\nMySQL使用索引时需要索引有序，假设现在建立了\"name，age，school\"的联合索引，那么索引的排序为: 先按照name排序，如果name相同，则按照age排序，如果age的值也相等，则按照school进行排序。\n\n当进行查询时，此时索引仅仅按照name严格有序，因此必须首先使用name字段进行等值查询，之后对于匹配到的列而言，其按照age字段严格有序，此时可以使用age字段用做索引查找，以此类推。因此在建立联合索引的时候应该注意索引列的顺序，一般情况下，将查询需求频繁或者字段选择性高的列放在前面。此外可以根据特例的查询或者表结构进行单独的调整。\n\n### 最左前缀原则\n最左前缀原则就是最左优先，在创建多列索引时，要根据业务需求，where子句中使用最频繁的一列放在最左边。\n\nmysql会一直向右匹配直到遇到范围查询(>、<、between、like)就停止匹配，比如a = 1 and b = 2 and c > 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。\n\n=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。\n\n### 前缀索引\n因为可能我们索引的字段非常长，这既占内存空间，也不利于维护。所以我们就想，如果只把很长字段的前面的公共部分作为一个索引，就会产生超级加倍的效果。但是，我们需要注意，order by不支持前缀索引 。\n- 先计算完整列的选择性 : select count(distinct col_1)/count(1) from table_1\n- 再计算不同前缀长度的选择性 : select count(distinct left(col_1,4))/count(1) from table_1\n- 找到最优长度之后，创建前缀索引 : create index idx_front on table_1 (col_1(4))\n\n### 索引下推\nMySQL 5.6引入了索引下推优化。默认开启，使用SET optimizer_switch = ‘index_condition_pushdown=off’;可以将其关闭。\n- 有了索引下推优化，可以在减少回表次数\n- 在InnoDB中只针对二级索引有效\n\n官方文档中给的例子和解释如下：\n\n在 people_table中有一个二级索引(zipcode，lastname，address)，查询是SELECT * FROM people WHERE zipcode=’95054′ AND lastname LIKE ‘%etrunia%’ AND address LIKE ‘%Main Street%’\n- 如果没有使用索引下推技术，则MySQL会通过zipcode=’95054’从存储引擎中查询对应的数据，返回到MySQL服务端，然后MySQL服务端基于lastname LIKE ‘%etrunia%’ and address LIKE ‘%Main Street%’来判断数据是否符合条件\n- 如果使用了索引下推技术，则MYSQL首先会返回符合zipcode=’95054’的索引，然后根据lastname LIKE ‘%etrunia%’ and address LIKE ‘%Main Street%’来判断索引是否符合条件。如果符合条件，则根据该索引来定位对应的数据，如果不符合，则直接reject掉。\n\n### 索引失效\n- 使用!= 或者 <> 导致索引失效\n- 类型不一致导致的索引失效\n- 函数导致的索引失效\n```\n# 如果使用函数在索引列，这是不走索引的。\nSELECT * FROM `user` WHERE DATE(create_time) = '2020-09-03';\n```\n- 运算符导致的索引失效\n```\nSELECT * FROM `user` WHERE age - 1 = 20;\n```\n- OR引起的索引失效\n```\nSELECT * FROM `user` WHERE `name` = '张三' OR height = '175';\n```\nOR导致索引是在特定情况下的，并不是所有的OR都是使索引失效，如果OR连接的是同一个字段，那么索引不会失效，反之索引失效。\n\n- 模糊搜索导致的索引失效\n```\nSELECT * FROM `user` WHERE `name` LIKE '%冰';\n```\n当%放在匹配字段前是不走索引的，放在后面才会走索引。\n- NOT IN、NOT EXISTS导致索引失效\n\n\n\n","slug":"mysql索引","published":1,"updated":"2022-03-13T11:49:16.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07i00119jx32p6vft34","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><h2 id=\"mysql索引\"><a href=\"#mysql索引\" class=\"headerlink\" title=\"mysql索引\"></a>mysql索引</h2><h3 id=\"索引的优点\"><a href=\"#索引的优点\" class=\"headerlink\" title=\"索引的优点\"></a>索引的优点</h3><ul><li>可以大大加快数据的检索速度，这也是创建索引的最主要的原因。</li><li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li></ul><h3 id=\"索引的缺点\"><a href=\"#索引的缺点\" class=\"headerlink\" title=\"索引的缺点\"></a>索引的缺点</h3><ul><li>时间方面：创建索引和维护索引要耗费时间，具体地，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，会降低增/改/删的执行效率；</li><li>空间方面：索引需要占物理空间。</li></ul><a id=\"more\"></a><p>从存储结构上来划分：BTree索引（B-Tree或B+Tree索引），Hash索引，full-index全文索引，R-Tree索引。这里所描述的是索引存储时保存的形式，</p><p>从应用层次来分：普通索引，唯一索引，复合索引。</p><ul><li>普通索引：即一个索引只包含单个列，一个表可以有多个单列索引</li><li>唯一索引：索引列的值必须唯一，但允许有空值</li><li>复合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</li><li>聚簇索引(聚集索引)：并不是一种单独的索引类型，而是一种数据存储方式。具体细节取决于不同的实现，InnoDB的聚簇索引其实就是在同一个结构中保存了B-Tree索引(技术上来说是B+Tree)和数据行。</li><li>非聚簇索引： 不是聚簇索引，就是非聚簇索引</li></ul><p>根据中数据的物理顺序与键值的逻辑（索引）顺序关系： 聚集索引，非聚集索引。</p><h3 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h3><p>MySQL可以使用多个字段同时建立一个索引，叫做联合索引。在联合索引中，如果想要命中索引，需要按照建立索引时的字段顺序挨个使用，否则无法命中索引。</p><p>具体原因为:</p><p>MySQL使用索引时需要索引有序，假设现在建立了”name，age，school”的联合索引，那么索引的排序为: 先按照name排序，如果name相同，则按照age排序，如果age的值也相等，则按照school进行排序。</p><p>当进行查询时，此时索引仅仅按照name严格有序，因此必须首先使用name字段进行等值查询，之后对于匹配到的列而言，其按照age字段严格有序，此时可以使用age字段用做索引查找，以此类推。因此在建立联合索引的时候应该注意索引列的顺序，一般情况下，将查询需求频繁或者字段选择性高的列放在前面。此外可以根据特例的查询或者表结构进行单独的调整。</p><h3 id=\"最左前缀原则\"><a href=\"#最左前缀原则\" class=\"headerlink\" title=\"最左前缀原则\"></a>最左前缀原则</h3><p>最左前缀原则就是最左优先，在创建多列索引时，要根据业务需求，where子句中使用最频繁的一列放在最左边。</p><p>mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。</p><h3 id=\"前缀索引\"><a href=\"#前缀索引\" class=\"headerlink\" title=\"前缀索引\"></a>前缀索引</h3><p>因为可能我们索引的字段非常长，这既占内存空间，也不利于维护。所以我们就想，如果只把很长字段的前面的公共部分作为一个索引，就会产生超级加倍的效果。但是，我们需要注意，order by不支持前缀索引 。</p><ul><li>先计算完整列的选择性 : select count(distinct col_1)/count(1) from table_1</li><li>再计算不同前缀长度的选择性 : select count(distinct left(col_1,4))/count(1) from table_1</li><li>找到最优长度之后，创建前缀索引 : create index idx_front on table_1 (col_1(4))</li></ul><h3 id=\"索引下推\"><a href=\"#索引下推\" class=\"headerlink\" title=\"索引下推\"></a>索引下推</h3><p>MySQL 5.6引入了索引下推优化。默认开启，使用SET optimizer_switch = ‘index_condition_pushdown=off’;可以将其关闭。</p><ul><li>有了索引下推优化，可以在减少回表次数</li><li>在InnoDB中只针对二级索引有效</li></ul><p>官方文档中给的例子和解释如下：</p><p>在 people_table中有一个二级索引(zipcode，lastname，address)，查询是SELECT * FROM people WHERE zipcode=’95054′ AND lastname LIKE ‘%etrunia%’ AND address LIKE ‘%Main Street%’</p><ul><li>如果没有使用索引下推技术，则MySQL会通过zipcode=’95054’从存储引擎中查询对应的数据，返回到MySQL服务端，然后MySQL服务端基于lastname LIKE ‘%etrunia%’ and address LIKE ‘%Main Street%’来判断数据是否符合条件</li><li>如果使用了索引下推技术，则MYSQL首先会返回符合zipcode=’95054’的索引，然后根据lastname LIKE ‘%etrunia%’ and address LIKE ‘%Main Street%’来判断索引是否符合条件。如果符合条件，则根据该索引来定位对应的数据，如果不符合，则直接reject掉。</li></ul><h3 id=\"索引失效\"><a href=\"#索引失效\" class=\"headerlink\" title=\"索引失效\"></a>索引失效</h3><ul><li><p>使用!= 或者 &lt;&gt; 导致索引失效</p></li><li><p>类型不一致导致的索引失效</p></li><li><p>函数导致的索引失效</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果使用函数在索引列，这是不走索引的。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"string\">`user`</span> <span class=\"keyword\">WHERE</span> <span class=\"built_in\">DATE</span>(create_time) = <span class=\"string\">'2020-09-03'</span>;</span><br></pre></td></tr></table></figure></li><li><p>运算符导致的索引失效</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"symbol\">`user`</span> <span class=\"keyword\">WHERE</span> age - <span class=\"number\">1</span> = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure></li><li><p>OR引起的索引失效</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"symbol\">`user`</span> <span class=\"keyword\">WHERE</span> <span class=\"symbol\">`name`</span> = <span class=\"string\">'张三'</span> <span class=\"keyword\">OR</span> height = <span class=\"string\">'175'</span>;</span><br></pre></td></tr></table></figure><p>OR导致索引是在特定情况下的，并不是所有的OR都是使索引失效，如果OR连接的是同一个字段，那么索引不会失效，反之索引失效。</p></li><li><p>模糊搜索导致的索引失效</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"symbol\">`user`</span> <span class=\"keyword\">WHERE</span> <span class=\"symbol\">`name`</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'%冰'</span>;</span><br></pre></td></tr></table></figure><p>当%放在匹配字段前是不走索引的，放在后面才会走索引。</p></li><li><p>NOT IN、NOT EXISTS导致索引失效</p></li></ul>","site":{"data":{}},"excerpt":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><h2 id=\"mysql索引\"><a href=\"#mysql索引\" class=\"headerlink\" title=\"mysql索引\"></a>mysql索引</h2><h3 id=\"索引的优点\"><a href=\"#索引的优点\" class=\"headerlink\" title=\"索引的优点\"></a>索引的优点</h3><ul><li>可以大大加快数据的检索速度，这也是创建索引的最主要的原因。</li><li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li></ul><h3 id=\"索引的缺点\"><a href=\"#索引的缺点\" class=\"headerlink\" title=\"索引的缺点\"></a>索引的缺点</h3><ul><li>时间方面：创建索引和维护索引要耗费时间，具体地，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，会降低增/改/删的执行效率；</li><li>空间方面：索引需要占物理空间。</li></ul>","more":"<p>从存储结构上来划分：BTree索引（B-Tree或B+Tree索引），Hash索引，full-index全文索引，R-Tree索引。这里所描述的是索引存储时保存的形式，</p><p>从应用层次来分：普通索引，唯一索引，复合索引。</p><ul><li>普通索引：即一个索引只包含单个列，一个表可以有多个单列索引</li><li>唯一索引：索引列的值必须唯一，但允许有空值</li><li>复合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</li><li>聚簇索引(聚集索引)：并不是一种单独的索引类型，而是一种数据存储方式。具体细节取决于不同的实现，InnoDB的聚簇索引其实就是在同一个结构中保存了B-Tree索引(技术上来说是B+Tree)和数据行。</li><li>非聚簇索引： 不是聚簇索引，就是非聚簇索引</li></ul><p>根据中数据的物理顺序与键值的逻辑（索引）顺序关系： 聚集索引，非聚集索引。</p><h3 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h3><p>MySQL可以使用多个字段同时建立一个索引，叫做联合索引。在联合索引中，如果想要命中索引，需要按照建立索引时的字段顺序挨个使用，否则无法命中索引。</p><p>具体原因为:</p><p>MySQL使用索引时需要索引有序，假设现在建立了”name，age，school”的联合索引，那么索引的排序为: 先按照name排序，如果name相同，则按照age排序，如果age的值也相等，则按照school进行排序。</p><p>当进行查询时，此时索引仅仅按照name严格有序，因此必须首先使用name字段进行等值查询，之后对于匹配到的列而言，其按照age字段严格有序，此时可以使用age字段用做索引查找，以此类推。因此在建立联合索引的时候应该注意索引列的顺序，一般情况下，将查询需求频繁或者字段选择性高的列放在前面。此外可以根据特例的查询或者表结构进行单独的调整。</p><h3 id=\"最左前缀原则\"><a href=\"#最左前缀原则\" class=\"headerlink\" title=\"最左前缀原则\"></a>最左前缀原则</h3><p>最左前缀原则就是最左优先，在创建多列索引时，要根据业务需求，where子句中使用最频繁的一列放在最左边。</p><p>mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。</p><h3 id=\"前缀索引\"><a href=\"#前缀索引\" class=\"headerlink\" title=\"前缀索引\"></a>前缀索引</h3><p>因为可能我们索引的字段非常长，这既占内存空间，也不利于维护。所以我们就想，如果只把很长字段的前面的公共部分作为一个索引，就会产生超级加倍的效果。但是，我们需要注意，order by不支持前缀索引 。</p><ul><li>先计算完整列的选择性 : select count(distinct col_1)/count(1) from table_1</li><li>再计算不同前缀长度的选择性 : select count(distinct left(col_1,4))/count(1) from table_1</li><li>找到最优长度之后，创建前缀索引 : create index idx_front on table_1 (col_1(4))</li></ul><h3 id=\"索引下推\"><a href=\"#索引下推\" class=\"headerlink\" title=\"索引下推\"></a>索引下推</h3><p>MySQL 5.6引入了索引下推优化。默认开启，使用SET optimizer_switch = ‘index_condition_pushdown=off’;可以将其关闭。</p><ul><li>有了索引下推优化，可以在减少回表次数</li><li>在InnoDB中只针对二级索引有效</li></ul><p>官方文档中给的例子和解释如下：</p><p>在 people_table中有一个二级索引(zipcode，lastname，address)，查询是SELECT * FROM people WHERE zipcode=’95054′ AND lastname LIKE ‘%etrunia%’ AND address LIKE ‘%Main Street%’</p><ul><li>如果没有使用索引下推技术，则MySQL会通过zipcode=’95054’从存储引擎中查询对应的数据，返回到MySQL服务端，然后MySQL服务端基于lastname LIKE ‘%etrunia%’ and address LIKE ‘%Main Street%’来判断数据是否符合条件</li><li>如果使用了索引下推技术，则MYSQL首先会返回符合zipcode=’95054’的索引，然后根据lastname LIKE ‘%etrunia%’ and address LIKE ‘%Main Street%’来判断索引是否符合条件。如果符合条件，则根据该索引来定位对应的数据，如果不符合，则直接reject掉。</li></ul><h3 id=\"索引失效\"><a href=\"#索引失效\" class=\"headerlink\" title=\"索引失效\"></a>索引失效</h3><ul><li><p>使用!= 或者 &lt;&gt; 导致索引失效</p></li><li><p>类型不一致导致的索引失效</p></li><li><p>函数导致的索引失效</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果使用函数在索引列，这是不走索引的。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"string\">`user`</span> <span class=\"keyword\">WHERE</span> <span class=\"built_in\">DATE</span>(create_time) = <span class=\"string\">'2020-09-03'</span>;</span><br></pre></td></tr></table></figure></li><li><p>运算符导致的索引失效</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"symbol\">`user`</span> <span class=\"keyword\">WHERE</span> age - <span class=\"number\">1</span> = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure></li><li><p>OR引起的索引失效</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"symbol\">`user`</span> <span class=\"keyword\">WHERE</span> <span class=\"symbol\">`name`</span> = <span class=\"string\">'张三'</span> <span class=\"keyword\">OR</span> height = <span class=\"string\">'175'</span>;</span><br></pre></td></tr></table></figure><p>OR导致索引是在特定情况下的，并不是所有的OR都是使索引失效，如果OR连接的是同一个字段，那么索引不会失效，反之索引失效。</p></li><li><p>模糊搜索导致的索引失效</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"symbol\">`user`</span> <span class=\"keyword\">WHERE</span> <span class=\"symbol\">`name`</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'%冰'</span>;</span><br></pre></td></tr></table></figure><p>当%放在匹配字段前是不走索引的，放在后面才会走索引。</p></li><li><p>NOT IN、NOT EXISTS导致索引失效</p></li></ul>"},{"title":"python3中Unicode字符转中文","type":"categories","copyright":true,"abbrlink":685354991,"date":"2020-01-02T06:51:14.000Z","_content":"\n## python3中将Unicode字符串转成中文\n\n用python爬虫爬取数据时，有时候会发现爬取的数据类似于\n```python\n\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\n```\n这样的Unicode字符串，在python的交互环境里可以直接打印输出查看内容；\n```python\nprint(\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\")\n\n# 【演唱会】2000-拉阔音乐会\n```\n<!--more-->\n\n但是有些时候，我们需要保存的是中文数据，而不是Unicode字符串，所以我们需要将Unicode转成中文，我们知道encode()方法是将Unicode码转成我们需要的编码格式，但是我们返回的本身就是str格式，所以我们需要将Unicode字符串转成Unicode码，网上查了资料，是将字符串进行decode(\"unicode_escape\")转换，但是在python3中，提示str没有decode的方法。\n\n因此解决的办法是先采用encode()进行编码，在用同样的编码格式进行decode解码；\n\n```python\ndata = \"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\".encode(\"utf-8\").decode(\"utf-8\")\nprint(type(data))  # <class 'str'>\nprint(data)  # 【演唱会】2000-拉阔音乐会\n```\n\n```python\ndata = \"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\".encode(\"GBK\").decode(\"GBK\")\nprint(type(data))  # <class 'str'>\nprint(data)  # 【演唱会】2000-拉阔音乐会\n```\n\n编码格式可以任意，只是解码的时候需要用相同的格式进行解码就行，这样我们就可以保存中文数据了。\n","source":"_posts/python3中Unicode字符转中文.md","raw":"---\ntitle: python3中Unicode字符转中文\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 爬虫\ncategories:\n  - python\n  - 爬虫\nabbrlink: 685354991\ndate: 2020-01-02 14:51:14\n---\n\n## python3中将Unicode字符串转成中文\n\n用python爬虫爬取数据时，有时候会发现爬取的数据类似于\n```python\n\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\n```\n这样的Unicode字符串，在python的交互环境里可以直接打印输出查看内容；\n```python\nprint(\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\")\n\n# 【演唱会】2000-拉阔音乐会\n```\n<!--more-->\n\n但是有些时候，我们需要保存的是中文数据，而不是Unicode字符串，所以我们需要将Unicode转成中文，我们知道encode()方法是将Unicode码转成我们需要的编码格式，但是我们返回的本身就是str格式，所以我们需要将Unicode字符串转成Unicode码，网上查了资料，是将字符串进行decode(\"unicode_escape\")转换，但是在python3中，提示str没有decode的方法。\n\n因此解决的办法是先采用encode()进行编码，在用同样的编码格式进行decode解码；\n\n```python\ndata = \"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\".encode(\"utf-8\").decode(\"utf-8\")\nprint(type(data))  # <class 'str'>\nprint(data)  # 【演唱会】2000-拉阔音乐会\n```\n\n```python\ndata = \"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\".encode(\"GBK\").decode(\"GBK\")\nprint(type(data))  # <class 'str'>\nprint(data)  # 【演唱会】2000-拉阔音乐会\n```\n\n编码格式可以任意，只是解码的时候需要用相同的格式进行解码就行，这样我们就可以保存中文数据了。\n","slug":"python3中Unicode字符转中文","published":1,"updated":"2022-03-13T11:49:16.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07j00139jx3ff1s8tzy","content":"<h2 id=\"python3中将Unicode字符串转成中文\"><a href=\"#python3中将Unicode字符串转成中文\" class=\"headerlink\" title=\"python3中将Unicode字符串转成中文\"></a>python3中将Unicode字符串转成中文</h2><p>用python爬虫爬取数据时，有时候会发现爬取的数据类似于</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a</span><br></pre></td></tr></table></figure><p>这样的Unicode字符串，在python的交互环境里可以直接打印输出查看内容；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 【演唱会】2000-拉阔音乐会</span></span><br></pre></td></tr></table></figure><a id=\"more\"></a><p>但是有些时候，我们需要保存的是中文数据，而不是Unicode字符串，所以我们需要将Unicode转成中文，我们知道encode()方法是将Unicode码转成我们需要的编码格式，但是我们返回的本身就是str格式，所以我们需要将Unicode字符串转成Unicode码，网上查了资料，是将字符串进行decode(“unicode_escape”)转换，但是在python3中，提示str没有decode的方法。</p><p>因此解决的办法是先采用encode()进行编码，在用同样的编码格式进行decode解码；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"string\">\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\"</span>.encode(<span class=\"string\">\"utf-8\"</span>).decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">print(type(data))  <span class=\"comment\"># &lt;class 'str'&gt;</span></span><br><span class=\"line\">print(data)  <span class=\"comment\"># 【演唱会】2000-拉阔音乐会</span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"string\">\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\"</span>.encode(<span class=\"string\">\"GBK\"</span>).decode(<span class=\"string\">\"GBK\"</span>)</span><br><span class=\"line\">print(type(data))  <span class=\"comment\"># &lt;class 'str'&gt;</span></span><br><span class=\"line\">print(data)  <span class=\"comment\"># 【演唱会】2000-拉阔音乐会</span></span><br></pre></td></tr></table></figure><p>编码格式可以任意，只是解码的时候需要用相同的格式进行解码就行，这样我们就可以保存中文数据了。</p>","site":{"data":{}},"excerpt":"<h2 id=\"python3中将Unicode字符串转成中文\"><a href=\"#python3中将Unicode字符串转成中文\" class=\"headerlink\" title=\"python3中将Unicode字符串转成中文\"></a>python3中将Unicode字符串转成中文</h2><p>用python爬虫爬取数据时，有时候会发现爬取的数据类似于</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a</span><br></pre></td></tr></table></figure><p>这样的Unicode字符串，在python的交互环境里可以直接打印输出查看内容；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 【演唱会】2000-拉阔音乐会</span></span><br></pre></td></tr></table></figure>","more":"<p>但是有些时候，我们需要保存的是中文数据，而不是Unicode字符串，所以我们需要将Unicode转成中文，我们知道encode()方法是将Unicode码转成我们需要的编码格式，但是我们返回的本身就是str格式，所以我们需要将Unicode字符串转成Unicode码，网上查了资料，是将字符串进行decode(“unicode_escape”)转换，但是在python3中，提示str没有decode的方法。</p><p>因此解决的办法是先采用encode()进行编码，在用同样的编码格式进行decode解码；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"string\">\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\"</span>.encode(<span class=\"string\">\"utf-8\"</span>).decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">print(type(data))  <span class=\"comment\"># &lt;class 'str'&gt;</span></span><br><span class=\"line\">print(data)  <span class=\"comment\"># 【演唱会】2000-拉阔音乐会</span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"string\">\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\"</span>.encode(<span class=\"string\">\"GBK\"</span>).decode(<span class=\"string\">\"GBK\"</span>)</span><br><span class=\"line\">print(type(data))  <span class=\"comment\"># &lt;class 'str'&gt;</span></span><br><span class=\"line\">print(data)  <span class=\"comment\"># 【演唱会】2000-拉阔音乐会</span></span><br></pre></td></tr></table></figure><p>编码格式可以任意，只是解码的时候需要用相同的格式进行解码就行，这样我们就可以保存中文数据了。</p>"},{"title":"python中random库使用","type":"categories","copyright":true,"abbrlink":2386226701,"date":"2020-01-02T03:55:30.000Z","_content":"\n### 1、random.random() 生成一个随机的浮点数，范围在0.0~0.1之间；\n\n```python\nnum = random.random()\nprint(num)  # num=0.4329135788510704\n```\n### 2、random.uniform() 函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\n\n<!--more-->\n\n```python\nnum = random.uniform(1, 2)\nprint(num)  # num=1.9499995621894857\n```\n### 3、random.randint() 随机生成一个整数int类型,可以指定这个整数的范围，同样有上限和下限\n\n```python\nnum = random.randint(1, 10)\nprint(num)  # num=2\n```\n### 4、random.choice() 可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\n\n```python\nlist = [i for i in range(10)]\nnum = random.choice(list)\nprint(num)  # num=5\n```\n### 5、random.shuffle() 随机打乱一个序列\n\n```python\nlist = [i for i in range(10)]\nprint(list)  # list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nrandom.shuffle(list)\nprint(list)  # list=[1, 5, 4, 2, 0, 6, 9, 8, 3, 7]\n```\n### 6、random.sample() 可以从指定的序列中，随机截取指定长度的片段，不做原地修改\n\n```python\nlist = [i for i in range(10)]\nnew_list = random.sample(list, 5)  # 第一个参数要截取的对象，第二个参数是截取的长度\nprint(new_list)  # [7, 9, 0, 8, 1]\n```","source":"_posts/python中random库使用.md","raw":"---\ntitle: python中random库使用\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 基础\ncategories:\n  - python\n  - 基础\nabbrlink: 2386226701\ndate: 2020-01-02 11:55:30\n---\n\n### 1、random.random() 生成一个随机的浮点数，范围在0.0~0.1之间；\n\n```python\nnum = random.random()\nprint(num)  # num=0.4329135788510704\n```\n### 2、random.uniform() 函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\n\n<!--more-->\n\n```python\nnum = random.uniform(1, 2)\nprint(num)  # num=1.9499995621894857\n```\n### 3、random.randint() 随机生成一个整数int类型,可以指定这个整数的范围，同样有上限和下限\n\n```python\nnum = random.randint(1, 10)\nprint(num)  # num=2\n```\n### 4、random.choice() 可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\n\n```python\nlist = [i for i in range(10)]\nnum = random.choice(list)\nprint(num)  # num=5\n```\n### 5、random.shuffle() 随机打乱一个序列\n\n```python\nlist = [i for i in range(10)]\nprint(list)  # list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nrandom.shuffle(list)\nprint(list)  # list=[1, 5, 4, 2, 0, 6, 9, 8, 3, 7]\n```\n### 6、random.sample() 可以从指定的序列中，随机截取指定长度的片段，不做原地修改\n\n```python\nlist = [i for i in range(10)]\nnew_list = random.sample(list, 5)  # 第一个参数要截取的对象，第二个参数是截取的长度\nprint(new_list)  # [7, 9, 0, 8, 1]\n```","slug":"python中random库使用","published":1,"updated":"2022-03-13T11:49:16.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07k00159jx3ck823nyu","content":"<h3 id=\"1、random-random-生成一个随机的浮点数，范围在0-0-0-1之间；\"><a href=\"#1、random-random-生成一个随机的浮点数，范围在0-0-0-1之间；\" class=\"headerlink\" title=\"1、random.random() 生成一个随机的浮点数，范围在0.0~0.1之间；\"></a>1、random.random() 生成一个随机的浮点数，范围在0.0~0.1之间；</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = random.random()</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=0.4329135788510704</span></span><br></pre></td></tr></table></figure><h3 id=\"2、random-uniform-函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\"><a href=\"#2、random-uniform-函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\" class=\"headerlink\" title=\"2、random.uniform() 函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\"></a>2、random.uniform() 函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；</h3><a id=\"more\"></a><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = random.uniform(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=1.9499995621894857</span></span><br></pre></td></tr></table></figure><h3 id=\"3、random-randint-随机生成一个整数int类型-可以指定这个整数的范围，同样有上限和下限\"><a href=\"#3、random-randint-随机生成一个整数int类型-可以指定这个整数的范围，同样有上限和下限\" class=\"headerlink\" title=\"3、random.randint() 随机生成一个整数int类型,可以指定这个整数的范围，同样有上限和下限\"></a>3、random.randint() 随机生成一个整数int类型,可以指定这个整数的范围，同样有上限和下限</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = random.randint(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=2</span></span><br></pre></td></tr></table></figure><h3 id=\"4、random-choice-可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\"><a href=\"#4、random-choice-可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\" class=\"headerlink\" title=\"4、random.choice() 可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\"></a>4、random.choice() 可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">num = random.choice(list)</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=5</span></span><br></pre></td></tr></table></figure><h3 id=\"5、random-shuffle-随机打乱一个序列\"><a href=\"#5、random-shuffle-随机打乱一个序列\" class=\"headerlink\" title=\"5、random.shuffle() 随机打乱一个序列\"></a>5、random.shuffle() 随机打乱一个序列</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">print(list)  <span class=\"comment\"># list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\">random.shuffle(list)</span><br><span class=\"line\">print(list)  <span class=\"comment\"># list=[1, 5, 4, 2, 0, 6, 9, 8, 3, 7]</span></span><br></pre></td></tr></table></figure><h3 id=\"6、random-sample-可以从指定的序列中，随机截取指定长度的片段，不做原地修改\"><a href=\"#6、random-sample-可以从指定的序列中，随机截取指定长度的片段，不做原地修改\" class=\"headerlink\" title=\"6、random.sample() 可以从指定的序列中，随机截取指定长度的片段，不做原地修改\"></a>6、random.sample() 可以从指定的序列中，随机截取指定长度的片段，不做原地修改</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">new_list = random.sample(list, <span class=\"number\">5</span>)  <span class=\"comment\"># 第一个参数要截取的对象，第二个参数是截取的长度</span></span><br><span class=\"line\">print(new_list)  <span class=\"comment\"># [7, 9, 0, 8, 1]</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"1、random-random-生成一个随机的浮点数，范围在0-0-0-1之间；\"><a href=\"#1、random-random-生成一个随机的浮点数，范围在0-0-0-1之间；\" class=\"headerlink\" title=\"1、random.random() 生成一个随机的浮点数，范围在0.0~0.1之间；\"></a>1、random.random() 生成一个随机的浮点数，范围在0.0~0.1之间；</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = random.random()</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=0.4329135788510704</span></span><br></pre></td></tr></table></figure><h3 id=\"2、random-uniform-函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\"><a href=\"#2、random-uniform-函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\" class=\"headerlink\" title=\"2、random.uniform() 函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\"></a>2、random.uniform() 函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；</h3>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = random.uniform(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=1.9499995621894857</span></span><br></pre></td></tr></table></figure><h3 id=\"3、random-randint-随机生成一个整数int类型-可以指定这个整数的范围，同样有上限和下限\"><a href=\"#3、random-randint-随机生成一个整数int类型-可以指定这个整数的范围，同样有上限和下限\" class=\"headerlink\" title=\"3、random.randint() 随机生成一个整数int类型,可以指定这个整数的范围，同样有上限和下限\"></a>3、random.randint() 随机生成一个整数int类型,可以指定这个整数的范围，同样有上限和下限</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = random.randint(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=2</span></span><br></pre></td></tr></table></figure><h3 id=\"4、random-choice-可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\"><a href=\"#4、random-choice-可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\" class=\"headerlink\" title=\"4、random.choice() 可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\"></a>4、random.choice() 可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">num = random.choice(list)</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=5</span></span><br></pre></td></tr></table></figure><h3 id=\"5、random-shuffle-随机打乱一个序列\"><a href=\"#5、random-shuffle-随机打乱一个序列\" class=\"headerlink\" title=\"5、random.shuffle() 随机打乱一个序列\"></a>5、random.shuffle() 随机打乱一个序列</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">print(list)  <span class=\"comment\"># list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\">random.shuffle(list)</span><br><span class=\"line\">print(list)  <span class=\"comment\"># list=[1, 5, 4, 2, 0, 6, 9, 8, 3, 7]</span></span><br></pre></td></tr></table></figure><h3 id=\"6、random-sample-可以从指定的序列中，随机截取指定长度的片段，不做原地修改\"><a href=\"#6、random-sample-可以从指定的序列中，随机截取指定长度的片段，不做原地修改\" class=\"headerlink\" title=\"6、random.sample() 可以从指定的序列中，随机截取指定长度的片段，不做原地修改\"></a>6、random.sample() 可以从指定的序列中，随机截取指定长度的片段，不做原地修改</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">new_list = random.sample(list, <span class=\"number\">5</span>)  <span class=\"comment\"># 第一个参数要截取的对象，第二个参数是截取的长度</span></span><br><span class=\"line\">print(new_list)  <span class=\"comment\"># [7, 9, 0, 8, 1]</span></span><br></pre></td></tr></table></figure>"},{"title":"python上下文管理器","type":"categories","copyright":true,"keywords":"上下文管理器","abbrlink":3338556279,"date":"2022-03-20T13:14:15.000Z","_content":"\n###  什么是上下文管理器\n\n简单来说，在一个类中，我们实现了__enter__和__exit__两种方法，那么这个类的实例就是一个上下文管理器；\n\n###  为何使用上下文管理器\n\n- 通过上下文管理器，可以优雅的操作资源，比如数据库连接，文件的操作；\n- 可以通过上下文管理器优雅的处理异常；\n\n<!-- more -->\n\npython中对上下文管理器的操作句柄**with**；\n\n1、通过使用with操作文件对象\n```python\nwith open(file, \"r\") as f:\n    pass\n```\n\n2、通过with操作数据的连接\n```python\nwith pymysql.connect(**kwargs) as conn:\n    pass\n```\n\n3、 通过定义__enter__, __exit__方法来使用数据库；\n```python\nclass Pipeline：\n    def __init__(self, host, port, user, password, db):\n        self.host = host\n        self.port = port\n        self.user = user\n        self.passwd = password\n        self.db = db\n    def __enter__(self):\n        self.conn = pymysql.connect(self.host, self.port, self.user, self.passwd, self.db)\n        return self\n\n    def __exit__(self):\n        self.conn.close()\n```\n\n4、 使用上下文管理器来操作异常\n```python\nclass DealExc:\n    def __enter__(self):\n        # 操作资源\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"\n        exc_type：异常类型\n        exc_val：异常值\n        exc_tb：异常的错误栈信息\n        \"\"\"\n        # 当主逻辑代码没有报异常时，这三个参数将都为None。\n        # 关闭资源连接\n        return True\n\n    def operate(self):\n        # 具体的内容\n        pass\n\nwith DealExc() as d:\n    d.operate()\n```\n\n### 理解并使用 contextlib\n\npython中为了更简单的使用上下文管理器，提供了一个装饰器contexlib；我们按照它定义的写法来实现一个函数内容，就可以将该函数变成一个上下文管理器；\n\n```python\nimport contextlib\n\n@contextlib.contextmanager\ndef open_func(file_name):\n    # __enter__方法\n    print('open file:', file_name, 'in __enter__')\n    file_handler = open(file_name, 'r')\n\t\n    # 【重点】：yield\n    yield file_handler\n\n    # __exit__方法\n    print('close file:', file_name, 'in __exit__')\n    file_handler.close()\n    return\n\nwith open_func(filename) as fp:\n    for line in fp:\n        print(line)\n```\n在被装饰函数里，必须是一个生成器（带有yield），而yield之前的代码，就相当于__enter__里的内容。yield 之后的代码，就相当于__exit__ 里的内容。\n\n我们也可以在函数中进行异常处理；\n```python\nimport contextlib\n\n@contextlib.contextmanager\ndef open_func(file_name):\n    # __enter__方法\n    print('open file:', file_name, 'in __enter__')\n    file_handler = open(file_name, 'r')\n\n    try:\n        yield file_handler\n    except Exception as exc:\n        # deal with exception\n        print('the exception was thrown')\n    finally:\n        print('close file:', file_name, 'in __exit__')\n        file_handler.close()\n        return\n```\n\n","source":"_posts/python上下文管理器.md","raw":"---\ntitle: python上下文管理器\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 基础\ncategories:\n  - python\n  - 基础\nkeywords: 上下文管理器\nabbrlink: 3338556279\ndate: 2022-03-20 21:14:15\n---\n\n###  什么是上下文管理器\n\n简单来说，在一个类中，我们实现了__enter__和__exit__两种方法，那么这个类的实例就是一个上下文管理器；\n\n###  为何使用上下文管理器\n\n- 通过上下文管理器，可以优雅的操作资源，比如数据库连接，文件的操作；\n- 可以通过上下文管理器优雅的处理异常；\n\n<!-- more -->\n\npython中对上下文管理器的操作句柄**with**；\n\n1、通过使用with操作文件对象\n```python\nwith open(file, \"r\") as f:\n    pass\n```\n\n2、通过with操作数据的连接\n```python\nwith pymysql.connect(**kwargs) as conn:\n    pass\n```\n\n3、 通过定义__enter__, __exit__方法来使用数据库；\n```python\nclass Pipeline：\n    def __init__(self, host, port, user, password, db):\n        self.host = host\n        self.port = port\n        self.user = user\n        self.passwd = password\n        self.db = db\n    def __enter__(self):\n        self.conn = pymysql.connect(self.host, self.port, self.user, self.passwd, self.db)\n        return self\n\n    def __exit__(self):\n        self.conn.close()\n```\n\n4、 使用上下文管理器来操作异常\n```python\nclass DealExc:\n    def __enter__(self):\n        # 操作资源\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"\n        exc_type：异常类型\n        exc_val：异常值\n        exc_tb：异常的错误栈信息\n        \"\"\"\n        # 当主逻辑代码没有报异常时，这三个参数将都为None。\n        # 关闭资源连接\n        return True\n\n    def operate(self):\n        # 具体的内容\n        pass\n\nwith DealExc() as d:\n    d.operate()\n```\n\n### 理解并使用 contextlib\n\npython中为了更简单的使用上下文管理器，提供了一个装饰器contexlib；我们按照它定义的写法来实现一个函数内容，就可以将该函数变成一个上下文管理器；\n\n```python\nimport contextlib\n\n@contextlib.contextmanager\ndef open_func(file_name):\n    # __enter__方法\n    print('open file:', file_name, 'in __enter__')\n    file_handler = open(file_name, 'r')\n\t\n    # 【重点】：yield\n    yield file_handler\n\n    # __exit__方法\n    print('close file:', file_name, 'in __exit__')\n    file_handler.close()\n    return\n\nwith open_func(filename) as fp:\n    for line in fp:\n        print(line)\n```\n在被装饰函数里，必须是一个生成器（带有yield），而yield之前的代码，就相当于__enter__里的内容。yield 之后的代码，就相当于__exit__ 里的内容。\n\n我们也可以在函数中进行异常处理；\n```python\nimport contextlib\n\n@contextlib.contextmanager\ndef open_func(file_name):\n    # __enter__方法\n    print('open file:', file_name, 'in __enter__')\n    file_handler = open(file_name, 'r')\n\n    try:\n        yield file_handler\n    except Exception as exc:\n        # deal with exception\n        print('the exception was thrown')\n    finally:\n        print('close file:', file_name, 'in __exit__')\n        file_handler.close()\n        return\n```\n\n","slug":"python上下文管理器","published":1,"updated":"2022-03-20T14:13:54.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07l00189jx3dv556nv2","content":"<h3 id=\"什么是上下文管理器\"><a href=\"#什么是上下文管理器\" class=\"headerlink\" title=\"什么是上下文管理器\"></a>什么是上下文管理器</h3><p>简单来说，在一个类中，我们实现了<strong>enter</strong>和<strong>exit</strong>两种方法，那么这个类的实例就是一个上下文管理器；</p><h3 id=\"为何使用上下文管理器\"><a href=\"#为何使用上下文管理器\" class=\"headerlink\" title=\"为何使用上下文管理器\"></a>为何使用上下文管理器</h3><ul><li>通过上下文管理器，可以优雅的操作资源，比如数据库连接，文件的操作；</li><li>可以通过上下文管理器优雅的处理异常；</li></ul><a id=\"more\"></a><p>python中对上下文管理器的操作句柄<strong>with</strong>；</p><p>1、通过使用with操作文件对象</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(file, <span class=\"string\">\"r\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><p>2、通过with操作数据的连接</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> pymysql.connect(**kwargs) <span class=\"keyword\">as</span> conn:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><p>3、 通过定义<strong>enter</strong>, <strong>exit</strong>方法来使用数据库；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pipeline</span>：</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, host, port, user, password, db)</span>:</span></span><br><span class=\"line\">        self.host = host</span><br><span class=\"line\">        self.port = port</span><br><span class=\"line\">        self.user = user</span><br><span class=\"line\">        self.passwd = password</span><br><span class=\"line\">        self.db = db</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__enter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.conn = pymysql.connect(self.host, self.port, self.user, self.passwd, self.db)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__exit__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.conn.close()</span><br></pre></td></tr></table></figure><p>4、 使用上下文管理器来操作异常</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DealExc</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__enter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 操作资源</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__exit__</span><span class=\"params\">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        exc_type：异常类型</span></span><br><span class=\"line\"><span class=\"string\">        exc_val：异常值</span></span><br><span class=\"line\"><span class=\"string\">        exc_tb：异常的错误栈信息</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># 当主逻辑代码没有报异常时，这三个参数将都为None。</span></span><br><span class=\"line\">        <span class=\"comment\"># 关闭资源连接</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">operate</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 具体的内容</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> DealExc() <span class=\"keyword\">as</span> d:</span><br><span class=\"line\">    d.operate()</span><br></pre></td></tr></table></figure><h3 id=\"理解并使用-contextlib\"><a href=\"#理解并使用-contextlib\" class=\"headerlink\" title=\"理解并使用 contextlib\"></a>理解并使用 contextlib</h3><p>python中为了更简单的使用上下文管理器，提供了一个装饰器contexlib；我们按照它定义的写法来实现一个函数内容，就可以将该函数变成一个上下文管理器；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> contextlib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@contextlib.contextmanager</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_func</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># __enter__方法</span></span><br><span class=\"line\">    print(<span class=\"string\">'open file:'</span>, file_name, <span class=\"string\">'in __enter__'</span>)</span><br><span class=\"line\">    file_handler = open(file_name, <span class=\"string\">'r'</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\"># 【重点】：yield</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> file_handler</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># __exit__方法</span></span><br><span class=\"line\">    print(<span class=\"string\">'close file:'</span>, file_name, <span class=\"string\">'in __exit__'</span>)</span><br><span class=\"line\">    file_handler.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open_func(filename) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fp:</span><br><span class=\"line\">        print(line)</span><br></pre></td></tr></table></figure><p>在被装饰函数里，必须是一个生成器（带有yield），而yield之前的代码，就相当于<strong>enter</strong>里的内容。yield 之后的代码，就相当于<strong>exit</strong> 里的内容。</p><p>我们也可以在函数中进行异常处理；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> contextlib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@contextlib.contextmanager</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_func</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># __enter__方法</span></span><br><span class=\"line\">    print(<span class=\"string\">'open file:'</span>, file_name, <span class=\"string\">'in __enter__'</span>)</span><br><span class=\"line\">    file_handler = open(file_name, <span class=\"string\">'r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> file_handler</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> exc:</span><br><span class=\"line\">        <span class=\"comment\"># deal with exception</span></span><br><span class=\"line\">        print(<span class=\"string\">'the exception was thrown'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'close file:'</span>, file_name, <span class=\"string\">'in __exit__'</span>)</span><br><span class=\"line\">        file_handler.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"什么是上下文管理器\"><a href=\"#什么是上下文管理器\" class=\"headerlink\" title=\"什么是上下文管理器\"></a>什么是上下文管理器</h3><p>简单来说，在一个类中，我们实现了<strong>enter</strong>和<strong>exit</strong>两种方法，那么这个类的实例就是一个上下文管理器；</p><h3 id=\"为何使用上下文管理器\"><a href=\"#为何使用上下文管理器\" class=\"headerlink\" title=\"为何使用上下文管理器\"></a>为何使用上下文管理器</h3><ul><li>通过上下文管理器，可以优雅的操作资源，比如数据库连接，文件的操作；</li><li>可以通过上下文管理器优雅的处理异常；</li></ul>","more":"<p>python中对上下文管理器的操作句柄<strong>with</strong>；</p><p>1、通过使用with操作文件对象</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(file, <span class=\"string\">\"r\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><p>2、通过with操作数据的连接</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> pymysql.connect(**kwargs) <span class=\"keyword\">as</span> conn:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><p>3、 通过定义<strong>enter</strong>, <strong>exit</strong>方法来使用数据库；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pipeline</span>：</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, host, port, user, password, db)</span>:</span></span><br><span class=\"line\">        self.host = host</span><br><span class=\"line\">        self.port = port</span><br><span class=\"line\">        self.user = user</span><br><span class=\"line\">        self.passwd = password</span><br><span class=\"line\">        self.db = db</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__enter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.conn = pymysql.connect(self.host, self.port, self.user, self.passwd, self.db)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__exit__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.conn.close()</span><br></pre></td></tr></table></figure><p>4、 使用上下文管理器来操作异常</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DealExc</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__enter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 操作资源</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__exit__</span><span class=\"params\">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        exc_type：异常类型</span></span><br><span class=\"line\"><span class=\"string\">        exc_val：异常值</span></span><br><span class=\"line\"><span class=\"string\">        exc_tb：异常的错误栈信息</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># 当主逻辑代码没有报异常时，这三个参数将都为None。</span></span><br><span class=\"line\">        <span class=\"comment\"># 关闭资源连接</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">operate</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 具体的内容</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> DealExc() <span class=\"keyword\">as</span> d:</span><br><span class=\"line\">    d.operate()</span><br></pre></td></tr></table></figure><h3 id=\"理解并使用-contextlib\"><a href=\"#理解并使用-contextlib\" class=\"headerlink\" title=\"理解并使用 contextlib\"></a>理解并使用 contextlib</h3><p>python中为了更简单的使用上下文管理器，提供了一个装饰器contexlib；我们按照它定义的写法来实现一个函数内容，就可以将该函数变成一个上下文管理器；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> contextlib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@contextlib.contextmanager</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_func</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># __enter__方法</span></span><br><span class=\"line\">    print(<span class=\"string\">'open file:'</span>, file_name, <span class=\"string\">'in __enter__'</span>)</span><br><span class=\"line\">    file_handler = open(file_name, <span class=\"string\">'r'</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\"># 【重点】：yield</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> file_handler</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># __exit__方法</span></span><br><span class=\"line\">    print(<span class=\"string\">'close file:'</span>, file_name, <span class=\"string\">'in __exit__'</span>)</span><br><span class=\"line\">    file_handler.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open_func(filename) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fp:</span><br><span class=\"line\">        print(line)</span><br></pre></td></tr></table></figure><p>在被装饰函数里，必须是一个生成器（带有yield），而yield之前的代码，就相当于<strong>enter</strong>里的内容。yield 之后的代码，就相当于<strong>exit</strong> 里的内容。</p><p>我们也可以在函数中进行异常处理；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> contextlib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@contextlib.contextmanager</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_func</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># __enter__方法</span></span><br><span class=\"line\">    print(<span class=\"string\">'open file:'</span>, file_name, <span class=\"string\">'in __enter__'</span>)</span><br><span class=\"line\">    file_handler = open(file_name, <span class=\"string\">'r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> file_handler</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> exc:</span><br><span class=\"line\">        <span class=\"comment\"># deal with exception</span></span><br><span class=\"line\">        print(<span class=\"string\">'the exception was thrown'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'close file:'</span>, file_name, <span class=\"string\">'in __exit__'</span>)</span><br><span class=\"line\">        file_handler.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>"},{"title":"python中元素替换","type":"categories","copyright":true,"abbrlink":4070324110,"date":"2020-01-02T04:02:38.000Z","_content":"\n## python中元素进行替换有很多方法，下面是我学习中的一些总结\n\n### 1、字符串替换str.replace()方法\n\npython中的replace()方法是把字符串中的old字符串替换成new的字符串，如果指定替换次数max,则按照替换次数进行替换\n```python\nstr.replace(old,new,count=0)\n```\n<!--more-->\n\nold：字符串替换前的字符\nnew：字符串替换后的字符\ncount：替换的次数，默认为0，不填表示全局替换\n\n```python\n>>> str = \"hello world! I love python!\"\n>>> str.replace(\"l\",\"@\")  # 表示全局替换\n'he@@o wor@d! I @ove python!'\n>>> str.replace(\"l\",\"@\",2)  # 替换指定次数\n'he@@o world! I love python!'\n>>> str.replace(\"l\",\"@\",2).replace(\"o\",\"$\")  # 多个字符替换可以进行链式调用replace()方法\n'he@@$ w$rld! I l$ve pyth$n!'\n```\n\n### 2、正则表达式中的sub()和subn()方法\nsub(pattern, repl, string)\n其中pattern表示原字符串中的字符，repl表示需要替换成的字符，string表示需要替换的字符串；\nsubn()和sub()的区别在于subn()返回的一个包含新字符串和替换次数的二元组；\n\n```python\n>>> import re\n>>> str = \"hello world! I love python!\"\n>>> re.sub(\"hello\",\"nihao\",str)  \n'nihao world! I love python!'\n>>> re.subn(\"l\",\"*\",str)\n('he**o wor*d! I *ove python!', 4)\n>>> \n```\n### 3、如果同时处理多个字符串的替换，此时可以使用string的maketrans()和translate()方法\n\nmaketrans()方法用来生成字符映射表，而translate()方法则按映射表中定义的对应关系转换并替换其中的字符，用这两种方法可以同时处理多个不同的字符。\n\n```python\n>>> table = ''.maketrans(\"abcdefghij\",\"1234567890\")  # 创建映射表，注意字符串的长度要一致，达到一一对应的目的\n>>> str = \"hello world! i love python\"\n>>> str.translate(table)  # 按照关系表将sting中的字符逐个进行替换\n'85llo worl4! 9 lov5 pyt8on'\n>>> \n```\n### 4、对列表里的元素进行替换，可以使用列表解析的方法\n\n```python\n>>> list = [1,2,3,4]\n>>> rep = [5 if x==1 else x for x in list]\n>>> rep\n[5, 2, 3, 4]\n>>> \n\n```\n\n#### 4.1、批量进行替换\n\n```python\n>>> list = [1,2,3,4,5]\n>>> pattern = [2,4]\n>>> rep = [\"a\" if x in pattern else x for x in list]\n>>> rep\n[1, 'a', 3, 'a', 5]\n>>> \n\n```\n#### 4.2、根据字典的映射进行替换\n\n```python\n>>> list\n[1, 2, 3, 4, 5]\n>>> dict = {1:\"apple\", 3:\"banana\"}\n>>> rep = [dict[x] if x in dict else x for x in list]\n>>> rep\n['apple', 2, 'banana', 4, 5]\n>>> \n\n```\n\n### 5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io.StringIO对象。\n\n```python\n>>> from io import StringIO\n>>> str = \"hello world!\" \n>>> io_str = StringIO(str)\n>>> io_str\n<_io.StringIO object at 0x7fa1e61addc8>\n>>> io_str.tell()  # 返回当前的位置\n0\n>>> io_str.read()  # 从当前位置开始读取字符串\n'hello world!'\n>>> io_str.getvalue()  # 返回字符串的全部内容\n'hello world!'\n>>> io_str.seek(6)  # 定义开始修改的位置\n6\n>>> io_str.write(\"china\")  # 修改字符串\n5\n>>> io_str.read()\n'!'\n>>> io_str.getvalue()  # 获取修改后的字符串全部内容\n'hello china!'\n>>> io_str.tell() \n12\n>>> \n\n```\n","source":"_posts/python中元素替换.md","raw":"---\ntitle: python中元素替换\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 基础\ncategories:\n  - python\n  - 基础\nabbrlink: 4070324110\ndate: 2020-01-02 12:02:38\n---\n\n## python中元素进行替换有很多方法，下面是我学习中的一些总结\n\n### 1、字符串替换str.replace()方法\n\npython中的replace()方法是把字符串中的old字符串替换成new的字符串，如果指定替换次数max,则按照替换次数进行替换\n```python\nstr.replace(old,new,count=0)\n```\n<!--more-->\n\nold：字符串替换前的字符\nnew：字符串替换后的字符\ncount：替换的次数，默认为0，不填表示全局替换\n\n```python\n>>> str = \"hello world! I love python!\"\n>>> str.replace(\"l\",\"@\")  # 表示全局替换\n'he@@o wor@d! I @ove python!'\n>>> str.replace(\"l\",\"@\",2)  # 替换指定次数\n'he@@o world! I love python!'\n>>> str.replace(\"l\",\"@\",2).replace(\"o\",\"$\")  # 多个字符替换可以进行链式调用replace()方法\n'he@@$ w$rld! I l$ve pyth$n!'\n```\n\n### 2、正则表达式中的sub()和subn()方法\nsub(pattern, repl, string)\n其中pattern表示原字符串中的字符，repl表示需要替换成的字符，string表示需要替换的字符串；\nsubn()和sub()的区别在于subn()返回的一个包含新字符串和替换次数的二元组；\n\n```python\n>>> import re\n>>> str = \"hello world! I love python!\"\n>>> re.sub(\"hello\",\"nihao\",str)  \n'nihao world! I love python!'\n>>> re.subn(\"l\",\"*\",str)\n('he**o wor*d! I *ove python!', 4)\n>>> \n```\n### 3、如果同时处理多个字符串的替换，此时可以使用string的maketrans()和translate()方法\n\nmaketrans()方法用来生成字符映射表，而translate()方法则按映射表中定义的对应关系转换并替换其中的字符，用这两种方法可以同时处理多个不同的字符。\n\n```python\n>>> table = ''.maketrans(\"abcdefghij\",\"1234567890\")  # 创建映射表，注意字符串的长度要一致，达到一一对应的目的\n>>> str = \"hello world! i love python\"\n>>> str.translate(table)  # 按照关系表将sting中的字符逐个进行替换\n'85llo worl4! 9 lov5 pyt8on'\n>>> \n```\n### 4、对列表里的元素进行替换，可以使用列表解析的方法\n\n```python\n>>> list = [1,2,3,4]\n>>> rep = [5 if x==1 else x for x in list]\n>>> rep\n[5, 2, 3, 4]\n>>> \n\n```\n\n#### 4.1、批量进行替换\n\n```python\n>>> list = [1,2,3,4,5]\n>>> pattern = [2,4]\n>>> rep = [\"a\" if x in pattern else x for x in list]\n>>> rep\n[1, 'a', 3, 'a', 5]\n>>> \n\n```\n#### 4.2、根据字典的映射进行替换\n\n```python\n>>> list\n[1, 2, 3, 4, 5]\n>>> dict = {1:\"apple\", 3:\"banana\"}\n>>> rep = [dict[x] if x in dict else x for x in list]\n>>> rep\n['apple', 2, 'banana', 4, 5]\n>>> \n\n```\n\n### 5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io.StringIO对象。\n\n```python\n>>> from io import StringIO\n>>> str = \"hello world!\" \n>>> io_str = StringIO(str)\n>>> io_str\n<_io.StringIO object at 0x7fa1e61addc8>\n>>> io_str.tell()  # 返回当前的位置\n0\n>>> io_str.read()  # 从当前位置开始读取字符串\n'hello world!'\n>>> io_str.getvalue()  # 返回字符串的全部内容\n'hello world!'\n>>> io_str.seek(6)  # 定义开始修改的位置\n6\n>>> io_str.write(\"china\")  # 修改字符串\n5\n>>> io_str.read()\n'!'\n>>> io_str.getvalue()  # 获取修改后的字符串全部内容\n'hello china!'\n>>> io_str.tell() \n12\n>>> \n\n```\n","slug":"python中元素替换","published":1,"updated":"2022-03-13T11:49:16.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07m001a9jx341a1gdtl","content":"<h2 id=\"python中元素进行替换有很多方法，下面是我学习中的一些总结\"><a href=\"#python中元素进行替换有很多方法，下面是我学习中的一些总结\" class=\"headerlink\" title=\"python中元素进行替换有很多方法，下面是我学习中的一些总结\"></a>python中元素进行替换有很多方法，下面是我学习中的一些总结</h2><h3 id=\"1、字符串替换str-replace-方法\"><a href=\"#1、字符串替换str-replace-方法\" class=\"headerlink\" title=\"1、字符串替换str.replace()方法\"></a>1、字符串替换str.replace()方法</h3><p>python中的replace()方法是把字符串中的old字符串替换成new的字符串，如果指定替换次数max,则按照替换次数进行替换</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.replace(old,new,count=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure><a id=\"more\"></a><p>old：字符串替换前的字符<br>new：字符串替换后的字符<br>count：替换的次数，默认为0，不填表示全局替换</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world! I love python!\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.replace(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"@\"</span>)  <span class=\"comment\"># 表示全局替换</span></span><br><span class=\"line\"><span class=\"string\">'he@@o wor@d! I @ove python!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.replace(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"@\"</span>,<span class=\"number\">2</span>)  <span class=\"comment\"># 替换指定次数</span></span><br><span class=\"line\"><span class=\"string\">'he@@o world! I love python!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.replace(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"@\"</span>,<span class=\"number\">2</span>).replace(<span class=\"string\">\"o\"</span>,<span class=\"string\">\"$\"</span>)  <span class=\"comment\"># 多个字符替换可以进行链式调用replace()方法</span></span><br><span class=\"line\"><span class=\"string\">'he@@$ w$rld! I l$ve pyth$n!'</span></span><br></pre></td></tr></table></figure><h3 id=\"2、正则表达式中的sub-和subn-方法\"><a href=\"#2、正则表达式中的sub-和subn-方法\" class=\"headerlink\" title=\"2、正则表达式中的sub()和subn()方法\"></a>2、正则表达式中的sub()和subn()方法</h3><p>sub(pattern, repl, string)<br>其中pattern表示原字符串中的字符，repl表示需要替换成的字符，string表示需要替换的字符串；<br>subn()和sub()的区别在于subn()返回的一个包含新字符串和替换次数的二元组；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world! I love python!\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.sub(<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"nihao\"</span>,str)  </span><br><span class=\"line\"><span class=\"string\">'nihao world! I love python!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.subn(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"*\"</span>,str)</span><br><span class=\"line\">(<span class=\"string\">'he**o wor*d! I *ove python!'</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id=\"3、如果同时处理多个字符串的替换，此时可以使用string的maketrans-和translate-方法\"><a href=\"#3、如果同时处理多个字符串的替换，此时可以使用string的maketrans-和translate-方法\" class=\"headerlink\" title=\"3、如果同时处理多个字符串的替换，此时可以使用string的maketrans()和translate()方法\"></a>3、如果同时处理多个字符串的替换，此时可以使用string的maketrans()和translate()方法</h3><p>maketrans()方法用来生成字符映射表，而translate()方法则按映射表中定义的对应关系转换并替换其中的字符，用这两种方法可以同时处理多个不同的字符。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>table = <span class=\"string\">''</span>.maketrans(<span class=\"string\">\"abcdefghij\"</span>,<span class=\"string\">\"1234567890\"</span>)  <span class=\"comment\"># 创建映射表，注意字符串的长度要一致，达到一一对应的目的</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world! i love python\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.translate(table)  <span class=\"comment\"># 按照关系表将sting中的字符逐个进行替换</span></span><br><span class=\"line\"><span class=\"string\">'85llo worl4! 9 lov5 pyt8on'</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id=\"4、对列表里的元素进行替换，可以使用列表解析的方法\"><a href=\"#4、对列表里的元素进行替换，可以使用列表解析的方法\" class=\"headerlink\" title=\"4、对列表里的元素进行替换，可以使用列表解析的方法\"></a>4、对列表里的元素进行替换，可以使用列表解析的方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep = [<span class=\"number\">5</span> <span class=\"keyword\">if</span> x==<span class=\"number\">1</span> <span class=\"keyword\">else</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep</span><br><span class=\"line\">[<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id=\"4-1、批量进行替换\"><a href=\"#4-1、批量进行替换\" class=\"headerlink\" title=\"4.1、批量进行替换\"></a>4.1、批量进行替换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pattern = [<span class=\"number\">2</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep = [<span class=\"string\">\"a\"</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> pattern <span class=\"keyword\">else</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"number\">3</span>, <span class=\"string\">'a'</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id=\"4-2、根据字典的映射进行替换\"><a href=\"#4-2、根据字典的映射进行替换\" class=\"headerlink\" title=\"4.2、根据字典的映射进行替换\"></a>4.2、根据字典的映射进行替换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dict = &#123;<span class=\"number\">1</span>:<span class=\"string\">\"apple\"</span>, <span class=\"number\">3</span>:<span class=\"string\">\"banana\"</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep = [dict[x] <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> dict <span class=\"keyword\">else</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep</span><br><span class=\"line\">[<span class=\"string\">'apple'</span>, <span class=\"number\">2</span>, <span class=\"string\">'banana'</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id=\"5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io-StringIO对象。\"><a href=\"#5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io-StringIO对象。\" class=\"headerlink\" title=\"5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io.StringIO对象。\"></a>5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io.StringIO对象。</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world!\"</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str = StringIO(str)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str</span><br><span class=\"line\">&lt;_io.StringIO object at <span class=\"number\">0x7fa1e61addc8</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.tell()  <span class=\"comment\"># 返回当前的位置</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.read()  <span class=\"comment\"># 从当前位置开始读取字符串</span></span><br><span class=\"line\"><span class=\"string\">'hello world!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.getvalue()  <span class=\"comment\"># 返回字符串的全部内容</span></span><br><span class=\"line\"><span class=\"string\">'hello world!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.seek(<span class=\"number\">6</span>)  <span class=\"comment\"># 定义开始修改的位置</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.write(<span class=\"string\">\"china\"</span>)  <span class=\"comment\"># 修改字符串</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.read()</span><br><span class=\"line\"><span class=\"string\">'!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.getvalue()  <span class=\"comment\"># 获取修改后的字符串全部内容</span></span><br><span class=\"line\"><span class=\"string\">'hello china!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.tell() </span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"python中元素进行替换有很多方法，下面是我学习中的一些总结\"><a href=\"#python中元素进行替换有很多方法，下面是我学习中的一些总结\" class=\"headerlink\" title=\"python中元素进行替换有很多方法，下面是我学习中的一些总结\"></a>python中元素进行替换有很多方法，下面是我学习中的一些总结</h2><h3 id=\"1、字符串替换str-replace-方法\"><a href=\"#1、字符串替换str-replace-方法\" class=\"headerlink\" title=\"1、字符串替换str.replace()方法\"></a>1、字符串替换str.replace()方法</h3><p>python中的replace()方法是把字符串中的old字符串替换成new的字符串，如果指定替换次数max,则按照替换次数进行替换</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.replace(old,new,count=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>","more":"<p>old：字符串替换前的字符<br>new：字符串替换后的字符<br>count：替换的次数，默认为0，不填表示全局替换</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world! I love python!\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.replace(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"@\"</span>)  <span class=\"comment\"># 表示全局替换</span></span><br><span class=\"line\"><span class=\"string\">'he@@o wor@d! I @ove python!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.replace(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"@\"</span>,<span class=\"number\">2</span>)  <span class=\"comment\"># 替换指定次数</span></span><br><span class=\"line\"><span class=\"string\">'he@@o world! I love python!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.replace(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"@\"</span>,<span class=\"number\">2</span>).replace(<span class=\"string\">\"o\"</span>,<span class=\"string\">\"$\"</span>)  <span class=\"comment\"># 多个字符替换可以进行链式调用replace()方法</span></span><br><span class=\"line\"><span class=\"string\">'he@@$ w$rld! I l$ve pyth$n!'</span></span><br></pre></td></tr></table></figure><h3 id=\"2、正则表达式中的sub-和subn-方法\"><a href=\"#2、正则表达式中的sub-和subn-方法\" class=\"headerlink\" title=\"2、正则表达式中的sub()和subn()方法\"></a>2、正则表达式中的sub()和subn()方法</h3><p>sub(pattern, repl, string)<br>其中pattern表示原字符串中的字符，repl表示需要替换成的字符，string表示需要替换的字符串；<br>subn()和sub()的区别在于subn()返回的一个包含新字符串和替换次数的二元组；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world! I love python!\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.sub(<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"nihao\"</span>,str)  </span><br><span class=\"line\"><span class=\"string\">'nihao world! I love python!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.subn(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"*\"</span>,str)</span><br><span class=\"line\">(<span class=\"string\">'he**o wor*d! I *ove python!'</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id=\"3、如果同时处理多个字符串的替换，此时可以使用string的maketrans-和translate-方法\"><a href=\"#3、如果同时处理多个字符串的替换，此时可以使用string的maketrans-和translate-方法\" class=\"headerlink\" title=\"3、如果同时处理多个字符串的替换，此时可以使用string的maketrans()和translate()方法\"></a>3、如果同时处理多个字符串的替换，此时可以使用string的maketrans()和translate()方法</h3><p>maketrans()方法用来生成字符映射表，而translate()方法则按映射表中定义的对应关系转换并替换其中的字符，用这两种方法可以同时处理多个不同的字符。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>table = <span class=\"string\">''</span>.maketrans(<span class=\"string\">\"abcdefghij\"</span>,<span class=\"string\">\"1234567890\"</span>)  <span class=\"comment\"># 创建映射表，注意字符串的长度要一致，达到一一对应的目的</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world! i love python\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.translate(table)  <span class=\"comment\"># 按照关系表将sting中的字符逐个进行替换</span></span><br><span class=\"line\"><span class=\"string\">'85llo worl4! 9 lov5 pyt8on'</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id=\"4、对列表里的元素进行替换，可以使用列表解析的方法\"><a href=\"#4、对列表里的元素进行替换，可以使用列表解析的方法\" class=\"headerlink\" title=\"4、对列表里的元素进行替换，可以使用列表解析的方法\"></a>4、对列表里的元素进行替换，可以使用列表解析的方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep = [<span class=\"number\">5</span> <span class=\"keyword\">if</span> x==<span class=\"number\">1</span> <span class=\"keyword\">else</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep</span><br><span class=\"line\">[<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id=\"4-1、批量进行替换\"><a href=\"#4-1、批量进行替换\" class=\"headerlink\" title=\"4.1、批量进行替换\"></a>4.1、批量进行替换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pattern = [<span class=\"number\">2</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep = [<span class=\"string\">\"a\"</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> pattern <span class=\"keyword\">else</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"number\">3</span>, <span class=\"string\">'a'</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id=\"4-2、根据字典的映射进行替换\"><a href=\"#4-2、根据字典的映射进行替换\" class=\"headerlink\" title=\"4.2、根据字典的映射进行替换\"></a>4.2、根据字典的映射进行替换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dict = &#123;<span class=\"number\">1</span>:<span class=\"string\">\"apple\"</span>, <span class=\"number\">3</span>:<span class=\"string\">\"banana\"</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep = [dict[x] <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> dict <span class=\"keyword\">else</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep</span><br><span class=\"line\">[<span class=\"string\">'apple'</span>, <span class=\"number\">2</span>, <span class=\"string\">'banana'</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id=\"5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io-StringIO对象。\"><a href=\"#5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io-StringIO对象。\" class=\"headerlink\" title=\"5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io.StringIO对象。\"></a>5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io.StringIO对象。</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world!\"</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str = StringIO(str)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str</span><br><span class=\"line\">&lt;_io.StringIO object at <span class=\"number\">0x7fa1e61addc8</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.tell()  <span class=\"comment\"># 返回当前的位置</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.read()  <span class=\"comment\"># 从当前位置开始读取字符串</span></span><br><span class=\"line\"><span class=\"string\">'hello world!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.getvalue()  <span class=\"comment\"># 返回字符串的全部内容</span></span><br><span class=\"line\"><span class=\"string\">'hello world!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.seek(<span class=\"number\">6</span>)  <span class=\"comment\"># 定义开始修改的位置</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.write(<span class=\"string\">\"china\"</span>)  <span class=\"comment\"># 修改字符串</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.read()</span><br><span class=\"line\"><span class=\"string\">'!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.getvalue()  <span class=\"comment\"># 获取修改后的字符串全部内容</span></span><br><span class=\"line\"><span class=\"string\">'hello china!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.tell() </span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>"},{"title":"python中arrow库的使用","type":"categories","copyright":true,"abbrlink":1524522455,"date":"2020-01-02T03:57:58.000Z","_content":"\n Arrow是一个Python库，为创建，操作，格式化和转换日期，时间和时间戳提供了一种明智的，人性化的方法。 它实现和更新日期时间类型，填补功能上的空白，并提供支持许多常见创建场景的智能模块API。 简而言之，它可以帮助您使用更少的进口和更少的代码来处理日期和时间。\n### 安装\n\n```\npip install arrow\n```\n\n<!--more-->\n\n### 简单开始\n\n```python\n>>> import arrow\n>>> utc = arrow.utcnow()  # 获取世界标准时间\n>>> utc\n<Arrow [2018-06-07T09:37:28.989983+00:00]>\n>>> utc = arrow.now()  # 获取本地时间\n>>> utc\n<Arrow [2018-06-07T17:40:19.019529+08:00]>\n>>> arrow.now('US/Pacific')  # 获取指定时区的时间\n<Arrow [2018-06-07T02:41:54.815029-07:00]>\n```\n\n```python\n>>> a = arrow.now()\n>>> a\n<Arrow [2018-06-07T17:44:43.519166+08:00]>\n>>> a.year  # 当前年\n2018\n>>> a.month  # 当前月份\n6\n>>> a.day  # 当前天\n7\n>>> a.hour  # 当前第几个小时\n17\n>>> a.minute  # 当前多少分钟\n44\n>>> a.second  # 当前多少秒\n43\n>>> a.timestamp  # 获取时间戳\n1528364683\n>>> a.float_timestamp  # 浮点数时间戳\n1528364683.519166\n```\n\n### 时间格式化\n\n```python\n>>> a = arrow.now()\n>>> a\n<Arrow [2018-06-07T17:59:36.917894+08:00]>\n>>> a.format()\n'2018-06-07 17:59:36+08:00'\n>>> a.format('YYYY-MM-DD HH:mm:ss ZZ')\n'2018-06-07 17:59:36 +08:00'\n>>> a.ctime()  # 返回日期和时间的ctime格式化表示。\n'Thu Jun  7 17:59:36 2018'  \n>>> a.weekday()  # 以整数形式返回星期几（0-6）\n3\n>>> a.isoweekday()  # 以整数形式返回一周中的ISO日（1-7）\n4\n>>> a.isocalendar()  # 返回3元组（ISO年，ISO周数，ISO工作日）\n(2018, 23, 4)\n>>> a.toordinal()  # 返回日期的格雷戈里序数\n736852\n```\n\n### 从string中解析时间对象\n\n```python\n>>> arrow.get('2018-06-07 18:52:45', 'YYYY-MM-DD HH:mm:ss')\n<Arrow [2018-06-07T18:52:45+00:00]>\n>>> str = 'June was born in May 1980'\n>>> arrow.get(str,'MMMM YYYY')\n<Arrow [1980-05-01T00:00:00+00:00]>\n```\n\n### 解析的格式化参考：http://arrow.readthedocs.io/en/latest/#tokens\n### 时间的替换和偏移\n\n```python\n>>> arw = arrow.now()\n>>> arw\n<Arrow [2018-06-07T19:04:50.245201+08:00]>\n>>> arw.replace(hour=20,minute=00)  # 替换时间\n<Arrow [2018-06-07T20:00:50.245201+08:00]>\n>>> arw.replace(tzinfo='US/Pacific')  # 替换时区\n<Arrow [2018-06-07T19:04:50.245201-07:00]>\n\n>>> arw.shift(days=+3)  # 往后偏移三天\n<Arrow [2018-06-10T19:04:50.245201+08:00]>\n>>> arw.shift(days=-3)  # 往前偏移三天\n<Arrow [2018-06-04T19:04:50.245201+08:00]>\n>>> \n```\n\n### 按名称或tzinfo转换为时区\n\n```python\n>>> arw = arrow.utcnow()\n>>> arw\n<Arrow [2018-06-07T11:16:51.695083+00:00]>\n>>> arw.to('US/Pacific')\n<Arrow [2018-06-07T04:16:51.695083-07:00]>\n\n```\n\n### 更人性化的设计\n\n```python\n>>> past = arrow.utcnow().shift(hours=-1)\n>>> past\n<Arrow [2018-06-07T10:24:19.968351+00:00]>\n>>> past.humanize()\n'an hour ago'\n>>> present = arrow.utcnow()\n>>> future = present.shift(hours=+2)\n>>> future\n<Arrow [2018-06-07T13:25:57.160630+00:00]>\n>>> future.humanize()\n'in 2 hours'\n>>> future.humanize(a,locale='ru')  # 支持更多的语言环境\n'через 3 часа'\n```\n\n### 获取任意时间单位的时间跨度\n\n```python\n>>> arrow.utcnow().span('hour')\n(<Arrow [2018-06-07T11:00:00+00:00]>, <Arrow [2018-06-07T11:59:59.999999+00:00]>)\n>>> arrow.utcnow().span('year')\n(<Arrow [2018-01-01T00:00:00+00:00]>, <Arrow [2018-12-31T23:59:59.999999+00:00]>)\n>>> arrow.utcnow().span('month')\n(<Arrow [2018-06-01T00:00:00+00:00]>, <Arrow [2018-06-30T23:59:59.999999+00:00]>)\n>>> arrow.utcnow().span('day')\n(<Arrow [2018-06-07T00:00:00+00:00]>, <Arrow [2018-06-07T23:59:59.999999+00:00]>)\n\n```\n\n### 只得到任意单位时间中的最大值或最小值\n\n```python\n>>> arrow.utcnow().floor('hour')  \n<Arrow [2018-06-07T11:00:00+00:00]>\n>>> arrow.utcnow().ceil('hour')  \n<Arrow [2018-06-07T11:59:59.999999+00:00]>\n>>> arrow.utcnow().floor('day')\n<Arrow [2018-06-07T00:00:00+00:00]>\n>>> arrow.utcnow().ceil('day')\n<Arrow [2018-06-07T23:59:59.999999+00:00]>\n>>> \n```\n\n### 表示特定于语言环境的数据和功能的类\n\n```python\narrow.locales.Locale\n```\n\n## arrow库的官方文档：http://arrow.readthedocs.io/en/latest/\n","source":"_posts/python中arrow库的使用.md","raw":"---\ntitle: python中arrow库的使用\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 基础\ncategories:\n  - python\n  - 基础\nabbrlink: 1524522455\ndate: 2020-01-02 11:57:58\n---\n\n Arrow是一个Python库，为创建，操作，格式化和转换日期，时间和时间戳提供了一种明智的，人性化的方法。 它实现和更新日期时间类型，填补功能上的空白，并提供支持许多常见创建场景的智能模块API。 简而言之，它可以帮助您使用更少的进口和更少的代码来处理日期和时间。\n### 安装\n\n```\npip install arrow\n```\n\n<!--more-->\n\n### 简单开始\n\n```python\n>>> import arrow\n>>> utc = arrow.utcnow()  # 获取世界标准时间\n>>> utc\n<Arrow [2018-06-07T09:37:28.989983+00:00]>\n>>> utc = arrow.now()  # 获取本地时间\n>>> utc\n<Arrow [2018-06-07T17:40:19.019529+08:00]>\n>>> arrow.now('US/Pacific')  # 获取指定时区的时间\n<Arrow [2018-06-07T02:41:54.815029-07:00]>\n```\n\n```python\n>>> a = arrow.now()\n>>> a\n<Arrow [2018-06-07T17:44:43.519166+08:00]>\n>>> a.year  # 当前年\n2018\n>>> a.month  # 当前月份\n6\n>>> a.day  # 当前天\n7\n>>> a.hour  # 当前第几个小时\n17\n>>> a.minute  # 当前多少分钟\n44\n>>> a.second  # 当前多少秒\n43\n>>> a.timestamp  # 获取时间戳\n1528364683\n>>> a.float_timestamp  # 浮点数时间戳\n1528364683.519166\n```\n\n### 时间格式化\n\n```python\n>>> a = arrow.now()\n>>> a\n<Arrow [2018-06-07T17:59:36.917894+08:00]>\n>>> a.format()\n'2018-06-07 17:59:36+08:00'\n>>> a.format('YYYY-MM-DD HH:mm:ss ZZ')\n'2018-06-07 17:59:36 +08:00'\n>>> a.ctime()  # 返回日期和时间的ctime格式化表示。\n'Thu Jun  7 17:59:36 2018'  \n>>> a.weekday()  # 以整数形式返回星期几（0-6）\n3\n>>> a.isoweekday()  # 以整数形式返回一周中的ISO日（1-7）\n4\n>>> a.isocalendar()  # 返回3元组（ISO年，ISO周数，ISO工作日）\n(2018, 23, 4)\n>>> a.toordinal()  # 返回日期的格雷戈里序数\n736852\n```\n\n### 从string中解析时间对象\n\n```python\n>>> arrow.get('2018-06-07 18:52:45', 'YYYY-MM-DD HH:mm:ss')\n<Arrow [2018-06-07T18:52:45+00:00]>\n>>> str = 'June was born in May 1980'\n>>> arrow.get(str,'MMMM YYYY')\n<Arrow [1980-05-01T00:00:00+00:00]>\n```\n\n### 解析的格式化参考：http://arrow.readthedocs.io/en/latest/#tokens\n### 时间的替换和偏移\n\n```python\n>>> arw = arrow.now()\n>>> arw\n<Arrow [2018-06-07T19:04:50.245201+08:00]>\n>>> arw.replace(hour=20,minute=00)  # 替换时间\n<Arrow [2018-06-07T20:00:50.245201+08:00]>\n>>> arw.replace(tzinfo='US/Pacific')  # 替换时区\n<Arrow [2018-06-07T19:04:50.245201-07:00]>\n\n>>> arw.shift(days=+3)  # 往后偏移三天\n<Arrow [2018-06-10T19:04:50.245201+08:00]>\n>>> arw.shift(days=-3)  # 往前偏移三天\n<Arrow [2018-06-04T19:04:50.245201+08:00]>\n>>> \n```\n\n### 按名称或tzinfo转换为时区\n\n```python\n>>> arw = arrow.utcnow()\n>>> arw\n<Arrow [2018-06-07T11:16:51.695083+00:00]>\n>>> arw.to('US/Pacific')\n<Arrow [2018-06-07T04:16:51.695083-07:00]>\n\n```\n\n### 更人性化的设计\n\n```python\n>>> past = arrow.utcnow().shift(hours=-1)\n>>> past\n<Arrow [2018-06-07T10:24:19.968351+00:00]>\n>>> past.humanize()\n'an hour ago'\n>>> present = arrow.utcnow()\n>>> future = present.shift(hours=+2)\n>>> future\n<Arrow [2018-06-07T13:25:57.160630+00:00]>\n>>> future.humanize()\n'in 2 hours'\n>>> future.humanize(a,locale='ru')  # 支持更多的语言环境\n'через 3 часа'\n```\n\n### 获取任意时间单位的时间跨度\n\n```python\n>>> arrow.utcnow().span('hour')\n(<Arrow [2018-06-07T11:00:00+00:00]>, <Arrow [2018-06-07T11:59:59.999999+00:00]>)\n>>> arrow.utcnow().span('year')\n(<Arrow [2018-01-01T00:00:00+00:00]>, <Arrow [2018-12-31T23:59:59.999999+00:00]>)\n>>> arrow.utcnow().span('month')\n(<Arrow [2018-06-01T00:00:00+00:00]>, <Arrow [2018-06-30T23:59:59.999999+00:00]>)\n>>> arrow.utcnow().span('day')\n(<Arrow [2018-06-07T00:00:00+00:00]>, <Arrow [2018-06-07T23:59:59.999999+00:00]>)\n\n```\n\n### 只得到任意单位时间中的最大值或最小值\n\n```python\n>>> arrow.utcnow().floor('hour')  \n<Arrow [2018-06-07T11:00:00+00:00]>\n>>> arrow.utcnow().ceil('hour')  \n<Arrow [2018-06-07T11:59:59.999999+00:00]>\n>>> arrow.utcnow().floor('day')\n<Arrow [2018-06-07T00:00:00+00:00]>\n>>> arrow.utcnow().ceil('day')\n<Arrow [2018-06-07T23:59:59.999999+00:00]>\n>>> \n```\n\n### 表示特定于语言环境的数据和功能的类\n\n```python\narrow.locales.Locale\n```\n\n## arrow库的官方文档：http://arrow.readthedocs.io/en/latest/\n","slug":"python中arrow库的使用","published":1,"updated":"2022-03-13T11:49:16.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07o001f9jx3go9kh1e1","content":"<p>Arrow是一个Python库，为创建，操作，格式化和转换日期，时间和时间戳提供了一种明智的，人性化的方法。 它实现和更新日期时间类型，填补功能上的空白，并提供支持许多常见创建场景的智能模块API。 简而言之，它可以帮助您使用更少的进口和更少的代码来处理日期和时间。</p><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> arrow</span><br></pre></td></tr></table></figure><a id=\"more\"></a><h3 id=\"简单开始\"><a href=\"#简单开始\" class=\"headerlink\" title=\"简单开始\"></a>简单开始</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> arrow</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc = arrow.utcnow()  <span class=\"comment\"># 获取世界标准时间</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T09:<span class=\"number\">37</span>:<span class=\"number\">28.989983</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc = arrow.now()  <span class=\"comment\"># 获取本地时间</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T17:<span class=\"number\">40</span>:<span class=\"number\">19.019529</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.now(<span class=\"string\">'US/Pacific'</span>)  <span class=\"comment\"># 获取指定时区的时间</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T02:<span class=\"number\">41</span>:<span class=\"number\">54.815029</span><span class=\"number\">-07</span>:<span class=\"number\">00</span>]&gt;</span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = arrow.now()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T17:<span class=\"number\">44</span>:<span class=\"number\">43.519166</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.year  <span class=\"comment\"># 当前年</span></span><br><span class=\"line\"><span class=\"number\">2018</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.month  <span class=\"comment\"># 当前月份</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.day  <span class=\"comment\"># 当前天</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.hour  <span class=\"comment\"># 当前第几个小时</span></span><br><span class=\"line\"><span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.minute  <span class=\"comment\"># 当前多少分钟</span></span><br><span class=\"line\"><span class=\"number\">44</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.second  <span class=\"comment\"># 当前多少秒</span></span><br><span class=\"line\"><span class=\"number\">43</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.timestamp  <span class=\"comment\"># 获取时间戳</span></span><br><span class=\"line\"><span class=\"number\">1528364683</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.float_timestamp  <span class=\"comment\"># 浮点数时间戳</span></span><br><span class=\"line\"><span class=\"number\">1528364683.519166</span></span><br></pre></td></tr></table></figure><h3 id=\"时间格式化\"><a href=\"#时间格式化\" class=\"headerlink\" title=\"时间格式化\"></a>时间格式化</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = arrow.now()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T17:<span class=\"number\">59</span>:<span class=\"number\">36.917894</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.format()</span><br><span class=\"line\"><span class=\"string\">'2018-06-07 17:59:36+08:00'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss ZZ'</span>)</span><br><span class=\"line\"><span class=\"string\">'2018-06-07 17:59:36 +08:00'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.ctime()  <span class=\"comment\"># 返回日期和时间的ctime格式化表示。</span></span><br><span class=\"line\"><span class=\"string\">'Thu Jun  7 17:59:36 2018'</span>  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.weekday()  <span class=\"comment\"># 以整数形式返回星期几（0-6）</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.isoweekday()  <span class=\"comment\"># 以整数形式返回一周中的ISO日（1-7）</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.isocalendar()  <span class=\"comment\"># 返回3元组（ISO年，ISO周数，ISO工作日）</span></span><br><span class=\"line\">(<span class=\"number\">2018</span>, <span class=\"number\">23</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.toordinal()  <span class=\"comment\"># 返回日期的格雷戈里序数</span></span><br><span class=\"line\"><span class=\"number\">736852</span></span><br></pre></td></tr></table></figure><h3 id=\"从string中解析时间对象\"><a href=\"#从string中解析时间对象\" class=\"headerlink\" title=\"从string中解析时间对象\"></a>从string中解析时间对象</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.get(<span class=\"string\">'2018-06-07 18:52:45'</span>, <span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T18:<span class=\"number\">52</span>:<span class=\"number\">45</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">'June was born in May 1980'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.get(str,<span class=\"string\">'MMMM YYYY'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">1980</span><span class=\"number\">-05</span><span class=\"number\">-01</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br></pre></td></tr></table></figure><h3 id=\"解析的格式化参考：http-arrow-readthedocs-io-en-latest-tokens\"><a href=\"#解析的格式化参考：http-arrow-readthedocs-io-en-latest-tokens\" class=\"headerlink\" title=\"解析的格式化参考：http://arrow.readthedocs.io/en/latest/#tokens\"></a>解析的格式化参考：<a href=\"http://arrow.readthedocs.io/en/latest/#tokens\" target=\"_blank\" rel=\"noopener\">http://arrow.readthedocs.io/en/latest/#tokens</a></h3><h3 id=\"时间的替换和偏移\"><a href=\"#时间的替换和偏移\" class=\"headerlink\" title=\"时间的替换和偏移\"></a>时间的替换和偏移</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw = arrow.now()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.replace(hour=<span class=\"number\">20</span>,minute=<span class=\"number\">00</span>)  <span class=\"comment\"># 替换时间</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T20:<span class=\"number\">00</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.replace(tzinfo=<span class=\"string\">'US/Pacific'</span>)  <span class=\"comment\"># 替换时区</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span><span class=\"number\">-07</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.shift(days=+<span class=\"number\">3</span>)  <span class=\"comment\"># 往后偏移三天</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-10</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.shift(days=<span class=\"number\">-3</span>)  <span class=\"comment\"># 往前偏移三天</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-04</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id=\"按名称或tzinfo转换为时区\"><a href=\"#按名称或tzinfo转换为时区\" class=\"headerlink\" title=\"按名称或tzinfo转换为时区\"></a>按名称或tzinfo转换为时区</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw = arrow.utcnow()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">16</span>:<span class=\"number\">51.695083</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.to(<span class=\"string\">'US/Pacific'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T04:<span class=\"number\">16</span>:<span class=\"number\">51.695083</span><span class=\"number\">-07</span>:<span class=\"number\">00</span>]&gt;</span><br></pre></td></tr></table></figure><h3 id=\"更人性化的设计\"><a href=\"#更人性化的设计\" class=\"headerlink\" title=\"更人性化的设计\"></a>更人性化的设计</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>past = arrow.utcnow().shift(hours=<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>past</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T10:<span class=\"number\">24</span>:<span class=\"number\">19.968351</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>past.humanize()</span><br><span class=\"line\"><span class=\"string\">'an hour ago'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>present = arrow.utcnow()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future = present.shift(hours=+<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T13:<span class=\"number\">25</span>:<span class=\"number\">57.160630</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future.humanize()</span><br><span class=\"line\"><span class=\"string\">'in 2 hours'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future.humanize(a,locale=<span class=\"string\">'ru'</span>)  <span class=\"comment\"># 支持更多的语言环境</span></span><br><span class=\"line\"><span class=\"string\">'через 3 часа'</span></span><br></pre></td></tr></table></figure><h3 id=\"获取任意时间单位的时间跨度\"><a href=\"#获取任意时间单位的时间跨度\" class=\"headerlink\" title=\"获取任意时间单位的时间跨度\"></a>获取任意时间单位的时间跨度</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'hour'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'year'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-01</span><span class=\"number\">-01</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-12</span><span class=\"number\">-31</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'month'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-01</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-30</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'day'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br></pre></td></tr></table></figure><h3 id=\"只得到任意单位时间中的最大值或最小值\"><a href=\"#只得到任意单位时间中的最大值或最小值\" class=\"headerlink\" title=\"只得到任意单位时间中的最大值或最小值\"></a>只得到任意单位时间中的最大值或最小值</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().floor(<span class=\"string\">'hour'</span>)  </span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().ceil(<span class=\"string\">'hour'</span>)  </span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().floor(<span class=\"string\">'day'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().ceil(<span class=\"string\">'day'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id=\"表示特定于语言环境的数据和功能的类\"><a href=\"#表示特定于语言环境的数据和功能的类\" class=\"headerlink\" title=\"表示特定于语言环境的数据和功能的类\"></a>表示特定于语言环境的数据和功能的类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrow.locales.Locale</span><br></pre></td></tr></table></figure><h2 id=\"arrow库的官方文档：http-arrow-readthedocs-io-en-latest\"><a href=\"#arrow库的官方文档：http-arrow-readthedocs-io-en-latest\" class=\"headerlink\" title=\"arrow库的官方文档：http://arrow.readthedocs.io/en/latest/\"></a>arrow库的官方文档：<a href=\"http://arrow.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">http://arrow.readthedocs.io/en/latest/</a></h2>","site":{"data":{}},"excerpt":"<p>Arrow是一个Python库，为创建，操作，格式化和转换日期，时间和时间戳提供了一种明智的，人性化的方法。 它实现和更新日期时间类型，填补功能上的空白，并提供支持许多常见创建场景的智能模块API。 简而言之，它可以帮助您使用更少的进口和更少的代码来处理日期和时间。</p><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> arrow</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"简单开始\"><a href=\"#简单开始\" class=\"headerlink\" title=\"简单开始\"></a>简单开始</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> arrow</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc = arrow.utcnow()  <span class=\"comment\"># 获取世界标准时间</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T09:<span class=\"number\">37</span>:<span class=\"number\">28.989983</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc = arrow.now()  <span class=\"comment\"># 获取本地时间</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T17:<span class=\"number\">40</span>:<span class=\"number\">19.019529</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.now(<span class=\"string\">'US/Pacific'</span>)  <span class=\"comment\"># 获取指定时区的时间</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T02:<span class=\"number\">41</span>:<span class=\"number\">54.815029</span><span class=\"number\">-07</span>:<span class=\"number\">00</span>]&gt;</span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = arrow.now()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T17:<span class=\"number\">44</span>:<span class=\"number\">43.519166</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.year  <span class=\"comment\"># 当前年</span></span><br><span class=\"line\"><span class=\"number\">2018</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.month  <span class=\"comment\"># 当前月份</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.day  <span class=\"comment\"># 当前天</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.hour  <span class=\"comment\"># 当前第几个小时</span></span><br><span class=\"line\"><span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.minute  <span class=\"comment\"># 当前多少分钟</span></span><br><span class=\"line\"><span class=\"number\">44</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.second  <span class=\"comment\"># 当前多少秒</span></span><br><span class=\"line\"><span class=\"number\">43</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.timestamp  <span class=\"comment\"># 获取时间戳</span></span><br><span class=\"line\"><span class=\"number\">1528364683</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.float_timestamp  <span class=\"comment\"># 浮点数时间戳</span></span><br><span class=\"line\"><span class=\"number\">1528364683.519166</span></span><br></pre></td></tr></table></figure><h3 id=\"时间格式化\"><a href=\"#时间格式化\" class=\"headerlink\" title=\"时间格式化\"></a>时间格式化</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = arrow.now()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T17:<span class=\"number\">59</span>:<span class=\"number\">36.917894</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.format()</span><br><span class=\"line\"><span class=\"string\">'2018-06-07 17:59:36+08:00'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss ZZ'</span>)</span><br><span class=\"line\"><span class=\"string\">'2018-06-07 17:59:36 +08:00'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.ctime()  <span class=\"comment\"># 返回日期和时间的ctime格式化表示。</span></span><br><span class=\"line\"><span class=\"string\">'Thu Jun  7 17:59:36 2018'</span>  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.weekday()  <span class=\"comment\"># 以整数形式返回星期几（0-6）</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.isoweekday()  <span class=\"comment\"># 以整数形式返回一周中的ISO日（1-7）</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.isocalendar()  <span class=\"comment\"># 返回3元组（ISO年，ISO周数，ISO工作日）</span></span><br><span class=\"line\">(<span class=\"number\">2018</span>, <span class=\"number\">23</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.toordinal()  <span class=\"comment\"># 返回日期的格雷戈里序数</span></span><br><span class=\"line\"><span class=\"number\">736852</span></span><br></pre></td></tr></table></figure><h3 id=\"从string中解析时间对象\"><a href=\"#从string中解析时间对象\" class=\"headerlink\" title=\"从string中解析时间对象\"></a>从string中解析时间对象</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.get(<span class=\"string\">'2018-06-07 18:52:45'</span>, <span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T18:<span class=\"number\">52</span>:<span class=\"number\">45</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">'June was born in May 1980'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.get(str,<span class=\"string\">'MMMM YYYY'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">1980</span><span class=\"number\">-05</span><span class=\"number\">-01</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br></pre></td></tr></table></figure><h3 id=\"解析的格式化参考：http-arrow-readthedocs-io-en-latest-tokens\"><a href=\"#解析的格式化参考：http-arrow-readthedocs-io-en-latest-tokens\" class=\"headerlink\" title=\"解析的格式化参考：http://arrow.readthedocs.io/en/latest/#tokens\"></a>解析的格式化参考：<a href=\"http://arrow.readthedocs.io/en/latest/#tokens\" target=\"_blank\" rel=\"noopener\">http://arrow.readthedocs.io/en/latest/#tokens</a></h3><h3 id=\"时间的替换和偏移\"><a href=\"#时间的替换和偏移\" class=\"headerlink\" title=\"时间的替换和偏移\"></a>时间的替换和偏移</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw = arrow.now()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.replace(hour=<span class=\"number\">20</span>,minute=<span class=\"number\">00</span>)  <span class=\"comment\"># 替换时间</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T20:<span class=\"number\">00</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.replace(tzinfo=<span class=\"string\">'US/Pacific'</span>)  <span class=\"comment\"># 替换时区</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span><span class=\"number\">-07</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.shift(days=+<span class=\"number\">3</span>)  <span class=\"comment\"># 往后偏移三天</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-10</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.shift(days=<span class=\"number\">-3</span>)  <span class=\"comment\"># 往前偏移三天</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-04</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id=\"按名称或tzinfo转换为时区\"><a href=\"#按名称或tzinfo转换为时区\" class=\"headerlink\" title=\"按名称或tzinfo转换为时区\"></a>按名称或tzinfo转换为时区</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw = arrow.utcnow()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">16</span>:<span class=\"number\">51.695083</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.to(<span class=\"string\">'US/Pacific'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T04:<span class=\"number\">16</span>:<span class=\"number\">51.695083</span><span class=\"number\">-07</span>:<span class=\"number\">00</span>]&gt;</span><br></pre></td></tr></table></figure><h3 id=\"更人性化的设计\"><a href=\"#更人性化的设计\" class=\"headerlink\" title=\"更人性化的设计\"></a>更人性化的设计</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>past = arrow.utcnow().shift(hours=<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>past</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T10:<span class=\"number\">24</span>:<span class=\"number\">19.968351</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>past.humanize()</span><br><span class=\"line\"><span class=\"string\">'an hour ago'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>present = arrow.utcnow()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future = present.shift(hours=+<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T13:<span class=\"number\">25</span>:<span class=\"number\">57.160630</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future.humanize()</span><br><span class=\"line\"><span class=\"string\">'in 2 hours'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future.humanize(a,locale=<span class=\"string\">'ru'</span>)  <span class=\"comment\"># 支持更多的语言环境</span></span><br><span class=\"line\"><span class=\"string\">'через 3 часа'</span></span><br></pre></td></tr></table></figure><h3 id=\"获取任意时间单位的时间跨度\"><a href=\"#获取任意时间单位的时间跨度\" class=\"headerlink\" title=\"获取任意时间单位的时间跨度\"></a>获取任意时间单位的时间跨度</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'hour'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'year'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-01</span><span class=\"number\">-01</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-12</span><span class=\"number\">-31</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'month'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-01</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-30</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'day'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br></pre></td></tr></table></figure><h3 id=\"只得到任意单位时间中的最大值或最小值\"><a href=\"#只得到任意单位时间中的最大值或最小值\" class=\"headerlink\" title=\"只得到任意单位时间中的最大值或最小值\"></a>只得到任意单位时间中的最大值或最小值</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().floor(<span class=\"string\">'hour'</span>)  </span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().ceil(<span class=\"string\">'hour'</span>)  </span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().floor(<span class=\"string\">'day'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().ceil(<span class=\"string\">'day'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id=\"表示特定于语言环境的数据和功能的类\"><a href=\"#表示特定于语言环境的数据和功能的类\" class=\"headerlink\" title=\"表示特定于语言环境的数据和功能的类\"></a>表示特定于语言环境的数据和功能的类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrow.locales.Locale</span><br></pre></td></tr></table></figure><h2 id=\"arrow库的官方文档：http-arrow-readthedocs-io-en-latest\"><a href=\"#arrow库的官方文档：http-arrow-readthedocs-io-en-latest\" class=\"headerlink\" title=\"arrow库的官方文档：http://arrow.readthedocs.io/en/latest/\"></a>arrow库的官方文档：<a href=\"http://arrow.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">http://arrow.readthedocs.io/en/latest/</a></h2>"},{"title":"python中对象和继承","type":"categories","copyright":true,"keywords":["类","继承"],"abbrlink":3262789355,"date":"2022-03-19T05:30:30.000Z","_content":"\n## python中的类\n\n**类的定义：**  类是某类事物的统称，对象是基于类的实例；比如说我们定义一个动物类，那么狗便是这个类的一个实例对象；\n\npython中类的创建有几个特殊的魔法糖(装饰器)对方法进行修饰，使其具有特殊的属性；\n\n- @abstractmethod (抽象方法)\n- @property (方法伪装属性)\n- @classmethod (类方法)\n- @staticmethod (静态方法)\n\n<!-- more -->\n\n### 抽象方法\n具有@abstractmethod装饰的方法的类是不能实例化的，其子类也需要重写所有的abstractmethod所装饰的方法才能实例化，未被装饰的方法可以不重写；\n```python\nfrom abc import ABC, abstractmethod\n\nclass Person(ABC):\n    pass\n```\n\n### 方法伪装属性\n使用property进行装饰的特点\n\n- 被装饰的方法返回 值及属性值；\n- 被装饰的方法不能有参数；\n- 必须进行实例化才能调用；\n- 类本身不能调用；\n\n**使用场景：** 对于用户模型类的定义，考虑到密码的安全性，我们在数据库不存储密码明文，因此定义一个方法，该方法使用property进行装饰，设置不可读；\n```python\nclass User(db.Model):\n    password_hash = db.Column(db.String(128), nullable=False)  # 加密的密码\n\n    @property\n    def password(self):\n        # 将password方法提升为属性\n        raise AttributeError(\"不可读\")\n\n    @password.setter\n    def password(self, passwd):\n        # 设置password属性时被调用，设置密码加密\n        self.password_hash = generate_password_hash(passwd)\n\n    def checkout_password(self, passwd):\n        # 检查密码的正确性\n        return check_password_hash(self.password_hash, passwd)\n```\n\n### 类方法\n- 类方法通过@classmethod进行装饰，可以通过实例对象和类对象进行调用；-\n- 被该函数装饰的方法的第一个参数默认为cls,代表类本身；\n- 被装饰方法可以调用类属性，不能调用实例属性；\n\n\n### 静态方法\n- 静态方法通过@staticmethod进行装饰，可以通过实例对象和类对象进行调用；\n- 被该函数装饰的方法可以没有参数\n- 被装饰方法内部可以通过类名.属性的方式来引用类属性和类方法；\n- 静态方法不能调用实例属性；\n\n## python中的继承和多态\n\n### 继承\npython的类分为两种类型\n- 经典类，python2的默认类\n- 新式类，python3的默认类\n\n**继承的概念：** 继承是类与类的一种关系，是子类和父类的关系；子类继承父类的属性和方法；\n\n**继承的优点：** 通过继承，子类可以拥有父类的属性和方法；可以直接调用父类的属性和方法；可以避免重复定义相同的属性和方法，降低了代码的冗余程度，提升了代码的可读性；\n\n**继承的顺序：** 继承的顺序和类的类型有关；简单来说，经典类采用的深度优先的顺序，新式类采用的广度优先的顺序；我们可以通过打印子类的__mro__属性来查看类的继承顺序；\n\n**isinstance()及issubclass()方法**\n\nPython 与其他语言不同点在于，当我们定义一个 class 的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和Python自带的数据类型，比如str、list、dict没什么两样。\n\nPython 有两个判断继承的函数：isinstance() 用于检查实例类型；issubclass() 用于检查类继承。\n\n### 多态\n**多态**是指一类事物具有多种形态；在面向对象编程上，一个抽象类具有多个子类；因而多态的概念依赖于继承的；\n\n**多态性**是指具有不同功能的函数可以使用相同的函数名，这样可以用一个函数名调用不同内容的函数，即**一个接口，多种实现**；\n\n### 鸭子类型\n调用不同的子类会产生不同的行为，而不必知道这个子类实际上是什么；这便是多态的重要使用场景；\n\n在python中，鸭子类型是动态类型的一种风格，其关注的并不是类型对象的本身，而是其如何使用的；\n\n鸭子类型通常得益于不测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用；\n\n**举例**\n- 如果一个对象实现了getitem方法，那python的解释器就会把它当做一个collection，就可以在这个对象上使用切片，获取子项等方法；\n\n- 如果一个对象实现了iter和next方法，python就会认为它是一个iterator，就可以在这个对象上通过循环来获取各个子项；\n\n","source":"_posts/python中对象和继承.md","raw":"---\ntitle: python中对象和继承\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 基础\ncategories:\n  - python\n  - 基础\nkeywords:\n  - 类\n  - 继承\nabbrlink: 3262789355\ndate: 2022-03-19 13:30:30\n---\n\n## python中的类\n\n**类的定义：**  类是某类事物的统称，对象是基于类的实例；比如说我们定义一个动物类，那么狗便是这个类的一个实例对象；\n\npython中类的创建有几个特殊的魔法糖(装饰器)对方法进行修饰，使其具有特殊的属性；\n\n- @abstractmethod (抽象方法)\n- @property (方法伪装属性)\n- @classmethod (类方法)\n- @staticmethod (静态方法)\n\n<!-- more -->\n\n### 抽象方法\n具有@abstractmethod装饰的方法的类是不能实例化的，其子类也需要重写所有的abstractmethod所装饰的方法才能实例化，未被装饰的方法可以不重写；\n```python\nfrom abc import ABC, abstractmethod\n\nclass Person(ABC):\n    pass\n```\n\n### 方法伪装属性\n使用property进行装饰的特点\n\n- 被装饰的方法返回 值及属性值；\n- 被装饰的方法不能有参数；\n- 必须进行实例化才能调用；\n- 类本身不能调用；\n\n**使用场景：** 对于用户模型类的定义，考虑到密码的安全性，我们在数据库不存储密码明文，因此定义一个方法，该方法使用property进行装饰，设置不可读；\n```python\nclass User(db.Model):\n    password_hash = db.Column(db.String(128), nullable=False)  # 加密的密码\n\n    @property\n    def password(self):\n        # 将password方法提升为属性\n        raise AttributeError(\"不可读\")\n\n    @password.setter\n    def password(self, passwd):\n        # 设置password属性时被调用，设置密码加密\n        self.password_hash = generate_password_hash(passwd)\n\n    def checkout_password(self, passwd):\n        # 检查密码的正确性\n        return check_password_hash(self.password_hash, passwd)\n```\n\n### 类方法\n- 类方法通过@classmethod进行装饰，可以通过实例对象和类对象进行调用；-\n- 被该函数装饰的方法的第一个参数默认为cls,代表类本身；\n- 被装饰方法可以调用类属性，不能调用实例属性；\n\n\n### 静态方法\n- 静态方法通过@staticmethod进行装饰，可以通过实例对象和类对象进行调用；\n- 被该函数装饰的方法可以没有参数\n- 被装饰方法内部可以通过类名.属性的方式来引用类属性和类方法；\n- 静态方法不能调用实例属性；\n\n## python中的继承和多态\n\n### 继承\npython的类分为两种类型\n- 经典类，python2的默认类\n- 新式类，python3的默认类\n\n**继承的概念：** 继承是类与类的一种关系，是子类和父类的关系；子类继承父类的属性和方法；\n\n**继承的优点：** 通过继承，子类可以拥有父类的属性和方法；可以直接调用父类的属性和方法；可以避免重复定义相同的属性和方法，降低了代码的冗余程度，提升了代码的可读性；\n\n**继承的顺序：** 继承的顺序和类的类型有关；简单来说，经典类采用的深度优先的顺序，新式类采用的广度优先的顺序；我们可以通过打印子类的__mro__属性来查看类的继承顺序；\n\n**isinstance()及issubclass()方法**\n\nPython 与其他语言不同点在于，当我们定义一个 class 的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和Python自带的数据类型，比如str、list、dict没什么两样。\n\nPython 有两个判断继承的函数：isinstance() 用于检查实例类型；issubclass() 用于检查类继承。\n\n### 多态\n**多态**是指一类事物具有多种形态；在面向对象编程上，一个抽象类具有多个子类；因而多态的概念依赖于继承的；\n\n**多态性**是指具有不同功能的函数可以使用相同的函数名，这样可以用一个函数名调用不同内容的函数，即**一个接口，多种实现**；\n\n### 鸭子类型\n调用不同的子类会产生不同的行为，而不必知道这个子类实际上是什么；这便是多态的重要使用场景；\n\n在python中，鸭子类型是动态类型的一种风格，其关注的并不是类型对象的本身，而是其如何使用的；\n\n鸭子类型通常得益于不测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用；\n\n**举例**\n- 如果一个对象实现了getitem方法，那python的解释器就会把它当做一个collection，就可以在这个对象上使用切片，获取子项等方法；\n\n- 如果一个对象实现了iter和next方法，python就会认为它是一个iterator，就可以在这个对象上通过循环来获取各个子项；\n\n","slug":"python中对象和继承","published":1,"updated":"2022-03-20T14:13:54.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07p001i9jx3guvb0fs8","content":"<h2 id=\"python中的类\"><a href=\"#python中的类\" class=\"headerlink\" title=\"python中的类\"></a>python中的类</h2><p><strong>类的定义：</strong> 类是某类事物的统称，对象是基于类的实例；比如说我们定义一个动物类，那么狗便是这个类的一个实例对象；</p><p>python中类的创建有几个特殊的魔法糖(装饰器)对方法进行修饰，使其具有特殊的属性；</p><ul><li>@abstractmethod (抽象方法)</li><li>@property (方法伪装属性)</li><li>@classmethod (类方法)</li><li>@staticmethod (静态方法)</li></ul><a id=\"more\"></a><h3 id=\"抽象方法\"><a href=\"#抽象方法\" class=\"headerlink\" title=\"抽象方法\"></a>抽象方法</h3><p>具有@abstractmethod装饰的方法的类是不能实例化的，其子类也需要重写所有的abstractmethod所装饰的方法才能实例化，未被装饰的方法可以不重写；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> ABC, abstractmethod</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(ABC)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><h3 id=\"方法伪装属性\"><a href=\"#方法伪装属性\" class=\"headerlink\" title=\"方法伪装属性\"></a>方法伪装属性</h3><p>使用property进行装饰的特点</p><ul><li>被装饰的方法返回 值及属性值；</li><li>被装饰的方法不能有参数；</li><li>必须进行实例化才能调用；</li><li>类本身不能调用；</li></ul><p><strong>使用场景：</strong> 对于用户模型类的定义，考虑到密码的安全性，我们在数据库不存储密码明文，因此定义一个方法，该方法使用property进行装饰，设置不可读；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    password_hash = db.Column(db.String(<span class=\"number\">128</span>), nullable=<span class=\"literal\">False</span>)  <span class=\"comment\"># 加密的密码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">password</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 将password方法提升为属性</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> AttributeError(<span class=\"string\">\"不可读\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @password.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">password</span><span class=\"params\">(self, passwd)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 设置password属性时被调用，设置密码加密</span></span><br><span class=\"line\">        self.password_hash = generate_password_hash(passwd)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">checkout_password</span><span class=\"params\">(self, passwd)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 检查密码的正确性</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> check_password_hash(self.password_hash, passwd)</span><br></pre></td></tr></table></figure><h3 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h3><ul><li>类方法通过@classmethod进行装饰，可以通过实例对象和类对象进行调用；-</li><li>被该函数装饰的方法的第一个参数默认为cls,代表类本身；</li><li>被装饰方法可以调用类属性，不能调用实例属性；</li></ul><h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><ul><li>静态方法通过@staticmethod进行装饰，可以通过实例对象和类对象进行调用；</li><li>被该函数装饰的方法可以没有参数</li><li>被装饰方法内部可以通过类名.属性的方式来引用类属性和类方法；</li><li>静态方法不能调用实例属性；</li></ul><h2 id=\"python中的继承和多态\"><a href=\"#python中的继承和多态\" class=\"headerlink\" title=\"python中的继承和多态\"></a>python中的继承和多态</h2><h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>python的类分为两种类型</p><ul><li>经典类，python2的默认类</li><li>新式类，python3的默认类</li></ul><p><strong>继承的概念：</strong> 继承是类与类的一种关系，是子类和父类的关系；子类继承父类的属性和方法；</p><p><strong>继承的优点：</strong> 通过继承，子类可以拥有父类的属性和方法；可以直接调用父类的属性和方法；可以避免重复定义相同的属性和方法，降低了代码的冗余程度，提升了代码的可读性；</p><p><strong>继承的顺序：</strong> 继承的顺序和类的类型有关；简单来说，经典类采用的深度优先的顺序，新式类采用的广度优先的顺序；我们可以通过打印子类的<strong>mro</strong>属性来查看类的继承顺序；</p><p><strong>isinstance()及issubclass()方法</strong></p><p>Python 与其他语言不同点在于，当我们定义一个 class 的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和Python自带的数据类型，比如str、list、dict没什么两样。</p><p>Python 有两个判断继承的函数：isinstance() 用于检查实例类型；issubclass() 用于检查类继承。</p><h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p><strong>多态</strong>是指一类事物具有多种形态；在面向对象编程上，一个抽象类具有多个子类；因而多态的概念依赖于继承的；</p><p><strong>多态性</strong>是指具有不同功能的函数可以使用相同的函数名，这样可以用一个函数名调用不同内容的函数，即<strong>一个接口，多种实现</strong>；</p><h3 id=\"鸭子类型\"><a href=\"#鸭子类型\" class=\"headerlink\" title=\"鸭子类型\"></a>鸭子类型</h3><p>调用不同的子类会产生不同的行为，而不必知道这个子类实际上是什么；这便是多态的重要使用场景；</p><p>在python中，鸭子类型是动态类型的一种风格，其关注的并不是类型对象的本身，而是其如何使用的；</p><p>鸭子类型通常得益于不测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用；</p><p><strong>举例</strong></p><ul><li><p>如果一个对象实现了getitem方法，那python的解释器就会把它当做一个collection，就可以在这个对象上使用切片，获取子项等方法；</p></li><li><p>如果一个对象实现了iter和next方法，python就会认为它是一个iterator，就可以在这个对象上通过循环来获取各个子项；</p></li></ul>","site":{"data":{}},"excerpt":"<h2 id=\"python中的类\"><a href=\"#python中的类\" class=\"headerlink\" title=\"python中的类\"></a>python中的类</h2><p><strong>类的定义：</strong> 类是某类事物的统称，对象是基于类的实例；比如说我们定义一个动物类，那么狗便是这个类的一个实例对象；</p><p>python中类的创建有几个特殊的魔法糖(装饰器)对方法进行修饰，使其具有特殊的属性；</p><ul><li>@abstractmethod (抽象方法)</li><li>@property (方法伪装属性)</li><li>@classmethod (类方法)</li><li>@staticmethod (静态方法)</li></ul>","more":"<h3 id=\"抽象方法\"><a href=\"#抽象方法\" class=\"headerlink\" title=\"抽象方法\"></a>抽象方法</h3><p>具有@abstractmethod装饰的方法的类是不能实例化的，其子类也需要重写所有的abstractmethod所装饰的方法才能实例化，未被装饰的方法可以不重写；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> ABC, abstractmethod</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(ABC)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><h3 id=\"方法伪装属性\"><a href=\"#方法伪装属性\" class=\"headerlink\" title=\"方法伪装属性\"></a>方法伪装属性</h3><p>使用property进行装饰的特点</p><ul><li>被装饰的方法返回 值及属性值；</li><li>被装饰的方法不能有参数；</li><li>必须进行实例化才能调用；</li><li>类本身不能调用；</li></ul><p><strong>使用场景：</strong> 对于用户模型类的定义，考虑到密码的安全性，我们在数据库不存储密码明文，因此定义一个方法，该方法使用property进行装饰，设置不可读；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">    password_hash = db.Column(db.String(<span class=\"number\">128</span>), nullable=<span class=\"literal\">False</span>)  <span class=\"comment\"># 加密的密码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">password</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 将password方法提升为属性</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> AttributeError(<span class=\"string\">\"不可读\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @password.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">password</span><span class=\"params\">(self, passwd)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 设置password属性时被调用，设置密码加密</span></span><br><span class=\"line\">        self.password_hash = generate_password_hash(passwd)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">checkout_password</span><span class=\"params\">(self, passwd)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 检查密码的正确性</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> check_password_hash(self.password_hash, passwd)</span><br></pre></td></tr></table></figure><h3 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h3><ul><li>类方法通过@classmethod进行装饰，可以通过实例对象和类对象进行调用；-</li><li>被该函数装饰的方法的第一个参数默认为cls,代表类本身；</li><li>被装饰方法可以调用类属性，不能调用实例属性；</li></ul><h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><ul><li>静态方法通过@staticmethod进行装饰，可以通过实例对象和类对象进行调用；</li><li>被该函数装饰的方法可以没有参数</li><li>被装饰方法内部可以通过类名.属性的方式来引用类属性和类方法；</li><li>静态方法不能调用实例属性；</li></ul><h2 id=\"python中的继承和多态\"><a href=\"#python中的继承和多态\" class=\"headerlink\" title=\"python中的继承和多态\"></a>python中的继承和多态</h2><h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>python的类分为两种类型</p><ul><li>经典类，python2的默认类</li><li>新式类，python3的默认类</li></ul><p><strong>继承的概念：</strong> 继承是类与类的一种关系，是子类和父类的关系；子类继承父类的属性和方法；</p><p><strong>继承的优点：</strong> 通过继承，子类可以拥有父类的属性和方法；可以直接调用父类的属性和方法；可以避免重复定义相同的属性和方法，降低了代码的冗余程度，提升了代码的可读性；</p><p><strong>继承的顺序：</strong> 继承的顺序和类的类型有关；简单来说，经典类采用的深度优先的顺序，新式类采用的广度优先的顺序；我们可以通过打印子类的<strong>mro</strong>属性来查看类的继承顺序；</p><p><strong>isinstance()及issubclass()方法</strong></p><p>Python 与其他语言不同点在于，当我们定义一个 class 的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和Python自带的数据类型，比如str、list、dict没什么两样。</p><p>Python 有两个判断继承的函数：isinstance() 用于检查实例类型；issubclass() 用于检查类继承。</p><h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p><strong>多态</strong>是指一类事物具有多种形态；在面向对象编程上，一个抽象类具有多个子类；因而多态的概念依赖于继承的；</p><p><strong>多态性</strong>是指具有不同功能的函数可以使用相同的函数名，这样可以用一个函数名调用不同内容的函数，即<strong>一个接口，多种实现</strong>；</p><h3 id=\"鸭子类型\"><a href=\"#鸭子类型\" class=\"headerlink\" title=\"鸭子类型\"></a>鸭子类型</h3><p>调用不同的子类会产生不同的行为，而不必知道这个子类实际上是什么；这便是多态的重要使用场景；</p><p>在python中，鸭子类型是动态类型的一种风格，其关注的并不是类型对象的本身，而是其如何使用的；</p><p>鸭子类型通常得益于不测试方法和函数中参数的类型，而是依赖文档、清晰的代码和测试来确保正确使用；</p><p><strong>举例</strong></p><ul><li><p>如果一个对象实现了getitem方法，那python的解释器就会把它当做一个collection，就可以在这个对象上使用切片，获取子项等方法；</p></li><li><p>如果一个对象实现了iter和next方法，python就会认为它是一个iterator，就可以在这个对象上通过循环来获取各个子项；</p></li></ul>"},{"title":"python之copy","type":"categories","copyright":true,"abbrlink":2800827854,"date":"2020-01-02T02:37:05.000Z","_content":"\n## Python中的引用、浅拷贝和深拷贝\n在python中，有一句话：*一切皆为对象，一切皆为对象的引用*，所以\n只要记住这句话就很容易清楚python中的引用、浅拷贝和深拷贝了。\n\n### 1、引用\npython中的引用是经常使用的，python的引用可以节省内存，加快速度，因为它不需要开辟内存空间。例如：\n<!--more-->\n```python\na = 1\nb = 1\n```\n这表示让 a 这个变量去指向一个地址，这个地址保存着数据为 1，让变量 b 也去指向这个地址，那么通过 b 我们一样可以找到数据 1，通过地址的指向来\n来查找到数据，这就是python中的引用；\n\n\n### 2、浅拷贝\n浅拷贝 copy.copy()\n浅拷贝保存的是数据的地址，不保存内容，浅拷贝是需要开辟单独的内存空间来存储地址的，它不能保证\n数据的独立性。例如：\n```python\na = [1, 2, 3]\nb = copy.copy(a)\n# a 的值[1, 2, 3]\n# b 的值[1, 2, 3]\nid(a)  # 1397274473\nid(b)  # 1397274545\n```\n可以看出 b 的数据和 a 的数据一样，但是 b 的地址和 a 的地址不相同，而且 b 的地址里保存的是列表里元素 1， 2， 3 的地址，b 通过保存的地址信息来获取数据1, 2, 3 可以通过下面的例子得出：\n```python\nid(a)  # 1397274473\nid(b)  # 1397274545\nid(a[0])  # 20705624\nid(b[0])  # 20705624\na[0] = 8\nid(a[0])  # 20705456\nid(b[0])  # 20705624\n```\n可以看出列表a 和列表 b 里面的元素 1 都指向着同一个地址，当列表 a 的第一个元素的值变为8时，即指向一个新的保存数据为 8 的地址时，列表b 的第一个元素仍然保存的是元素 1 的地址，此时可以看出，浅拷贝只是把数据的地址保存了，并没有保存数据本身，当列表中如果有元素为可变的列表或字典类时，因为拷贝的是列表或字典所对应的地址，如果列表或字典中有元素发生改变，则浅拷贝的列表也会跟着改变，不能保证数据的独立性：\n```python\nc = [1, 2, [3, 4]]\nd = copy.copy(c)\n# c=[1, 2, [3, 4]]\n# d=[1, 2, [3, 4]]\nid(c)  # 13972747060\nid(d)  # 13972745446\nid(c[2][0])  # 20705576\nid(d[2][0])  # 20705576\n\nc[2].append(5)\n# c=[1, 2, [3, 4, 5]]\nid(c)  # 13972747060\nd # d=[1, 2, [3, 4, 5]]\nid(d)  # 13972745446\n```\n```python\na = [1, 2]\nb = copy.copy(a)\na.append(3)\na # [1, 2, 3]\nb # [1, 2]\n```\n\n### 3、深拷贝\n深拷贝copy.deepcopy()\npython中，深拷贝在浅拷贝的基础上更进一步，深拷贝保存的是数据的本身，一旦进行深拷贝，则拷贝后的内容不仅和原本的内容完全一样，而且跟原来的没有任何联系，充分保证了数据的独立性。\n深拷贝相当于在内存中开辟了一片新的内存，不再用来保存数据的地址，而是用新的地址来保存相同的数据。\n```python\na = [1, 2, [3, 4]]\nb = copy.deepcopy(a)\n\na  # [1, 2, [3, 4]]\nb  # [1, 2, [3, 4]]\n\na[2].append(5)\na  # [1, 2, [3, 4, 5]]\nb  # [1, 2, [3, 4]]\n```\n可以看出深拷贝是把列表里的数据保存了，和浅拷贝不同，当列表 a 发生改变时，列表 b 并不会跟着改变，这样充分体现了深拷贝可以保证数据的独立性。\n","source":"_posts/python之copy.md","raw":"---\ntitle: python之copy\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 基础\ncategories:\n  - python\n  - 基础\nabbrlink: 2800827854\ndate: 2020-01-02 10:37:05\n---\n\n## Python中的引用、浅拷贝和深拷贝\n在python中，有一句话：*一切皆为对象，一切皆为对象的引用*，所以\n只要记住这句话就很容易清楚python中的引用、浅拷贝和深拷贝了。\n\n### 1、引用\npython中的引用是经常使用的，python的引用可以节省内存，加快速度，因为它不需要开辟内存空间。例如：\n<!--more-->\n```python\na = 1\nb = 1\n```\n这表示让 a 这个变量去指向一个地址，这个地址保存着数据为 1，让变量 b 也去指向这个地址，那么通过 b 我们一样可以找到数据 1，通过地址的指向来\n来查找到数据，这就是python中的引用；\n\n\n### 2、浅拷贝\n浅拷贝 copy.copy()\n浅拷贝保存的是数据的地址，不保存内容，浅拷贝是需要开辟单独的内存空间来存储地址的，它不能保证\n数据的独立性。例如：\n```python\na = [1, 2, 3]\nb = copy.copy(a)\n# a 的值[1, 2, 3]\n# b 的值[1, 2, 3]\nid(a)  # 1397274473\nid(b)  # 1397274545\n```\n可以看出 b 的数据和 a 的数据一样，但是 b 的地址和 a 的地址不相同，而且 b 的地址里保存的是列表里元素 1， 2， 3 的地址，b 通过保存的地址信息来获取数据1, 2, 3 可以通过下面的例子得出：\n```python\nid(a)  # 1397274473\nid(b)  # 1397274545\nid(a[0])  # 20705624\nid(b[0])  # 20705624\na[0] = 8\nid(a[0])  # 20705456\nid(b[0])  # 20705624\n```\n可以看出列表a 和列表 b 里面的元素 1 都指向着同一个地址，当列表 a 的第一个元素的值变为8时，即指向一个新的保存数据为 8 的地址时，列表b 的第一个元素仍然保存的是元素 1 的地址，此时可以看出，浅拷贝只是把数据的地址保存了，并没有保存数据本身，当列表中如果有元素为可变的列表或字典类时，因为拷贝的是列表或字典所对应的地址，如果列表或字典中有元素发生改变，则浅拷贝的列表也会跟着改变，不能保证数据的独立性：\n```python\nc = [1, 2, [3, 4]]\nd = copy.copy(c)\n# c=[1, 2, [3, 4]]\n# d=[1, 2, [3, 4]]\nid(c)  # 13972747060\nid(d)  # 13972745446\nid(c[2][0])  # 20705576\nid(d[2][0])  # 20705576\n\nc[2].append(5)\n# c=[1, 2, [3, 4, 5]]\nid(c)  # 13972747060\nd # d=[1, 2, [3, 4, 5]]\nid(d)  # 13972745446\n```\n```python\na = [1, 2]\nb = copy.copy(a)\na.append(3)\na # [1, 2, 3]\nb # [1, 2]\n```\n\n### 3、深拷贝\n深拷贝copy.deepcopy()\npython中，深拷贝在浅拷贝的基础上更进一步，深拷贝保存的是数据的本身，一旦进行深拷贝，则拷贝后的内容不仅和原本的内容完全一样，而且跟原来的没有任何联系，充分保证了数据的独立性。\n深拷贝相当于在内存中开辟了一片新的内存，不再用来保存数据的地址，而是用新的地址来保存相同的数据。\n```python\na = [1, 2, [3, 4]]\nb = copy.deepcopy(a)\n\na  # [1, 2, [3, 4]]\nb  # [1, 2, [3, 4]]\n\na[2].append(5)\na  # [1, 2, [3, 4, 5]]\nb  # [1, 2, [3, 4]]\n```\n可以看出深拷贝是把列表里的数据保存了，和浅拷贝不同，当列表 a 发生改变时，列表 b 并不会跟着改变，这样充分体现了深拷贝可以保证数据的独立性。\n","slug":"python之copy","published":1,"updated":"2022-03-13T11:49:16.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07r001n9jx35mbwcpp9","content":"<h2 id=\"Python中的引用、浅拷贝和深拷贝\"><a href=\"#Python中的引用、浅拷贝和深拷贝\" class=\"headerlink\" title=\"Python中的引用、浅拷贝和深拷贝\"></a>Python中的引用、浅拷贝和深拷贝</h2><p>在python中，有一句话：<em>一切皆为对象，一切皆为对象的引用</em>，所以<br>只要记住这句话就很容易清楚python中的引用、浅拷贝和深拷贝了。</p><h3 id=\"1、引用\"><a href=\"#1、引用\" class=\"headerlink\" title=\"1、引用\"></a>1、引用</h3><p>python中的引用是经常使用的，python的引用可以节省内存，加快速度，因为它不需要开辟内存空间。例如：</p><a id=\"more\"></a><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p>这表示让 a 这个变量去指向一个地址，这个地址保存着数据为 1，让变量 b 也去指向这个地址，那么通过 b 我们一样可以找到数据 1，通过地址的指向来<br>来查找到数据，这就是python中的引用；</p><h3 id=\"2、浅拷贝\"><a href=\"#2、浅拷贝\" class=\"headerlink\" title=\"2、浅拷贝\"></a>2、浅拷贝</h3><p>浅拷贝 copy.copy()<br>浅拷贝保存的是数据的地址，不保存内容，浅拷贝是需要开辟单独的内存空间来存储地址的，它不能保证<br>数据的独立性。例如：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\"><span class=\"comment\"># a 的值[1, 2, 3]</span></span><br><span class=\"line\"><span class=\"comment\"># b 的值[1, 2, 3]</span></span><br><span class=\"line\">id(a)  <span class=\"comment\"># 1397274473</span></span><br><span class=\"line\">id(b)  <span class=\"comment\"># 1397274545</span></span><br></pre></td></tr></table></figure><p>可以看出 b 的数据和 a 的数据一样，但是 b 的地址和 a 的地址不相同，而且 b 的地址里保存的是列表里元素 1， 2， 3 的地址，b 通过保存的地址信息来获取数据1, 2, 3 可以通过下面的例子得出：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id(a)  <span class=\"comment\"># 1397274473</span></span><br><span class=\"line\">id(b)  <span class=\"comment\"># 1397274545</span></span><br><span class=\"line\">id(a[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705624</span></span><br><span class=\"line\">id(b[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705624</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">8</span></span><br><span class=\"line\">id(a[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705456</span></span><br><span class=\"line\">id(b[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705624</span></span><br></pre></td></tr></table></figure><p>可以看出列表a 和列表 b 里面的元素 1 都指向着同一个地址，当列表 a 的第一个元素的值变为8时，即指向一个新的保存数据为 8 的地址时，列表b 的第一个元素仍然保存的是元素 1 的地址，此时可以看出，浅拷贝只是把数据的地址保存了，并没有保存数据本身，当列表中如果有元素为可变的列表或字典类时，因为拷贝的是列表或字典所对应的地址，如果列表或字典中有元素发生改变，则浅拷贝的列表也会跟着改变，不能保证数据的独立性：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]</span><br><span class=\"line\">d = copy.copy(c)</span><br><span class=\"line\"><span class=\"comment\"># c=[1, 2, [3, 4]]</span></span><br><span class=\"line\"><span class=\"comment\"># d=[1, 2, [3, 4]]</span></span><br><span class=\"line\">id(c)  <span class=\"comment\"># 13972747060</span></span><br><span class=\"line\">id(d)  <span class=\"comment\"># 13972745446</span></span><br><span class=\"line\">id(c[<span class=\"number\">2</span>][<span class=\"number\">0</span>])  <span class=\"comment\"># 20705576</span></span><br><span class=\"line\">id(d[<span class=\"number\">2</span>][<span class=\"number\">0</span>])  <span class=\"comment\"># 20705576</span></span><br><span class=\"line\"></span><br><span class=\"line\">c[<span class=\"number\">2</span>].append(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># c=[1, 2, [3, 4, 5]]</span></span><br><span class=\"line\">id(c)  <span class=\"comment\"># 13972747060</span></span><br><span class=\"line\">d <span class=\"comment\"># d=[1, 2, [3, 4, 5]]</span></span><br><span class=\"line\">id(d)  <span class=\"comment\"># 13972745446</span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\">a.append(<span class=\"number\">3</span>)</span><br><span class=\"line\">a <span class=\"comment\"># [1, 2, 3]</span></span><br><span class=\"line\">b <span class=\"comment\"># [1, 2]</span></span><br></pre></td></tr></table></figure><h3 id=\"3、深拷贝\"><a href=\"#3、深拷贝\" class=\"headerlink\" title=\"3、深拷贝\"></a>3、深拷贝</h3><p>深拷贝copy.deepcopy()<br>python中，深拷贝在浅拷贝的基础上更进一步，深拷贝保存的是数据的本身，一旦进行深拷贝，则拷贝后的内容不仅和原本的内容完全一样，而且跟原来的没有任何联系，充分保证了数据的独立性。<br>深拷贝相当于在内存中开辟了一片新的内存，不再用来保存数据的地址，而是用新的地址来保存相同的数据。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]</span><br><span class=\"line\">b = copy.deepcopy(a)</span><br><span class=\"line\"></span><br><span class=\"line\">a  <span class=\"comment\"># [1, 2, [3, 4]]</span></span><br><span class=\"line\">b  <span class=\"comment\"># [1, 2, [3, 4]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a[<span class=\"number\">2</span>].append(<span class=\"number\">5</span>)</span><br><span class=\"line\">a  <span class=\"comment\"># [1, 2, [3, 4, 5]]</span></span><br><span class=\"line\">b  <span class=\"comment\"># [1, 2, [3, 4]]</span></span><br></pre></td></tr></table></figure><p>可以看出深拷贝是把列表里的数据保存了，和浅拷贝不同，当列表 a 发生改变时，列表 b 并不会跟着改变，这样充分体现了深拷贝可以保证数据的独立性。</p>","site":{"data":{}},"excerpt":"<h2 id=\"Python中的引用、浅拷贝和深拷贝\"><a href=\"#Python中的引用、浅拷贝和深拷贝\" class=\"headerlink\" title=\"Python中的引用、浅拷贝和深拷贝\"></a>Python中的引用、浅拷贝和深拷贝</h2><p>在python中，有一句话：<em>一切皆为对象，一切皆为对象的引用</em>，所以<br>只要记住这句话就很容易清楚python中的引用、浅拷贝和深拷贝了。</p><h3 id=\"1、引用\"><a href=\"#1、引用\" class=\"headerlink\" title=\"1、引用\"></a>1、引用</h3><p>python中的引用是经常使用的，python的引用可以节省内存，加快速度，因为它不需要开辟内存空间。例如：</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p>这表示让 a 这个变量去指向一个地址，这个地址保存着数据为 1，让变量 b 也去指向这个地址，那么通过 b 我们一样可以找到数据 1，通过地址的指向来<br>来查找到数据，这就是python中的引用；</p><h3 id=\"2、浅拷贝\"><a href=\"#2、浅拷贝\" class=\"headerlink\" title=\"2、浅拷贝\"></a>2、浅拷贝</h3><p>浅拷贝 copy.copy()<br>浅拷贝保存的是数据的地址，不保存内容，浅拷贝是需要开辟单独的内存空间来存储地址的，它不能保证<br>数据的独立性。例如：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\"><span class=\"comment\"># a 的值[1, 2, 3]</span></span><br><span class=\"line\"><span class=\"comment\"># b 的值[1, 2, 3]</span></span><br><span class=\"line\">id(a)  <span class=\"comment\"># 1397274473</span></span><br><span class=\"line\">id(b)  <span class=\"comment\"># 1397274545</span></span><br></pre></td></tr></table></figure><p>可以看出 b 的数据和 a 的数据一样，但是 b 的地址和 a 的地址不相同，而且 b 的地址里保存的是列表里元素 1， 2， 3 的地址，b 通过保存的地址信息来获取数据1, 2, 3 可以通过下面的例子得出：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id(a)  <span class=\"comment\"># 1397274473</span></span><br><span class=\"line\">id(b)  <span class=\"comment\"># 1397274545</span></span><br><span class=\"line\">id(a[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705624</span></span><br><span class=\"line\">id(b[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705624</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">8</span></span><br><span class=\"line\">id(a[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705456</span></span><br><span class=\"line\">id(b[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705624</span></span><br></pre></td></tr></table></figure><p>可以看出列表a 和列表 b 里面的元素 1 都指向着同一个地址，当列表 a 的第一个元素的值变为8时，即指向一个新的保存数据为 8 的地址时，列表b 的第一个元素仍然保存的是元素 1 的地址，此时可以看出，浅拷贝只是把数据的地址保存了，并没有保存数据本身，当列表中如果有元素为可变的列表或字典类时，因为拷贝的是列表或字典所对应的地址，如果列表或字典中有元素发生改变，则浅拷贝的列表也会跟着改变，不能保证数据的独立性：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]</span><br><span class=\"line\">d = copy.copy(c)</span><br><span class=\"line\"><span class=\"comment\"># c=[1, 2, [3, 4]]</span></span><br><span class=\"line\"><span class=\"comment\"># d=[1, 2, [3, 4]]</span></span><br><span class=\"line\">id(c)  <span class=\"comment\"># 13972747060</span></span><br><span class=\"line\">id(d)  <span class=\"comment\"># 13972745446</span></span><br><span class=\"line\">id(c[<span class=\"number\">2</span>][<span class=\"number\">0</span>])  <span class=\"comment\"># 20705576</span></span><br><span class=\"line\">id(d[<span class=\"number\">2</span>][<span class=\"number\">0</span>])  <span class=\"comment\"># 20705576</span></span><br><span class=\"line\"></span><br><span class=\"line\">c[<span class=\"number\">2</span>].append(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># c=[1, 2, [3, 4, 5]]</span></span><br><span class=\"line\">id(c)  <span class=\"comment\"># 13972747060</span></span><br><span class=\"line\">d <span class=\"comment\"># d=[1, 2, [3, 4, 5]]</span></span><br><span class=\"line\">id(d)  <span class=\"comment\"># 13972745446</span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\">a.append(<span class=\"number\">3</span>)</span><br><span class=\"line\">a <span class=\"comment\"># [1, 2, 3]</span></span><br><span class=\"line\">b <span class=\"comment\"># [1, 2]</span></span><br></pre></td></tr></table></figure><h3 id=\"3、深拷贝\"><a href=\"#3、深拷贝\" class=\"headerlink\" title=\"3、深拷贝\"></a>3、深拷贝</h3><p>深拷贝copy.deepcopy()<br>python中，深拷贝在浅拷贝的基础上更进一步，深拷贝保存的是数据的本身，一旦进行深拷贝，则拷贝后的内容不仅和原本的内容完全一样，而且跟原来的没有任何联系，充分保证了数据的独立性。<br>深拷贝相当于在内存中开辟了一片新的内存，不再用来保存数据的地址，而是用新的地址来保存相同的数据。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]</span><br><span class=\"line\">b = copy.deepcopy(a)</span><br><span class=\"line\"></span><br><span class=\"line\">a  <span class=\"comment\"># [1, 2, [3, 4]]</span></span><br><span class=\"line\">b  <span class=\"comment\"># [1, 2, [3, 4]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a[<span class=\"number\">2</span>].append(<span class=\"number\">5</span>)</span><br><span class=\"line\">a  <span class=\"comment\"># [1, 2, [3, 4, 5]]</span></span><br><span class=\"line\">b  <span class=\"comment\"># [1, 2, [3, 4]]</span></span><br></pre></td></tr></table></figure><p>可以看出深拷贝是把列表里的数据保存了，和浅拷贝不同，当列表 a 发生改变时，列表 b 并不会跟着改变，这样充分体现了深拷贝可以保证数据的独立性。</p>"},{"title":"python图片转字符串","type":"categories","copyright":true,"abbrlink":3901035388,"date":"2020-01-02T08:26:32.000Z","_content":"\n## python 图片转成字符串\n\n<!--more-->\n\n### 下面是原始图片\n![红心](/image/crawl/red_heart.jpg)\n\n### 代码\n```python\nfrom PIL import Image\nascii_char = list(\"$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1{}[]?-_+~<>i!lI;:,\\\"^`'. \")\n\nWIDTH = 85 # 字符画的宽\nHEIGHT = 25 # 字符画的高\n\n\n# 将256灰度映射到70个字符上，也就是RGB值转字符的函数：\ndef get_char(r, g, b, alpha=256):  # alpha透明度\n   if alpha == 0:\n       return ' '\n   length = len(ascii_char)\n   gray = int(0.2126 * r + 0.7152 * g + 0.0722 * b)  # 计算灰度\n   unit = (256.0 + 1) / length\n   return ascii_char[int(gray / unit)]  # 不同的灰度对应着不同的字符\n   # 通过灰度来区分色块\n\n\nif __name__ == '__main__':\n   img = './15.jpg' # 图片所在位置\n   im = Image.open(img)\n   im = im.resize((WIDTH, HEIGHT), Image.NEAREST)\n   txt = \"\"\n   for i in range(HEIGHT):\n       for j in range(WIDTH):\n           txt += get_char(*im.getpixel((j, i))) # 获得相应的字符\n       txt += '\\n'\n   print(txt)  # 打印出字符画\n   # 将字符画 写入文件中\n   with open(\"15.txt\", 'w') as f:\n       f.write(txt)\n```\n\n### 转换后的效果\n\n```\n                                                                                \n           .uahZO000Okhhw^.                  ..'hhhhhhkqZwk`'.                  \n       'phkbddppJJJJmdppddbkb<             aZ0ZqQppppOOdppddbkhk.               \n     .hkbddpppmJCpppp0JJQppJCqbk`      'mZ0dpppppJCJJJppppppppddbk:.            \n   .mZbdpppppUJpppppppppJJpppLJCQO.   hbQCppppppLJOJJJJppppppppppdbk.           \n  .hkdpZppZJJJZpppppppppppppdJJJddbkIhbdpppppppdJJJJJCJJCJJJJJpppppbk,          \n  mbbppppppCJJJppppppppppppppppCppdddddpppppppppppJJJJJLppppppJJJ0q0L0.         \n.,OLLpppLJqCJCCJppppppppppppppppppppppppppppppppppCppppppppppOJdppppCQ0         \n.p0LJCCmppppqCJJwppppppppppZJJLppppppppppppppppppJJppppppppppJJJCqpppL0.        \n mkddppppppppppLJpppppqCJJpppJqpppppppppppJJJJCCJJJJJJJJJJJCqJJqCJJJJLQ         \n .kbdppppppppppJpppppppJmpppp0JdpppppppppwJCJpwJZpppppCJJJJdpppppJppdb[         \n  lkbdpppwOqQJJCppppppppppOJJJJJJppppppCJOJpJJCpppppppppJJJpppppppppdq.         \n   .kbdpppJwpdJLppppppppppCJCdppJJJppppppJJJppppJJJLppppJJJJJqpppdbk.           \n     .kpCJqpppdOZOCLJJJJJJJJJppdJJppppppppJqp0JJJLppppppppppppdCdQ.             \n       .\"dbdppppJJJpCdCwpppppppppJJpppppppppppppJZppppppppppdbd'.               \n            kkbLJppppwJJCppppppJJJJJppppppppppppJpppppppdbbm..                  \n               .rkbddpppJJJJJCJJJpCJ0ppZLJJJJJJJJdpddpb^                        \n                    .kbbpppppJJJqpppppppppppppppCQw'.                           \n                        ^kbddppJppppppppppppdbkt.                               \n                          .:hbdpppppppppppdb`.                                  \n                              .kbdpppppdba.                                     \n                                .kbbddb'                                        \n                                  .ah..                                         \n```\n\n","source":"_posts/python图片转字符串.md","raw":"---\ntitle: python图片转字符串\ntype: categories\ncopyright: true\ntags:\n  - python\ncategories: python\nabbrlink: 3901035388\ndate: 2020-01-02 16:26:32\n---\n\n## python 图片转成字符串\n\n<!--more-->\n\n### 下面是原始图片\n![红心](/image/crawl/red_heart.jpg)\n\n### 代码\n```python\nfrom PIL import Image\nascii_char = list(\"$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1{}[]?-_+~<>i!lI;:,\\\"^`'. \")\n\nWIDTH = 85 # 字符画的宽\nHEIGHT = 25 # 字符画的高\n\n\n# 将256灰度映射到70个字符上，也就是RGB值转字符的函数：\ndef get_char(r, g, b, alpha=256):  # alpha透明度\n   if alpha == 0:\n       return ' '\n   length = len(ascii_char)\n   gray = int(0.2126 * r + 0.7152 * g + 0.0722 * b)  # 计算灰度\n   unit = (256.0 + 1) / length\n   return ascii_char[int(gray / unit)]  # 不同的灰度对应着不同的字符\n   # 通过灰度来区分色块\n\n\nif __name__ == '__main__':\n   img = './15.jpg' # 图片所在位置\n   im = Image.open(img)\n   im = im.resize((WIDTH, HEIGHT), Image.NEAREST)\n   txt = \"\"\n   for i in range(HEIGHT):\n       for j in range(WIDTH):\n           txt += get_char(*im.getpixel((j, i))) # 获得相应的字符\n       txt += '\\n'\n   print(txt)  # 打印出字符画\n   # 将字符画 写入文件中\n   with open(\"15.txt\", 'w') as f:\n       f.write(txt)\n```\n\n### 转换后的效果\n\n```\n                                                                                \n           .uahZO000Okhhw^.                  ..'hhhhhhkqZwk`'.                  \n       'phkbddppJJJJmdppddbkb<             aZ0ZqQppppOOdppddbkhk.               \n     .hkbddpppmJCpppp0JJQppJCqbk`      'mZ0dpppppJCJJJppppppppddbk:.            \n   .mZbdpppppUJpppppppppJJpppLJCQO.   hbQCppppppLJOJJJJppppppppppdbk.           \n  .hkdpZppZJJJZpppppppppppppdJJJddbkIhbdpppppppdJJJJJCJJCJJJJJpppppbk,          \n  mbbppppppCJJJppppppppppppppppCppdddddpppppppppppJJJJJLppppppJJJ0q0L0.         \n.,OLLpppLJqCJCCJppppppppppppppppppppppppppppppppppCppppppppppOJdppppCQ0         \n.p0LJCCmppppqCJJwppppppppppZJJLppppppppppppppppppJJppppppppppJJJCqpppL0.        \n mkddppppppppppLJpppppqCJJpppJqpppppppppppJJJJCCJJJJJJJJJJJCqJJqCJJJJLQ         \n .kbdppppppppppJpppppppJmpppp0JdpppppppppwJCJpwJZpppppCJJJJdpppppJppdb[         \n  lkbdpppwOqQJJCppppppppppOJJJJJJppppppCJOJpJJCpppppppppJJJpppppppppdq.         \n   .kbdpppJwpdJLppppppppppCJCdppJJJppppppJJJppppJJJLppppJJJJJqpppdbk.           \n     .kpCJqpppdOZOCLJJJJJJJJJppdJJppppppppJqp0JJJLppppppppppppdCdQ.             \n       .\"dbdppppJJJpCdCwpppppppppJJpppppppppppppJZppppppppppdbd'.               \n            kkbLJppppwJJCppppppJJJJJppppppppppppJpppppppdbbm..                  \n               .rkbddpppJJJJJCJJJpCJ0ppZLJJJJJJJJdpddpb^                        \n                    .kbbpppppJJJqpppppppppppppppCQw'.                           \n                        ^kbddppJppppppppppppdbkt.                               \n                          .:hbdpppppppppppdb`.                                  \n                              .kbdpppppdba.                                     \n                                .kbbddb'                                        \n                                  .ah..                                         \n```\n\n","slug":"python图片转字符串","published":1,"updated":"2022-03-13T11:49:16.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07s001q9jx33aled1lm","content":"<h2 id=\"python-图片转成字符串\"><a href=\"#python-图片转成字符串\" class=\"headerlink\" title=\"python 图片转成字符串\"></a>python 图片转成字符串</h2><a id=\"more\"></a><h3 id=\"下面是原始图片\"><a href=\"#下面是原始图片\" class=\"headerlink\" title=\"下面是原始图片\"></a>下面是原始图片</h3><p><img src=\"/image/crawl/red_heart.jpg\" alt=\"红心\"></p><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\">ascii_char = list(<span class=\"string\">\"$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\\\"^`'. \"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">WIDTH = <span class=\"number\">85</span> <span class=\"comment\"># 字符画的宽</span></span><br><span class=\"line\">HEIGHT = <span class=\"number\">25</span> <span class=\"comment\"># 字符画的高</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将256灰度映射到70个字符上，也就是RGB值转字符的函数：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_char</span><span class=\"params\">(r, g, b, alpha=<span class=\"number\">256</span>)</span>:</span>  <span class=\"comment\"># alpha透明度</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> alpha == <span class=\"number\">0</span>:</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">' '</span></span><br><span class=\"line\">   length = len(ascii_char)</span><br><span class=\"line\">   gray = int(<span class=\"number\">0.2126</span> * r + <span class=\"number\">0.7152</span> * g + <span class=\"number\">0.0722</span> * b)  <span class=\"comment\"># 计算灰度</span></span><br><span class=\"line\">   unit = (<span class=\"number\">256.0</span> + <span class=\"number\">1</span>) / length</span><br><span class=\"line\">   <span class=\"keyword\">return</span> ascii_char[int(gray / unit)]  <span class=\"comment\"># 不同的灰度对应着不同的字符</span></span><br><span class=\"line\">   <span class=\"comment\"># 通过灰度来区分色块</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">   img = <span class=\"string\">'./15.jpg'</span> <span class=\"comment\"># 图片所在位置</span></span><br><span class=\"line\">   im = Image.open(img)</span><br><span class=\"line\">   im = im.resize((WIDTH, HEIGHT), Image.NEAREST)</span><br><span class=\"line\">   txt = <span class=\"string\">\"\"</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(HEIGHT):</span><br><span class=\"line\">       <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(WIDTH):</span><br><span class=\"line\">           txt += get_char(*im.getpixel((j, i))) <span class=\"comment\"># 获得相应的字符</span></span><br><span class=\"line\">       txt += <span class=\"string\">'\\n'</span></span><br><span class=\"line\">   print(txt)  <span class=\"comment\"># 打印出字符画</span></span><br><span class=\"line\">   <span class=\"comment\"># 将字符画 写入文件中</span></span><br><span class=\"line\">   <span class=\"keyword\">with</span> open(<span class=\"string\">\"15.txt\"</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">       f.write(txt)</span><br></pre></td></tr></table></figure><h3 id=\"转换后的效果\"><a href=\"#转换后的效果\" class=\"headerlink\" title=\"转换后的效果\"></a>转换后的效果</h3><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                                                                </span><br><span class=\"line\">           .uahZO000Okhhw^.                  ..'hhhhhhkqZwk`'.                  </span><br><span class=\"line\">       'phkbddppJJJJmdppddbkb&lt;             aZ0ZqQppppOOdppddbkhk.               </span><br><span class=\"line\">     .hkbddpppmJCpppp0JJQppJCqbk`      'mZ0dpppppJCJJJppppppppddbk:.            </span><br><span class=\"line\">   .mZbdpppppUJpppppppppJJpppLJCQO.   hbQCppppppLJOJJJJppppppppppdbk.           </span><br><span class=\"line\">  .hkdpZppZJJJZpppppppppppppdJJJddbkIhbdpppppppdJJJJJCJJCJJJJJpppppbk,          </span><br><span class=\"line\">  mbbppppppCJJJppppppppppppppppCppdddddpppppppppppJJJJJLppppppJJJ0q0L0.         </span><br><span class=\"line\">.,OLLpppLJqCJCCJppppppppppppppppppppppppppppppppppCppppppppppOJdppppCQ0         </span><br><span class=\"line\">.p0LJCCmppppqCJJwppppppppppZJJLppppppppppppppppppJJppppppppppJJJCqpppL0.        </span><br><span class=\"line\"> mkddppppppppppLJpppppqCJJpppJqpppppppppppJJJJCCJJJJJJJJJJJCqJJqCJJJJLQ         </span><br><span class=\"line\"> .kbdppppppppppJpppppppJmpppp0JdpppppppppwJCJpwJZpppppCJJJJdpppppJppdb[         </span><br><span class=\"line\">  lkbdpppwOqQJJCppppppppppOJJJJJJppppppCJOJpJJCpppppppppJJJpppppppppdq.         </span><br><span class=\"line\">   .kbdpppJwpdJLppppppppppCJCdppJJJppppppJJJppppJJJLppppJJJJJqpppdbk.           </span><br><span class=\"line\">     .kpCJqpppdOZOCLJJJJJJJJJppdJJppppppppJqp0JJJLppppppppppppdCdQ.             </span><br><span class=\"line\">       .<span class=\"string\">\"dbdppppJJJpCdCwpppppppppJJpppppppppppppJZppppppppppdbd'.               </span></span><br><span class=\"line\">            kkbLJppppwJJCppppppJJJJJppppppppppppJpppppppdbbm..                  </span><br><span class=\"line\">               .rkbddpppJJJJJCJJJpCJ0ppZLJJJJJJJJdpddpb^                        </span><br><span class=\"line\">                    .kbbpppppJJJqpppppppppppppppCQw'.                           </span><br><span class=\"line\">                        ^kbddppJppppppppppppdbkt.                               </span><br><span class=\"line\">                          .:hbdpppppppppppdb`.                                  </span><br><span class=\"line\">                              .kbdpppppdba.                                     </span><br><span class=\"line\">                                .kbbddb'                                        </span><br><span class=\"line\">                                  .ah..</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"python-图片转成字符串\"><a href=\"#python-图片转成字符串\" class=\"headerlink\" title=\"python 图片转成字符串\"></a>python 图片转成字符串</h2>","more":"<h3 id=\"下面是原始图片\"><a href=\"#下面是原始图片\" class=\"headerlink\" title=\"下面是原始图片\"></a>下面是原始图片</h3><p><img src=\"/image/crawl/red_heart.jpg\" alt=\"红心\"></p><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\">ascii_char = list(<span class=\"string\">\"$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\\\"^`'. \"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">WIDTH = <span class=\"number\">85</span> <span class=\"comment\"># 字符画的宽</span></span><br><span class=\"line\">HEIGHT = <span class=\"number\">25</span> <span class=\"comment\"># 字符画的高</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将256灰度映射到70个字符上，也就是RGB值转字符的函数：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_char</span><span class=\"params\">(r, g, b, alpha=<span class=\"number\">256</span>)</span>:</span>  <span class=\"comment\"># alpha透明度</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> alpha == <span class=\"number\">0</span>:</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">' '</span></span><br><span class=\"line\">   length = len(ascii_char)</span><br><span class=\"line\">   gray = int(<span class=\"number\">0.2126</span> * r + <span class=\"number\">0.7152</span> * g + <span class=\"number\">0.0722</span> * b)  <span class=\"comment\"># 计算灰度</span></span><br><span class=\"line\">   unit = (<span class=\"number\">256.0</span> + <span class=\"number\">1</span>) / length</span><br><span class=\"line\">   <span class=\"keyword\">return</span> ascii_char[int(gray / unit)]  <span class=\"comment\"># 不同的灰度对应着不同的字符</span></span><br><span class=\"line\">   <span class=\"comment\"># 通过灰度来区分色块</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">   img = <span class=\"string\">'./15.jpg'</span> <span class=\"comment\"># 图片所在位置</span></span><br><span class=\"line\">   im = Image.open(img)</span><br><span class=\"line\">   im = im.resize((WIDTH, HEIGHT), Image.NEAREST)</span><br><span class=\"line\">   txt = <span class=\"string\">\"\"</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(HEIGHT):</span><br><span class=\"line\">       <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(WIDTH):</span><br><span class=\"line\">           txt += get_char(*im.getpixel((j, i))) <span class=\"comment\"># 获得相应的字符</span></span><br><span class=\"line\">       txt += <span class=\"string\">'\\n'</span></span><br><span class=\"line\">   print(txt)  <span class=\"comment\"># 打印出字符画</span></span><br><span class=\"line\">   <span class=\"comment\"># 将字符画 写入文件中</span></span><br><span class=\"line\">   <span class=\"keyword\">with</span> open(<span class=\"string\">\"15.txt\"</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">       f.write(txt)</span><br></pre></td></tr></table></figure><h3 id=\"转换后的效果\"><a href=\"#转换后的效果\" class=\"headerlink\" title=\"转换后的效果\"></a>转换后的效果</h3><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                                                                </span><br><span class=\"line\">           .uahZO000Okhhw^.                  ..'hhhhhhkqZwk`'.                  </span><br><span class=\"line\">       'phkbddppJJJJmdppddbkb&lt;             aZ0ZqQppppOOdppddbkhk.               </span><br><span class=\"line\">     .hkbddpppmJCpppp0JJQppJCqbk`      'mZ0dpppppJCJJJppppppppddbk:.            </span><br><span class=\"line\">   .mZbdpppppUJpppppppppJJpppLJCQO.   hbQCppppppLJOJJJJppppppppppdbk.           </span><br><span class=\"line\">  .hkdpZppZJJJZpppppppppppppdJJJddbkIhbdpppppppdJJJJJCJJCJJJJJpppppbk,          </span><br><span class=\"line\">  mbbppppppCJJJppppppppppppppppCppdddddpppppppppppJJJJJLppppppJJJ0q0L0.         </span><br><span class=\"line\">.,OLLpppLJqCJCCJppppppppppppppppppppppppppppppppppCppppppppppOJdppppCQ0         </span><br><span class=\"line\">.p0LJCCmppppqCJJwppppppppppZJJLppppppppppppppppppJJppppppppppJJJCqpppL0.        </span><br><span class=\"line\"> mkddppppppppppLJpppppqCJJpppJqpppppppppppJJJJCCJJJJJJJJJJJCqJJqCJJJJLQ         </span><br><span class=\"line\"> .kbdppppppppppJpppppppJmpppp0JdpppppppppwJCJpwJZpppppCJJJJdpppppJppdb[         </span><br><span class=\"line\">  lkbdpppwOqQJJCppppppppppOJJJJJJppppppCJOJpJJCpppppppppJJJpppppppppdq.         </span><br><span class=\"line\">   .kbdpppJwpdJLppppppppppCJCdppJJJppppppJJJppppJJJLppppJJJJJqpppdbk.           </span><br><span class=\"line\">     .kpCJqpppdOZOCLJJJJJJJJJppdJJppppppppJqp0JJJLppppppppppppdCdQ.             </span><br><span class=\"line\">       .<span class=\"string\">\"dbdppppJJJpCdCwpppppppppJJpppppppppppppJZppppppppppdbd'.               </span></span><br><span class=\"line\">            kkbLJppppwJJCppppppJJJJJppppppppppppJpppppppdbbm..                  </span><br><span class=\"line\">               .rkbddpppJJJJJCJJJpCJ0ppZLJJJJJJJJdpddpb^                        </span><br><span class=\"line\">                    .kbbpppppJJJqpppppppppppppppCQw'.                           </span><br><span class=\"line\">                        ^kbddppJppppppppppppdbkt.                               </span><br><span class=\"line\">                          .:hbdpppppppppppdb`.                                  </span><br><span class=\"line\">                              .kbdpppppdba.                                     </span><br><span class=\"line\">                                .kbbddb'                                        </span><br><span class=\"line\">                                  .ah..</span><br></pre></td></tr></table></figure>"},{"title":"python中闭包和装饰器","type":"categories","copyright":true,"abbrlink":1404355314,"date":"2020-01-02T03:09:20.000Z","_content":"## 1.闭包\n### 闭包的理解\n   *闭包* 是引用了变量的函数，这个被引用的自由变量将和这个函数一同存在，即使离开了创造这个变量的环境也不例外。所以，*闭包* 是由函数和与其相关的引用环境组合而成的实体。简单来说，*闭包* 就是数据和功能的结合。\n<!--more-->\n### 闭包的优缺点\n **优点：** 可以提高代码的可复用性\n **缺点：** 由于闭包是引用了外部函数的局部变量，导致外部函数的局部变量没有及时释放，消耗内存。\n\n \n## 2.装饰器\n### 什么是装饰器？\n装饰器本质上也还是一个python函数，它可以让其他函数在不需要的做任何代码变动的前提下，增加额外的功能，装饰器的返回值也是一个函数对象。装饰器的应用场景主要是一些有切面需求的场景，例如：插入日志，性能测试，事务处理，缓存，权限校验等。通过装饰器，我们可以抽离大量与函数功能本身无关的雷同代码并重复应用。\n### 装饰器的功能\n\n - 引入日志\n - 函数执行时间统计\n - 执行函数前的预备处理\n - 执行函数后的清理功能\n - 权限校验等场景\n - 缓存\n \n### 一个函数同时被多个装饰器装饰的执行顺序\n 一个函数如果同时被多个装饰器装饰，由紧靠函数的装饰器先对函数进行装饰，然后返回的结果在给外层的装饰器去执行装饰，依次类推直到所有装饰器都装饰完成，最后会得到一个函数，在执行这个函数的时候，会先执行最外层装饰器的内容，在执行里面装饰器的内容。这个过程有点像我们给一个精美的物品进行一层一层的包装，在包装的时候是从最里面一层层往往包装，拆开的时候又是从外面一层层的拆开。\n### 对比函数、闭包、对象在作为实参时的区别\n**函数作为实参**  如果没有()会作为一个功能传入到另一个函数，如果有()，则会传入这个函数的执行结果即返回值\n**闭包作为实参**  会传入较为复杂的功能和数据\n**对象作为实参**  会传入最为复杂的功能和数据，但是对象占用的空间比较大，传递的是很多的功能和数据\n### 通用的装饰器\n\n```python\ndef set_fun(fun):\n\tdef call_fun(*args, **kwargs):\n\t\tprint(\"----这是前面的功能---权限验证---\")\n\t\tret = fun(*args, **kwargs)\n\t\tprint(\"----这是后面的功能---log日志功能---\")\n\t\treturn ret\n\treturn call_fun\n```\n![这里写图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTgwMTI1MjI0NjA4NDQ2?x-oss-process=image/format,png)\n\n\n \n\n","source":"_posts/python中闭包和装饰器.md","raw":"---\ntitle: python中闭包和装饰器\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 基础\ncategories:\n  - python\n  - 基础\nabbrlink: 1404355314\ndate: 2020-01-02 11:09:20\n---\n## 1.闭包\n### 闭包的理解\n   *闭包* 是引用了变量的函数，这个被引用的自由变量将和这个函数一同存在，即使离开了创造这个变量的环境也不例外。所以，*闭包* 是由函数和与其相关的引用环境组合而成的实体。简单来说，*闭包* 就是数据和功能的结合。\n<!--more-->\n### 闭包的优缺点\n **优点：** 可以提高代码的可复用性\n **缺点：** 由于闭包是引用了外部函数的局部变量，导致外部函数的局部变量没有及时释放，消耗内存。\n\n \n## 2.装饰器\n### 什么是装饰器？\n装饰器本质上也还是一个python函数，它可以让其他函数在不需要的做任何代码变动的前提下，增加额外的功能，装饰器的返回值也是一个函数对象。装饰器的应用场景主要是一些有切面需求的场景，例如：插入日志，性能测试，事务处理，缓存，权限校验等。通过装饰器，我们可以抽离大量与函数功能本身无关的雷同代码并重复应用。\n### 装饰器的功能\n\n - 引入日志\n - 函数执行时间统计\n - 执行函数前的预备处理\n - 执行函数后的清理功能\n - 权限校验等场景\n - 缓存\n \n### 一个函数同时被多个装饰器装饰的执行顺序\n 一个函数如果同时被多个装饰器装饰，由紧靠函数的装饰器先对函数进行装饰，然后返回的结果在给外层的装饰器去执行装饰，依次类推直到所有装饰器都装饰完成，最后会得到一个函数，在执行这个函数的时候，会先执行最外层装饰器的内容，在执行里面装饰器的内容。这个过程有点像我们给一个精美的物品进行一层一层的包装，在包装的时候是从最里面一层层往往包装，拆开的时候又是从外面一层层的拆开。\n### 对比函数、闭包、对象在作为实参时的区别\n**函数作为实参**  如果没有()会作为一个功能传入到另一个函数，如果有()，则会传入这个函数的执行结果即返回值\n**闭包作为实参**  会传入较为复杂的功能和数据\n**对象作为实参**  会传入最为复杂的功能和数据，但是对象占用的空间比较大，传递的是很多的功能和数据\n### 通用的装饰器\n\n```python\ndef set_fun(fun):\n\tdef call_fun(*args, **kwargs):\n\t\tprint(\"----这是前面的功能---权限验证---\")\n\t\tret = fun(*args, **kwargs)\n\t\tprint(\"----这是后面的功能---log日志功能---\")\n\t\treturn ret\n\treturn call_fun\n```\n![这里写图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTgwMTI1MjI0NjA4NDQ2?x-oss-process=image/format,png)\n\n\n \n\n","slug":"python中闭包和装饰器","published":1,"updated":"2022-03-13T11:49:16.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07u001v9jx3c7cqd211","content":"<h2 id=\"1-闭包\"><a href=\"#1-闭包\" class=\"headerlink\" title=\"1.闭包\"></a>1.闭包</h2><h3 id=\"闭包的理解\"><a href=\"#闭包的理解\" class=\"headerlink\" title=\"闭包的理解\"></a>闭包的理解</h3><p><em>闭包</em> 是引用了变量的函数，这个被引用的自由变量将和这个函数一同存在，即使离开了创造这个变量的环境也不例外。所以，<em>闭包</em> 是由函数和与其相关的引用环境组合而成的实体。简单来说，<em>闭包</em> 就是数据和功能的结合。</p><a id=\"more\"></a><h3 id=\"闭包的优缺点\"><a href=\"#闭包的优缺点\" class=\"headerlink\" title=\"闭包的优缺点\"></a>闭包的优缺点</h3><p><strong>优点：</strong> 可以提高代码的可复用性<br><strong>缺点：</strong> 由于闭包是引用了外部函数的局部变量，导致外部函数的局部变量没有及时释放，消耗内存。</p><h2 id=\"2-装饰器\"><a href=\"#2-装饰器\" class=\"headerlink\" title=\"2.装饰器\"></a>2.装饰器</h2><h3 id=\"什么是装饰器？\"><a href=\"#什么是装饰器？\" class=\"headerlink\" title=\"什么是装饰器？\"></a>什么是装饰器？</h3><p>装饰器本质上也还是一个python函数，它可以让其他函数在不需要的做任何代码变动的前提下，增加额外的功能，装饰器的返回值也是一个函数对象。装饰器的应用场景主要是一些有切面需求的场景，例如：插入日志，性能测试，事务处理，缓存，权限校验等。通过装饰器，我们可以抽离大量与函数功能本身无关的雷同代码并重复应用。</p><h3 id=\"装饰器的功能\"><a href=\"#装饰器的功能\" class=\"headerlink\" title=\"装饰器的功能\"></a>装饰器的功能</h3><ul><li>引入日志</li><li>函数执行时间统计</li><li>执行函数前的预备处理</li><li>执行函数后的清理功能</li><li>权限校验等场景</li><li>缓存</li></ul><h3 id=\"一个函数同时被多个装饰器装饰的执行顺序\"><a href=\"#一个函数同时被多个装饰器装饰的执行顺序\" class=\"headerlink\" title=\"一个函数同时被多个装饰器装饰的执行顺序\"></a>一个函数同时被多个装饰器装饰的执行顺序</h3><p>一个函数如果同时被多个装饰器装饰，由紧靠函数的装饰器先对函数进行装饰，然后返回的结果在给外层的装饰器去执行装饰，依次类推直到所有装饰器都装饰完成，最后会得到一个函数，在执行这个函数的时候，会先执行最外层装饰器的内容，在执行里面装饰器的内容。这个过程有点像我们给一个精美的物品进行一层一层的包装，在包装的时候是从最里面一层层往往包装，拆开的时候又是从外面一层层的拆开。</p><h3 id=\"对比函数、闭包、对象在作为实参时的区别\"><a href=\"#对比函数、闭包、对象在作为实参时的区别\" class=\"headerlink\" title=\"对比函数、闭包、对象在作为实参时的区别\"></a>对比函数、闭包、对象在作为实参时的区别</h3><p><strong>函数作为实参</strong> 如果没有()会作为一个功能传入到另一个函数，如果有()，则会传入这个函数的执行结果即返回值<br><strong>闭包作为实参</strong> 会传入较为复杂的功能和数据<br><strong>对象作为实参</strong> 会传入最为复杂的功能和数据，但是对象占用的空间比较大，传递的是很多的功能和数据</p><h3 id=\"通用的装饰器\"><a href=\"#通用的装饰器\" class=\"headerlink\" title=\"通用的装饰器\"></a>通用的装饰器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_fun</span><span class=\"params\">(fun)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call_fun</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">\"----这是前面的功能---权限验证---\"</span>)</span><br><span class=\"line\">\t\tret = fun(*args, **kwargs)</span><br><span class=\"line\">\t\tprint(<span class=\"string\">\"----这是后面的功能---log日志功能---\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> call_fun</span><br></pre></td></tr></table></figure><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTgwMTI1MjI0NjA4NDQ2?x-oss-process=image/format,png\" alt=\"这里写图片描述\"></p>","site":{"data":{}},"excerpt":"<h2 id=\"1-闭包\"><a href=\"#1-闭包\" class=\"headerlink\" title=\"1.闭包\"></a>1.闭包</h2><h3 id=\"闭包的理解\"><a href=\"#闭包的理解\" class=\"headerlink\" title=\"闭包的理解\"></a>闭包的理解</h3><p><em>闭包</em> 是引用了变量的函数，这个被引用的自由变量将和这个函数一同存在，即使离开了创造这个变量的环境也不例外。所以，<em>闭包</em> 是由函数和与其相关的引用环境组合而成的实体。简单来说，<em>闭包</em> 就是数据和功能的结合。</p>","more":"<h3 id=\"闭包的优缺点\"><a href=\"#闭包的优缺点\" class=\"headerlink\" title=\"闭包的优缺点\"></a>闭包的优缺点</h3><p><strong>优点：</strong> 可以提高代码的可复用性<br><strong>缺点：</strong> 由于闭包是引用了外部函数的局部变量，导致外部函数的局部变量没有及时释放，消耗内存。</p><h2 id=\"2-装饰器\"><a href=\"#2-装饰器\" class=\"headerlink\" title=\"2.装饰器\"></a>2.装饰器</h2><h3 id=\"什么是装饰器？\"><a href=\"#什么是装饰器？\" class=\"headerlink\" title=\"什么是装饰器？\"></a>什么是装饰器？</h3><p>装饰器本质上也还是一个python函数，它可以让其他函数在不需要的做任何代码变动的前提下，增加额外的功能，装饰器的返回值也是一个函数对象。装饰器的应用场景主要是一些有切面需求的场景，例如：插入日志，性能测试，事务处理，缓存，权限校验等。通过装饰器，我们可以抽离大量与函数功能本身无关的雷同代码并重复应用。</p><h3 id=\"装饰器的功能\"><a href=\"#装饰器的功能\" class=\"headerlink\" title=\"装饰器的功能\"></a>装饰器的功能</h3><ul><li>引入日志</li><li>函数执行时间统计</li><li>执行函数前的预备处理</li><li>执行函数后的清理功能</li><li>权限校验等场景</li><li>缓存</li></ul><h3 id=\"一个函数同时被多个装饰器装饰的执行顺序\"><a href=\"#一个函数同时被多个装饰器装饰的执行顺序\" class=\"headerlink\" title=\"一个函数同时被多个装饰器装饰的执行顺序\"></a>一个函数同时被多个装饰器装饰的执行顺序</h3><p>一个函数如果同时被多个装饰器装饰，由紧靠函数的装饰器先对函数进行装饰，然后返回的结果在给外层的装饰器去执行装饰，依次类推直到所有装饰器都装饰完成，最后会得到一个函数，在执行这个函数的时候，会先执行最外层装饰器的内容，在执行里面装饰器的内容。这个过程有点像我们给一个精美的物品进行一层一层的包装，在包装的时候是从最里面一层层往往包装，拆开的时候又是从外面一层层的拆开。</p><h3 id=\"对比函数、闭包、对象在作为实参时的区别\"><a href=\"#对比函数、闭包、对象在作为实参时的区别\" class=\"headerlink\" title=\"对比函数、闭包、对象在作为实参时的区别\"></a>对比函数、闭包、对象在作为实参时的区别</h3><p><strong>函数作为实参</strong> 如果没有()会作为一个功能传入到另一个函数，如果有()，则会传入这个函数的执行结果即返回值<br><strong>闭包作为实参</strong> 会传入较为复杂的功能和数据<br><strong>对象作为实参</strong> 会传入最为复杂的功能和数据，但是对象占用的空间比较大，传递的是很多的功能和数据</p><h3 id=\"通用的装饰器\"><a href=\"#通用的装饰器\" class=\"headerlink\" title=\"通用的装饰器\"></a>通用的装饰器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_fun</span><span class=\"params\">(fun)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call_fun</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">\"----这是前面的功能---权限验证---\"</span>)</span><br><span class=\"line\">\t\tret = fun(*args, **kwargs)</span><br><span class=\"line\">\t\tprint(<span class=\"string\">\"----这是后面的功能---log日志功能---\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> call_fun</span><br></pre></td></tr></table></figure><p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTgwMTI1MjI0NjA4NDQ2?x-oss-process=image/format,png\" alt=\"这里写图片描述\"></p>"},{"title":"python处理简单验证码","type":"categories","copyright":true,"abbrlink":393345394,"date":"2020-01-02T03:40:24.000Z","_content":"#### 利用python对简单的验证码进行处理\n验证码如下所示：\n![这里写图片描述](/image/code/code.png)\n首先导入我们需要的包文件\n\n```python\nimport os\nimport random\nfrom string import ascii_lowercase\nfrom PIL import Image\nimport numpy\n```\n将验证码进行切分，其中进行切分的坐标可以自行调整最佳；Image模块的convert()函数，用于不同模式图像之间的转换。\n\n<!--more-->\n\n```python\ndef div_im(im_name):\n    im = Image.open(im_name).convert('L')   # 转换为灰度图像返回\n\n    name = ''.join(random.sample(ascii_lowercase, 10))  # 随机序列化一个字符串\n    regions = [(8, 6, 20, 26), (20, 6, 32, 26), (32, 6, 44, 26), (44, 6, 56, 26)]   # 定义切分坐标\n    arr = list()\n    for i, region in enumerate(regions):\n        im2 = im.crop(region)   # 将验证码按坐标进行切分\n        f_name = '{}_{}.jpg'.format(name, i)\n        im2.save(f_name)\n        arr.append(f_name)\n\n    return arr\n```\n切分后返回的图片为：\n![这里写图片描述](/image/code/code1.jpg) ![这里写图片描述](/image/code/code2.jpg) ![这里写图片描述](/image/code/code3.jpg) ![这里写图片描述](/image/code/code4.jpg)\n\n将图片进行二值化处理\n\n```python\ndef convert_im_to_array(im_name):\n    im = Image.open(im_name).convert('L')\n    a = numpy.array(im)\n    a = numpy.array([[0 if j < 5 else 1 for j in i] for i in a])  # 数字5是自己调整的阈值\n    return a\n```\n样本集标注：采集100张验证码图片进行切分，人为进行标注0~9；\n![这里写图片描述](/image/code/test1.png)\n![这里写图片描述](/image/code/test2.png)\n\n最后就是进行测试\n\n```python\ndef rec(f_name):\n    a = convert_im_to_array(f_name)  # 测试图片的二值化数组\n    min_i = -1\n    min_v = 10000000  # 选择一个较大的数即可\n    for i in range(10):\n        p = 'sample_im/{}'.format(i)  # 样本集路径0~9\n        for im in os.listdir(p):\n            b = convert_im_to_array('{}/{}'.format(p, im))  # 样本集图片的二值化数组\n            tmp = sum(sum((a - b)**2))  \n            print(tmp)\n            if tmp < min_v:\n                min_v = tmp\n                min_i = i\n            print(\"min_v的值：\",min_v)\n        print(\"min_i的值：\",min_i)\n    return min_i  # 返回图片中的数字\n```\n最后可以进行多次测试比较识别的准确率。\n","source":"_posts/python处理简单验证码.md","raw":"---\ntitle: python处理简单验证码\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 项目\ncategories:\n  - python\n  - 项目\nabbrlink: 393345394\ndate: 2020-01-02 11:40:24\n---\n#### 利用python对简单的验证码进行处理\n验证码如下所示：\n![这里写图片描述](/image/code/code.png)\n首先导入我们需要的包文件\n\n```python\nimport os\nimport random\nfrom string import ascii_lowercase\nfrom PIL import Image\nimport numpy\n```\n将验证码进行切分，其中进行切分的坐标可以自行调整最佳；Image模块的convert()函数，用于不同模式图像之间的转换。\n\n<!--more-->\n\n```python\ndef div_im(im_name):\n    im = Image.open(im_name).convert('L')   # 转换为灰度图像返回\n\n    name = ''.join(random.sample(ascii_lowercase, 10))  # 随机序列化一个字符串\n    regions = [(8, 6, 20, 26), (20, 6, 32, 26), (32, 6, 44, 26), (44, 6, 56, 26)]   # 定义切分坐标\n    arr = list()\n    for i, region in enumerate(regions):\n        im2 = im.crop(region)   # 将验证码按坐标进行切分\n        f_name = '{}_{}.jpg'.format(name, i)\n        im2.save(f_name)\n        arr.append(f_name)\n\n    return arr\n```\n切分后返回的图片为：\n![这里写图片描述](/image/code/code1.jpg) ![这里写图片描述](/image/code/code2.jpg) ![这里写图片描述](/image/code/code3.jpg) ![这里写图片描述](/image/code/code4.jpg)\n\n将图片进行二值化处理\n\n```python\ndef convert_im_to_array(im_name):\n    im = Image.open(im_name).convert('L')\n    a = numpy.array(im)\n    a = numpy.array([[0 if j < 5 else 1 for j in i] for i in a])  # 数字5是自己调整的阈值\n    return a\n```\n样本集标注：采集100张验证码图片进行切分，人为进行标注0~9；\n![这里写图片描述](/image/code/test1.png)\n![这里写图片描述](/image/code/test2.png)\n\n最后就是进行测试\n\n```python\ndef rec(f_name):\n    a = convert_im_to_array(f_name)  # 测试图片的二值化数组\n    min_i = -1\n    min_v = 10000000  # 选择一个较大的数即可\n    for i in range(10):\n        p = 'sample_im/{}'.format(i)  # 样本集路径0~9\n        for im in os.listdir(p):\n            b = convert_im_to_array('{}/{}'.format(p, im))  # 样本集图片的二值化数组\n            tmp = sum(sum((a - b)**2))  \n            print(tmp)\n            if tmp < min_v:\n                min_v = tmp\n                min_i = i\n            print(\"min_v的值：\",min_v)\n        print(\"min_i的值：\",min_i)\n    return min_i  # 返回图片中的数字\n```\n最后可以进行多次测试比较识别的准确率。\n","slug":"python处理简单验证码","published":1,"updated":"2022-03-13T11:49:16.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07u001y9jx32hot8d7x","content":"<h4 id=\"利用python对简单的验证码进行处理\"><a href=\"#利用python对简单的验证码进行处理\" class=\"headerlink\" title=\"利用python对简单的验证码进行处理\"></a>利用python对简单的验证码进行处理</h4><p>验证码如下所示：<br><img src=\"/image/code/code.png\" alt=\"这里写图片描述\"><br>首先导入我们需要的包文件</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> ascii_lowercase</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy</span><br></pre></td></tr></table></figure><p>将验证码进行切分，其中进行切分的坐标可以自行调整最佳；Image模块的convert()函数，用于不同模式图像之间的转换。</p><a id=\"more\"></a><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">div_im</span><span class=\"params\">(im_name)</span>:</span></span><br><span class=\"line\">    im = Image.open(im_name).convert(<span class=\"string\">'L'</span>)   <span class=\"comment\"># 转换为灰度图像返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">    name = <span class=\"string\">''</span>.join(random.sample(ascii_lowercase, <span class=\"number\">10</span>))  <span class=\"comment\"># 随机序列化一个字符串</span></span><br><span class=\"line\">    regions = [(<span class=\"number\">8</span>, <span class=\"number\">6</span>, <span class=\"number\">20</span>, <span class=\"number\">26</span>), (<span class=\"number\">20</span>, <span class=\"number\">6</span>, <span class=\"number\">32</span>, <span class=\"number\">26</span>), (<span class=\"number\">32</span>, <span class=\"number\">6</span>, <span class=\"number\">44</span>, <span class=\"number\">26</span>), (<span class=\"number\">44</span>, <span class=\"number\">6</span>, <span class=\"number\">56</span>, <span class=\"number\">26</span>)]   <span class=\"comment\"># 定义切分坐标</span></span><br><span class=\"line\">    arr = list()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, region <span class=\"keyword\">in</span> enumerate(regions):</span><br><span class=\"line\">        im2 = im.crop(region)   <span class=\"comment\"># 将验证码按坐标进行切分</span></span><br><span class=\"line\">        f_name = <span class=\"string\">'&#123;&#125;_&#123;&#125;.jpg'</span>.format(name, i)</span><br><span class=\"line\">        im2.save(f_name)</span><br><span class=\"line\">        arr.append(f_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br></pre></td></tr></table></figure><p>切分后返回的图片为：<br><img src=\"/image/code/code1.jpg\" alt=\"这里写图片描述\"> <img src=\"/image/code/code2.jpg\" alt=\"这里写图片描述\"> <img src=\"/image/code/code3.jpg\" alt=\"这里写图片描述\"> <img src=\"/image/code/code4.jpg\" alt=\"这里写图片描述\"></p><p>将图片进行二值化处理</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convert_im_to_array</span><span class=\"params\">(im_name)</span>:</span></span><br><span class=\"line\">    im = Image.open(im_name).convert(<span class=\"string\">'L'</span>)</span><br><span class=\"line\">    a = numpy.array(im)</span><br><span class=\"line\">    a = numpy.array([[<span class=\"number\">0</span> <span class=\"keyword\">if</span> j &lt; <span class=\"number\">5</span> <span class=\"keyword\">else</span> <span class=\"number\">1</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> a])  <span class=\"comment\"># 数字5是自己调整的阈值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br></pre></td></tr></table></figure><p>样本集标注：采集100张验证码图片进行切分，人为进行标注0~9；<br><img src=\"/image/code/test1.png\" alt=\"这里写图片描述\"><br><img src=\"/image/code/test2.png\" alt=\"这里写图片描述\"></p><p>最后就是进行测试</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rec</span><span class=\"params\">(f_name)</span>:</span></span><br><span class=\"line\">    a = convert_im_to_array(f_name)  <span class=\"comment\"># 测试图片的二值化数组</span></span><br><span class=\"line\">    min_i = <span class=\"number\">-1</span></span><br><span class=\"line\">    min_v = <span class=\"number\">10000000</span>  <span class=\"comment\"># 选择一个较大的数即可</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        p = <span class=\"string\">'sample_im/&#123;&#125;'</span>.format(i)  <span class=\"comment\"># 样本集路径0~9</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> im <span class=\"keyword\">in</span> os.listdir(p):</span><br><span class=\"line\">            b = convert_im_to_array(<span class=\"string\">'&#123;&#125;/&#123;&#125;'</span>.format(p, im))  <span class=\"comment\"># 样本集图片的二值化数组</span></span><br><span class=\"line\">            tmp = sum(sum((a - b)**<span class=\"number\">2</span>))  </span><br><span class=\"line\">            print(tmp)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> tmp &lt; min_v:</span><br><span class=\"line\">                min_v = tmp</span><br><span class=\"line\">                min_i = i</span><br><span class=\"line\">            print(<span class=\"string\">\"min_v的值：\"</span>,min_v)</span><br><span class=\"line\">        print(<span class=\"string\">\"min_i的值：\"</span>,min_i)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min_i  <span class=\"comment\"># 返回图片中的数字</span></span><br></pre></td></tr></table></figure><p>最后可以进行多次测试比较识别的准确率。</p>","site":{"data":{}},"excerpt":"<h4 id=\"利用python对简单的验证码进行处理\"><a href=\"#利用python对简单的验证码进行处理\" class=\"headerlink\" title=\"利用python对简单的验证码进行处理\"></a>利用python对简单的验证码进行处理</h4><p>验证码如下所示：<br><img src=\"/image/code/code.png\" alt=\"这里写图片描述\"><br>首先导入我们需要的包文件</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> ascii_lowercase</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy</span><br></pre></td></tr></table></figure><p>将验证码进行切分，其中进行切分的坐标可以自行调整最佳；Image模块的convert()函数，用于不同模式图像之间的转换。</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">div_im</span><span class=\"params\">(im_name)</span>:</span></span><br><span class=\"line\">    im = Image.open(im_name).convert(<span class=\"string\">'L'</span>)   <span class=\"comment\"># 转换为灰度图像返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">    name = <span class=\"string\">''</span>.join(random.sample(ascii_lowercase, <span class=\"number\">10</span>))  <span class=\"comment\"># 随机序列化一个字符串</span></span><br><span class=\"line\">    regions = [(<span class=\"number\">8</span>, <span class=\"number\">6</span>, <span class=\"number\">20</span>, <span class=\"number\">26</span>), (<span class=\"number\">20</span>, <span class=\"number\">6</span>, <span class=\"number\">32</span>, <span class=\"number\">26</span>), (<span class=\"number\">32</span>, <span class=\"number\">6</span>, <span class=\"number\">44</span>, <span class=\"number\">26</span>), (<span class=\"number\">44</span>, <span class=\"number\">6</span>, <span class=\"number\">56</span>, <span class=\"number\">26</span>)]   <span class=\"comment\"># 定义切分坐标</span></span><br><span class=\"line\">    arr = list()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, region <span class=\"keyword\">in</span> enumerate(regions):</span><br><span class=\"line\">        im2 = im.crop(region)   <span class=\"comment\"># 将验证码按坐标进行切分</span></span><br><span class=\"line\">        f_name = <span class=\"string\">'&#123;&#125;_&#123;&#125;.jpg'</span>.format(name, i)</span><br><span class=\"line\">        im2.save(f_name)</span><br><span class=\"line\">        arr.append(f_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br></pre></td></tr></table></figure><p>切分后返回的图片为：<br><img src=\"/image/code/code1.jpg\" alt=\"这里写图片描述\"> <img src=\"/image/code/code2.jpg\" alt=\"这里写图片描述\"> <img src=\"/image/code/code3.jpg\" alt=\"这里写图片描述\"> <img src=\"/image/code/code4.jpg\" alt=\"这里写图片描述\"></p><p>将图片进行二值化处理</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convert_im_to_array</span><span class=\"params\">(im_name)</span>:</span></span><br><span class=\"line\">    im = Image.open(im_name).convert(<span class=\"string\">'L'</span>)</span><br><span class=\"line\">    a = numpy.array(im)</span><br><span class=\"line\">    a = numpy.array([[<span class=\"number\">0</span> <span class=\"keyword\">if</span> j &lt; <span class=\"number\">5</span> <span class=\"keyword\">else</span> <span class=\"number\">1</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> a])  <span class=\"comment\"># 数字5是自己调整的阈值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br></pre></td></tr></table></figure><p>样本集标注：采集100张验证码图片进行切分，人为进行标注0~9；<br><img src=\"/image/code/test1.png\" alt=\"这里写图片描述\"><br><img src=\"/image/code/test2.png\" alt=\"这里写图片描述\"></p><p>最后就是进行测试</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rec</span><span class=\"params\">(f_name)</span>:</span></span><br><span class=\"line\">    a = convert_im_to_array(f_name)  <span class=\"comment\"># 测试图片的二值化数组</span></span><br><span class=\"line\">    min_i = <span class=\"number\">-1</span></span><br><span class=\"line\">    min_v = <span class=\"number\">10000000</span>  <span class=\"comment\"># 选择一个较大的数即可</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        p = <span class=\"string\">'sample_im/&#123;&#125;'</span>.format(i)  <span class=\"comment\"># 样本集路径0~9</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> im <span class=\"keyword\">in</span> os.listdir(p):</span><br><span class=\"line\">            b = convert_im_to_array(<span class=\"string\">'&#123;&#125;/&#123;&#125;'</span>.format(p, im))  <span class=\"comment\"># 样本集图片的二值化数组</span></span><br><span class=\"line\">            tmp = sum(sum((a - b)**<span class=\"number\">2</span>))  </span><br><span class=\"line\">            print(tmp)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> tmp &lt; min_v:</span><br><span class=\"line\">                min_v = tmp</span><br><span class=\"line\">                min_i = i</span><br><span class=\"line\">            print(<span class=\"string\">\"min_v的值：\"</span>,min_v)</span><br><span class=\"line\">        print(<span class=\"string\">\"min_i的值：\"</span>,min_i)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min_i  <span class=\"comment\"># 返回图片中的数字</span></span><br></pre></td></tr></table></figure><p>最后可以进行多次测试比较识别的准确率。</p>"},{"title":"python字典多次嵌套","type":"categories","copyright":true,"abbrlink":1410141908,"date":"2020-01-02T03:15:28.000Z","_content":"\n## python实现字典多层嵌套\n\n```python\n# 对于字典\ndict1 = {\"a\":1, \"b\":2, \"c.1\":3, \"c.2\":4, \"d.5.2\":5, \"d.5.3\":6, \"d.4.1\":7}\n\n# 将其实现多次嵌套效果\ndict2 = {'a': 1, 'b': 2, 'c': {'1': 3, '2': 4}, \n        'd': {'5': {'2': 5, '3': 6}, '4': {'1': 7}}}\n```\n<!--more-->\n\n### 解决方案\n```python\nd1 = {\"a\":1, \"b\":2, \"c.1\":3, \"c.2\":4, \"d.5.2\":5, \"d.5.3\":6, \"d.4.1\":7}\nd2 = {}\n\ndef fun(d1):\n    for key, value in d1.items():\n        if '.' in key:\n            parts = key.split('.')\n            par = d2\n            key = parts.pop(0)\n            print('==========', key)\n            while parts:\n                par = par.setdefault(key, {})\n                print(par)\n                key = parts.pop(0)\n            par[key] = value\n            print(par)\n        else:\n        d2[key] = value\n\nfun(d1)\nprint(d2)\n```\n\n### 其中用到了字典的setdefault方法\n\n```python\ndict.setdefault(key,default=None)\n```\n如果键不存在于字典中，将会添加新的键，并将值设置为默认值；如果字典中包含该给定的键，则返回该键对应的值，否则返回该键设置的默认值。\n\n### get方法\ndict.get(key,default=None)\nget方法返回给定键的值，如果键不可用返回默认值；\n\n### collection defaultdict\ndefaultdict()返回一个字典，自动给每一个键赋一个初始值\n\n\n*参考链接地址：https://blog.csdn.net/whgyxy/article/details/72458000*\n","source":"_posts/python字典多次嵌套.md","raw":"---\ntitle: python字典多次嵌套\ntype: categories\ncopyright: true\ntags:\n  - python\ncategories: python\nabbrlink: 1410141908\ndate: 2020-01-02 11:15:28\n---\n\n## python实现字典多层嵌套\n\n```python\n# 对于字典\ndict1 = {\"a\":1, \"b\":2, \"c.1\":3, \"c.2\":4, \"d.5.2\":5, \"d.5.3\":6, \"d.4.1\":7}\n\n# 将其实现多次嵌套效果\ndict2 = {'a': 1, 'b': 2, 'c': {'1': 3, '2': 4}, \n        'd': {'5': {'2': 5, '3': 6}, '4': {'1': 7}}}\n```\n<!--more-->\n\n### 解决方案\n```python\nd1 = {\"a\":1, \"b\":2, \"c.1\":3, \"c.2\":4, \"d.5.2\":5, \"d.5.3\":6, \"d.4.1\":7}\nd2 = {}\n\ndef fun(d1):\n    for key, value in d1.items():\n        if '.' in key:\n            parts = key.split('.')\n            par = d2\n            key = parts.pop(0)\n            print('==========', key)\n            while parts:\n                par = par.setdefault(key, {})\n                print(par)\n                key = parts.pop(0)\n            par[key] = value\n            print(par)\n        else:\n        d2[key] = value\n\nfun(d1)\nprint(d2)\n```\n\n### 其中用到了字典的setdefault方法\n\n```python\ndict.setdefault(key,default=None)\n```\n如果键不存在于字典中，将会添加新的键，并将值设置为默认值；如果字典中包含该给定的键，则返回该键对应的值，否则返回该键设置的默认值。\n\n### get方法\ndict.get(key,default=None)\nget方法返回给定键的值，如果键不可用返回默认值；\n\n### collection defaultdict\ndefaultdict()返回一个字典，自动给每一个键赋一个初始值\n\n\n*参考链接地址：https://blog.csdn.net/whgyxy/article/details/72458000*\n","slug":"python字典多次嵌套","published":1,"updated":"2022-03-13T11:49:16.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07w00239jx32ewsexpy","content":"<h2 id=\"python实现字典多层嵌套\"><a href=\"#python实现字典多层嵌套\" class=\"headerlink\" title=\"python实现字典多层嵌套\"></a>python实现字典多层嵌套</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对于字典</span></span><br><span class=\"line\">dict1 = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>, <span class=\"string\">\"c.1\"</span>:<span class=\"number\">3</span>, <span class=\"string\">\"c.2\"</span>:<span class=\"number\">4</span>, <span class=\"string\">\"d.5.2\"</span>:<span class=\"number\">5</span>, <span class=\"string\">\"d.5.3\"</span>:<span class=\"number\">6</span>, <span class=\"string\">\"d.4.1\"</span>:<span class=\"number\">7</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将其实现多次嵌套效果</span></span><br><span class=\"line\">dict2 = &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>, <span class=\"string\">'c'</span>: &#123;<span class=\"string\">'1'</span>: <span class=\"number\">3</span>, <span class=\"string\">'2'</span>: <span class=\"number\">4</span>&#125;, </span><br><span class=\"line\">        <span class=\"string\">'d'</span>: &#123;<span class=\"string\">'5'</span>: &#123;<span class=\"string\">'2'</span>: <span class=\"number\">5</span>, <span class=\"string\">'3'</span>: <span class=\"number\">6</span>&#125;, <span class=\"string\">'4'</span>: &#123;<span class=\"string\">'1'</span>: <span class=\"number\">7</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><a id=\"more\"></a><h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d1 = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>, <span class=\"string\">\"c.1\"</span>:<span class=\"number\">3</span>, <span class=\"string\">\"c.2\"</span>:<span class=\"number\">4</span>, <span class=\"string\">\"d.5.2\"</span>:<span class=\"number\">5</span>, <span class=\"string\">\"d.5.3\"</span>:<span class=\"number\">6</span>, <span class=\"string\">\"d.4.1\"</span>:<span class=\"number\">7</span>&#125;</span><br><span class=\"line\">d2 = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun</span><span class=\"params\">(d1)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> d1.items():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'.'</span> <span class=\"keyword\">in</span> key:</span><br><span class=\"line\">            parts = key.split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">            par = d2</span><br><span class=\"line\">            key = parts.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            print(<span class=\"string\">'=========='</span>, key)</span><br><span class=\"line\">            <span class=\"keyword\">while</span> parts:</span><br><span class=\"line\">                par = par.setdefault(key, &#123;&#125;)</span><br><span class=\"line\">                print(par)</span><br><span class=\"line\">                key = parts.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            par[key] = value</span><br><span class=\"line\">            print(par)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        d2[key] = value</span><br><span class=\"line\"></span><br><span class=\"line\">fun(d1)</span><br><span class=\"line\">print(d2)</span><br></pre></td></tr></table></figure><h3 id=\"其中用到了字典的setdefault方法\"><a href=\"#其中用到了字典的setdefault方法\" class=\"headerlink\" title=\"其中用到了字典的setdefault方法\"></a>其中用到了字典的setdefault方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict.setdefault(key,default=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure><p>如果键不存在于字典中，将会添加新的键，并将值设置为默认值；如果字典中包含该给定的键，则返回该键对应的值，否则返回该键设置的默认值。</p><h3 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h3><p>dict.get(key,default=None)<br>get方法返回给定键的值，如果键不可用返回默认值；</p><h3 id=\"collection-defaultdict\"><a href=\"#collection-defaultdict\" class=\"headerlink\" title=\"collection defaultdict\"></a>collection defaultdict</h3><p>defaultdict()返回一个字典，自动给每一个键赋一个初始值</p><p><em>参考链接地址：<a href=\"https://blog.csdn.net/whgyxy/article/details/72458000\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/whgyxy/article/details/72458000</a></em></p>","site":{"data":{}},"excerpt":"<h2 id=\"python实现字典多层嵌套\"><a href=\"#python实现字典多层嵌套\" class=\"headerlink\" title=\"python实现字典多层嵌套\"></a>python实现字典多层嵌套</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对于字典</span></span><br><span class=\"line\">dict1 = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>, <span class=\"string\">\"c.1\"</span>:<span class=\"number\">3</span>, <span class=\"string\">\"c.2\"</span>:<span class=\"number\">4</span>, <span class=\"string\">\"d.5.2\"</span>:<span class=\"number\">5</span>, <span class=\"string\">\"d.5.3\"</span>:<span class=\"number\">6</span>, <span class=\"string\">\"d.4.1\"</span>:<span class=\"number\">7</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将其实现多次嵌套效果</span></span><br><span class=\"line\">dict2 = &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>, <span class=\"string\">'c'</span>: &#123;<span class=\"string\">'1'</span>: <span class=\"number\">3</span>, <span class=\"string\">'2'</span>: <span class=\"number\">4</span>&#125;, </span><br><span class=\"line\">        <span class=\"string\">'d'</span>: &#123;<span class=\"string\">'5'</span>: &#123;<span class=\"string\">'2'</span>: <span class=\"number\">5</span>, <span class=\"string\">'3'</span>: <span class=\"number\">6</span>&#125;, <span class=\"string\">'4'</span>: &#123;<span class=\"string\">'1'</span>: <span class=\"number\">7</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d1 = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>, <span class=\"string\">\"c.1\"</span>:<span class=\"number\">3</span>, <span class=\"string\">\"c.2\"</span>:<span class=\"number\">4</span>, <span class=\"string\">\"d.5.2\"</span>:<span class=\"number\">5</span>, <span class=\"string\">\"d.5.3\"</span>:<span class=\"number\">6</span>, <span class=\"string\">\"d.4.1\"</span>:<span class=\"number\">7</span>&#125;</span><br><span class=\"line\">d2 = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun</span><span class=\"params\">(d1)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> d1.items():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'.'</span> <span class=\"keyword\">in</span> key:</span><br><span class=\"line\">            parts = key.split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">            par = d2</span><br><span class=\"line\">            key = parts.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            print(<span class=\"string\">'=========='</span>, key)</span><br><span class=\"line\">            <span class=\"keyword\">while</span> parts:</span><br><span class=\"line\">                par = par.setdefault(key, &#123;&#125;)</span><br><span class=\"line\">                print(par)</span><br><span class=\"line\">                key = parts.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            par[key] = value</span><br><span class=\"line\">            print(par)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        d2[key] = value</span><br><span class=\"line\"></span><br><span class=\"line\">fun(d1)</span><br><span class=\"line\">print(d2)</span><br></pre></td></tr></table></figure><h3 id=\"其中用到了字典的setdefault方法\"><a href=\"#其中用到了字典的setdefault方法\" class=\"headerlink\" title=\"其中用到了字典的setdefault方法\"></a>其中用到了字典的setdefault方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict.setdefault(key,default=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure><p>如果键不存在于字典中，将会添加新的键，并将值设置为默认值；如果字典中包含该给定的键，则返回该键对应的值，否则返回该键设置的默认值。</p><h3 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h3><p>dict.get(key,default=None)<br>get方法返回给定键的值，如果键不可用返回默认值；</p><h3 id=\"collection-defaultdict\"><a href=\"#collection-defaultdict\" class=\"headerlink\" title=\"collection defaultdict\"></a>collection defaultdict</h3><p>defaultdict()返回一个字典，自动给每一个键赋一个初始值</p><p><em>参考链接地址：<a href=\"https://blog.csdn.net/whgyxy/article/details/72458000\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/whgyxy/article/details/72458000</a></em></p>"},{"title":"python中迭代器和生成器","type":"categories","copyright":true,"keywords":["迭代器","生成器"],"abbrlink":3766336343,"date":"2022-03-13T08:26:16.000Z","_content":"\n\n\n## python中迭代器生成器实例详解\n\n本文通过针对不同应用场景及其解决方案的方式，总结了Python中迭代器与生成器的一些相关知识；\n- 手动遍历迭代器\n- 代理迭代\n- 反向迭代\n- 有选择的迭代\n- 同时迭代多个序列\n- 不同集合上的迭代\n- 展开嵌套的序列\n\n### 手动遍历迭代器\n**应用场景：** 想要遍历一个可迭代对象中所有元素，但是不想用for循环；\n\n<!-- more -->\n\n**解决方案：** 使用next()函数，并捕获StopIteration异常；\n```python\ndef manual_iter():\n    with open(\"/etc/passwd\") as f:\n        try:\n            while True:\n                line = next(f)\n                if line is None:\n                    break\n                print(line, end=\"\")\n        except StopIteration:\n            pass\n```\n\n### 代理迭代\n**应用场景：** 想直接在一个包含有列表，元组或其他可迭代对象的容器对象上执行迭代操作；\n\n**解决方案：** 定义一个iter方法，将迭代操作代理到容器内部的对象上；\n```python\nclass Node:\n    def __init__(self, value):\n        self._value = value\n        self._children = []\n\n    def __repr__(self):\n        return \"Node({!r})\".format(self._value)\n\n    def add_children(self, node):\n        self._children.append(node)\n\n    def __iter__(self):\n        # 将迭代请求传递给内部的_children属性\n        return iter(self._children)\n\nrt = Node(0)\ncd1 = Node(1)\ncd2 = Node(2)\nrt.add_children(cd1)\nrt.add_children(cd2)\n\nfor ch in rt:\n    print(ch)\n```\n\n### 反向迭代\n**应用场景：** 想要反向迭代一个序列\n\n**解决方案：** 使用内置的reversed()函数或者在自定义类上实现reversed();\n```python\na=[1,2,3,4]\nfor x in reversed(a):\n    print(x) #4 3 2 1\n\nclass Countdown:\n    def __init__(self, start):\n        self.start = start\n\n    # 常规迭代\n    def __iter__(self):\n        n = self.start\n        while n > 0:\n            yield n\n            n -= 1\n    \n    # 反向迭代\n    def __reversed__(self):\n        n = 1\n        while n <= self.start:\n            yield n\n            n += 1\n\n#test case\nfor rr in reversed(Countdown(30)):\n    print(rr)\n\nfor rr in Countdown(30):\n    print(rr)\n```\n\n### 有选择的迭代\n**应用场景：** 想要遍历一个可迭代对象，但是对它的某些元素不感兴趣，需要跳过；\n\n**解决方案：** 使用itertools.dropwhile()；\n```python\nfrom itertools import dropwhile\n\nwith open(\"/etc/passwd\") as f:\n    for line in dropwhile(lambda line: line.startwith('#'), f):\n        print(line, end=\"\")\n```\n\n### 同时迭代多个序列\n**应用场景：** 想要同时迭代多个序列，每次分别从一个序列中取出一个元素；\n\n**解决方案：** 使用zip()函数；\n```python\na = [1, 2, 3, 4, 5]\nb = [6, 7, 8, 9, 10]\n\nfor x, y in zip(a, b):\n    print(x, y)\n\n# 1,6 \n# 2,7 \n# 3,8 \n# 4,9 \n# 5,10\n```\n```python\nfrom itertools import zip_longest\n\na = [1, 2, 3]\nb = ['w', 'x', 'y', 'z']\n\nfor i in zip_longest(a, b):\n    print(i)\n\n# (1, 'w')\n# (2, 'x')\n# (3, 'y')\n# (None, 'z')\n\n\nfor i in zip_longest(a, b, fillvalue=0):\n    # 空值设置默认参数自动填充\n    print(i)\n```\n\n### 不同集合上元素的迭代\n**应用场景：** 想要在多个迭代对象上执行同一操作，但是这些对象在不同的容器中；\n\n**解决方案：** 使用itertools.chain()函数;\n```python\nfrom itertools import chain\n\na = [1, 2, 3, 4]\nb = ['x', 'y', 'z']\n\nfor i in chain(a, b):\n    print(i)\n\n# 1\n# 2\n# 3\n# 4\n# x\n# y\n# z\n```\n\n### 展开嵌套的序列\n**应用场景：** 想要将一个多层嵌套的序列展开成一个一维的列表；\n\n**解决方案：** 使用包含yield from语句的递归生成器\n\n```python\nfrom collections import Iterable\n\ndef flatten(items, ignore_types=(str, bytes)):\n    for x in items:\n        if isinstance(x, Iterable) and not isinstance(x, ignore_types):\n            yield from flatten(x)\n        else:\n            yield x\n\n#test case\nitems=[1,2,[3,4,[5,6],7],8]\nfor x in flatten(items):\n  print(x)\n```\n\n","source":"_posts/python中迭代器和生成器.md","raw":"---\ntitle: python中迭代器和生成器\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 基础\ncategories:\n  - python\n  - 基础\nkeywords:\n  - 迭代器\n  - 生成器\nabbrlink: 3766336343\ndate: 2022-03-13 16:26:16\n---\n\n\n\n## python中迭代器生成器实例详解\n\n本文通过针对不同应用场景及其解决方案的方式，总结了Python中迭代器与生成器的一些相关知识；\n- 手动遍历迭代器\n- 代理迭代\n- 反向迭代\n- 有选择的迭代\n- 同时迭代多个序列\n- 不同集合上的迭代\n- 展开嵌套的序列\n\n### 手动遍历迭代器\n**应用场景：** 想要遍历一个可迭代对象中所有元素，但是不想用for循环；\n\n<!-- more -->\n\n**解决方案：** 使用next()函数，并捕获StopIteration异常；\n```python\ndef manual_iter():\n    with open(\"/etc/passwd\") as f:\n        try:\n            while True:\n                line = next(f)\n                if line is None:\n                    break\n                print(line, end=\"\")\n        except StopIteration:\n            pass\n```\n\n### 代理迭代\n**应用场景：** 想直接在一个包含有列表，元组或其他可迭代对象的容器对象上执行迭代操作；\n\n**解决方案：** 定义一个iter方法，将迭代操作代理到容器内部的对象上；\n```python\nclass Node:\n    def __init__(self, value):\n        self._value = value\n        self._children = []\n\n    def __repr__(self):\n        return \"Node({!r})\".format(self._value)\n\n    def add_children(self, node):\n        self._children.append(node)\n\n    def __iter__(self):\n        # 将迭代请求传递给内部的_children属性\n        return iter(self._children)\n\nrt = Node(0)\ncd1 = Node(1)\ncd2 = Node(2)\nrt.add_children(cd1)\nrt.add_children(cd2)\n\nfor ch in rt:\n    print(ch)\n```\n\n### 反向迭代\n**应用场景：** 想要反向迭代一个序列\n\n**解决方案：** 使用内置的reversed()函数或者在自定义类上实现reversed();\n```python\na=[1,2,3,4]\nfor x in reversed(a):\n    print(x) #4 3 2 1\n\nclass Countdown:\n    def __init__(self, start):\n        self.start = start\n\n    # 常规迭代\n    def __iter__(self):\n        n = self.start\n        while n > 0:\n            yield n\n            n -= 1\n    \n    # 反向迭代\n    def __reversed__(self):\n        n = 1\n        while n <= self.start:\n            yield n\n            n += 1\n\n#test case\nfor rr in reversed(Countdown(30)):\n    print(rr)\n\nfor rr in Countdown(30):\n    print(rr)\n```\n\n### 有选择的迭代\n**应用场景：** 想要遍历一个可迭代对象，但是对它的某些元素不感兴趣，需要跳过；\n\n**解决方案：** 使用itertools.dropwhile()；\n```python\nfrom itertools import dropwhile\n\nwith open(\"/etc/passwd\") as f:\n    for line in dropwhile(lambda line: line.startwith('#'), f):\n        print(line, end=\"\")\n```\n\n### 同时迭代多个序列\n**应用场景：** 想要同时迭代多个序列，每次分别从一个序列中取出一个元素；\n\n**解决方案：** 使用zip()函数；\n```python\na = [1, 2, 3, 4, 5]\nb = [6, 7, 8, 9, 10]\n\nfor x, y in zip(a, b):\n    print(x, y)\n\n# 1,6 \n# 2,7 \n# 3,8 \n# 4,9 \n# 5,10\n```\n```python\nfrom itertools import zip_longest\n\na = [1, 2, 3]\nb = ['w', 'x', 'y', 'z']\n\nfor i in zip_longest(a, b):\n    print(i)\n\n# (1, 'w')\n# (2, 'x')\n# (3, 'y')\n# (None, 'z')\n\n\nfor i in zip_longest(a, b, fillvalue=0):\n    # 空值设置默认参数自动填充\n    print(i)\n```\n\n### 不同集合上元素的迭代\n**应用场景：** 想要在多个迭代对象上执行同一操作，但是这些对象在不同的容器中；\n\n**解决方案：** 使用itertools.chain()函数;\n```python\nfrom itertools import chain\n\na = [1, 2, 3, 4]\nb = ['x', 'y', 'z']\n\nfor i in chain(a, b):\n    print(i)\n\n# 1\n# 2\n# 3\n# 4\n# x\n# y\n# z\n```\n\n### 展开嵌套的序列\n**应用场景：** 想要将一个多层嵌套的序列展开成一个一维的列表；\n\n**解决方案：** 使用包含yield from语句的递归生成器\n\n```python\nfrom collections import Iterable\n\ndef flatten(items, ignore_types=(str, bytes)):\n    for x in items:\n        if isinstance(x, Iterable) and not isinstance(x, ignore_types):\n            yield from flatten(x)\n        else:\n            yield x\n\n#test case\nitems=[1,2,[3,4,[5,6],7],8]\nfor x in flatten(items):\n  print(x)\n```\n\n","slug":"python中迭代器和生成器","published":1,"updated":"2022-03-13T11:49:16.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde07x00269jx30k537o39","content":"<h2 id=\"python中迭代器生成器实例详解\"><a href=\"#python中迭代器生成器实例详解\" class=\"headerlink\" title=\"python中迭代器生成器实例详解\"></a>python中迭代器生成器实例详解</h2><p>本文通过针对不同应用场景及其解决方案的方式，总结了Python中迭代器与生成器的一些相关知识；</p><ul><li>手动遍历迭代器</li><li>代理迭代</li><li>反向迭代</li><li>有选择的迭代</li><li>同时迭代多个序列</li><li>不同集合上的迭代</li><li>展开嵌套的序列</li></ul><h3 id=\"手动遍历迭代器\"><a href=\"#手动遍历迭代器\" class=\"headerlink\" title=\"手动遍历迭代器\"></a>手动遍历迭代器</h3><p><strong>应用场景：</strong> 想要遍历一个可迭代对象中所有元素，但是不想用for循环；</p><a id=\"more\"></a><p><strong>解决方案：</strong> 使用next()函数，并捕获StopIteration异常；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">manual_iter</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"/etc/passwd\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">                line = next(f)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> line <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                print(line, end=<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><h3 id=\"代理迭代\"><a href=\"#代理迭代\" class=\"headerlink\" title=\"代理迭代\"></a>代理迭代</h3><p><strong>应用场景：</strong> 想直接在一个包含有列表，元组或其他可迭代对象的容器对象上执行迭代操作；</p><p><strong>解决方案：</strong> 定义一个iter方法，将迭代操作代理到容器内部的对象上；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        self._value = value</span><br><span class=\"line\">        self._children = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Node(&#123;!r&#125;)\"</span>.format(self._value)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_children</span><span class=\"params\">(self, node)</span>:</span></span><br><span class=\"line\">        self._children.append(node)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 将迭代请求传递给内部的_children属性</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> iter(self._children)</span><br><span class=\"line\"></span><br><span class=\"line\">rt = Node(<span class=\"number\">0</span>)</span><br><span class=\"line\">cd1 = Node(<span class=\"number\">1</span>)</span><br><span class=\"line\">cd2 = Node(<span class=\"number\">2</span>)</span><br><span class=\"line\">rt.add_children(cd1)</span><br><span class=\"line\">rt.add_children(cd2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> rt:</span><br><span class=\"line\">    print(ch)</span><br></pre></td></tr></table></figure><h3 id=\"反向迭代\"><a href=\"#反向迭代\" class=\"headerlink\" title=\"反向迭代\"></a>反向迭代</h3><p><strong>应用场景：</strong> 想要反向迭代一个序列</p><p><strong>解决方案：</strong> 使用内置的reversed()函数或者在自定义类上实现reversed();</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> reversed(a):</span><br><span class=\"line\">    print(x) <span class=\"comment\">#4 3 2 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Countdown</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, start)</span>:</span></span><br><span class=\"line\">        self.start = start</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 常规迭代</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        n = self.start</span><br><span class=\"line\">        <span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> n</span><br><span class=\"line\">            n -= <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 反向迭代</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__reversed__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        n = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> n &lt;= self.start:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> n</span><br><span class=\"line\">            n += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#test case</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> rr <span class=\"keyword\">in</span> reversed(Countdown(<span class=\"number\">30</span>)):</span><br><span class=\"line\">    print(rr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> rr <span class=\"keyword\">in</span> Countdown(<span class=\"number\">30</span>):</span><br><span class=\"line\">    print(rr)</span><br></pre></td></tr></table></figure><h3 id=\"有选择的迭代\"><a href=\"#有选择的迭代\" class=\"headerlink\" title=\"有选择的迭代\"></a>有选择的迭代</h3><p><strong>应用场景：</strong> 想要遍历一个可迭代对象，但是对它的某些元素不感兴趣，需要跳过；</p><p><strong>解决方案：</strong> 使用itertools.dropwhile()；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> dropwhile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"/etc/passwd\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> dropwhile(<span class=\"keyword\">lambda</span> line: line.startwith(<span class=\"string\">'#'</span>), f):</span><br><span class=\"line\">        print(line, end=<span class=\"string\">\"\"</span>)</span><br></pre></td></tr></table></figure><h3 id=\"同时迭代多个序列\"><a href=\"#同时迭代多个序列\" class=\"headerlink\" title=\"同时迭代多个序列\"></a>同时迭代多个序列</h3><p><strong>应用场景：</strong> 想要同时迭代多个序列，每次分别从一个序列中取出一个元素；</p><p><strong>解决方案：</strong> 使用zip()函数；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">b = [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> zip(a, b):</span><br><span class=\"line\">    print(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1,6 </span></span><br><span class=\"line\"><span class=\"comment\"># 2,7 </span></span><br><span class=\"line\"><span class=\"comment\"># 3,8 </span></span><br><span class=\"line\"><span class=\"comment\"># 4,9 </span></span><br><span class=\"line\"><span class=\"comment\"># 5,10</span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> zip_longest</span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">b = [<span class=\"string\">'w'</span>, <span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zip_longest(a, b):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (1, 'w')</span></span><br><span class=\"line\"><span class=\"comment\"># (2, 'x')</span></span><br><span class=\"line\"><span class=\"comment\"># (3, 'y')</span></span><br><span class=\"line\"><span class=\"comment\"># (None, 'z')</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zip_longest(a, b, fillvalue=<span class=\"number\">0</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 空值设置默认参数自动填充</span></span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure><h3 id=\"不同集合上元素的迭代\"><a href=\"#不同集合上元素的迭代\" class=\"headerlink\" title=\"不同集合上元素的迭代\"></a>不同集合上元素的迭代</h3><p><strong>应用场景：</strong> 想要在多个迭代对象上执行同一操作，但是这些对象在不同的容器中；</p><p><strong>解决方案：</strong> 使用itertools.chain()函数;</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> chain</span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">b = [<span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> chain(a, b):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br><span class=\"line\"><span class=\"comment\"># 3</span></span><br><span class=\"line\"><span class=\"comment\"># 4</span></span><br><span class=\"line\"><span class=\"comment\"># x</span></span><br><span class=\"line\"><span class=\"comment\"># y</span></span><br><span class=\"line\"><span class=\"comment\"># z</span></span><br></pre></td></tr></table></figure><h3 id=\"展开嵌套的序列\"><a href=\"#展开嵌套的序列\" class=\"headerlink\" title=\"展开嵌套的序列\"></a>展开嵌套的序列</h3><p><strong>应用场景：</strong> 想要将一个多层嵌套的序列展开成一个一维的列表；</p><p><strong>解决方案：</strong> 使用包含yield from语句的递归生成器</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Iterable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">flatten</span><span class=\"params\">(items, ignore_types=<span class=\"params\">(str, bytes)</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(x, Iterable) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> isinstance(x, ignore_types):</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> flatten(x)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#test case</span></span><br><span class=\"line\">items=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>,[<span class=\"number\">5</span>,<span class=\"number\">6</span>],<span class=\"number\">7</span>],<span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> flatten(items):</span><br><span class=\"line\">  print(x)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"python中迭代器生成器实例详解\"><a href=\"#python中迭代器生成器实例详解\" class=\"headerlink\" title=\"python中迭代器生成器实例详解\"></a>python中迭代器生成器实例详解</h2><p>本文通过针对不同应用场景及其解决方案的方式，总结了Python中迭代器与生成器的一些相关知识；</p><ul><li>手动遍历迭代器</li><li>代理迭代</li><li>反向迭代</li><li>有选择的迭代</li><li>同时迭代多个序列</li><li>不同集合上的迭代</li><li>展开嵌套的序列</li></ul><h3 id=\"手动遍历迭代器\"><a href=\"#手动遍历迭代器\" class=\"headerlink\" title=\"手动遍历迭代器\"></a>手动遍历迭代器</h3><p><strong>应用场景：</strong> 想要遍历一个可迭代对象中所有元素，但是不想用for循环；</p>","more":"<p><strong>解决方案：</strong> 使用next()函数，并捕获StopIteration异常；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">manual_iter</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"/etc/passwd\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">                line = next(f)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> line <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                print(line, end=<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure><h3 id=\"代理迭代\"><a href=\"#代理迭代\" class=\"headerlink\" title=\"代理迭代\"></a>代理迭代</h3><p><strong>应用场景：</strong> 想直接在一个包含有列表，元组或其他可迭代对象的容器对象上执行迭代操作；</p><p><strong>解决方案：</strong> 定义一个iter方法，将迭代操作代理到容器内部的对象上；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        self._value = value</span><br><span class=\"line\">        self._children = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Node(&#123;!r&#125;)\"</span>.format(self._value)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_children</span><span class=\"params\">(self, node)</span>:</span></span><br><span class=\"line\">        self._children.append(node)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 将迭代请求传递给内部的_children属性</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> iter(self._children)</span><br><span class=\"line\"></span><br><span class=\"line\">rt = Node(<span class=\"number\">0</span>)</span><br><span class=\"line\">cd1 = Node(<span class=\"number\">1</span>)</span><br><span class=\"line\">cd2 = Node(<span class=\"number\">2</span>)</span><br><span class=\"line\">rt.add_children(cd1)</span><br><span class=\"line\">rt.add_children(cd2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> rt:</span><br><span class=\"line\">    print(ch)</span><br></pre></td></tr></table></figure><h3 id=\"反向迭代\"><a href=\"#反向迭代\" class=\"headerlink\" title=\"反向迭代\"></a>反向迭代</h3><p><strong>应用场景：</strong> 想要反向迭代一个序列</p><p><strong>解决方案：</strong> 使用内置的reversed()函数或者在自定义类上实现reversed();</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> reversed(a):</span><br><span class=\"line\">    print(x) <span class=\"comment\">#4 3 2 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Countdown</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, start)</span>:</span></span><br><span class=\"line\">        self.start = start</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 常规迭代</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        n = self.start</span><br><span class=\"line\">        <span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> n</span><br><span class=\"line\">            n -= <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 反向迭代</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__reversed__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        n = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> n &lt;= self.start:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> n</span><br><span class=\"line\">            n += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#test case</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> rr <span class=\"keyword\">in</span> reversed(Countdown(<span class=\"number\">30</span>)):</span><br><span class=\"line\">    print(rr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> rr <span class=\"keyword\">in</span> Countdown(<span class=\"number\">30</span>):</span><br><span class=\"line\">    print(rr)</span><br></pre></td></tr></table></figure><h3 id=\"有选择的迭代\"><a href=\"#有选择的迭代\" class=\"headerlink\" title=\"有选择的迭代\"></a>有选择的迭代</h3><p><strong>应用场景：</strong> 想要遍历一个可迭代对象，但是对它的某些元素不感兴趣，需要跳过；</p><p><strong>解决方案：</strong> 使用itertools.dropwhile()；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> dropwhile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"/etc/passwd\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> dropwhile(<span class=\"keyword\">lambda</span> line: line.startwith(<span class=\"string\">'#'</span>), f):</span><br><span class=\"line\">        print(line, end=<span class=\"string\">\"\"</span>)</span><br></pre></td></tr></table></figure><h3 id=\"同时迭代多个序列\"><a href=\"#同时迭代多个序列\" class=\"headerlink\" title=\"同时迭代多个序列\"></a>同时迭代多个序列</h3><p><strong>应用场景：</strong> 想要同时迭代多个序列，每次分别从一个序列中取出一个元素；</p><p><strong>解决方案：</strong> 使用zip()函数；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">b = [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> zip(a, b):</span><br><span class=\"line\">    print(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1,6 </span></span><br><span class=\"line\"><span class=\"comment\"># 2,7 </span></span><br><span class=\"line\"><span class=\"comment\"># 3,8 </span></span><br><span class=\"line\"><span class=\"comment\"># 4,9 </span></span><br><span class=\"line\"><span class=\"comment\"># 5,10</span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> zip_longest</span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">b = [<span class=\"string\">'w'</span>, <span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zip_longest(a, b):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (1, 'w')</span></span><br><span class=\"line\"><span class=\"comment\"># (2, 'x')</span></span><br><span class=\"line\"><span class=\"comment\"># (3, 'y')</span></span><br><span class=\"line\"><span class=\"comment\"># (None, 'z')</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zip_longest(a, b, fillvalue=<span class=\"number\">0</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 空值设置默认参数自动填充</span></span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure><h3 id=\"不同集合上元素的迭代\"><a href=\"#不同集合上元素的迭代\" class=\"headerlink\" title=\"不同集合上元素的迭代\"></a>不同集合上元素的迭代</h3><p><strong>应用场景：</strong> 想要在多个迭代对象上执行同一操作，但是这些对象在不同的容器中；</p><p><strong>解决方案：</strong> 使用itertools.chain()函数;</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> chain</span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">b = [<span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> chain(a, b):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br><span class=\"line\"><span class=\"comment\"># 3</span></span><br><span class=\"line\"><span class=\"comment\"># 4</span></span><br><span class=\"line\"><span class=\"comment\"># x</span></span><br><span class=\"line\"><span class=\"comment\"># y</span></span><br><span class=\"line\"><span class=\"comment\"># z</span></span><br></pre></td></tr></table></figure><h3 id=\"展开嵌套的序列\"><a href=\"#展开嵌套的序列\" class=\"headerlink\" title=\"展开嵌套的序列\"></a>展开嵌套的序列</h3><p><strong>应用场景：</strong> 想要将一个多层嵌套的序列展开成一个一维的列表；</p><p><strong>解决方案：</strong> 使用包含yield from语句的递归生成器</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Iterable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">flatten</span><span class=\"params\">(items, ignore_types=<span class=\"params\">(str, bytes)</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(x, Iterable) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> isinstance(x, ignore_types):</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> flatten(x)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#test case</span></span><br><span class=\"line\">items=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>,[<span class=\"number\">5</span>,<span class=\"number\">6</span>],<span class=\"number\">7</span>],<span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> flatten(items):</span><br><span class=\"line\">  print(x)</span><br></pre></td></tr></table></figure>"},{"title":"python常见设计模式(三)","type":"categories","copyright":true,"keywords":"设计模式","abbrlink":2064489324,"date":"2022-03-13T10:42:18.000Z","_content":"\n[python常见设计模式(一)][1]\n\n[python常见设计模式(二)][2]\n\n## 行为型模式\n- 责任链模式\n- 命令模式\n- 解释器模式\n- 观察者模式\n- 状态模式\n- 策略模式\n- 模版模式\n\n[1]: https://blog.leslie168.com/posts/2865700901.html\n\n[2]: https://blog.leslie168.com/posts/100580167.html","source":"_posts/python常见设计模式3.md","raw":"---\ntitle: python常见设计模式(三)\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 设计模式\ncategories:\n  - python\n  - 设计模式\nkeywords: 设计模式\nabbrlink: 2064489324\ndate: 2022-03-13 18:42:18\n---\n\n[python常见设计模式(一)][1]\n\n[python常见设计模式(二)][2]\n\n## 行为型模式\n- 责任链模式\n- 命令模式\n- 解释器模式\n- 观察者模式\n- 状态模式\n- 策略模式\n- 模版模式\n\n[1]: https://blog.leslie168.com/posts/2865700901.html\n\n[2]: https://blog.leslie168.com/posts/100580167.html","slug":"python常见设计模式3","published":1,"updated":"2022-03-13T13:43:59.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde080002b9jx3bj4pful1","content":"<p><a href=\"https://blog.leslie168.com/posts/2865700901.html\">python常见设计模式(一)</a></p><p><a href=\"https://blog.leslie168.com/posts/100580167.html\">python常见设计模式(二)</a></p><h2 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h2><ul><li>责任链模式</li><li>命令模式</li><li>解释器模式</li><li>观察者模式</li><li>状态模式</li><li>策略模式</li><li>模版模式</li></ul>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.leslie168.com/posts/2865700901.html\">python常见设计模式(一)</a></p><p><a href=\"https://blog.leslie168.com/posts/100580167.html\">python常见设计模式(二)</a></p><h2 id=\"行为型模式\"><a href=\"#行为型模式\" class=\"headerlink\" title=\"行为型模式\"></a>行为型模式</h2><ul><li>责任链模式</li><li>命令模式</li><li>解释器模式</li><li>观察者模式</li><li>状态模式</li><li>策略模式</li><li>模版模式</li></ul>"},{"title":"python常见设计模式(一)","type":"categories","copyright":true,"keywords":"设计模式","abbrlink":2865700901,"date":"2022-03-13T10:40:10.000Z","_content":"\n[python常见设计模式(二)][1]\n\n[python常见设计模式(三)][2]\n\n## 创建型模式\n- 单例模式\n- 工厂模式\n- 建造者模式\n- 原型模式\n\n### 单例模式\n&emsp;&emsp; 单例模式（Singleton Pattern）是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。\n\n[python的几种单例][singleton]\n\n<!-- more -->\n### 工厂模式\n工厂模式是一个在软件开发过程中用来创建对象的设计模式；工厂模式包含一个超类，这个超类提供一个抽象化接口来创建一个特定类型的对象；\n\n工厂模式有三种，分别为简单工厂，工厂方法，抽象工厂；\n- **简单工厂模式**\n\n&emsp;&emsp; 假如我们有一个汽车工厂，分别生成奔驰和宝马汽车；\n```python\nclass Benchi:\n  def __init__(self):\n    return \"benchi\"\n\nclass Baoma:\n  def __init__(self):\n    return \"baoma\"\n\nclass CarFactory:  # 简单工厂，根据类型生成汽车\n  def produce_car(self, car):\n    if car == \"benchi\":\n      return Benchi()\n    elif car == \"baoma\":\n      return Baoma()\n    else:\n      print(\"没有可生产的汽车！\")\n      return\n\ndef main():\n  # 我们可以向固定的接口传递参数来获取想要的汽车对象\n  cf = CarFactory()\n  car1 = cf.produce_car(\"benchi\")\n  car2 = cf.produce_car(\"baoma\")\n```\n- **工厂方法模式**\n\n&emsp;&emsp; 我们已经有了简单工厂，但是如果需要新的汽车奥迪，我们不仅要写Audi类，还要修改工厂类，不利于以后的扩展；\n\n&emsp;&emsp; 我们在简单工厂模式的基础上，抽象出不同的工厂，每个工厂对应生成自己的产品；\n```python\nclass AbsFactory:\n  # 抽象工厂\n  def produce_car(self):\n    # 只是定义方法，具体实现在子类中进行\n    pass\n\nclass BenchiFac(AbsFactory):\n  def produce_car(self):\n    # 重写父类的方法\n    return Benchi()\n\nclass BaomaFac(AbsFactory):\n  def produce_car(self):\n    return Baoma()\n\ndef main():\n  # 我们可以通过特定的工厂来获取特定的产品\n  car1 = BenchiFac().produce_car()\n  car2 = BaomaFac().produce_car()\n```\n- **抽象工厂模式**\n\n&emsp;&emsp; 工厂方法虽然方便了我们以后的扩展，但如果我们要生产很多不同产品，就同样需要写很多对应的工厂类。\n\n&emsp;&emsp; 为了解决这个问题，我们需要把同类产品进一步抽象到一个工厂类中，这就是抽象工厂。\n```python\n# 同样品类我们生成轿车和SUV两种类型\nclass AbsFactory:\n  def produce_car(self):\n    pass\n  \n  def produce_suv(self):\n    pass\n\nclass BenchiFac(AbsFactory):\n  def produce_car(self):\n    return Benchi()\n\n  def produce_suv(self):\n    return BenchiSuv()\n\ndef main():\n  car = BenchiFac().produce_car()\n  suv = BenchiFac().produce_suv()\n```\n三种工厂模式复杂度逐步递增，实际使用过程中，应根据系统复杂度采用合适的工厂模式。\n\n### 建造者模式\n将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。\n\n简单理解成：一个接口类定义创建对象的方法(基类)，一个指挥类型的类也可说是调度类型的类，用来指定哪个创造类(子类)创造，实例化；\n```python\n# 接口类基类\nclass Person:\n  __metaclass__ = Singleton  # 创建一个单列\n\n  def play(self):\n    pass\n  \n  def study(self):\n    pass\n\n# 创造类 子类\nclass Boys(Person):\n  def play(self):\n    print(\"打篮球\")\n  \n  def study(self):\n    print(\"上课\")\n\nclass Girls(Person):\n  def play(self):\n    print(\"踢键子\")\n  \n  def study(self):\n    print(\"上课\")\n\n# 指挥类，调度类\nclass Director:\n  def __init__(self, person):\n    self.person = person\n\n  def active():\n    self.person.play()\n    self.person.study()\n\n\nif __name__=='__main__':\n  boys = Boys()\n  girls = Girls()\n  director_boys = Director(boys)\n  director_boys.active()\n  \n  director_girls = Director(girls)\n  director_girls.active()\n```\n\n### 原型模式\n用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。\n\n原型模式本质就是克隆对象，所以在对象初始化操作比较复杂的情况下，很实用，能大大降低耗时，提高性能，因为“不用重新初始化对象，而是动态地获得对象运行时的状态”。\n\n```python\n# 基类 原型类\nclass Student:\n  def __init__(self, name, **kwargs):\n    # **kwargs 有 age, gender, birth\n    self.name = name\n    self.__dict__.update(kwargs)\n  \n  def __str__(self):\n    info = []\n    for k, v in self.__dict__.items():\n      info.append(\"{}: {}\".format(k, v))\n      info.append(\"\\n\")\n    return \"\".join(info)\n\nclass Prototype:\n  def __init__(self):\n    self.objects = dict()\n\n  def register(self, identifier, obj):\n    self.objects[identifier] = obj\n\n  def unregister(self, identifier):\n    del self.objects[identifier]\n\n  def clone(self, identifier, **attr):\n    found = self.objects.get(identifier, None)\n    if not found:\n      raise ValueError('Incorrect object identifier: {}'.format(identifier))\n    obj = copy.deepcopy(found)\n    obj.__dict__.update(attr)\n    return obj\n\ndef main():\n  S1 = Student(\"张三\", age=18, gender=\"男\", birth=\"2002-09-12\")\n  pro = Prototype()\n  cid = \"s_01\"\n  pro.register(cid, S1)  # 注册\n\n  # S2 = Student() 不在需要实例化一次\n  S2 = pro.clone(cid, name=\"小芳\", age=16, gender=\"女\", birth=\"2004-12-08\", classroom=\"高二(3)班\")\n\n  for i in (S1, S2):\n    print(i)\n\n\"\"\"\nname: 张三\nage: 18\ngender: 男\nbirth: 2002-09-12\n\nname: 小芳\nage: 16\ngender: 女\nbirth: 2004-12-08\nclassroom: 高二(3)班\n\"\"\"\n```\n\n\n[1]: https://blog.leslie168.com/posts/100580167.html\n\n[2]: https://blog.leslie168.com/posts/2064489324.html\n\n[singleton]: https://blog.leslie168.com/posts/2767789526.html\n","source":"_posts/python常见设计模式1.md","raw":"---\ntitle: python常见设计模式(一)\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 设计模式\ncategories:\n  - python\n  - 设计模式\nkeywords: 设计模式\nabbrlink: 2865700901\ndate: 2022-03-13 18:40:10\n---\n\n[python常见设计模式(二)][1]\n\n[python常见设计模式(三)][2]\n\n## 创建型模式\n- 单例模式\n- 工厂模式\n- 建造者模式\n- 原型模式\n\n### 单例模式\n&emsp;&emsp; 单例模式（Singleton Pattern）是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。\n\n[python的几种单例][singleton]\n\n<!-- more -->\n### 工厂模式\n工厂模式是一个在软件开发过程中用来创建对象的设计模式；工厂模式包含一个超类，这个超类提供一个抽象化接口来创建一个特定类型的对象；\n\n工厂模式有三种，分别为简单工厂，工厂方法，抽象工厂；\n- **简单工厂模式**\n\n&emsp;&emsp; 假如我们有一个汽车工厂，分别生成奔驰和宝马汽车；\n```python\nclass Benchi:\n  def __init__(self):\n    return \"benchi\"\n\nclass Baoma:\n  def __init__(self):\n    return \"baoma\"\n\nclass CarFactory:  # 简单工厂，根据类型生成汽车\n  def produce_car(self, car):\n    if car == \"benchi\":\n      return Benchi()\n    elif car == \"baoma\":\n      return Baoma()\n    else:\n      print(\"没有可生产的汽车！\")\n      return\n\ndef main():\n  # 我们可以向固定的接口传递参数来获取想要的汽车对象\n  cf = CarFactory()\n  car1 = cf.produce_car(\"benchi\")\n  car2 = cf.produce_car(\"baoma\")\n```\n- **工厂方法模式**\n\n&emsp;&emsp; 我们已经有了简单工厂，但是如果需要新的汽车奥迪，我们不仅要写Audi类，还要修改工厂类，不利于以后的扩展；\n\n&emsp;&emsp; 我们在简单工厂模式的基础上，抽象出不同的工厂，每个工厂对应生成自己的产品；\n```python\nclass AbsFactory:\n  # 抽象工厂\n  def produce_car(self):\n    # 只是定义方法，具体实现在子类中进行\n    pass\n\nclass BenchiFac(AbsFactory):\n  def produce_car(self):\n    # 重写父类的方法\n    return Benchi()\n\nclass BaomaFac(AbsFactory):\n  def produce_car(self):\n    return Baoma()\n\ndef main():\n  # 我们可以通过特定的工厂来获取特定的产品\n  car1 = BenchiFac().produce_car()\n  car2 = BaomaFac().produce_car()\n```\n- **抽象工厂模式**\n\n&emsp;&emsp; 工厂方法虽然方便了我们以后的扩展，但如果我们要生产很多不同产品，就同样需要写很多对应的工厂类。\n\n&emsp;&emsp; 为了解决这个问题，我们需要把同类产品进一步抽象到一个工厂类中，这就是抽象工厂。\n```python\n# 同样品类我们生成轿车和SUV两种类型\nclass AbsFactory:\n  def produce_car(self):\n    pass\n  \n  def produce_suv(self):\n    pass\n\nclass BenchiFac(AbsFactory):\n  def produce_car(self):\n    return Benchi()\n\n  def produce_suv(self):\n    return BenchiSuv()\n\ndef main():\n  car = BenchiFac().produce_car()\n  suv = BenchiFac().produce_suv()\n```\n三种工厂模式复杂度逐步递增，实际使用过程中，应根据系统复杂度采用合适的工厂模式。\n\n### 建造者模式\n将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。\n\n简单理解成：一个接口类定义创建对象的方法(基类)，一个指挥类型的类也可说是调度类型的类，用来指定哪个创造类(子类)创造，实例化；\n```python\n# 接口类基类\nclass Person:\n  __metaclass__ = Singleton  # 创建一个单列\n\n  def play(self):\n    pass\n  \n  def study(self):\n    pass\n\n# 创造类 子类\nclass Boys(Person):\n  def play(self):\n    print(\"打篮球\")\n  \n  def study(self):\n    print(\"上课\")\n\nclass Girls(Person):\n  def play(self):\n    print(\"踢键子\")\n  \n  def study(self):\n    print(\"上课\")\n\n# 指挥类，调度类\nclass Director:\n  def __init__(self, person):\n    self.person = person\n\n  def active():\n    self.person.play()\n    self.person.study()\n\n\nif __name__=='__main__':\n  boys = Boys()\n  girls = Girls()\n  director_boys = Director(boys)\n  director_boys.active()\n  \n  director_girls = Director(girls)\n  director_girls.active()\n```\n\n### 原型模式\n用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。\n\n原型模式本质就是克隆对象，所以在对象初始化操作比较复杂的情况下，很实用，能大大降低耗时，提高性能，因为“不用重新初始化对象，而是动态地获得对象运行时的状态”。\n\n```python\n# 基类 原型类\nclass Student:\n  def __init__(self, name, **kwargs):\n    # **kwargs 有 age, gender, birth\n    self.name = name\n    self.__dict__.update(kwargs)\n  \n  def __str__(self):\n    info = []\n    for k, v in self.__dict__.items():\n      info.append(\"{}: {}\".format(k, v))\n      info.append(\"\\n\")\n    return \"\".join(info)\n\nclass Prototype:\n  def __init__(self):\n    self.objects = dict()\n\n  def register(self, identifier, obj):\n    self.objects[identifier] = obj\n\n  def unregister(self, identifier):\n    del self.objects[identifier]\n\n  def clone(self, identifier, **attr):\n    found = self.objects.get(identifier, None)\n    if not found:\n      raise ValueError('Incorrect object identifier: {}'.format(identifier))\n    obj = copy.deepcopy(found)\n    obj.__dict__.update(attr)\n    return obj\n\ndef main():\n  S1 = Student(\"张三\", age=18, gender=\"男\", birth=\"2002-09-12\")\n  pro = Prototype()\n  cid = \"s_01\"\n  pro.register(cid, S1)  # 注册\n\n  # S2 = Student() 不在需要实例化一次\n  S2 = pro.clone(cid, name=\"小芳\", age=16, gender=\"女\", birth=\"2004-12-08\", classroom=\"高二(3)班\")\n\n  for i in (S1, S2):\n    print(i)\n\n\"\"\"\nname: 张三\nage: 18\ngender: 男\nbirth: 2002-09-12\n\nname: 小芳\nage: 16\ngender: 女\nbirth: 2004-12-08\nclassroom: 高二(3)班\n\"\"\"\n```\n\n\n[1]: https://blog.leslie168.com/posts/100580167.html\n\n[2]: https://blog.leslie168.com/posts/2064489324.html\n\n[singleton]: https://blog.leslie168.com/posts/2767789526.html\n","slug":"python常见设计模式1","published":1,"updated":"2022-03-13T15:45:24.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde081002e9jx3ec207n2o","content":"<p><a href=\"https://blog.leslie168.com/posts/100580167.html\">python常见设计模式(二)</a></p><p><a href=\"https://blog.leslie168.com/posts/2064489324.html\">python常见设计模式(三)</a></p><h2 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><ul><li>单例模式</li><li>工厂模式</li><li>建造者模式</li><li>原型模式</li></ul><h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>&emsp;&emsp; 单例模式（Singleton Pattern）是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。</p><p><a href=\"https://blog.leslie168.com/posts/2767789526.html\">python的几种单例</a></p><a id=\"more\"></a><h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式是一个在软件开发过程中用来创建对象的设计模式；工厂模式包含一个超类，这个超类提供一个抽象化接口来创建一个特定类型的对象；</p><p>工厂模式有三种，分别为简单工厂，工厂方法，抽象工厂；</p><ul><li><strong>简单工厂模式</strong></li></ul><p>&emsp;&emsp; 假如我们有一个汽车工厂，分别生成奔驰和宝马汽车；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Benchi</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"benchi\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Baoma</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"baoma\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarFactory</span>:</span>  <span class=\"comment\"># 简单工厂，根据类型生成汽车</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_car</span><span class=\"params\">(self, car)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> car == <span class=\"string\">\"benchi\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Benchi()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> car == <span class=\"string\">\"baoma\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Baoma()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      print(<span class=\"string\">\"没有可生产的汽车！\"</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 我们可以向固定的接口传递参数来获取想要的汽车对象</span></span><br><span class=\"line\">  cf = CarFactory()</span><br><span class=\"line\">  car1 = cf.produce_car(<span class=\"string\">\"benchi\"</span>)</span><br><span class=\"line\">  car2 = cf.produce_car(<span class=\"string\">\"baoma\"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>工厂方法模式</strong></li></ul><p>&emsp;&emsp; 我们已经有了简单工厂，但是如果需要新的汽车奥迪，我们不仅要写Audi类，还要修改工厂类，不利于以后的扩展；</p><p>&emsp;&emsp; 我们在简单工厂模式的基础上，抽象出不同的工厂，每个工厂对应生成自己的产品；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbsFactory</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 抽象工厂</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_car</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 只是定义方法，具体实现在子类中进行</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenchiFac</span><span class=\"params\">(AbsFactory)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_car</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 重写父类的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Benchi()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaomaFac</span><span class=\"params\">(AbsFactory)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_car</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Baoma()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 我们可以通过特定的工厂来获取特定的产品</span></span><br><span class=\"line\">  car1 = BenchiFac().produce_car()</span><br><span class=\"line\">  car2 = BaomaFac().produce_car()</span><br></pre></td></tr></table></figure><ul><li><strong>抽象工厂模式</strong></li></ul><p>&emsp;&emsp; 工厂方法虽然方便了我们以后的扩展，但如果我们要生产很多不同产品，就同样需要写很多对应的工厂类。</p><p>&emsp;&emsp; 为了解决这个问题，我们需要把同类产品进一步抽象到一个工厂类中，这就是抽象工厂。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 同样品类我们生成轿车和SUV两种类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbsFactory</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_car</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_suv</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenchiFac</span><span class=\"params\">(AbsFactory)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_car</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Benchi()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_suv</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> BenchiSuv()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  car = BenchiFac().produce_car()</span><br><span class=\"line\">  suv = BenchiFac().produce_suv()</span><br></pre></td></tr></table></figure><p>三种工厂模式复杂度逐步递增，实际使用过程中，应根据系统复杂度采用合适的工厂模式。</p><h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>简单理解成：一个接口类定义创建对象的方法(基类)，一个指挥类型的类也可说是调度类型的类，用来指定哪个创造类(子类)创造，实例化；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 接口类基类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">  __metaclass__ = Singleton  <span class=\"comment\"># 创建一个单列</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">study</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创造类 子类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boys</span><span class=\"params\">(Person)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"打篮球\"</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">study</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"上课\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Girls</span><span class=\"params\">(Person)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"踢键子\"</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">study</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"上课\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指挥类，调度类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, person)</span>:</span></span><br><span class=\"line\">    self.person = person</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">active</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    self.person.play()</span><br><span class=\"line\">    self.person.study()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  boys = Boys()</span><br><span class=\"line\">  girls = Girls()</span><br><span class=\"line\">  director_boys = Director(boys)</span><br><span class=\"line\">  director_boys.active()</span><br><span class=\"line\">  </span><br><span class=\"line\">  director_girls = Director(girls)</span><br><span class=\"line\">  director_girls.active()</span><br></pre></td></tr></table></figure><h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p>原型模式本质就是克隆对象，所以在对象初始化操作比较复杂的情况下，很实用，能大大降低耗时，提高性能，因为“不用重新初始化对象，而是动态地获得对象运行时的状态”。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基类 原型类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># **kwargs 有 age, gender, birth</span></span><br><span class=\"line\">    self.name = name</span><br><span class=\"line\">    self.__dict__.update(kwargs)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    info = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> self.__dict__.items():</span><br><span class=\"line\">      info.append(<span class=\"string\">\"&#123;&#125;: &#123;&#125;\"</span>.format(k, v))</span><br><span class=\"line\">      info.append(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>.join(info)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.objects = dict()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(self, identifier, obj)</span>:</span></span><br><span class=\"line\">    self.objects[identifier] = obj</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unregister</span><span class=\"params\">(self, identifier)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">del</span> self.objects[identifier]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clone</span><span class=\"params\">(self, identifier, **attr)</span>:</span></span><br><span class=\"line\">    found = self.objects.get(identifier, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> found:</span><br><span class=\"line\">      <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Incorrect object identifier: &#123;&#125;'</span>.format(identifier))</span><br><span class=\"line\">    obj = copy.deepcopy(found)</span><br><span class=\"line\">    obj.__dict__.update(attr)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  S1 = Student(<span class=\"string\">\"张三\"</span>, age=<span class=\"number\">18</span>, gender=<span class=\"string\">\"男\"</span>, birth=<span class=\"string\">\"2002-09-12\"</span>)</span><br><span class=\"line\">  pro = Prototype()</span><br><span class=\"line\">  cid = <span class=\"string\">\"s_01\"</span></span><br><span class=\"line\">  pro.register(cid, S1)  <span class=\"comment\"># 注册</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># S2 = Student() 不在需要实例化一次</span></span><br><span class=\"line\">  S2 = pro.clone(cid, name=<span class=\"string\">\"小芳\"</span>, age=<span class=\"number\">16</span>, gender=<span class=\"string\">\"女\"</span>, birth=<span class=\"string\">\"2004-12-08\"</span>, classroom=<span class=\"string\">\"高二(3)班\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> (S1, S2):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">name: 张三</span></span><br><span class=\"line\"><span class=\"string\">age: 18</span></span><br><span class=\"line\"><span class=\"string\">gender: 男</span></span><br><span class=\"line\"><span class=\"string\">birth: 2002-09-12</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">name: 小芳</span></span><br><span class=\"line\"><span class=\"string\">age: 16</span></span><br><span class=\"line\"><span class=\"string\">gender: 女</span></span><br><span class=\"line\"><span class=\"string\">birth: 2004-12-08</span></span><br><span class=\"line\"><span class=\"string\">classroom: 高二(3)班</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><a href=\"https://blog.leslie168.com/posts/100580167.html\">python常见设计模式(二)</a></p><p><a href=\"https://blog.leslie168.com/posts/2064489324.html\">python常见设计模式(三)</a></p><h2 id=\"创建型模式\"><a href=\"#创建型模式\" class=\"headerlink\" title=\"创建型模式\"></a>创建型模式</h2><ul><li>单例模式</li><li>工厂模式</li><li>建造者模式</li><li>原型模式</li></ul><h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>&emsp;&emsp; 单例模式（Singleton Pattern）是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。</p><p><a href=\"https://blog.leslie168.com/posts/2767789526.html\">python的几种单例</a></p>","more":"<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式是一个在软件开发过程中用来创建对象的设计模式；工厂模式包含一个超类，这个超类提供一个抽象化接口来创建一个特定类型的对象；</p><p>工厂模式有三种，分别为简单工厂，工厂方法，抽象工厂；</p><ul><li><strong>简单工厂模式</strong></li></ul><p>&emsp;&emsp; 假如我们有一个汽车工厂，分别生成奔驰和宝马汽车；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Benchi</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"benchi\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Baoma</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"baoma\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarFactory</span>:</span>  <span class=\"comment\"># 简单工厂，根据类型生成汽车</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_car</span><span class=\"params\">(self, car)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> car == <span class=\"string\">\"benchi\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Benchi()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> car == <span class=\"string\">\"baoma\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Baoma()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      print(<span class=\"string\">\"没有可生产的汽车！\"</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 我们可以向固定的接口传递参数来获取想要的汽车对象</span></span><br><span class=\"line\">  cf = CarFactory()</span><br><span class=\"line\">  car1 = cf.produce_car(<span class=\"string\">\"benchi\"</span>)</span><br><span class=\"line\">  car2 = cf.produce_car(<span class=\"string\">\"baoma\"</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>工厂方法模式</strong></li></ul><p>&emsp;&emsp; 我们已经有了简单工厂，但是如果需要新的汽车奥迪，我们不仅要写Audi类，还要修改工厂类，不利于以后的扩展；</p><p>&emsp;&emsp; 我们在简单工厂模式的基础上，抽象出不同的工厂，每个工厂对应生成自己的产品；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbsFactory</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 抽象工厂</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_car</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 只是定义方法，具体实现在子类中进行</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenchiFac</span><span class=\"params\">(AbsFactory)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_car</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 重写父类的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Benchi()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaomaFac</span><span class=\"params\">(AbsFactory)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_car</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Baoma()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 我们可以通过特定的工厂来获取特定的产品</span></span><br><span class=\"line\">  car1 = BenchiFac().produce_car()</span><br><span class=\"line\">  car2 = BaomaFac().produce_car()</span><br></pre></td></tr></table></figure><ul><li><strong>抽象工厂模式</strong></li></ul><p>&emsp;&emsp; 工厂方法虽然方便了我们以后的扩展，但如果我们要生产很多不同产品，就同样需要写很多对应的工厂类。</p><p>&emsp;&emsp; 为了解决这个问题，我们需要把同类产品进一步抽象到一个工厂类中，这就是抽象工厂。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 同样品类我们生成轿车和SUV两种类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbsFactory</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_car</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_suv</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenchiFac</span><span class=\"params\">(AbsFactory)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_car</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Benchi()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce_suv</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> BenchiSuv()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  car = BenchiFac().produce_car()</span><br><span class=\"line\">  suv = BenchiFac().produce_suv()</span><br></pre></td></tr></table></figure><p>三种工厂模式复杂度逐步递增，实际使用过程中，应根据系统复杂度采用合适的工厂模式。</p><h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>简单理解成：一个接口类定义创建对象的方法(基类)，一个指挥类型的类也可说是调度类型的类，用来指定哪个创造类(子类)创造，实例化；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 接口类基类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">  __metaclass__ = Singleton  <span class=\"comment\"># 创建一个单列</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">study</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创造类 子类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boys</span><span class=\"params\">(Person)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"打篮球\"</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">study</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"上课\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Girls</span><span class=\"params\">(Person)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"踢键子\"</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">study</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"上课\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指挥类，调度类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, person)</span>:</span></span><br><span class=\"line\">    self.person = person</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">active</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    self.person.play()</span><br><span class=\"line\">    self.person.study()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  boys = Boys()</span><br><span class=\"line\">  girls = Girls()</span><br><span class=\"line\">  director_boys = Director(boys)</span><br><span class=\"line\">  director_boys.active()</span><br><span class=\"line\">  </span><br><span class=\"line\">  director_girls = Director(girls)</span><br><span class=\"line\">  director_girls.active()</span><br></pre></td></tr></table></figure><h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p>原型模式本质就是克隆对象，所以在对象初始化操作比较复杂的情况下，很实用，能大大降低耗时，提高性能，因为“不用重新初始化对象，而是动态地获得对象运行时的状态”。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基类 原型类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># **kwargs 有 age, gender, birth</span></span><br><span class=\"line\">    self.name = name</span><br><span class=\"line\">    self.__dict__.update(kwargs)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    info = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> self.__dict__.items():</span><br><span class=\"line\">      info.append(<span class=\"string\">\"&#123;&#125;: &#123;&#125;\"</span>.format(k, v))</span><br><span class=\"line\">      info.append(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>.join(info)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.objects = dict()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(self, identifier, obj)</span>:</span></span><br><span class=\"line\">    self.objects[identifier] = obj</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unregister</span><span class=\"params\">(self, identifier)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">del</span> self.objects[identifier]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clone</span><span class=\"params\">(self, identifier, **attr)</span>:</span></span><br><span class=\"line\">    found = self.objects.get(identifier, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> found:</span><br><span class=\"line\">      <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Incorrect object identifier: &#123;&#125;'</span>.format(identifier))</span><br><span class=\"line\">    obj = copy.deepcopy(found)</span><br><span class=\"line\">    obj.__dict__.update(attr)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  S1 = Student(<span class=\"string\">\"张三\"</span>, age=<span class=\"number\">18</span>, gender=<span class=\"string\">\"男\"</span>, birth=<span class=\"string\">\"2002-09-12\"</span>)</span><br><span class=\"line\">  pro = Prototype()</span><br><span class=\"line\">  cid = <span class=\"string\">\"s_01\"</span></span><br><span class=\"line\">  pro.register(cid, S1)  <span class=\"comment\"># 注册</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># S2 = Student() 不在需要实例化一次</span></span><br><span class=\"line\">  S2 = pro.clone(cid, name=<span class=\"string\">\"小芳\"</span>, age=<span class=\"number\">16</span>, gender=<span class=\"string\">\"女\"</span>, birth=<span class=\"string\">\"2004-12-08\"</span>, classroom=<span class=\"string\">\"高二(3)班\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> (S1, S2):</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">name: 张三</span></span><br><span class=\"line\"><span class=\"string\">age: 18</span></span><br><span class=\"line\"><span class=\"string\">gender: 男</span></span><br><span class=\"line\"><span class=\"string\">birth: 2002-09-12</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">name: 小芳</span></span><br><span class=\"line\"><span class=\"string\">age: 16</span></span><br><span class=\"line\"><span class=\"string\">gender: 女</span></span><br><span class=\"line\"><span class=\"string\">birth: 2004-12-08</span></span><br><span class=\"line\"><span class=\"string\">classroom: 高二(3)班</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>"},{"title":"python基础","type":"categories","copyright":true,"keywords":["内存管理","参数传递"],"abbrlink":2175988927,"date":"2022-03-03T09:03:00.000Z","_content":"\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n## Python的参数传递是值传递还是引用传递\nPython的参数传递有：\n- 位置参数\n- 默认参数，\n- 可变参数,\n- 关键字参数\n\n函数的传值到底是值传递还是引用传递，要分情况\n\n- 不可变参数用值传递：\n像整数和字符串这样的不可变对象，是通过拷贝进行传递的，因为你无论如何都不可能在原处改变不可变对象\n\n- 可变参数是用引用传递的：\n比如像列表，字典这样的对象是通过引用传递，和C语言里面的用指针传递数组很相似，可变对象能在函数内部改变.\n\n<!-- more -->\n\n## Python是如何进行内存管理的\n### 对象的引用计数机制\n\nPython内部使用引用计数，来保持追踪内存中的对象，所有对象都有引用计数。\n\n- 引用计数增加的情况：\n\n    - 一个对象分配一个新名称\n    - 将其放入一个容器中（如列表、元组或字典）\n- 引用计数减少的情况：\n\n    - 使用del语句对对象别名显示的销毁\n    - 引用超出作用域或被重新赋值\n\n### 垃圾回收\n当一个对象的引用计数归零时，它将被垃圾收集机制处理掉。\n\n### 内存池机制\nPython提供了对内存的垃圾收集机制，但是它将不用的内存放到内存池而不是返回给操作系统:\n\n- Pymalloc机制：为了加速Python的执行效率，Python引入了一个内存池机制，用于管理对小块内存的申请和释放。\n- 对于Python对象，如整数，浮点数和List，都有其独立的私有内存池，对象间不共享他们的内存池。也就是说如果你分配又释放了大量的整数，用于缓存这些整数的内存就不能再分配给浮点数。\n\n## 写出你认为最Pythonic的代码\n下面是一些比较好的例子\n\n交互变量\n```python\n# 非Pythonic\ntemp = a\na = b\nb = temp\n# pythonic:\na,b=b,a\n```\n判断其值真假\n```python\nname = 'Tim'\nlangs = ['AS3', 'Lua', 'C']\ninfo = {'name': 'Tim', 'sex': 'Male', 'age':23 }  \n# 非Pythonic\nif name != '' and len(langs) > 0 and info != {}:\n    print('All True!') \n# pythonic:\nif name and langs and info:\n    print('All True!')  \n```\n列表推导式\n```python\n[x for x in range(1,100) if x%2==0]\n```\nzip创建键值对\n```python\nkeys = ['Name', 'Sex', 'Age']\nvalues = ['Jack', 'Male', 23]\ndict(zip(keys,values))\n```\n\n## csrf是什么？如何防范？\nCSRF概念：CSRF跨站点请求伪造(Cross—Site Request Forgery)，跟XSS攻击一样，存在巨大的危害性，你可以这样来理解：\n\n攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。\n\n CSRF攻击攻击原理及过程如下：\n\n    1. 用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；\n\n    2.在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；\n\n    3. 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；\n\n    4. 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；\n\n\n    5. 浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。\n\n 防御CSRF攻击：\n\n目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。\n\n\n\n\n","source":"_posts/python基础.md","raw":"---\ntitle: python基础\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 基础\ncategories:\n  - python\n  - 基础\nkeywords:\n  - 内存管理\n  - 参数传递\nabbrlink: 2175988927\ndate: 2022-03-03 17:03:00\n---\n\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n## Python的参数传递是值传递还是引用传递\nPython的参数传递有：\n- 位置参数\n- 默认参数，\n- 可变参数,\n- 关键字参数\n\n函数的传值到底是值传递还是引用传递，要分情况\n\n- 不可变参数用值传递：\n像整数和字符串这样的不可变对象，是通过拷贝进行传递的，因为你无论如何都不可能在原处改变不可变对象\n\n- 可变参数是用引用传递的：\n比如像列表，字典这样的对象是通过引用传递，和C语言里面的用指针传递数组很相似，可变对象能在函数内部改变.\n\n<!-- more -->\n\n## Python是如何进行内存管理的\n### 对象的引用计数机制\n\nPython内部使用引用计数，来保持追踪内存中的对象，所有对象都有引用计数。\n\n- 引用计数增加的情况：\n\n    - 一个对象分配一个新名称\n    - 将其放入一个容器中（如列表、元组或字典）\n- 引用计数减少的情况：\n\n    - 使用del语句对对象别名显示的销毁\n    - 引用超出作用域或被重新赋值\n\n### 垃圾回收\n当一个对象的引用计数归零时，它将被垃圾收集机制处理掉。\n\n### 内存池机制\nPython提供了对内存的垃圾收集机制，但是它将不用的内存放到内存池而不是返回给操作系统:\n\n- Pymalloc机制：为了加速Python的执行效率，Python引入了一个内存池机制，用于管理对小块内存的申请和释放。\n- 对于Python对象，如整数，浮点数和List，都有其独立的私有内存池，对象间不共享他们的内存池。也就是说如果你分配又释放了大量的整数，用于缓存这些整数的内存就不能再分配给浮点数。\n\n## 写出你认为最Pythonic的代码\n下面是一些比较好的例子\n\n交互变量\n```python\n# 非Pythonic\ntemp = a\na = b\nb = temp\n# pythonic:\na,b=b,a\n```\n判断其值真假\n```python\nname = 'Tim'\nlangs = ['AS3', 'Lua', 'C']\ninfo = {'name': 'Tim', 'sex': 'Male', 'age':23 }  \n# 非Pythonic\nif name != '' and len(langs) > 0 and info != {}:\n    print('All True!') \n# pythonic:\nif name and langs and info:\n    print('All True!')  \n```\n列表推导式\n```python\n[x for x in range(1,100) if x%2==0]\n```\nzip创建键值对\n```python\nkeys = ['Name', 'Sex', 'Age']\nvalues = ['Jack', 'Male', 23]\ndict(zip(keys,values))\n```\n\n## csrf是什么？如何防范？\nCSRF概念：CSRF跨站点请求伪造(Cross—Site Request Forgery)，跟XSS攻击一样，存在巨大的危害性，你可以这样来理解：\n\n攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。\n\n CSRF攻击攻击原理及过程如下：\n\n    1. 用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；\n\n    2.在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；\n\n    3. 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；\n\n    4. 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；\n\n\n    5. 浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。\n\n 防御CSRF攻击：\n\n目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。\n\n\n\n\n","slug":"python基础","published":1,"updated":"2022-03-13T11:49:16.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde082002j9jx3147p6hk0","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><h2 id=\"Python的参数传递是值传递还是引用传递\"><a href=\"#Python的参数传递是值传递还是引用传递\" class=\"headerlink\" title=\"Python的参数传递是值传递还是引用传递\"></a>Python的参数传递是值传递还是引用传递</h2><p>Python的参数传递有：</p><ul><li>位置参数</li><li>默认参数，</li><li>可变参数,</li><li>关键字参数</li></ul><p>函数的传值到底是值传递还是引用传递，要分情况</p><ul><li><p>不可变参数用值传递：<br>像整数和字符串这样的不可变对象，是通过拷贝进行传递的，因为你无论如何都不可能在原处改变不可变对象</p></li><li><p>可变参数是用引用传递的：<br>比如像列表，字典这样的对象是通过引用传递，和C语言里面的用指针传递数组很相似，可变对象能在函数内部改变.</p></li></ul><a id=\"more\"></a><h2 id=\"Python是如何进行内存管理的\"><a href=\"#Python是如何进行内存管理的\" class=\"headerlink\" title=\"Python是如何进行内存管理的\"></a>Python是如何进行内存管理的</h2><h3 id=\"对象的引用计数机制\"><a href=\"#对象的引用计数机制\" class=\"headerlink\" title=\"对象的引用计数机制\"></a>对象的引用计数机制</h3><p>Python内部使用引用计数，来保持追踪内存中的对象，所有对象都有引用计数。</p><ul><li><p>引用计数增加的情况：</p><ul><li>一个对象分配一个新名称</li><li>将其放入一个容器中（如列表、元组或字典）</li></ul></li><li><p>引用计数减少的情况：</p><ul><li>使用del语句对对象别名显示的销毁</li><li>引用超出作用域或被重新赋值</li></ul></li></ul><h3 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h3><p>当一个对象的引用计数归零时，它将被垃圾收集机制处理掉。</p><h3 id=\"内存池机制\"><a href=\"#内存池机制\" class=\"headerlink\" title=\"内存池机制\"></a>内存池机制</h3><p>Python提供了对内存的垃圾收集机制，但是它将不用的内存放到内存池而不是返回给操作系统:</p><ul><li>Pymalloc机制：为了加速Python的执行效率，Python引入了一个内存池机制，用于管理对小块内存的申请和释放。</li><li>对于Python对象，如整数，浮点数和List，都有其独立的私有内存池，对象间不共享他们的内存池。也就是说如果你分配又释放了大量的整数，用于缓存这些整数的内存就不能再分配给浮点数。</li></ul><h2 id=\"写出你认为最Pythonic的代码\"><a href=\"#写出你认为最Pythonic的代码\" class=\"headerlink\" title=\"写出你认为最Pythonic的代码\"></a>写出你认为最Pythonic的代码</h2><p>下面是一些比较好的例子</p><p>交互变量</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 非Pythonic</span></span><br><span class=\"line\">temp = a</span><br><span class=\"line\">a = b</span><br><span class=\"line\">b = temp</span><br><span class=\"line\"><span class=\"comment\"># pythonic:</span></span><br><span class=\"line\">a,b=b,a</span><br></pre></td></tr></table></figure><p>判断其值真假</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">'Tim'</span></span><br><span class=\"line\">langs = [<span class=\"string\">'AS3'</span>, <span class=\"string\">'Lua'</span>, <span class=\"string\">'C'</span>]</span><br><span class=\"line\">info = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Tim'</span>, <span class=\"string\">'sex'</span>: <span class=\"string\">'Male'</span>, <span class=\"string\">'age'</span>:<span class=\"number\">23</span> &#125;  </span><br><span class=\"line\"><span class=\"comment\"># 非Pythonic</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> name != <span class=\"string\">''</span> <span class=\"keyword\">and</span> len(langs) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> info != &#123;&#125;:</span><br><span class=\"line\">    print(<span class=\"string\">'All True!'</span>) </span><br><span class=\"line\"><span class=\"comment\"># pythonic:</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> name <span class=\"keyword\">and</span> langs <span class=\"keyword\">and</span> info:</span><br><span class=\"line\">    print(<span class=\"string\">'All True!'</span>)</span><br></pre></td></tr></table></figure><p>列表推导式</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">100</span>) <span class=\"keyword\">if</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure><p>zip创建键值对</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keys = [<span class=\"string\">'Name'</span>, <span class=\"string\">'Sex'</span>, <span class=\"string\">'Age'</span>]</span><br><span class=\"line\">values = [<span class=\"string\">'Jack'</span>, <span class=\"string\">'Male'</span>, <span class=\"number\">23</span>]</span><br><span class=\"line\">dict(zip(keys,values))</span><br></pre></td></tr></table></figure><h2 id=\"csrf是什么？如何防范？\"><a href=\"#csrf是什么？如何防范？\" class=\"headerlink\" title=\"csrf是什么？如何防范？\"></a>csrf是什么？如何防范？</h2><p>CSRF概念：CSRF跨站点请求伪造(Cross—Site Request Forgery)，跟XSS攻击一样，存在巨大的危害性，你可以这样来理解：</p><p>攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。</p><p>CSRF攻击攻击原理及过程如下：</p><pre><code>1. 用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；\n\n2.在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；\n\n3. 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；\n\n4. 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；\n\n\n5. 浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。</code></pre><p>防御CSRF攻击：</p><p>目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。</p>","site":{"data":{}},"excerpt":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><h2 id=\"Python的参数传递是值传递还是引用传递\"><a href=\"#Python的参数传递是值传递还是引用传递\" class=\"headerlink\" title=\"Python的参数传递是值传递还是引用传递\"></a>Python的参数传递是值传递还是引用传递</h2><p>Python的参数传递有：</p><ul><li>位置参数</li><li>默认参数，</li><li>可变参数,</li><li>关键字参数</li></ul><p>函数的传值到底是值传递还是引用传递，要分情况</p><ul><li><p>不可变参数用值传递：<br>像整数和字符串这样的不可变对象，是通过拷贝进行传递的，因为你无论如何都不可能在原处改变不可变对象</p></li><li><p>可变参数是用引用传递的：<br>比如像列表，字典这样的对象是通过引用传递，和C语言里面的用指针传递数组很相似，可变对象能在函数内部改变.</p></li></ul>","more":"<h2 id=\"Python是如何进行内存管理的\"><a href=\"#Python是如何进行内存管理的\" class=\"headerlink\" title=\"Python是如何进行内存管理的\"></a>Python是如何进行内存管理的</h2><h3 id=\"对象的引用计数机制\"><a href=\"#对象的引用计数机制\" class=\"headerlink\" title=\"对象的引用计数机制\"></a>对象的引用计数机制</h3><p>Python内部使用引用计数，来保持追踪内存中的对象，所有对象都有引用计数。</p><ul><li><p>引用计数增加的情况：</p><ul><li>一个对象分配一个新名称</li><li>将其放入一个容器中（如列表、元组或字典）</li></ul></li><li><p>引用计数减少的情况：</p><ul><li>使用del语句对对象别名显示的销毁</li><li>引用超出作用域或被重新赋值</li></ul></li></ul><h3 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h3><p>当一个对象的引用计数归零时，它将被垃圾收集机制处理掉。</p><h3 id=\"内存池机制\"><a href=\"#内存池机制\" class=\"headerlink\" title=\"内存池机制\"></a>内存池机制</h3><p>Python提供了对内存的垃圾收集机制，但是它将不用的内存放到内存池而不是返回给操作系统:</p><ul><li>Pymalloc机制：为了加速Python的执行效率，Python引入了一个内存池机制，用于管理对小块内存的申请和释放。</li><li>对于Python对象，如整数，浮点数和List，都有其独立的私有内存池，对象间不共享他们的内存池。也就是说如果你分配又释放了大量的整数，用于缓存这些整数的内存就不能再分配给浮点数。</li></ul><h2 id=\"写出你认为最Pythonic的代码\"><a href=\"#写出你认为最Pythonic的代码\" class=\"headerlink\" title=\"写出你认为最Pythonic的代码\"></a>写出你认为最Pythonic的代码</h2><p>下面是一些比较好的例子</p><p>交互变量</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 非Pythonic</span></span><br><span class=\"line\">temp = a</span><br><span class=\"line\">a = b</span><br><span class=\"line\">b = temp</span><br><span class=\"line\"><span class=\"comment\"># pythonic:</span></span><br><span class=\"line\">a,b=b,a</span><br></pre></td></tr></table></figure><p>判断其值真假</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">'Tim'</span></span><br><span class=\"line\">langs = [<span class=\"string\">'AS3'</span>, <span class=\"string\">'Lua'</span>, <span class=\"string\">'C'</span>]</span><br><span class=\"line\">info = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Tim'</span>, <span class=\"string\">'sex'</span>: <span class=\"string\">'Male'</span>, <span class=\"string\">'age'</span>:<span class=\"number\">23</span> &#125;  </span><br><span class=\"line\"><span class=\"comment\"># 非Pythonic</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> name != <span class=\"string\">''</span> <span class=\"keyword\">and</span> len(langs) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> info != &#123;&#125;:</span><br><span class=\"line\">    print(<span class=\"string\">'All True!'</span>) </span><br><span class=\"line\"><span class=\"comment\"># pythonic:</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> name <span class=\"keyword\">and</span> langs <span class=\"keyword\">and</span> info:</span><br><span class=\"line\">    print(<span class=\"string\">'All True!'</span>)</span><br></pre></td></tr></table></figure><p>列表推导式</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">100</span>) <span class=\"keyword\">if</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure><p>zip创建键值对</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keys = [<span class=\"string\">'Name'</span>, <span class=\"string\">'Sex'</span>, <span class=\"string\">'Age'</span>]</span><br><span class=\"line\">values = [<span class=\"string\">'Jack'</span>, <span class=\"string\">'Male'</span>, <span class=\"number\">23</span>]</span><br><span class=\"line\">dict(zip(keys,values))</span><br></pre></td></tr></table></figure><h2 id=\"csrf是什么？如何防范？\"><a href=\"#csrf是什么？如何防范？\" class=\"headerlink\" title=\"csrf是什么？如何防范？\"></a>csrf是什么？如何防范？</h2><p>CSRF概念：CSRF跨站点请求伪造(Cross—Site Request Forgery)，跟XSS攻击一样，存在巨大的危害性，你可以这样来理解：</p><p>攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。</p><p>CSRF攻击攻击原理及过程如下：</p><pre><code>1. 用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；\n\n2.在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；\n\n3. 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；\n\n4. 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；\n\n\n5. 浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。</code></pre><p>防御CSRF攻击：</p><p>目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。</p>"},{"title":"python常见设计模式(二)","type":"categories","copyright":true,"keywords":"设计模式","abbrlink":100580167,"date":"2022-03-13T10:42:11.000Z","_content":"\n[python常见设计模式(一)][1]\n\n[python常见设计模式(三)][2]\n\n## 结构型模式\n- 适配器模式\n- 装饰器模式\n- 外观模式\n- 享元模式\n- 模型视图控制器模式(MVC)\n- 代理模式\n<!-- more -->\n\n### 适配器模式\n&emsp;&emsp; 所谓的适配器模式是指一种接口适配技术，它可以通过某个类来使用另一个与接口不兼容的类，运用此模式，两个类的接口都无需改动；\n\n&emsp;&emsp; 适配器模式主要应用于希望复用一些现存的类，但接口又与复用环境要求不一致的情况；\n```python\nclass Tagret:\n  def request(self):\n    print(\"普通请求\")\n\nclass Adaptee:\n  def specific_request(self):\n    print(\"特殊请求\")\n\nclass Adapter(Tagret):\n  def __init__(self):\n    self.adaptee = Adaptee()\n\n  def request(self):\n    self.adaptee.specific_request()\n\ntagret = Adapter()\ntagret.request()\n```\n\n### 装饰器模式\n&emsp;&emsp; [装饰器][3]模式通常用于给一个对象扩展功能；\n```python\nimport functools\n\n# 定义一个装饰器\ndef memoize(fn):\n  known = dict()\n\n  @functools.wraps(fn)\n  def memoizer(*args):\n    if args not in known:\n      known[args] = fn(*args)\n    return known[args]\n  return memoizer\n\n# 返回前n个数的和\n@memoize\ndef nsum(n):\n  assert(n >= 0)  # 断言，n需要大于0\n  return 0 if n == 0 else n + nsum(n-1)\n\n# 返回菲波第n个数\n@memoize\ndef fibo(n):\n  assert (n >= 0)\n  return n if n in (0, 1) else fibo(n-1) + fibo(n-2)\n```\n\n### 外观模式(门面模式)\n&emsp;&emsp; 外观模式又叫做门面模式；在面向对象编程中，解耦\b是一种推崇的理念，但是事实上由于系统的复杂性，增加了客户端和子系统的耦合度，这时需要考虑使用外观模式，引入一个类对子系统进行包装，让客户端与其交互；\n\n&emsp;&emsp; 外观模式(Facade Pattern)：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。\n\n```python\nfrom enum import Enum\nfrom abc import ABC, abstractmethod\n\n# 定义一个枚举类\n# 对实例化对象固定的，我们可以用枚举类来定义；比如一年12个月是固定的\n# 枚举类是特殊的类，不能实例化对象\n# 我们可以通过类属性的方式获取枚举值，也可以通过遍历的方式获取\n# 枚举类中各个成员的值，不能在类的外部做任何修改\nState = Enum('State', ('new', 'running', 'sleeping', 'restart', 'zombie',))\n\n\nclass Server(ABC):\n  \"\"\"\n  abstractmethod装饰的方法是：\n  抽象方法 没有实现，所以基类不能实例化，子类实现了该抽象方法才能被实例化\n  \"\"\"\n  @abstractmethod  \n  def __init__(self):\n    pass\n  \n  def __str__(self):\n    return self.name\n\n  @abstractmethod\n  def boot(self):\n    pass\n\n  @abstractmethod\n  def kill(self, restart=True):\n    pass\n\n# 定义一个文件服务\nclass FileServer(Server):\n  def __init__(self):\n    self.name = \"File server\"\n    self.state = State.new\n\n  def boot(self):\n    # 启动文件进程\n    print(\"booting the {}\".format(self))\n    self.state = State.running\n  \n  def kill(self, restart=True):\n    # 终止文件进程\n    print(\"kill the {}\".format(self))\n    self.state = State.restart if restart else State.zombie\n\n  def create_file(self):\n    pass\n\n# 定义一个进程服务，类似于上面的文件服务\nclass ProcessServer(Server):\n  pass\n\n# 定义外观，统一的接口类\nclass OperateSys:\n  def __init__(self):\n    self.fs = FileServer()\n    self.ps = ProcessServer()\n\n  def start(self):\n    # 启动\n    [i.boot() for i in (self.fs, self.ps,)]\n\n  def close(self):\n    # 关闭\n    [i.kill() for i in (self.fs, self.ps,)]\n\n  def create_file(self):\n    self.fs.create_file()\n\ndef main():\n  ops = OperateSys()\n  ops.start()\n  ops.create_file()\n  ops.close()\n```\n\n### 享元模式\n运用共享技术有效地支持大量细粒度的对象。\n\n**内部状态：** 享元对象中不会随环境改变而改变的共享部分。比如围棋棋子的颜色。\n\n**外部状态：** 随环境改变而改变、不可以共享的状态就是外部状态。比如围棋棋子的位置。\n\n**应用场景：** 程序中使用了大量的对象，如果删除对象的外部状态，可以用相对较少的共享对象取代很多组对象，就可以考虑使用享元模式。\n\n```python\nfrom enum import Enum\n\nQiziColor = Enum('QiziColor', ('white', 'black',))\n\nclass Qizi:\n  # 定义棋子类\n  pool = dict()\n\n  def __new__(cls, qizi_color):\n    obj = cls.pool.get(qizi_color, None)\n    if not obj:\n      obj = object.__new__(cls)\n      cls.pool[qizi_color] = obj\n      obj.qizi_color = qizi_color\n    return obj\n  \n  def render(self, nums):\n    print(\"qizhi_color:{}, nums:{}\".format(self.qizi_color, nums))\n\ndef main():\n  qizi_count = 0\n  for i in range(4):\n    q1 = Qizi(QiziColor.white)\n    q1.render(i)\n    qizi_count += 1\n\n  for i in range(5):\n    q2 = Qizi(QiziColor.black)\n    q2.render(i)\n    qizi_count += 1\n\n  print(\"qizi render count: {}\".format(qizi_count))\n  print(\"qizi create count: {}\".format(len(Qizi.pool)))\n\n  q1 = Qizi(QiziColor.white)\n  q2 = Qizi(QiziColor.black)\n  q3 = Qizi(QiziColor.white)\n  print('{} == {}? {}'.format(id(q1), id(q2), id(q1)==id(q2)) )\n  print('{} == {}? {}'.format(id(q1), id(q3), id(q1)==id(q3)) )\n\n\"\"\"\nqizhi_color:QiziColor.white, nums:0\nqizhi_color:QiziColor.white, nums:1\nqizhi_color:QiziColor.white, nums:2\nqizhi_color:QiziColor.white, nums:3\nqizhi_color:QiziColor.black, nums:0\nqizhi_color:QiziColor.black, nums:1\nqizhi_color:QiziColor.black, nums:2\nqizhi_color:QiziColor.black, nums:3\nqizhi_color:QiziColor.black, nums:4\nqizi render count: 9\nqizi create count: 2\n140323920711864 == 140323920712144? False\n140323920711864 == 140323920711864? True\n\"\"\"\n```\n\n### 模型视图控制器模式(MVC)\n\n### 代理模式\n\n\n[//]:\n    这是注释标签，可以进行注释\n    \n[1]: https://blog.leslie168.com/posts/2865700901.html\n\n[2]: https://blog.leslie168.com/posts/2064489324.html\n\n[3]: https://blog.leslie168.com/posts/1404355314.html\n\n\n","source":"_posts/python常见设计模式2.md","raw":"---\ntitle: python常见设计模式(二)\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 设计模式\ncategories:\n  - python\n  - 设计模式\nkeywords: 设计模式\nabbrlink: 100580167\ndate: 2022-03-13 18:42:11\n---\n\n[python常见设计模式(一)][1]\n\n[python常见设计模式(三)][2]\n\n## 结构型模式\n- 适配器模式\n- 装饰器模式\n- 外观模式\n- 享元模式\n- 模型视图控制器模式(MVC)\n- 代理模式\n<!-- more -->\n\n### 适配器模式\n&emsp;&emsp; 所谓的适配器模式是指一种接口适配技术，它可以通过某个类来使用另一个与接口不兼容的类，运用此模式，两个类的接口都无需改动；\n\n&emsp;&emsp; 适配器模式主要应用于希望复用一些现存的类，但接口又与复用环境要求不一致的情况；\n```python\nclass Tagret:\n  def request(self):\n    print(\"普通请求\")\n\nclass Adaptee:\n  def specific_request(self):\n    print(\"特殊请求\")\n\nclass Adapter(Tagret):\n  def __init__(self):\n    self.adaptee = Adaptee()\n\n  def request(self):\n    self.adaptee.specific_request()\n\ntagret = Adapter()\ntagret.request()\n```\n\n### 装饰器模式\n&emsp;&emsp; [装饰器][3]模式通常用于给一个对象扩展功能；\n```python\nimport functools\n\n# 定义一个装饰器\ndef memoize(fn):\n  known = dict()\n\n  @functools.wraps(fn)\n  def memoizer(*args):\n    if args not in known:\n      known[args] = fn(*args)\n    return known[args]\n  return memoizer\n\n# 返回前n个数的和\n@memoize\ndef nsum(n):\n  assert(n >= 0)  # 断言，n需要大于0\n  return 0 if n == 0 else n + nsum(n-1)\n\n# 返回菲波第n个数\n@memoize\ndef fibo(n):\n  assert (n >= 0)\n  return n if n in (0, 1) else fibo(n-1) + fibo(n-2)\n```\n\n### 外观模式(门面模式)\n&emsp;&emsp; 外观模式又叫做门面模式；在面向对象编程中，解耦\b是一种推崇的理念，但是事实上由于系统的复杂性，增加了客户端和子系统的耦合度，这时需要考虑使用外观模式，引入一个类对子系统进行包装，让客户端与其交互；\n\n&emsp;&emsp; 外观模式(Facade Pattern)：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。\n\n```python\nfrom enum import Enum\nfrom abc import ABC, abstractmethod\n\n# 定义一个枚举类\n# 对实例化对象固定的，我们可以用枚举类来定义；比如一年12个月是固定的\n# 枚举类是特殊的类，不能实例化对象\n# 我们可以通过类属性的方式获取枚举值，也可以通过遍历的方式获取\n# 枚举类中各个成员的值，不能在类的外部做任何修改\nState = Enum('State', ('new', 'running', 'sleeping', 'restart', 'zombie',))\n\n\nclass Server(ABC):\n  \"\"\"\n  abstractmethod装饰的方法是：\n  抽象方法 没有实现，所以基类不能实例化，子类实现了该抽象方法才能被实例化\n  \"\"\"\n  @abstractmethod  \n  def __init__(self):\n    pass\n  \n  def __str__(self):\n    return self.name\n\n  @abstractmethod\n  def boot(self):\n    pass\n\n  @abstractmethod\n  def kill(self, restart=True):\n    pass\n\n# 定义一个文件服务\nclass FileServer(Server):\n  def __init__(self):\n    self.name = \"File server\"\n    self.state = State.new\n\n  def boot(self):\n    # 启动文件进程\n    print(\"booting the {}\".format(self))\n    self.state = State.running\n  \n  def kill(self, restart=True):\n    # 终止文件进程\n    print(\"kill the {}\".format(self))\n    self.state = State.restart if restart else State.zombie\n\n  def create_file(self):\n    pass\n\n# 定义一个进程服务，类似于上面的文件服务\nclass ProcessServer(Server):\n  pass\n\n# 定义外观，统一的接口类\nclass OperateSys:\n  def __init__(self):\n    self.fs = FileServer()\n    self.ps = ProcessServer()\n\n  def start(self):\n    # 启动\n    [i.boot() for i in (self.fs, self.ps,)]\n\n  def close(self):\n    # 关闭\n    [i.kill() for i in (self.fs, self.ps,)]\n\n  def create_file(self):\n    self.fs.create_file()\n\ndef main():\n  ops = OperateSys()\n  ops.start()\n  ops.create_file()\n  ops.close()\n```\n\n### 享元模式\n运用共享技术有效地支持大量细粒度的对象。\n\n**内部状态：** 享元对象中不会随环境改变而改变的共享部分。比如围棋棋子的颜色。\n\n**外部状态：** 随环境改变而改变、不可以共享的状态就是外部状态。比如围棋棋子的位置。\n\n**应用场景：** 程序中使用了大量的对象，如果删除对象的外部状态，可以用相对较少的共享对象取代很多组对象，就可以考虑使用享元模式。\n\n```python\nfrom enum import Enum\n\nQiziColor = Enum('QiziColor', ('white', 'black',))\n\nclass Qizi:\n  # 定义棋子类\n  pool = dict()\n\n  def __new__(cls, qizi_color):\n    obj = cls.pool.get(qizi_color, None)\n    if not obj:\n      obj = object.__new__(cls)\n      cls.pool[qizi_color] = obj\n      obj.qizi_color = qizi_color\n    return obj\n  \n  def render(self, nums):\n    print(\"qizhi_color:{}, nums:{}\".format(self.qizi_color, nums))\n\ndef main():\n  qizi_count = 0\n  for i in range(4):\n    q1 = Qizi(QiziColor.white)\n    q1.render(i)\n    qizi_count += 1\n\n  for i in range(5):\n    q2 = Qizi(QiziColor.black)\n    q2.render(i)\n    qizi_count += 1\n\n  print(\"qizi render count: {}\".format(qizi_count))\n  print(\"qizi create count: {}\".format(len(Qizi.pool)))\n\n  q1 = Qizi(QiziColor.white)\n  q2 = Qizi(QiziColor.black)\n  q3 = Qizi(QiziColor.white)\n  print('{} == {}? {}'.format(id(q1), id(q2), id(q1)==id(q2)) )\n  print('{} == {}? {}'.format(id(q1), id(q3), id(q1)==id(q3)) )\n\n\"\"\"\nqizhi_color:QiziColor.white, nums:0\nqizhi_color:QiziColor.white, nums:1\nqizhi_color:QiziColor.white, nums:2\nqizhi_color:QiziColor.white, nums:3\nqizhi_color:QiziColor.black, nums:0\nqizhi_color:QiziColor.black, nums:1\nqizhi_color:QiziColor.black, nums:2\nqizhi_color:QiziColor.black, nums:3\nqizhi_color:QiziColor.black, nums:4\nqizi render count: 9\nqizi create count: 2\n140323920711864 == 140323920712144? False\n140323920711864 == 140323920711864? True\n\"\"\"\n```\n\n### 模型视图控制器模式(MVC)\n\n### 代理模式\n\n\n[//]:\n    这是注释标签，可以进行注释\n    \n[1]: https://blog.leslie168.com/posts/2865700901.html\n\n[2]: https://blog.leslie168.com/posts/2064489324.html\n\n[3]: https://blog.leslie168.com/posts/1404355314.html\n\n\n","slug":"python常见设计模式2","published":1,"updated":"2022-03-15T16:06:27.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde084002m9jx3ehllc0zn","content":"<p><a href=\"https://blog.leslie168.com/posts/2865700901.html\">python常见设计模式(一)</a></p><p><a href=\"https://blog.leslie168.com/posts/2064489324.html\">python常见设计模式(三)</a></p><h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><ul><li>适配器模式</li><li>装饰器模式</li><li>外观模式</li><li>享元模式</li><li>模型视图控制器模式(MVC)</li><li>代理模式<a id=\"more\"></a></li></ul><h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><p>&emsp;&emsp; 所谓的适配器模式是指一种接口适配技术，它可以通过某个类来使用另一个与接口不兼容的类，运用此模式，两个类的接口都无需改动；</p><p>&emsp;&emsp; 适配器模式主要应用于希望复用一些现存的类，但接口又与复用环境要求不一致的情况；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tagret</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"普通请求\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adaptee</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">specific_request</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"特殊请求\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span><span class=\"params\">(Tagret)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.adaptee = Adaptee()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.adaptee.specific_request()</span><br><span class=\"line\"></span><br><span class=\"line\">tagret = Adapter()</span><br><span class=\"line\">tagret.request()</span><br></pre></td></tr></table></figure><h3 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h3><p>&emsp;&emsp; <a href=\"https://blog.leslie168.com/posts/1404355314.html\">装饰器</a>模式通常用于给一个对象扩展功能；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个装饰器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">memoize</span><span class=\"params\">(fn)</span>:</span></span><br><span class=\"line\">  known = dict()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">  @functools.wraps(fn)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">memoizer</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> known:</span><br><span class=\"line\">      known[args] = fn(*args)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> known[args]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> memoizer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回前n个数的和</span></span><br><span class=\"line\"><span class=\"meta\">@memoize</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nsum</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(n &gt;= <span class=\"number\">0</span>)  <span class=\"comment\"># 断言，n需要大于0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span> <span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">else</span> n + nsum(n<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回菲波第n个数</span></span><br><span class=\"line\"><span class=\"meta\">@memoize</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibo</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">assert</span> (n &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>) <span class=\"keyword\">else</span> fibo(n<span class=\"number\">-1</span>) + fibo(n<span class=\"number\">-2</span>)</span><br></pre></td></tr></table></figure><h3 id=\"外观模式-门面模式\"><a href=\"#外观模式-门面模式\" class=\"headerlink\" title=\"外观模式(门面模式)\"></a>外观模式(门面模式)</h3><p>&emsp;&emsp; 外观模式又叫做门面模式；在面向对象编程中，解耦\b是一种推崇的理念，但是事实上由于系统的复杂性，增加了客户端和子系统的耦合度，这时需要考虑使用外观模式，引入一个类对子系统进行包装，让客户端与其交互；</p><p>&emsp;&emsp; 外观模式(Facade Pattern)：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum</span><br><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> ABC, abstractmethod</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个枚举类</span></span><br><span class=\"line\"><span class=\"comment\"># 对实例化对象固定的，我们可以用枚举类来定义；比如一年12个月是固定的</span></span><br><span class=\"line\"><span class=\"comment\"># 枚举类是特殊的类，不能实例化对象</span></span><br><span class=\"line\"><span class=\"comment\"># 我们可以通过类属性的方式获取枚举值，也可以通过遍历的方式获取</span></span><br><span class=\"line\"><span class=\"comment\"># 枚举类中各个成员的值，不能在类的外部做任何修改</span></span><br><span class=\"line\">State = Enum(<span class=\"string\">'State'</span>, (<span class=\"string\">'new'</span>, <span class=\"string\">'running'</span>, <span class=\"string\">'sleeping'</span>, <span class=\"string\">'restart'</span>, <span class=\"string\">'zombie'</span>,))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span><span class=\"params\">(ABC)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">  abstractmethod装饰的方法是：</span></span><br><span class=\"line\"><span class=\"string\">  抽象方法 没有实现，所以基类不能实例化，子类实现了该抽象方法才能被实例化</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br><span class=\"line\"><span class=\"meta\">  @abstractmethod  </span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">  @abstractmethod</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">boot</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">  @abstractmethod</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">kill</span><span class=\"params\">(self, restart=True)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个文件服务</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileServer</span><span class=\"params\">(Server)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.name = <span class=\"string\">\"File server\"</span></span><br><span class=\"line\">    self.state = State.new</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">boot</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 启动文件进程</span></span><br><span class=\"line\">    print(<span class=\"string\">\"booting the &#123;&#125;\"</span>.format(self))</span><br><span class=\"line\">    self.state = State.running</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">kill</span><span class=\"params\">(self, restart=True)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 终止文件进程</span></span><br><span class=\"line\">    print(<span class=\"string\">\"kill the &#123;&#125;\"</span>.format(self))</span><br><span class=\"line\">    self.state = State.restart <span class=\"keyword\">if</span> restart <span class=\"keyword\">else</span> State.zombie</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_file</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个进程服务，类似于上面的文件服务</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessServer</span><span class=\"params\">(Server)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义外观，统一的接口类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperateSys</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.fs = FileServer()</span><br><span class=\"line\">    self.ps = ProcessServer()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 启动</span></span><br><span class=\"line\">    [i.boot() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> (self.fs, self.ps,)]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 关闭</span></span><br><span class=\"line\">    [i.kill() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> (self.fs, self.ps,)]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_file</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.fs.create_file()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  ops = OperateSys()</span><br><span class=\"line\">  ops.start()</span><br><span class=\"line\">  ops.create_file()</span><br><span class=\"line\">  ops.close()</span><br></pre></td></tr></table></figure><h3 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h3><p>运用共享技术有效地支持大量细粒度的对象。</p><p><strong>内部状态：</strong> 享元对象中不会随环境改变而改变的共享部分。比如围棋棋子的颜色。</p><p><strong>外部状态：</strong> 随环境改变而改变、不可以共享的状态就是外部状态。比如围棋棋子的位置。</p><p><strong>应用场景：</strong> 程序中使用了大量的对象，如果删除对象的外部状态，可以用相对较少的共享对象取代很多组对象，就可以考虑使用享元模式。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum</span><br><span class=\"line\"></span><br><span class=\"line\">QiziColor = Enum(<span class=\"string\">'QiziColor'</span>, (<span class=\"string\">'white'</span>, <span class=\"string\">'black'</span>,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Qizi</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 定义棋子类</span></span><br><span class=\"line\">  pool = dict()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, qizi_color)</span>:</span></span><br><span class=\"line\">    obj = cls.pool.get(qizi_color, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> obj:</span><br><span class=\"line\">      obj = object.__new__(cls)</span><br><span class=\"line\">      cls.pool[qizi_color] = obj</span><br><span class=\"line\">      obj.qizi_color = qizi_color</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">render</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"qizhi_color:&#123;&#125;, nums:&#123;&#125;\"</span>.format(self.qizi_color, nums))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  qizi_count = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">    q1 = Qizi(QiziColor.white)</span><br><span class=\"line\">    q1.render(i)</span><br><span class=\"line\">    qizi_count += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    q2 = Qizi(QiziColor.black)</span><br><span class=\"line\">    q2.render(i)</span><br><span class=\"line\">    qizi_count += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  print(<span class=\"string\">\"qizi render count: &#123;&#125;\"</span>.format(qizi_count))</span><br><span class=\"line\">  print(<span class=\"string\">\"qizi create count: &#123;&#125;\"</span>.format(len(Qizi.pool)))</span><br><span class=\"line\"></span><br><span class=\"line\">  q1 = Qizi(QiziColor.white)</span><br><span class=\"line\">  q2 = Qizi(QiziColor.black)</span><br><span class=\"line\">  q3 = Qizi(QiziColor.white)</span><br><span class=\"line\">  print(<span class=\"string\">'&#123;&#125; == &#123;&#125;? &#123;&#125;'</span>.format(id(q1), id(q2), id(q1)==id(q2)) )</span><br><span class=\"line\">  print(<span class=\"string\">'&#123;&#125; == &#123;&#125;? &#123;&#125;'</span>.format(id(q1), id(q3), id(q1)==id(q3)) )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.white, nums:0</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.white, nums:1</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.white, nums:2</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.white, nums:3</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.black, nums:0</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.black, nums:1</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.black, nums:2</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.black, nums:3</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.black, nums:4</span></span><br><span class=\"line\"><span class=\"string\">qizi render count: 9</span></span><br><span class=\"line\"><span class=\"string\">qizi create count: 2</span></span><br><span class=\"line\"><span class=\"string\">140323920711864 == 140323920712144? False</span></span><br><span class=\"line\"><span class=\"string\">140323920711864 == 140323920711864? True</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure><h3 id=\"模型视图控制器模式-MVC\"><a href=\"#模型视图控制器模式-MVC\" class=\"headerlink\" title=\"模型视图控制器模式(MVC)\"></a>模型视图控制器模式(MVC)</h3><h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3>","site":{"data":{}},"excerpt":"<p><a href=\"https://blog.leslie168.com/posts/2865700901.html\">python常见设计模式(一)</a></p><p><a href=\"https://blog.leslie168.com/posts/2064489324.html\">python常见设计模式(三)</a></p><h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><ul><li>适配器模式</li><li>装饰器模式</li><li>外观模式</li><li>享元模式</li><li>模型视图控制器模式(MVC)</li><li>代理模式","more":"</li></ul><h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><p>&emsp;&emsp; 所谓的适配器模式是指一种接口适配技术，它可以通过某个类来使用另一个与接口不兼容的类，运用此模式，两个类的接口都无需改动；</p><p>&emsp;&emsp; 适配器模式主要应用于希望复用一些现存的类，但接口又与复用环境要求不一致的情况；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tagret</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"普通请求\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adaptee</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">specific_request</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"特殊请求\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span><span class=\"params\">(Tagret)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.adaptee = Adaptee()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.adaptee.specific_request()</span><br><span class=\"line\"></span><br><span class=\"line\">tagret = Adapter()</span><br><span class=\"line\">tagret.request()</span><br></pre></td></tr></table></figure><h3 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h3><p>&emsp;&emsp; <a href=\"https://blog.leslie168.com/posts/1404355314.html\">装饰器</a>模式通常用于给一个对象扩展功能；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个装饰器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">memoize</span><span class=\"params\">(fn)</span>:</span></span><br><span class=\"line\">  known = dict()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">  @functools.wraps(fn)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">memoizer</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> args <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> known:</span><br><span class=\"line\">      known[args] = fn(*args)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> known[args]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> memoizer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回前n个数的和</span></span><br><span class=\"line\"><span class=\"meta\">@memoize</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nsum</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(n &gt;= <span class=\"number\">0</span>)  <span class=\"comment\"># 断言，n需要大于0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span> <span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">else</span> n + nsum(n<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回菲波第n个数</span></span><br><span class=\"line\"><span class=\"meta\">@memoize</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibo</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">assert</span> (n &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>) <span class=\"keyword\">else</span> fibo(n<span class=\"number\">-1</span>) + fibo(n<span class=\"number\">-2</span>)</span><br></pre></td></tr></table></figure><h3 id=\"外观模式-门面模式\"><a href=\"#外观模式-门面模式\" class=\"headerlink\" title=\"外观模式(门面模式)\"></a>外观模式(门面模式)</h3><p>&emsp;&emsp; 外观模式又叫做门面模式；在面向对象编程中，解耦\b是一种推崇的理念，但是事实上由于系统的复杂性，增加了客户端和子系统的耦合度，这时需要考虑使用外观模式，引入一个类对子系统进行包装，让客户端与其交互；</p><p>&emsp;&emsp; 外观模式(Facade Pattern)：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum</span><br><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> ABC, abstractmethod</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个枚举类</span></span><br><span class=\"line\"><span class=\"comment\"># 对实例化对象固定的，我们可以用枚举类来定义；比如一年12个月是固定的</span></span><br><span class=\"line\"><span class=\"comment\"># 枚举类是特殊的类，不能实例化对象</span></span><br><span class=\"line\"><span class=\"comment\"># 我们可以通过类属性的方式获取枚举值，也可以通过遍历的方式获取</span></span><br><span class=\"line\"><span class=\"comment\"># 枚举类中各个成员的值，不能在类的外部做任何修改</span></span><br><span class=\"line\">State = Enum(<span class=\"string\">'State'</span>, (<span class=\"string\">'new'</span>, <span class=\"string\">'running'</span>, <span class=\"string\">'sleeping'</span>, <span class=\"string\">'restart'</span>, <span class=\"string\">'zombie'</span>,))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span><span class=\"params\">(ABC)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">  abstractmethod装饰的方法是：</span></span><br><span class=\"line\"><span class=\"string\">  抽象方法 没有实现，所以基类不能实例化，子类实现了该抽象方法才能被实例化</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br><span class=\"line\"><span class=\"meta\">  @abstractmethod  </span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">  @abstractmethod</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">boot</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">  @abstractmethod</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">kill</span><span class=\"params\">(self, restart=True)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个文件服务</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileServer</span><span class=\"params\">(Server)</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.name = <span class=\"string\">\"File server\"</span></span><br><span class=\"line\">    self.state = State.new</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">boot</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 启动文件进程</span></span><br><span class=\"line\">    print(<span class=\"string\">\"booting the &#123;&#125;\"</span>.format(self))</span><br><span class=\"line\">    self.state = State.running</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">kill</span><span class=\"params\">(self, restart=True)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 终止文件进程</span></span><br><span class=\"line\">    print(<span class=\"string\">\"kill the &#123;&#125;\"</span>.format(self))</span><br><span class=\"line\">    self.state = State.restart <span class=\"keyword\">if</span> restart <span class=\"keyword\">else</span> State.zombie</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_file</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一个进程服务，类似于上面的文件服务</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessServer</span><span class=\"params\">(Server)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义外观，统一的接口类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperateSys</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.fs = FileServer()</span><br><span class=\"line\">    self.ps = ProcessServer()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 启动</span></span><br><span class=\"line\">    [i.boot() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> (self.fs, self.ps,)]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 关闭</span></span><br><span class=\"line\">    [i.kill() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> (self.fs, self.ps,)]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_file</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.fs.create_file()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  ops = OperateSys()</span><br><span class=\"line\">  ops.start()</span><br><span class=\"line\">  ops.create_file()</span><br><span class=\"line\">  ops.close()</span><br></pre></td></tr></table></figure><h3 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h3><p>运用共享技术有效地支持大量细粒度的对象。</p><p><strong>内部状态：</strong> 享元对象中不会随环境改变而改变的共享部分。比如围棋棋子的颜色。</p><p><strong>外部状态：</strong> 随环境改变而改变、不可以共享的状态就是外部状态。比如围棋棋子的位置。</p><p><strong>应用场景：</strong> 程序中使用了大量的对象，如果删除对象的外部状态，可以用相对较少的共享对象取代很多组对象，就可以考虑使用享元模式。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum</span><br><span class=\"line\"></span><br><span class=\"line\">QiziColor = Enum(<span class=\"string\">'QiziColor'</span>, (<span class=\"string\">'white'</span>, <span class=\"string\">'black'</span>,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Qizi</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 定义棋子类</span></span><br><span class=\"line\">  pool = dict()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, qizi_color)</span>:</span></span><br><span class=\"line\">    obj = cls.pool.get(qizi_color, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> obj:</span><br><span class=\"line\">      obj = object.__new__(cls)</span><br><span class=\"line\">      cls.pool[qizi_color] = obj</span><br><span class=\"line\">      obj.qizi_color = qizi_color</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">render</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"qizhi_color:&#123;&#125;, nums:&#123;&#125;\"</span>.format(self.qizi_color, nums))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  qizi_count = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">    q1 = Qizi(QiziColor.white)</span><br><span class=\"line\">    q1.render(i)</span><br><span class=\"line\">    qizi_count += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    q2 = Qizi(QiziColor.black)</span><br><span class=\"line\">    q2.render(i)</span><br><span class=\"line\">    qizi_count += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  print(<span class=\"string\">\"qizi render count: &#123;&#125;\"</span>.format(qizi_count))</span><br><span class=\"line\">  print(<span class=\"string\">\"qizi create count: &#123;&#125;\"</span>.format(len(Qizi.pool)))</span><br><span class=\"line\"></span><br><span class=\"line\">  q1 = Qizi(QiziColor.white)</span><br><span class=\"line\">  q2 = Qizi(QiziColor.black)</span><br><span class=\"line\">  q3 = Qizi(QiziColor.white)</span><br><span class=\"line\">  print(<span class=\"string\">'&#123;&#125; == &#123;&#125;? &#123;&#125;'</span>.format(id(q1), id(q2), id(q1)==id(q2)) )</span><br><span class=\"line\">  print(<span class=\"string\">'&#123;&#125; == &#123;&#125;? &#123;&#125;'</span>.format(id(q1), id(q3), id(q1)==id(q3)) )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.white, nums:0</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.white, nums:1</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.white, nums:2</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.white, nums:3</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.black, nums:0</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.black, nums:1</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.black, nums:2</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.black, nums:3</span></span><br><span class=\"line\"><span class=\"string\">qizhi_color:QiziColor.black, nums:4</span></span><br><span class=\"line\"><span class=\"string\">qizi render count: 9</span></span><br><span class=\"line\"><span class=\"string\">qizi create count: 2</span></span><br><span class=\"line\"><span class=\"string\">140323920711864 == 140323920712144? False</span></span><br><span class=\"line\"><span class=\"string\">140323920711864 == 140323920711864? True</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure><h3 id=\"模型视图控制器模式-MVC\"><a href=\"#模型视图控制器模式-MVC\" class=\"headerlink\" title=\"模型视图控制器模式(MVC)\"></a>模型视图控制器模式(MVC)</h3><h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3>"},{"title":"python返回每个月最大天数","type":"categories","copyright":true,"abbrlink":1415965986,"date":"2020-01-02T04:07:27.000Z","_content":"\n## python返回过去时间里的每月最大天数\n\n### 导包 \n```python\nimport datetime\n```\n\n### 代码\n\n<!--more-->\n\n```python\ndef get_date_list(num=1):\n    now = datetime.datetime.now()\n    year = now.strftime('%Y')\n    mon = now.strftime('%m')\n    day = now.strftime('%d')\n    date_list = []\n    date_list.append([day, mon, year])\n    temp = now\n    for i in range(1, num):\n        last_mon_day = temp - datetime.timedelta(days=temp.day)\n        last_day = last_mon_day.strftime('%d')\n        mon = last_mon_day.strftime('%m')\n        year = last_mon_day.strftime('%Y')\n        date_list.append([last_day, mon, year])\n        temp = last_mon_day\n    return date_list\n```\n\n```python\n# 返回过去一年每个月的时间\ndate_list = get_date_list(12)\nprint(date_list)\n```\n\n```python\n[['22', '06', '2018'], ['31', '05', '2018'], ['30', '04', '2018'], ['31', '03', '2018'], ['28', '02', '2018'], ['31', '01', '2018'], ['31', '12', '2017'], ['30', '11', '2017'], ['31', '10', '2017'], ['30', '09', '2017'], ['31', '08', '2017'], ['31', '07', '2017']]\n```\n","source":"_posts/python返回每个月最大天数.md","raw":"---\ntitle: python返回每个月最大天数\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 项目\ncategories:\n  - python\n  - 项目\nabbrlink: 1415965986\ndate: 2020-01-02 12:07:27\n---\n\n## python返回过去时间里的每月最大天数\n\n### 导包 \n```python\nimport datetime\n```\n\n### 代码\n\n<!--more-->\n\n```python\ndef get_date_list(num=1):\n    now = datetime.datetime.now()\n    year = now.strftime('%Y')\n    mon = now.strftime('%m')\n    day = now.strftime('%d')\n    date_list = []\n    date_list.append([day, mon, year])\n    temp = now\n    for i in range(1, num):\n        last_mon_day = temp - datetime.timedelta(days=temp.day)\n        last_day = last_mon_day.strftime('%d')\n        mon = last_mon_day.strftime('%m')\n        year = last_mon_day.strftime('%Y')\n        date_list.append([last_day, mon, year])\n        temp = last_mon_day\n    return date_list\n```\n\n```python\n# 返回过去一年每个月的时间\ndate_list = get_date_list(12)\nprint(date_list)\n```\n\n```python\n[['22', '06', '2018'], ['31', '05', '2018'], ['30', '04', '2018'], ['31', '03', '2018'], ['28', '02', '2018'], ['31', '01', '2018'], ['31', '12', '2017'], ['30', '11', '2017'], ['31', '10', '2017'], ['30', '09', '2017'], ['31', '08', '2017'], ['31', '07', '2017']]\n```\n","slug":"python返回每个月最大天数","published":1,"updated":"2022-03-13T11:49:16.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde086002r9jx3273bfi3h","content":"<h2 id=\"python返回过去时间里的每月最大天数\"><a href=\"#python返回过去时间里的每月最大天数\" class=\"headerlink\" title=\"python返回过去时间里的每月最大天数\"></a>python返回过去时间里的每月最大天数</h2><h3 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br></pre></td></tr></table></figure><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><a id=\"more\"></a><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_date_list</span><span class=\"params\">(num=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">    now = datetime.datetime.now()</span><br><span class=\"line\">    year = now.strftime(<span class=\"string\">'%Y'</span>)</span><br><span class=\"line\">    mon = now.strftime(<span class=\"string\">'%m'</span>)</span><br><span class=\"line\">    day = now.strftime(<span class=\"string\">'%d'</span>)</span><br><span class=\"line\">    date_list = []</span><br><span class=\"line\">    date_list.append([day, mon, year])</span><br><span class=\"line\">    temp = now</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, num):</span><br><span class=\"line\">        last_mon_day = temp - datetime.timedelta(days=temp.day)</span><br><span class=\"line\">        last_day = last_mon_day.strftime(<span class=\"string\">'%d'</span>)</span><br><span class=\"line\">        mon = last_mon_day.strftime(<span class=\"string\">'%m'</span>)</span><br><span class=\"line\">        year = last_mon_day.strftime(<span class=\"string\">'%Y'</span>)</span><br><span class=\"line\">        date_list.append([last_day, mon, year])</span><br><span class=\"line\">        temp = last_mon_day</span><br><span class=\"line\">    <span class=\"keyword\">return</span> date_list</span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 返回过去一年每个月的时间</span></span><br><span class=\"line\">date_list = get_date_list(<span class=\"number\">12</span>)</span><br><span class=\"line\">print(date_list)</span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"string\">'22'</span>, <span class=\"string\">'06'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'05'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'30'</span>, <span class=\"string\">'04'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'03'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'28'</span>, <span class=\"string\">'02'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'01'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'12'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'30'</span>, <span class=\"string\">'11'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'10'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'30'</span>, <span class=\"string\">'09'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'08'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'07'</span>, <span class=\"string\">'2017'</span>]]</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"python返回过去时间里的每月最大天数\"><a href=\"#python返回过去时间里的每月最大天数\" class=\"headerlink\" title=\"python返回过去时间里的每月最大天数\"></a>python返回过去时间里的每月最大天数</h2><h3 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br></pre></td></tr></table></figure><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_date_list</span><span class=\"params\">(num=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">    now = datetime.datetime.now()</span><br><span class=\"line\">    year = now.strftime(<span class=\"string\">'%Y'</span>)</span><br><span class=\"line\">    mon = now.strftime(<span class=\"string\">'%m'</span>)</span><br><span class=\"line\">    day = now.strftime(<span class=\"string\">'%d'</span>)</span><br><span class=\"line\">    date_list = []</span><br><span class=\"line\">    date_list.append([day, mon, year])</span><br><span class=\"line\">    temp = now</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, num):</span><br><span class=\"line\">        last_mon_day = temp - datetime.timedelta(days=temp.day)</span><br><span class=\"line\">        last_day = last_mon_day.strftime(<span class=\"string\">'%d'</span>)</span><br><span class=\"line\">        mon = last_mon_day.strftime(<span class=\"string\">'%m'</span>)</span><br><span class=\"line\">        year = last_mon_day.strftime(<span class=\"string\">'%Y'</span>)</span><br><span class=\"line\">        date_list.append([last_day, mon, year])</span><br><span class=\"line\">        temp = last_mon_day</span><br><span class=\"line\">    <span class=\"keyword\">return</span> date_list</span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 返回过去一年每个月的时间</span></span><br><span class=\"line\">date_list = get_date_list(<span class=\"number\">12</span>)</span><br><span class=\"line\">print(date_list)</span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"string\">'22'</span>, <span class=\"string\">'06'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'05'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'30'</span>, <span class=\"string\">'04'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'03'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'28'</span>, <span class=\"string\">'02'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'01'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'12'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'30'</span>, <span class=\"string\">'11'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'10'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'30'</span>, <span class=\"string\">'09'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'08'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'07'</span>, <span class=\"string\">'2017'</span>]]</span><br></pre></td></tr></table></figure>"},{"title":"python进行excel转json","type":"categories","copyright":true,"abbrlink":587870288,"date":"2020-01-02T03:36:53.000Z","_content":"## 使用python进行excel转json文件\n### 1、首先导入我们需要用到的库\n```python\nimport xlrd\nfrom collections import OrderedDict\nimport json\n```\n<!--more-->\n\n### 2、具体代码如下：\n```python\ndef Excel_to_json(file):\n    wb = xlrd.open_workbook(file)\n\n    convert_list = []\n    sh = wb.sheet_by_index(0)\n    title = sh.row_values(0)  # 表头，json文件的key\n    print(title)\n    for rownum in range(1, sh.nrows):\n        rowvalue = sh.row_values(rownum)\n        single = OrderedDict()  # 有序字典\n        for colnum in range(0, len(rowvalue)):\n            print(\"key:{0}, value:{1}\".format(title[colnum], rowvalue[colnum]))\n            single[title[colnum]] = rowvalue[colnum]\n        convert_list.append(single)\n\n    j = json.dumps(convert_list)\n\n    with open(\"file.json\", \"w\", encoding=\"utf8\") as f:\n        f.write(j)\n```\n## 使用python进行json转csv文件\n### 1、同样，我们先导入需要的库\n\n```python\nimport csv\nimport json\n```\n### 2、代码如下：\n\n```python\ndef json_to_csv(path):\n    with open(path + '.json', \"r\") as  f:\n        data = f.read()\n    jsonData = json.loads(data)\n\n    csvfile = open(path + \".csv\", \"w\", newline='')\n    keys_write = True\n    writer = csv.writer(csvfile)\n    print(jsonData)\n    for dic in jsonData:\n        if keys_write:\n            keys = list(dic.keys())\n            print(keys)\n            writer.writerow(keys)\n            keys_write = False\n        writer.writerow(list(dic.values()))\n        print(list(dic.values()))\n    csvfile.close()\n```\n\n```python\nif __name__ == \"__main__\":\n    path = \"file\"  # 文件的路径\n    json_to_csv(path)\n```\n","source":"_posts/python进行excel转json.md","raw":"---\ntitle: python进行excel转json\ntype: categories\ncopyright: true\ntags:\n  - 数据分析\n  - python\ncategories:\n  - python\n  - 数据分析\nabbrlink: 587870288\ndate: 2020-01-02 11:36:53\n---\n## 使用python进行excel转json文件\n### 1、首先导入我们需要用到的库\n```python\nimport xlrd\nfrom collections import OrderedDict\nimport json\n```\n<!--more-->\n\n### 2、具体代码如下：\n```python\ndef Excel_to_json(file):\n    wb = xlrd.open_workbook(file)\n\n    convert_list = []\n    sh = wb.sheet_by_index(0)\n    title = sh.row_values(0)  # 表头，json文件的key\n    print(title)\n    for rownum in range(1, sh.nrows):\n        rowvalue = sh.row_values(rownum)\n        single = OrderedDict()  # 有序字典\n        for colnum in range(0, len(rowvalue)):\n            print(\"key:{0}, value:{1}\".format(title[colnum], rowvalue[colnum]))\n            single[title[colnum]] = rowvalue[colnum]\n        convert_list.append(single)\n\n    j = json.dumps(convert_list)\n\n    with open(\"file.json\", \"w\", encoding=\"utf8\") as f:\n        f.write(j)\n```\n## 使用python进行json转csv文件\n### 1、同样，我们先导入需要的库\n\n```python\nimport csv\nimport json\n```\n### 2、代码如下：\n\n```python\ndef json_to_csv(path):\n    with open(path + '.json', \"r\") as  f:\n        data = f.read()\n    jsonData = json.loads(data)\n\n    csvfile = open(path + \".csv\", \"w\", newline='')\n    keys_write = True\n    writer = csv.writer(csvfile)\n    print(jsonData)\n    for dic in jsonData:\n        if keys_write:\n            keys = list(dic.keys())\n            print(keys)\n            writer.writerow(keys)\n            keys_write = False\n        writer.writerow(list(dic.values()))\n        print(list(dic.values()))\n    csvfile.close()\n```\n\n```python\nif __name__ == \"__main__\":\n    path = \"file\"  # 文件的路径\n    json_to_csv(path)\n```\n","slug":"python进行excel转json","published":1,"updated":"2022-03-13T11:49:16.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde087002u9jx33azv8xed","content":"<h2 id=\"使用python进行excel转json文件\"><a href=\"#使用python进行excel转json文件\" class=\"headerlink\" title=\"使用python进行excel转json文件\"></a>使用python进行excel转json文件</h2><h3 id=\"1、首先导入我们需要用到的库\"><a href=\"#1、首先导入我们需要用到的库\" class=\"headerlink\" title=\"1、首先导入我们需要用到的库\"></a>1、首先导入我们需要用到的库</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xlrd</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br></pre></td></tr></table></figure><a id=\"more\"></a><h3 id=\"2、具体代码如下：\"><a href=\"#2、具体代码如下：\" class=\"headerlink\" title=\"2、具体代码如下：\"></a>2、具体代码如下：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Excel_to_json</span><span class=\"params\">(file)</span>:</span></span><br><span class=\"line\">    wb = xlrd.open_workbook(file)</span><br><span class=\"line\"></span><br><span class=\"line\">    convert_list = []</span><br><span class=\"line\">    sh = wb.sheet_by_index(<span class=\"number\">0</span>)</span><br><span class=\"line\">    title = sh.row_values(<span class=\"number\">0</span>)  <span class=\"comment\"># 表头，json文件的key</span></span><br><span class=\"line\">    print(title)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> rownum <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, sh.nrows):</span><br><span class=\"line\">        rowvalue = sh.row_values(rownum)</span><br><span class=\"line\">        single = OrderedDict()  <span class=\"comment\"># 有序字典</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> colnum <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(rowvalue)):</span><br><span class=\"line\">            print(<span class=\"string\">\"key:&#123;0&#125;, value:&#123;1&#125;\"</span>.format(title[colnum], rowvalue[colnum]))</span><br><span class=\"line\">            single[title[colnum]] = rowvalue[colnum]</span><br><span class=\"line\">        convert_list.append(single)</span><br><span class=\"line\"></span><br><span class=\"line\">    j = json.dumps(convert_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"file.json\"</span>, <span class=\"string\">\"w\"</span>, encoding=<span class=\"string\">\"utf8\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(j)</span><br></pre></td></tr></table></figure><h2 id=\"使用python进行json转csv文件\"><a href=\"#使用python进行json转csv文件\" class=\"headerlink\" title=\"使用python进行json转csv文件\"></a>使用python进行json转csv文件</h2><h3 id=\"1、同样，我们先导入需要的库\"><a href=\"#1、同样，我们先导入需要的库\" class=\"headerlink\" title=\"1、同样，我们先导入需要的库\"></a>1、同样，我们先导入需要的库</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br></pre></td></tr></table></figure><h3 id=\"2、代码如下：\"><a href=\"#2、代码如下：\" class=\"headerlink\" title=\"2、代码如下：\"></a>2、代码如下：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">json_to_csv</span><span class=\"params\">(path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(path + <span class=\"string\">'.json'</span>, <span class=\"string\">\"r\"</span>) <span class=\"keyword\">as</span>  f:</span><br><span class=\"line\">        data = f.read()</span><br><span class=\"line\">    jsonData = json.loads(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    csvfile = open(path + <span class=\"string\">\".csv\"</span>, <span class=\"string\">\"w\"</span>, newline=<span class=\"string\">''</span>)</span><br><span class=\"line\">    keys_write = <span class=\"literal\">True</span></span><br><span class=\"line\">    writer = csv.writer(csvfile)</span><br><span class=\"line\">    print(jsonData)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> dic <span class=\"keyword\">in</span> jsonData:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> keys_write:</span><br><span class=\"line\">            keys = list(dic.keys())</span><br><span class=\"line\">            print(keys)</span><br><span class=\"line\">            writer.writerow(keys)</span><br><span class=\"line\">            keys_write = <span class=\"literal\">False</span></span><br><span class=\"line\">        writer.writerow(list(dic.values()))</span><br><span class=\"line\">        print(list(dic.values()))</span><br><span class=\"line\">    csvfile.close()</span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    path = <span class=\"string\">\"file\"</span>  <span class=\"comment\"># 文件的路径</span></span><br><span class=\"line\">    json_to_csv(path)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"使用python进行excel转json文件\"><a href=\"#使用python进行excel转json文件\" class=\"headerlink\" title=\"使用python进行excel转json文件\"></a>使用python进行excel转json文件</h2><h3 id=\"1、首先导入我们需要用到的库\"><a href=\"#1、首先导入我们需要用到的库\" class=\"headerlink\" title=\"1、首先导入我们需要用到的库\"></a>1、首先导入我们需要用到的库</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xlrd</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"2、具体代码如下：\"><a href=\"#2、具体代码如下：\" class=\"headerlink\" title=\"2、具体代码如下：\"></a>2、具体代码如下：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Excel_to_json</span><span class=\"params\">(file)</span>:</span></span><br><span class=\"line\">    wb = xlrd.open_workbook(file)</span><br><span class=\"line\"></span><br><span class=\"line\">    convert_list = []</span><br><span class=\"line\">    sh = wb.sheet_by_index(<span class=\"number\">0</span>)</span><br><span class=\"line\">    title = sh.row_values(<span class=\"number\">0</span>)  <span class=\"comment\"># 表头，json文件的key</span></span><br><span class=\"line\">    print(title)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> rownum <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, sh.nrows):</span><br><span class=\"line\">        rowvalue = sh.row_values(rownum)</span><br><span class=\"line\">        single = OrderedDict()  <span class=\"comment\"># 有序字典</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> colnum <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(rowvalue)):</span><br><span class=\"line\">            print(<span class=\"string\">\"key:&#123;0&#125;, value:&#123;1&#125;\"</span>.format(title[colnum], rowvalue[colnum]))</span><br><span class=\"line\">            single[title[colnum]] = rowvalue[colnum]</span><br><span class=\"line\">        convert_list.append(single)</span><br><span class=\"line\"></span><br><span class=\"line\">    j = json.dumps(convert_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"file.json\"</span>, <span class=\"string\">\"w\"</span>, encoding=<span class=\"string\">\"utf8\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(j)</span><br></pre></td></tr></table></figure><h2 id=\"使用python进行json转csv文件\"><a href=\"#使用python进行json转csv文件\" class=\"headerlink\" title=\"使用python进行json转csv文件\"></a>使用python进行json转csv文件</h2><h3 id=\"1、同样，我们先导入需要的库\"><a href=\"#1、同样，我们先导入需要的库\" class=\"headerlink\" title=\"1、同样，我们先导入需要的库\"></a>1、同样，我们先导入需要的库</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br></pre></td></tr></table></figure><h3 id=\"2、代码如下：\"><a href=\"#2、代码如下：\" class=\"headerlink\" title=\"2、代码如下：\"></a>2、代码如下：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">json_to_csv</span><span class=\"params\">(path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(path + <span class=\"string\">'.json'</span>, <span class=\"string\">\"r\"</span>) <span class=\"keyword\">as</span>  f:</span><br><span class=\"line\">        data = f.read()</span><br><span class=\"line\">    jsonData = json.loads(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    csvfile = open(path + <span class=\"string\">\".csv\"</span>, <span class=\"string\">\"w\"</span>, newline=<span class=\"string\">''</span>)</span><br><span class=\"line\">    keys_write = <span class=\"literal\">True</span></span><br><span class=\"line\">    writer = csv.writer(csvfile)</span><br><span class=\"line\">    print(jsonData)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> dic <span class=\"keyword\">in</span> jsonData:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> keys_write:</span><br><span class=\"line\">            keys = list(dic.keys())</span><br><span class=\"line\">            print(keys)</span><br><span class=\"line\">            writer.writerow(keys)</span><br><span class=\"line\">            keys_write = <span class=\"literal\">False</span></span><br><span class=\"line\">        writer.writerow(list(dic.values()))</span><br><span class=\"line\">        print(list(dic.values()))</span><br><span class=\"line\">    csvfile.close()</span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    path = <span class=\"string\">\"file\"</span>  <span class=\"comment\"># 文件的路径</span></span><br><span class=\"line\">    json_to_csv(path)</span><br></pre></td></tr></table></figure>"},{"title":"python版布隆过滤器(一)","type":"categories","copyright":true,"abbrlink":1886603895,"date":"2019-12-31T09:18:06.000Z","_content":"[python版布隆过滤器(二)][blom]\n\n## 布隆过滤器介绍\n本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure），特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存在”。\n\n相比于传统的 List、Set、Map 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。\n\n<!--more-->\n## 代码实现\n### 首先导包\n```python\n# -*-conding: utf8 -*-\nimport hashlib\nimport six\nimport redis\n```\n\n### 定义哈希Map类\n```python\nclass MultipleHash(object):\n    \"\"\"根据提供的原始数据，和预定义的多个salt，生成多个hash值\"\"\"\n    def __init__(self, salts, hash_func_name='md5'):\n        self.hash_func = getattr(hashlib, hash_func_name)\n        if len(salts) < 3:\n            raise Exception(\"please provide more than 3 element(salt) in the salts\")\n        self.salts = salts\n\n    def _safe_data(self, data):\n        \"\"\"\n        :param data: 原始数据\n        :return: 处理成对应python版本可以被hash函数的update方法解析的数据\n        \"\"\"\n        if six.PY3:\n            if isinstance(data, str):\n                return data.encode()\n            elif isinstance(data, bytes):\n                return data\n            else:\n                raise Exception(\"please provide a right str data\")\n        else:\n            if isinstance(data, unicode):\n                return data.encode()\n            elif isinstance(data, str):\n                return data\n            else:\n                raise  Exception(\"please provide a right str data\")\n\n    def get_hash_values(self, data):\n        \"\"\"根据提供的原始数据, 返回多个hash函数值\"\"\"\n        hash_values = []\n        hash_obj = self.hash_func()\n        for salt in self.salts:\n            hash_obj.update(self._safe_data(data))\n            hash_obj.update(self._safe_data(salt))\n            ret = hash_obj.hexdigest()\n            hash_values.append(int(ret, 16))\n        return hash_values\n```\n\n### 定义布隆过滤器\n```python\nclass BloomFilter(object):\n    \"\"\"布隆过滤器\"\"\"\n    def __init__(self, salts, redis_host=\"localhost\", redis_port=6379, redis_db=0, redis_key=\"bloomfilter\"):\n        self.redis_host = redis_host\n        self.redis_port = redis_port\n        self.redis_db = redis_db\n        self.redis_key = redis_key\n        self.client = self._get_redis_cli()\n        self.multiple_hash = MultipleHash(salts=salts)\n\n    def _get_redis_cli(self):\n        \"\"\"返回一个redis连接对象\"\"\"\n        pool = redis.ConnectionPool(host=self.redis_host, port=self.redis_port, db=self.redis_db)\n        client = redis.StrictRedis(connection_pool=pool)\n        return client\n\n    def save(self, data):\n        hash_values = self.multiple_hash.get_hash_values(data)\n        for hash_value in hash_values:\n            offset = self._get_offset(hash_value)\n            self.client.setbit(self.redis_key, offset, 1)  # default 0, set 1 when match\n        return True\n\n    def _get_offset(self, hash_value):\n        # (2**9 * 2**20 * 2**3): the len of hash list 哈希表的长度\n        return hash_value % (2**9 * 2**20 * 2**3)  # Mb -> bit\n        \n    def is_exists(self, data):\n        hash_values = self.multiple_hash.get_hash_values(data)\n        for hash_value in hash_values:\n            offset = self._get_offset(hash_value)\n            v = self.client.getbit(self.redis_key, offset)\n            if v == 0:\n                self.save(data)  # 如果不存在，保存数据\n                return False\n        return True\n```\n\n### 过滤器的使用\n```python\ndata = [\"asfdsafweafxc\", \"123\", \"123\", \"hello\", \"hello\", 'haha']\n    bm = BloomFilter(salts=['1', '2', '3', '4'], redis_host=\"10.0.12.191\", redis_db=1)\n    for d in data:\n        if not bm.is_exists(d):\n            print(\"mapping data success : %s\" % d)\n        else:\n            print(\"find replace data : %s\" % d)\n```\n\n[blom]: https://blog.leslie168.com/posts/3745698069.html\n","source":"_posts/python版布隆过滤器.md","raw":"---\ntitle: python版布隆过滤器(一)\ntype: categories\ncopyright: true\ntags:\n  - python\n  - redis\ncategories:\n  - 数据库\n  - redis\nabbrlink: 1886603895\ndate: 2019-12-31 17:18:06\n---\n[python版布隆过滤器(二)][blom]\n\n## 布隆过滤器介绍\n本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure），特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存在”。\n\n相比于传统的 List、Set、Map 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。\n\n<!--more-->\n## 代码实现\n### 首先导包\n```python\n# -*-conding: utf8 -*-\nimport hashlib\nimport six\nimport redis\n```\n\n### 定义哈希Map类\n```python\nclass MultipleHash(object):\n    \"\"\"根据提供的原始数据，和预定义的多个salt，生成多个hash值\"\"\"\n    def __init__(self, salts, hash_func_name='md5'):\n        self.hash_func = getattr(hashlib, hash_func_name)\n        if len(salts) < 3:\n            raise Exception(\"please provide more than 3 element(salt) in the salts\")\n        self.salts = salts\n\n    def _safe_data(self, data):\n        \"\"\"\n        :param data: 原始数据\n        :return: 处理成对应python版本可以被hash函数的update方法解析的数据\n        \"\"\"\n        if six.PY3:\n            if isinstance(data, str):\n                return data.encode()\n            elif isinstance(data, bytes):\n                return data\n            else:\n                raise Exception(\"please provide a right str data\")\n        else:\n            if isinstance(data, unicode):\n                return data.encode()\n            elif isinstance(data, str):\n                return data\n            else:\n                raise  Exception(\"please provide a right str data\")\n\n    def get_hash_values(self, data):\n        \"\"\"根据提供的原始数据, 返回多个hash函数值\"\"\"\n        hash_values = []\n        hash_obj = self.hash_func()\n        for salt in self.salts:\n            hash_obj.update(self._safe_data(data))\n            hash_obj.update(self._safe_data(salt))\n            ret = hash_obj.hexdigest()\n            hash_values.append(int(ret, 16))\n        return hash_values\n```\n\n### 定义布隆过滤器\n```python\nclass BloomFilter(object):\n    \"\"\"布隆过滤器\"\"\"\n    def __init__(self, salts, redis_host=\"localhost\", redis_port=6379, redis_db=0, redis_key=\"bloomfilter\"):\n        self.redis_host = redis_host\n        self.redis_port = redis_port\n        self.redis_db = redis_db\n        self.redis_key = redis_key\n        self.client = self._get_redis_cli()\n        self.multiple_hash = MultipleHash(salts=salts)\n\n    def _get_redis_cli(self):\n        \"\"\"返回一个redis连接对象\"\"\"\n        pool = redis.ConnectionPool(host=self.redis_host, port=self.redis_port, db=self.redis_db)\n        client = redis.StrictRedis(connection_pool=pool)\n        return client\n\n    def save(self, data):\n        hash_values = self.multiple_hash.get_hash_values(data)\n        for hash_value in hash_values:\n            offset = self._get_offset(hash_value)\n            self.client.setbit(self.redis_key, offset, 1)  # default 0, set 1 when match\n        return True\n\n    def _get_offset(self, hash_value):\n        # (2**9 * 2**20 * 2**3): the len of hash list 哈希表的长度\n        return hash_value % (2**9 * 2**20 * 2**3)  # Mb -> bit\n        \n    def is_exists(self, data):\n        hash_values = self.multiple_hash.get_hash_values(data)\n        for hash_value in hash_values:\n            offset = self._get_offset(hash_value)\n            v = self.client.getbit(self.redis_key, offset)\n            if v == 0:\n                self.save(data)  # 如果不存在，保存数据\n                return False\n        return True\n```\n\n### 过滤器的使用\n```python\ndata = [\"asfdsafweafxc\", \"123\", \"123\", \"hello\", \"hello\", 'haha']\n    bm = BloomFilter(salts=['1', '2', '3', '4'], redis_host=\"10.0.12.191\", redis_db=1)\n    for d in data:\n        if not bm.is_exists(d):\n            print(\"mapping data success : %s\" % d)\n        else:\n            print(\"find replace data : %s\" % d)\n```\n\n[blom]: https://blog.leslie168.com/posts/3745698069.html\n","slug":"python版布隆过滤器","published":1,"updated":"2022-03-13T13:46:11.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde089002z9jx35of72x02","content":"<p><a href=\"https://blog.leslie168.com/posts/3745698069.html\">python版布隆过滤器(二)</a></p><h2 id=\"布隆过滤器介绍\"><a href=\"#布隆过滤器介绍\" class=\"headerlink\" title=\"布隆过滤器介绍\"></a>布隆过滤器介绍</h2><p>本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure），特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存在”。</p><p>相比于传统的 List、Set、Map 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。</p><a id=\"more\"></a><h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"首先导包\"><a href=\"#首先导包\" class=\"headerlink\" title=\"首先导包\"></a>首先导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*-conding: utf8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> six</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br></pre></td></tr></table></figure><h3 id=\"定义哈希Map类\"><a href=\"#定义哈希Map类\" class=\"headerlink\" title=\"定义哈希Map类\"></a>定义哈希Map类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultipleHash</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"根据提供的原始数据，和预定义的多个salt，生成多个hash值\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, salts, hash_func_name=<span class=\"string\">'md5'</span>)</span>:</span></span><br><span class=\"line\">        self.hash_func = getattr(hashlib, hash_func_name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(salts) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"please provide more than 3 element(salt) in the salts\"</span>)</span><br><span class=\"line\">        self.salts = salts</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_safe_data</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :param data: 原始数据</span></span><br><span class=\"line\"><span class=\"string\">        :return: 处理成对应python版本可以被hash函数的update方法解析的数据</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> six.PY3:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(data, str):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data.encode()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> isinstance(data, bytes):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"please provide a right str data\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(data, unicode):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data.encode()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> isinstance(data, str):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span>  Exception(<span class=\"string\">\"please provide a right str data\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_hash_values</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"根据提供的原始数据, 返回多个hash函数值\"\"\"</span></span><br><span class=\"line\">        hash_values = []</span><br><span class=\"line\">        hash_obj = self.hash_func()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> salt <span class=\"keyword\">in</span> self.salts:</span><br><span class=\"line\">            hash_obj.update(self._safe_data(data))</span><br><span class=\"line\">            hash_obj.update(self._safe_data(salt))</span><br><span class=\"line\">            ret = hash_obj.hexdigest()</span><br><span class=\"line\">            hash_values.append(int(ret, <span class=\"number\">16</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash_values</span><br></pre></td></tr></table></figure><h3 id=\"定义布隆过滤器\"><a href=\"#定义布隆过滤器\" class=\"headerlink\" title=\"定义布隆过滤器\"></a>定义布隆过滤器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BloomFilter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"布隆过滤器\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, salts, redis_host=<span class=\"string\">\"localhost\"</span>, redis_port=<span class=\"number\">6379</span>, redis_db=<span class=\"number\">0</span>, redis_key=<span class=\"string\">\"bloomfilter\"</span>)</span>:</span></span><br><span class=\"line\">        self.redis_host = redis_host</span><br><span class=\"line\">        self.redis_port = redis_port</span><br><span class=\"line\">        self.redis_db = redis_db</span><br><span class=\"line\">        self.redis_key = redis_key</span><br><span class=\"line\">        self.client = self._get_redis_cli()</span><br><span class=\"line\">        self.multiple_hash = MultipleHash(salts=salts)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_redis_cli</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"返回一个redis连接对象\"\"\"</span></span><br><span class=\"line\">        pool = redis.ConnectionPool(host=self.redis_host, port=self.redis_port, db=self.redis_db)</span><br><span class=\"line\">        client = redis.StrictRedis(connection_pool=pool)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> client</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        hash_values = self.multiple_hash.get_hash_values(data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> hash_value <span class=\"keyword\">in</span> hash_values:</span><br><span class=\"line\">            offset = self._get_offset(hash_value)</span><br><span class=\"line\">            self.client.setbit(self.redis_key, offset, <span class=\"number\">1</span>)  <span class=\"comment\"># default 0, set 1 when match</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_offset</span><span class=\"params\">(self, hash_value)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># (2**9 * 2**20 * 2**3): the len of hash list 哈希表的长度</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash_value % (<span class=\"number\">2</span>**<span class=\"number\">9</span> * <span class=\"number\">2</span>**<span class=\"number\">20</span> * <span class=\"number\">2</span>**<span class=\"number\">3</span>)  <span class=\"comment\"># Mb -&gt; bit</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_exists</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        hash_values = self.multiple_hash.get_hash_values(data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> hash_value <span class=\"keyword\">in</span> hash_values:</span><br><span class=\"line\">            offset = self._get_offset(hash_value)</span><br><span class=\"line\">            v = self.client.getbit(self.redis_key, offset)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> v == <span class=\"number\">0</span>:</span><br><span class=\"line\">                self.save(data)  <span class=\"comment\"># 如果不存在，保存数据</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><h3 id=\"过滤器的使用\"><a href=\"#过滤器的使用\" class=\"headerlink\" title=\"过滤器的使用\"></a>过滤器的使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = [<span class=\"string\">\"asfdsafweafxc\"</span>, <span class=\"string\">\"123\"</span>, <span class=\"string\">\"123\"</span>, <span class=\"string\">\"hello\"</span>, <span class=\"string\">\"hello\"</span>, <span class=\"string\">'haha'</span>]</span><br><span class=\"line\">    bm = BloomFilter(salts=[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>], redis_host=<span class=\"string\">\"10.0.12.191\"</span>, redis_db=<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> bm.is_exists(d):</span><br><span class=\"line\">            print(<span class=\"string\">\"mapping data success : %s\"</span> % d)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"find replace data : %s\"</span> % d)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><a href=\"https://blog.leslie168.com/posts/3745698069.html\">python版布隆过滤器(二)</a></p><h2 id=\"布隆过滤器介绍\"><a href=\"#布隆过滤器介绍\" class=\"headerlink\" title=\"布隆过滤器介绍\"></a>布隆过滤器介绍</h2><p>本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure），特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存在”。</p><p>相比于传统的 List、Set、Map 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。</p>","more":"<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"首先导包\"><a href=\"#首先导包\" class=\"headerlink\" title=\"首先导包\"></a>首先导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*-conding: utf8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> six</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br></pre></td></tr></table></figure><h3 id=\"定义哈希Map类\"><a href=\"#定义哈希Map类\" class=\"headerlink\" title=\"定义哈希Map类\"></a>定义哈希Map类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultipleHash</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"根据提供的原始数据，和预定义的多个salt，生成多个hash值\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, salts, hash_func_name=<span class=\"string\">'md5'</span>)</span>:</span></span><br><span class=\"line\">        self.hash_func = getattr(hashlib, hash_func_name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(salts) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"please provide more than 3 element(salt) in the salts\"</span>)</span><br><span class=\"line\">        self.salts = salts</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_safe_data</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :param data: 原始数据</span></span><br><span class=\"line\"><span class=\"string\">        :return: 处理成对应python版本可以被hash函数的update方法解析的数据</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> six.PY3:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(data, str):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data.encode()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> isinstance(data, bytes):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"please provide a right str data\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(data, unicode):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data.encode()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> isinstance(data, str):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span>  Exception(<span class=\"string\">\"please provide a right str data\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_hash_values</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"根据提供的原始数据, 返回多个hash函数值\"\"\"</span></span><br><span class=\"line\">        hash_values = []</span><br><span class=\"line\">        hash_obj = self.hash_func()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> salt <span class=\"keyword\">in</span> self.salts:</span><br><span class=\"line\">            hash_obj.update(self._safe_data(data))</span><br><span class=\"line\">            hash_obj.update(self._safe_data(salt))</span><br><span class=\"line\">            ret = hash_obj.hexdigest()</span><br><span class=\"line\">            hash_values.append(int(ret, <span class=\"number\">16</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash_values</span><br></pre></td></tr></table></figure><h3 id=\"定义布隆过滤器\"><a href=\"#定义布隆过滤器\" class=\"headerlink\" title=\"定义布隆过滤器\"></a>定义布隆过滤器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BloomFilter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"布隆过滤器\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, salts, redis_host=<span class=\"string\">\"localhost\"</span>, redis_port=<span class=\"number\">6379</span>, redis_db=<span class=\"number\">0</span>, redis_key=<span class=\"string\">\"bloomfilter\"</span>)</span>:</span></span><br><span class=\"line\">        self.redis_host = redis_host</span><br><span class=\"line\">        self.redis_port = redis_port</span><br><span class=\"line\">        self.redis_db = redis_db</span><br><span class=\"line\">        self.redis_key = redis_key</span><br><span class=\"line\">        self.client = self._get_redis_cli()</span><br><span class=\"line\">        self.multiple_hash = MultipleHash(salts=salts)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_redis_cli</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"返回一个redis连接对象\"\"\"</span></span><br><span class=\"line\">        pool = redis.ConnectionPool(host=self.redis_host, port=self.redis_port, db=self.redis_db)</span><br><span class=\"line\">        client = redis.StrictRedis(connection_pool=pool)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> client</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        hash_values = self.multiple_hash.get_hash_values(data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> hash_value <span class=\"keyword\">in</span> hash_values:</span><br><span class=\"line\">            offset = self._get_offset(hash_value)</span><br><span class=\"line\">            self.client.setbit(self.redis_key, offset, <span class=\"number\">1</span>)  <span class=\"comment\"># default 0, set 1 when match</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_offset</span><span class=\"params\">(self, hash_value)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># (2**9 * 2**20 * 2**3): the len of hash list 哈希表的长度</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash_value % (<span class=\"number\">2</span>**<span class=\"number\">9</span> * <span class=\"number\">2</span>**<span class=\"number\">20</span> * <span class=\"number\">2</span>**<span class=\"number\">3</span>)  <span class=\"comment\"># Mb -&gt; bit</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_exists</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        hash_values = self.multiple_hash.get_hash_values(data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> hash_value <span class=\"keyword\">in</span> hash_values:</span><br><span class=\"line\">            offset = self._get_offset(hash_value)</span><br><span class=\"line\">            v = self.client.getbit(self.redis_key, offset)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> v == <span class=\"number\">0</span>:</span><br><span class=\"line\">                self.save(data)  <span class=\"comment\"># 如果不存在，保存数据</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><h3 id=\"过滤器的使用\"><a href=\"#过滤器的使用\" class=\"headerlink\" title=\"过滤器的使用\"></a>过滤器的使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = [<span class=\"string\">\"asfdsafweafxc\"</span>, <span class=\"string\">\"123\"</span>, <span class=\"string\">\"123\"</span>, <span class=\"string\">\"hello\"</span>, <span class=\"string\">\"hello\"</span>, <span class=\"string\">'haha'</span>]</span><br><span class=\"line\">    bm = BloomFilter(salts=[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>], redis_host=<span class=\"string\">\"10.0.12.191\"</span>, redis_db=<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> bm.is_exists(d):</span><br><span class=\"line\">            print(<span class=\"string\">\"mapping data success : %s\"</span> % d)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"find replace data : %s\"</span> % d)</span><br></pre></td></tr></table></figure>"},{"title":"redis的高可用机制","type":"categories","copyright":true,"keywords":"redis","abbrlink":1376421695,"date":"2022-03-10T23:57:59.000Z","_content":"\n\n## redis实现高可用机制的方法\n\nredis实现高可用机制需要用到\n- redis的主从复制\n- redis持久化机制\n- 哨兵机制\n- keepalived\n\n主从复制的作用：\n- 数据备份\n- 读写分离\n- 分布式集群\n- 实现高可用\n- 宕机容错机制\n\n<!-- more -->\n\n## redis的主从复制\n主从复制分为两个角色：master和slave，但是redis中只支持一个master，不像ngnix，mysql可以多主多从；\n\nredis的主从复制一般分为全量同步和增量同步；全量同步一般在slave初始化阶段，这时需要将master上的数据都复制一遍；\n\nredis主从复制，主数据库可以执行读写操作，从数据库只能进行读操作；\n\n### 全量同步\n- 当一个从数据库slave启动时，会向master发送sync命令；\n- master接收到sync命令后开始在后台保存快照(执行rdb操作)，并用缓存记录后续的写操作；\n- master保存好快照文件后，会发送给从数据库slave；\n- slave收到快照文件后，会丢弃所有的老数据，重新载入快照；\n- master发送完快照文件后，会向slave发送缓存的写命令；\n- 从数据库slave载入完快照后，开始接收命令请求，执行接收到的写命令；\n\n### 增量同步\nredis增量同步指的是slave已经完成了初始化阶段，正常工作运行，master发生的写操作同步到salve的过程；\n\n## redis的哨兵机制\nredis的哨兵机制需要主从复制支持；用于管理多个redis服务器；该系统主要执行以下三个操作\n- 监控\n\n&emsp;&emsp; 哨兵(sentinel)会不断检查master和slave是否正常工作；\n\n- 通知\n\n&emsp;&emsp; 当发现master或某个slave异常时，哨兵可以通过API向管理员或其他程序发送通知；\n\n- 自动故障迁移\n\n&emsp;&emsp; 当一个master不能正常运行时，哨兵会开始一次自动故障迁移操作，它会从slave中选择一个升级为新的master，并让其他的slave改为复制新的master，当客户端试图连接失效的master时，它应该返回新的master地址，使得集群可以用新的master来代替失效的master；\n\n哨兵(sentinel)是一个分布式系统，可以在一个架构中运行多个哨兵进程，这些进程使用流言协议(gossipprotocols)来接收关于master是否下线的信息，并使用投票协议(agreement protocols)来决定是否执行自动故障迁移操作，以及选择哪一个slave作为新的master服务器；\n\n“心跳检测”，每个哨兵会向其他哨兵，master，slave定时发送消息来确认对方状态，如果在设置的规定时间内没有获得响应，则暂时认为对方已经宕机，即主观认为宕机；\n\n如果多个哨兵都报告某个master没有响应，系统则会认为该master真正“死亡”，即客观认为宕机；这时就会从剩下的slave中选择一个升级为新的master，然后自动修改相关的配置；\n\n\n## 自动重启keepalived\n\nkeepalived主要通过虚拟路由冗余来实现高可用功能；\n","source":"_posts/redis的高可用机制.md","raw":"---\ntitle: redis的高可用机制\ntype: categories\ncopyright: true\ntags:\n  - 数据库\n  - redis\ncategories:\n  - 数据库\n  - redis\nkeywords: redis\nabbrlink: 1376421695\ndate: 2022-03-11 07:57:59\n---\n\n\n## redis实现高可用机制的方法\n\nredis实现高可用机制需要用到\n- redis的主从复制\n- redis持久化机制\n- 哨兵机制\n- keepalived\n\n主从复制的作用：\n- 数据备份\n- 读写分离\n- 分布式集群\n- 实现高可用\n- 宕机容错机制\n\n<!-- more -->\n\n## redis的主从复制\n主从复制分为两个角色：master和slave，但是redis中只支持一个master，不像ngnix，mysql可以多主多从；\n\nredis的主从复制一般分为全量同步和增量同步；全量同步一般在slave初始化阶段，这时需要将master上的数据都复制一遍；\n\nredis主从复制，主数据库可以执行读写操作，从数据库只能进行读操作；\n\n### 全量同步\n- 当一个从数据库slave启动时，会向master发送sync命令；\n- master接收到sync命令后开始在后台保存快照(执行rdb操作)，并用缓存记录后续的写操作；\n- master保存好快照文件后，会发送给从数据库slave；\n- slave收到快照文件后，会丢弃所有的老数据，重新载入快照；\n- master发送完快照文件后，会向slave发送缓存的写命令；\n- 从数据库slave载入完快照后，开始接收命令请求，执行接收到的写命令；\n\n### 增量同步\nredis增量同步指的是slave已经完成了初始化阶段，正常工作运行，master发生的写操作同步到salve的过程；\n\n## redis的哨兵机制\nredis的哨兵机制需要主从复制支持；用于管理多个redis服务器；该系统主要执行以下三个操作\n- 监控\n\n&emsp;&emsp; 哨兵(sentinel)会不断检查master和slave是否正常工作；\n\n- 通知\n\n&emsp;&emsp; 当发现master或某个slave异常时，哨兵可以通过API向管理员或其他程序发送通知；\n\n- 自动故障迁移\n\n&emsp;&emsp; 当一个master不能正常运行时，哨兵会开始一次自动故障迁移操作，它会从slave中选择一个升级为新的master，并让其他的slave改为复制新的master，当客户端试图连接失效的master时，它应该返回新的master地址，使得集群可以用新的master来代替失效的master；\n\n哨兵(sentinel)是一个分布式系统，可以在一个架构中运行多个哨兵进程，这些进程使用流言协议(gossipprotocols)来接收关于master是否下线的信息，并使用投票协议(agreement protocols)来决定是否执行自动故障迁移操作，以及选择哪一个slave作为新的master服务器；\n\n“心跳检测”，每个哨兵会向其他哨兵，master，slave定时发送消息来确认对方状态，如果在设置的规定时间内没有获得响应，则暂时认为对方已经宕机，即主观认为宕机；\n\n如果多个哨兵都报告某个master没有响应，系统则会认为该master真正“死亡”，即客观认为宕机；这时就会从剩下的slave中选择一个升级为新的master，然后自动修改相关的配置；\n\n\n## 自动重启keepalived\n\nkeepalived主要通过虚拟路由冗余来实现高可用功能；\n","slug":"redis的高可用机制","published":1,"updated":"2022-03-13T13:50:45.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde08a00329jx35npc38gv","content":"<h2 id=\"redis实现高可用机制的方法\"><a href=\"#redis实现高可用机制的方法\" class=\"headerlink\" title=\"redis实现高可用机制的方法\"></a>redis实现高可用机制的方法</h2><p>redis实现高可用机制需要用到</p><ul><li>redis的主从复制</li><li>redis持久化机制</li><li>哨兵机制</li><li>keepalived</li></ul><p>主从复制的作用：</p><ul><li>数据备份</li><li>读写分离</li><li>分布式集群</li><li>实现高可用</li><li>宕机容错机制</li></ul><a id=\"more\"></a><h2 id=\"redis的主从复制\"><a href=\"#redis的主从复制\" class=\"headerlink\" title=\"redis的主从复制\"></a>redis的主从复制</h2><p>主从复制分为两个角色：master和slave，但是redis中只支持一个master，不像ngnix，mysql可以多主多从；</p><p>redis的主从复制一般分为全量同步和增量同步；全量同步一般在slave初始化阶段，这时需要将master上的数据都复制一遍；</p><p>redis主从复制，主数据库可以执行读写操作，从数据库只能进行读操作；</p><h3 id=\"全量同步\"><a href=\"#全量同步\" class=\"headerlink\" title=\"全量同步\"></a>全量同步</h3><ul><li>当一个从数据库slave启动时，会向master发送sync命令；</li><li>master接收到sync命令后开始在后台保存快照(执行rdb操作)，并用缓存记录后续的写操作；</li><li>master保存好快照文件后，会发送给从数据库slave；</li><li>slave收到快照文件后，会丢弃所有的老数据，重新载入快照；</li><li>master发送完快照文件后，会向slave发送缓存的写命令；</li><li>从数据库slave载入完快照后，开始接收命令请求，执行接收到的写命令；</li></ul><h3 id=\"增量同步\"><a href=\"#增量同步\" class=\"headerlink\" title=\"增量同步\"></a>增量同步</h3><p>redis增量同步指的是slave已经完成了初始化阶段，正常工作运行，master发生的写操作同步到salve的过程；</p><h2 id=\"redis的哨兵机制\"><a href=\"#redis的哨兵机制\" class=\"headerlink\" title=\"redis的哨兵机制\"></a>redis的哨兵机制</h2><p>redis的哨兵机制需要主从复制支持；用于管理多个redis服务器；该系统主要执行以下三个操作</p><ul><li>监控</li></ul><p>&emsp;&emsp; 哨兵(sentinel)会不断检查master和slave是否正常工作；</p><ul><li>通知</li></ul><p>&emsp;&emsp; 当发现master或某个slave异常时，哨兵可以通过API向管理员或其他程序发送通知；</p><ul><li>自动故障迁移</li></ul><p>&emsp;&emsp; 当一个master不能正常运行时，哨兵会开始一次自动故障迁移操作，它会从slave中选择一个升级为新的master，并让其他的slave改为复制新的master，当客户端试图连接失效的master时，它应该返回新的master地址，使得集群可以用新的master来代替失效的master；</p><p>哨兵(sentinel)是一个分布式系统，可以在一个架构中运行多个哨兵进程，这些进程使用流言协议(gossipprotocols)来接收关于master是否下线的信息，并使用投票协议(agreement protocols)来决定是否执行自动故障迁移操作，以及选择哪一个slave作为新的master服务器；</p><p>“心跳检测”，每个哨兵会向其他哨兵，master，slave定时发送消息来确认对方状态，如果在设置的规定时间内没有获得响应，则暂时认为对方已经宕机，即主观认为宕机；</p><p>如果多个哨兵都报告某个master没有响应，系统则会认为该master真正“死亡”，即客观认为宕机；这时就会从剩下的slave中选择一个升级为新的master，然后自动修改相关的配置；</p><h2 id=\"自动重启keepalived\"><a href=\"#自动重启keepalived\" class=\"headerlink\" title=\"自动重启keepalived\"></a>自动重启keepalived</h2><p>keepalived主要通过虚拟路由冗余来实现高可用功能；</p>","site":{"data":{}},"excerpt":"<h2 id=\"redis实现高可用机制的方法\"><a href=\"#redis实现高可用机制的方法\" class=\"headerlink\" title=\"redis实现高可用机制的方法\"></a>redis实现高可用机制的方法</h2><p>redis实现高可用机制需要用到</p><ul><li>redis的主从复制</li><li>redis持久化机制</li><li>哨兵机制</li><li>keepalived</li></ul><p>主从复制的作用：</p><ul><li>数据备份</li><li>读写分离</li><li>分布式集群</li><li>实现高可用</li><li>宕机容错机制</li></ul>","more":"<h2 id=\"redis的主从复制\"><a href=\"#redis的主从复制\" class=\"headerlink\" title=\"redis的主从复制\"></a>redis的主从复制</h2><p>主从复制分为两个角色：master和slave，但是redis中只支持一个master，不像ngnix，mysql可以多主多从；</p><p>redis的主从复制一般分为全量同步和增量同步；全量同步一般在slave初始化阶段，这时需要将master上的数据都复制一遍；</p><p>redis主从复制，主数据库可以执行读写操作，从数据库只能进行读操作；</p><h3 id=\"全量同步\"><a href=\"#全量同步\" class=\"headerlink\" title=\"全量同步\"></a>全量同步</h3><ul><li>当一个从数据库slave启动时，会向master发送sync命令；</li><li>master接收到sync命令后开始在后台保存快照(执行rdb操作)，并用缓存记录后续的写操作；</li><li>master保存好快照文件后，会发送给从数据库slave；</li><li>slave收到快照文件后，会丢弃所有的老数据，重新载入快照；</li><li>master发送完快照文件后，会向slave发送缓存的写命令；</li><li>从数据库slave载入完快照后，开始接收命令请求，执行接收到的写命令；</li></ul><h3 id=\"增量同步\"><a href=\"#增量同步\" class=\"headerlink\" title=\"增量同步\"></a>增量同步</h3><p>redis增量同步指的是slave已经完成了初始化阶段，正常工作运行，master发生的写操作同步到salve的过程；</p><h2 id=\"redis的哨兵机制\"><a href=\"#redis的哨兵机制\" class=\"headerlink\" title=\"redis的哨兵机制\"></a>redis的哨兵机制</h2><p>redis的哨兵机制需要主从复制支持；用于管理多个redis服务器；该系统主要执行以下三个操作</p><ul><li>监控</li></ul><p>&emsp;&emsp; 哨兵(sentinel)会不断检查master和slave是否正常工作；</p><ul><li>通知</li></ul><p>&emsp;&emsp; 当发现master或某个slave异常时，哨兵可以通过API向管理员或其他程序发送通知；</p><ul><li>自动故障迁移</li></ul><p>&emsp;&emsp; 当一个master不能正常运行时，哨兵会开始一次自动故障迁移操作，它会从slave中选择一个升级为新的master，并让其他的slave改为复制新的master，当客户端试图连接失效的master时，它应该返回新的master地址，使得集群可以用新的master来代替失效的master；</p><p>哨兵(sentinel)是一个分布式系统，可以在一个架构中运行多个哨兵进程，这些进程使用流言协议(gossipprotocols)来接收关于master是否下线的信息，并使用投票协议(agreement protocols)来决定是否执行自动故障迁移操作，以及选择哪一个slave作为新的master服务器；</p><p>“心跳检测”，每个哨兵会向其他哨兵，master，slave定时发送消息来确认对方状态，如果在设置的规定时间内没有获得响应，则暂时认为对方已经宕机，即主观认为宕机；</p><p>如果多个哨兵都报告某个master没有响应，系统则会认为该master真正“死亡”，即客观认为宕机；这时就会从剩下的slave中选择一个升级为新的master，然后自动修改相关的配置；</p><h2 id=\"自动重启keepalived\"><a href=\"#自动重启keepalived\" class=\"headerlink\" title=\"自动重启keepalived\"></a>自动重启keepalived</h2><p>keepalived主要通过虚拟路由冗余来实现高可用功能；</p>"},{"title":"redis基础","type":"categories","copyright":true,"keywords":"redis","abbrlink":2025154759,"date":"2022-03-10T13:46:18.000Z","_content":"\n\n## redis数据库基础知识\n\n### redis常用的5种数据类型\n- string 字符串（可以为整形、浮点型和字符串，统称为元素）\n- list 列表（实现队列,元素不唯一，先入先出原则）\n- set 集合（各不相同的元素）\n- hash hash散列值（hash的key必须是唯一的）\n- sort set 有序集合\n\n### redis不常用的三种类型\n<!-- more -->\n- geospatial\n\n&emsp;&emsp;该功能可以推算出地理位置信息，两地之间的距离；\n- hyperloglog\n\n&emsp;&emsp;基数: 数学上集合的元素个数，不能重复；\n\n&emsp;&emsp; 该数据结构就是基于基数统计的算法，主要应用场景是计算网站的访问量；\n- bitmap\n\n&emsp;&emsp; 位图，通过最小单位bit来进行0或1的设置，表示某个元素对应的值或是状态；常用于统计用户的二元性信息，比如是否登录，是否打卡，性别等等；\n\n\n### redis到底是单线程还是多线程\nredis不能简单的说是单线程的，redis是单线程模型，指的是执行命令的核心模块是单线程的，就整个redis实例而言，在4.0之后的版本中引入了惰性删除，也叫异步删除，这是由额外的线程执行的，例如删除一个key,同步的话del key,异步的话就是unlink key;\n\n这样处理的优点就是不会使redis的主线程卡顿，把这些删除操作交给后台线程来执行；持久化，集群数据同步等等都是由额外的子线程执行的；\n\n### redis单线程高效的原因\n- 基于内存操作\n\n&emsp;&emsp;redis所有的数据都是存在内存中的，所有的运算都是内存级别的，所以性能比较高；\n- 数据结构简单\n\n&emsp;&emsp; redis的数据结构都是简单的基础类型的数据结构，这些类型数据结构的查询和操作的时间复杂度都是O(1)；\n\n- I/O多路复用的设计模式\n\n&emsp;&emsp;redis使用i/o多路复用来监听多个socket连接客户端，这样就可以使用单线程来处理多个情况；减少了线程切换和资源竞争的消耗，从而提高了效率；\n\n### redis的性能瓶颈\nredis是基于内存操作的，它的性能瓶颈来自于内存和网络带宽，而不是cpu，既然cpu不是主要原因，那么采用单线程模式是非常合适的；\n\n### redis的应用场景\n- [缓存][cache]\n- 排行榜\n- 任务队列\n- 计数(利用redis的原子递增)\n- 处理带有过期时间的任务\n\n\n### redis的回收策略\n- volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰\n\n- volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰\n\n- volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰\n\n- allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰\n\n- allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰\n\n- no-enviction（驱逐）：禁止驱逐数据，不回收\n\n使用策略规则：\n\n&emsp;&emsp; 1、如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用allkeys-lru；\n\n&emsp;&emsp; 2、如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用allkeys-random；\n\n\n[cache]: https://blog.leslie168.com/posts/3531308952.html\n","source":"_posts/redis基础信息.md","raw":"---\ntitle: redis基础\ntype: categories\ncopyright: true\ntags:\n  - 数据库\n  - redis\ncategories:\n  - 数据库\n  - redis\nkeywords: redis\nabbrlink: 2025154759\ndate: 2022-03-10 21:46:18\n---\n\n\n## redis数据库基础知识\n\n### redis常用的5种数据类型\n- string 字符串（可以为整形、浮点型和字符串，统称为元素）\n- list 列表（实现队列,元素不唯一，先入先出原则）\n- set 集合（各不相同的元素）\n- hash hash散列值（hash的key必须是唯一的）\n- sort set 有序集合\n\n### redis不常用的三种类型\n<!-- more -->\n- geospatial\n\n&emsp;&emsp;该功能可以推算出地理位置信息，两地之间的距离；\n- hyperloglog\n\n&emsp;&emsp;基数: 数学上集合的元素个数，不能重复；\n\n&emsp;&emsp; 该数据结构就是基于基数统计的算法，主要应用场景是计算网站的访问量；\n- bitmap\n\n&emsp;&emsp; 位图，通过最小单位bit来进行0或1的设置，表示某个元素对应的值或是状态；常用于统计用户的二元性信息，比如是否登录，是否打卡，性别等等；\n\n\n### redis到底是单线程还是多线程\nredis不能简单的说是单线程的，redis是单线程模型，指的是执行命令的核心模块是单线程的，就整个redis实例而言，在4.0之后的版本中引入了惰性删除，也叫异步删除，这是由额外的线程执行的，例如删除一个key,同步的话del key,异步的话就是unlink key;\n\n这样处理的优点就是不会使redis的主线程卡顿，把这些删除操作交给后台线程来执行；持久化，集群数据同步等等都是由额外的子线程执行的；\n\n### redis单线程高效的原因\n- 基于内存操作\n\n&emsp;&emsp;redis所有的数据都是存在内存中的，所有的运算都是内存级别的，所以性能比较高；\n- 数据结构简单\n\n&emsp;&emsp; redis的数据结构都是简单的基础类型的数据结构，这些类型数据结构的查询和操作的时间复杂度都是O(1)；\n\n- I/O多路复用的设计模式\n\n&emsp;&emsp;redis使用i/o多路复用来监听多个socket连接客户端，这样就可以使用单线程来处理多个情况；减少了线程切换和资源竞争的消耗，从而提高了效率；\n\n### redis的性能瓶颈\nredis是基于内存操作的，它的性能瓶颈来自于内存和网络带宽，而不是cpu，既然cpu不是主要原因，那么采用单线程模式是非常合适的；\n\n### redis的应用场景\n- [缓存][cache]\n- 排行榜\n- 任务队列\n- 计数(利用redis的原子递增)\n- 处理带有过期时间的任务\n\n\n### redis的回收策略\n- volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰\n\n- volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰\n\n- volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰\n\n- allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰\n\n- allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰\n\n- no-enviction（驱逐）：禁止驱逐数据，不回收\n\n使用策略规则：\n\n&emsp;&emsp; 1、如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用allkeys-lru；\n\n&emsp;&emsp; 2、如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用allkeys-random；\n\n\n[cache]: https://blog.leslie168.com/posts/3531308952.html\n","slug":"redis基础信息","published":1,"updated":"2022-03-13T13:49:25.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde08b00379jx357vm87jk","content":"<h2 id=\"redis数据库基础知识\"><a href=\"#redis数据库基础知识\" class=\"headerlink\" title=\"redis数据库基础知识\"></a>redis数据库基础知识</h2><h3 id=\"redis常用的5种数据类型\"><a href=\"#redis常用的5种数据类型\" class=\"headerlink\" title=\"redis常用的5种数据类型\"></a>redis常用的5种数据类型</h3><ul><li>string 字符串（可以为整形、浮点型和字符串，统称为元素）</li><li>list 列表（实现队列,元素不唯一，先入先出原则）</li><li>set 集合（各不相同的元素）</li><li>hash hash散列值（hash的key必须是唯一的）</li><li>sort set 有序集合</li></ul><h3 id=\"redis不常用的三种类型\"><a href=\"#redis不常用的三种类型\" class=\"headerlink\" title=\"redis不常用的三种类型\"></a>redis不常用的三种类型</h3><a id=\"more\"></a><ul><li>geospatial</li></ul><p>&emsp;&emsp;该功能可以推算出地理位置信息，两地之间的距离；</p><ul><li>hyperloglog</li></ul><p>&emsp;&emsp;基数: 数学上集合的元素个数，不能重复；</p><p>&emsp;&emsp; 该数据结构就是基于基数统计的算法，主要应用场景是计算网站的访问量；</p><ul><li>bitmap</li></ul><p>&emsp;&emsp; 位图，通过最小单位bit来进行0或1的设置，表示某个元素对应的值或是状态；常用于统计用户的二元性信息，比如是否登录，是否打卡，性别等等；</p><h3 id=\"redis到底是单线程还是多线程\"><a href=\"#redis到底是单线程还是多线程\" class=\"headerlink\" title=\"redis到底是单线程还是多线程\"></a>redis到底是单线程还是多线程</h3><p>redis不能简单的说是单线程的，redis是单线程模型，指的是执行命令的核心模块是单线程的，就整个redis实例而言，在4.0之后的版本中引入了惰性删除，也叫异步删除，这是由额外的线程执行的，例如删除一个key,同步的话del key,异步的话就是unlink key;</p><p>这样处理的优点就是不会使redis的主线程卡顿，把这些删除操作交给后台线程来执行；持久化，集群数据同步等等都是由额外的子线程执行的；</p><h3 id=\"redis单线程高效的原因\"><a href=\"#redis单线程高效的原因\" class=\"headerlink\" title=\"redis单线程高效的原因\"></a>redis单线程高效的原因</h3><ul><li>基于内存操作</li></ul><p>&emsp;&emsp;redis所有的数据都是存在内存中的，所有的运算都是内存级别的，所以性能比较高；</p><ul><li>数据结构简单</li></ul><p>&emsp;&emsp; redis的数据结构都是简单的基础类型的数据结构，这些类型数据结构的查询和操作的时间复杂度都是O(1)；</p><ul><li>I/O多路复用的设计模式</li></ul><p>&emsp;&emsp;redis使用i/o多路复用来监听多个socket连接客户端，这样就可以使用单线程来处理多个情况；减少了线程切换和资源竞争的消耗，从而提高了效率；</p><h3 id=\"redis的性能瓶颈\"><a href=\"#redis的性能瓶颈\" class=\"headerlink\" title=\"redis的性能瓶颈\"></a>redis的性能瓶颈</h3><p>redis是基于内存操作的，它的性能瓶颈来自于内存和网络带宽，而不是cpu，既然cpu不是主要原因，那么采用单线程模式是非常合适的；</p><h3 id=\"redis的应用场景\"><a href=\"#redis的应用场景\" class=\"headerlink\" title=\"redis的应用场景\"></a>redis的应用场景</h3><ul><li><a href=\"https://blog.leslie168.com/posts/3531308952.html\">缓存</a></li><li>排行榜</li><li>任务队列</li><li>计数(利用redis的原子递增)</li><li>处理带有过期时间的任务</li></ul><h3 id=\"redis的回收策略\"><a href=\"#redis的回收策略\" class=\"headerlink\" title=\"redis的回收策略\"></a>redis的回收策略</h3><ul><li><p>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</p></li><li><p>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</p></li><li><p>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</p></li><li><p>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</p></li><li><p>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</p></li><li><p>no-enviction（驱逐）：禁止驱逐数据，不回收</p></li></ul><p>使用策略规则：</p><p>&emsp;&emsp; 1、如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用allkeys-lru；</p><p>&emsp;&emsp; 2、如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用allkeys-random；</p>","site":{"data":{}},"excerpt":"<h2 id=\"redis数据库基础知识\"><a href=\"#redis数据库基础知识\" class=\"headerlink\" title=\"redis数据库基础知识\"></a>redis数据库基础知识</h2><h3 id=\"redis常用的5种数据类型\"><a href=\"#redis常用的5种数据类型\" class=\"headerlink\" title=\"redis常用的5种数据类型\"></a>redis常用的5种数据类型</h3><ul><li>string 字符串（可以为整形、浮点型和字符串，统称为元素）</li><li>list 列表（实现队列,元素不唯一，先入先出原则）</li><li>set 集合（各不相同的元素）</li><li>hash hash散列值（hash的key必须是唯一的）</li><li>sort set 有序集合</li></ul><h3 id=\"redis不常用的三种类型\"><a href=\"#redis不常用的三种类型\" class=\"headerlink\" title=\"redis不常用的三种类型\"></a>redis不常用的三种类型</h3>","more":"<ul><li>geospatial</li></ul><p>&emsp;&emsp;该功能可以推算出地理位置信息，两地之间的距离；</p><ul><li>hyperloglog</li></ul><p>&emsp;&emsp;基数: 数学上集合的元素个数，不能重复；</p><p>&emsp;&emsp; 该数据结构就是基于基数统计的算法，主要应用场景是计算网站的访问量；</p><ul><li>bitmap</li></ul><p>&emsp;&emsp; 位图，通过最小单位bit来进行0或1的设置，表示某个元素对应的值或是状态；常用于统计用户的二元性信息，比如是否登录，是否打卡，性别等等；</p><h3 id=\"redis到底是单线程还是多线程\"><a href=\"#redis到底是单线程还是多线程\" class=\"headerlink\" title=\"redis到底是单线程还是多线程\"></a>redis到底是单线程还是多线程</h3><p>redis不能简单的说是单线程的，redis是单线程模型，指的是执行命令的核心模块是单线程的，就整个redis实例而言，在4.0之后的版本中引入了惰性删除，也叫异步删除，这是由额外的线程执行的，例如删除一个key,同步的话del key,异步的话就是unlink key;</p><p>这样处理的优点就是不会使redis的主线程卡顿，把这些删除操作交给后台线程来执行；持久化，集群数据同步等等都是由额外的子线程执行的；</p><h3 id=\"redis单线程高效的原因\"><a href=\"#redis单线程高效的原因\" class=\"headerlink\" title=\"redis单线程高效的原因\"></a>redis单线程高效的原因</h3><ul><li>基于内存操作</li></ul><p>&emsp;&emsp;redis所有的数据都是存在内存中的，所有的运算都是内存级别的，所以性能比较高；</p><ul><li>数据结构简单</li></ul><p>&emsp;&emsp; redis的数据结构都是简单的基础类型的数据结构，这些类型数据结构的查询和操作的时间复杂度都是O(1)；</p><ul><li>I/O多路复用的设计模式</li></ul><p>&emsp;&emsp;redis使用i/o多路复用来监听多个socket连接客户端，这样就可以使用单线程来处理多个情况；减少了线程切换和资源竞争的消耗，从而提高了效率；</p><h3 id=\"redis的性能瓶颈\"><a href=\"#redis的性能瓶颈\" class=\"headerlink\" title=\"redis的性能瓶颈\"></a>redis的性能瓶颈</h3><p>redis是基于内存操作的，它的性能瓶颈来自于内存和网络带宽，而不是cpu，既然cpu不是主要原因，那么采用单线程模式是非常合适的；</p><h3 id=\"redis的应用场景\"><a href=\"#redis的应用场景\" class=\"headerlink\" title=\"redis的应用场景\"></a>redis的应用场景</h3><ul><li><a href=\"https://blog.leslie168.com/posts/3531308952.html\">缓存</a></li><li>排行榜</li><li>任务队列</li><li>计数(利用redis的原子递增)</li><li>处理带有过期时间的任务</li></ul><h3 id=\"redis的回收策略\"><a href=\"#redis的回收策略\" class=\"headerlink\" title=\"redis的回收策略\"></a>redis的回收策略</h3><ul><li><p>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</p></li><li><p>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</p></li><li><p>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</p></li><li><p>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</p></li><li><p>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</p></li><li><p>no-enviction（驱逐）：禁止驱逐数据，不回收</p></li></ul><p>使用策略规则：</p><p>&emsp;&emsp; 1、如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用allkeys-lru；</p><p>&emsp;&emsp; 2、如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用allkeys-random；</p>"},{"title":"redis缓存","type":"categories","copyright":true,"keywords":"redis","abbrlink":3531308952,"date":"2022-03-10T15:07:19.000Z","_content":"\n\n## redis关于缓存的一些问题\n&emsp;&emsp; 缓存的作用：前台发送获取数据的请求，后台先查询缓存是否有需要的数据，存在则直接返回结果，不存在则从数据库中查询，查询到数据则更新缓存，返回结果，没有查询到返回定义的状态信息；\n\n&emsp;&emsp;业务场景中，当我们需要设计一个缓存系统时，不得不考虑缓存所面对的一些问题\n- 缓存穿透\n- 缓存击穿\n- 缓存雪崩\n<!-- more -->\n### 缓存穿透\n- 描述：\n\n&emsp;&emsp;缓存穿透是指缓存和数据库中都没有数据，用户不断的发送请求，由于缓存是不命中被动写入的，而出于容错考虑，存储层数据库查不到数据则不写入缓存，这将导致每个请求都会进行数据库的查询，失去了缓存的意义；\n- 场景：\n\n&emsp;&emsp; 可能会有人利用不存在的key频繁的请求数据，导致数据库压力过大甚至直接挂掉；\n\n- 解决方案：\n\n&emsp;&emsp; 1、接口层进行key的校验，比如用户鉴权校验，用户ID校验；能够确定不存在key的直接进行拦截；\n\n&emsp;&emsp; 2、对不存在的key直接设置空值，设置过期时间，避免用户短时间用同一个key频繁请求；\n\n&emsp;&emsp; 3、[使用布隆过滤器][blom]\n\n\n### 缓存击穿\n- 描述：\n\n&emsp;&emsp; 缓存击穿是指缓存中没有的数据但是存储层数据库中有的数据，一般出现的情况是缓存时间到期了，这时由于并发用户请求太多，同时读取缓存没有数据，又同时去查询数据库，导致数据库压力过大；\n\n- 解决方案：\n\n&emsp;&emsp; 1、设置热点数据不过期或加大过期时间；\n\n&emsp;&emsp; 2、接口限流，熔断，降级；重要的接口做好限流策略，防止用户恶意刷接口；当接口中的某些服务不可用时，进行熔断，失败快速返回机制；\n\n&emsp;&emsp; 3、加互斥锁；第一个读取缓存的请求发现没有数据则获取锁，查询数据库更新缓存后释放锁并返回结果，则其他线程请求获取锁失败则等待并重新从缓存中读取数据；\n\n\n### 缓存雪崩\n\n- 描述：\n\n&emsp;&emsp; 缓存雪崩是指缓存中的数据大批量到过期时间，而查询数据量过大，引起数据库压力过大甚至宕机；和缓存击穿的区别在于缓存击穿是并发查询同一条数据，缓存雪崩是大批量不同数据到过期时间失效从而查询数据库；\n\n- 解决方案：\n\n&emsp;&emsp; 1、缓存数据的过期时间随机设定，防止同一时间大批量的数据过期失效；\n\n&emsp;&emsp; 2、分布式部署缓存的话，将热点数据均匀分布在不同的缓存数据库中；\n\n&emsp;&emsp; 3、设置热点数据不过期；\n\n[blom]: https://blog.leslie168.com/posts/1886603895.html\n","source":"_posts/redis缓存.md","raw":"---\ntitle: redis缓存\ntype: categories\ncopyright: true\ntags:\n  - 数据库\n  - redis\ncategories:\n  - 数据库\n  - redis\nkeywords: redis\nabbrlink: 3531308952\ndate: 2022-03-10 23:07:19\n---\n\n\n## redis关于缓存的一些问题\n&emsp;&emsp; 缓存的作用：前台发送获取数据的请求，后台先查询缓存是否有需要的数据，存在则直接返回结果，不存在则从数据库中查询，查询到数据则更新缓存，返回结果，没有查询到返回定义的状态信息；\n\n&emsp;&emsp;业务场景中，当我们需要设计一个缓存系统时，不得不考虑缓存所面对的一些问题\n- 缓存穿透\n- 缓存击穿\n- 缓存雪崩\n<!-- more -->\n### 缓存穿透\n- 描述：\n\n&emsp;&emsp;缓存穿透是指缓存和数据库中都没有数据，用户不断的发送请求，由于缓存是不命中被动写入的，而出于容错考虑，存储层数据库查不到数据则不写入缓存，这将导致每个请求都会进行数据库的查询，失去了缓存的意义；\n- 场景：\n\n&emsp;&emsp; 可能会有人利用不存在的key频繁的请求数据，导致数据库压力过大甚至直接挂掉；\n\n- 解决方案：\n\n&emsp;&emsp; 1、接口层进行key的校验，比如用户鉴权校验，用户ID校验；能够确定不存在key的直接进行拦截；\n\n&emsp;&emsp; 2、对不存在的key直接设置空值，设置过期时间，避免用户短时间用同一个key频繁请求；\n\n&emsp;&emsp; 3、[使用布隆过滤器][blom]\n\n\n### 缓存击穿\n- 描述：\n\n&emsp;&emsp; 缓存击穿是指缓存中没有的数据但是存储层数据库中有的数据，一般出现的情况是缓存时间到期了，这时由于并发用户请求太多，同时读取缓存没有数据，又同时去查询数据库，导致数据库压力过大；\n\n- 解决方案：\n\n&emsp;&emsp; 1、设置热点数据不过期或加大过期时间；\n\n&emsp;&emsp; 2、接口限流，熔断，降级；重要的接口做好限流策略，防止用户恶意刷接口；当接口中的某些服务不可用时，进行熔断，失败快速返回机制；\n\n&emsp;&emsp; 3、加互斥锁；第一个读取缓存的请求发现没有数据则获取锁，查询数据库更新缓存后释放锁并返回结果，则其他线程请求获取锁失败则等待并重新从缓存中读取数据；\n\n\n### 缓存雪崩\n\n- 描述：\n\n&emsp;&emsp; 缓存雪崩是指缓存中的数据大批量到过期时间，而查询数据量过大，引起数据库压力过大甚至宕机；和缓存击穿的区别在于缓存击穿是并发查询同一条数据，缓存雪崩是大批量不同数据到过期时间失效从而查询数据库；\n\n- 解决方案：\n\n&emsp;&emsp; 1、缓存数据的过期时间随机设定，防止同一时间大批量的数据过期失效；\n\n&emsp;&emsp; 2、分布式部署缓存的话，将热点数据均匀分布在不同的缓存数据库中；\n\n&emsp;&emsp; 3、设置热点数据不过期；\n\n[blom]: https://blog.leslie168.com/posts/1886603895.html\n","slug":"redis缓存","published":1,"updated":"2022-03-13T13:48:01.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde08c003a9jx38c918qjn","content":"<h2 id=\"redis关于缓存的一些问题\"><a href=\"#redis关于缓存的一些问题\" class=\"headerlink\" title=\"redis关于缓存的一些问题\"></a>redis关于缓存的一些问题</h2><p>&emsp;&emsp; 缓存的作用：前台发送获取数据的请求，后台先查询缓存是否有需要的数据，存在则直接返回结果，不存在则从数据库中查询，查询到数据则更新缓存，返回结果，没有查询到返回定义的状态信息；</p><p>&emsp;&emsp;业务场景中，当我们需要设计一个缓存系统时，不得不考虑缓存所面对的一些问题</p><ul><li>缓存穿透</li><li>缓存击穿</li><li>缓存雪崩<a id=\"more\"></a><h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3></li><li>描述：</li></ul><p>&emsp;&emsp;缓存穿透是指缓存和数据库中都没有数据，用户不断的发送请求，由于缓存是不命中被动写入的，而出于容错考虑，存储层数据库查不到数据则不写入缓存，这将导致每个请求都会进行数据库的查询，失去了缓存的意义；</p><ul><li>场景：</li></ul><p>&emsp;&emsp; 可能会有人利用不存在的key频繁的请求数据，导致数据库压力过大甚至直接挂掉；</p><ul><li>解决方案：</li></ul><p>&emsp;&emsp; 1、接口层进行key的校验，比如用户鉴权校验，用户ID校验；能够确定不存在key的直接进行拦截；</p><p>&emsp;&emsp; 2、对不存在的key直接设置空值，设置过期时间，避免用户短时间用同一个key频繁请求；</p><p>&emsp;&emsp; 3、<a href=\"https://blog.leslie168.com/posts/1886603895.html\">使用布隆过滤器</a></p><h3 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h3><ul><li>描述：</li></ul><p>&emsp;&emsp; 缓存击穿是指缓存中没有的数据但是存储层数据库中有的数据，一般出现的情况是缓存时间到期了，这时由于并发用户请求太多，同时读取缓存没有数据，又同时去查询数据库，导致数据库压力过大；</p><ul><li>解决方案：</li></ul><p>&emsp;&emsp; 1、设置热点数据不过期或加大过期时间；</p><p>&emsp;&emsp; 2、接口限流，熔断，降级；重要的接口做好限流策略，防止用户恶意刷接口；当接口中的某些服务不可用时，进行熔断，失败快速返回机制；</p><p>&emsp;&emsp; 3、加互斥锁；第一个读取缓存的请求发现没有数据则获取锁，查询数据库更新缓存后释放锁并返回结果，则其他线程请求获取锁失败则等待并重新从缓存中读取数据；</p><h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><ul><li>描述：</li></ul><p>&emsp;&emsp; 缓存雪崩是指缓存中的数据大批量到过期时间，而查询数据量过大，引起数据库压力过大甚至宕机；和缓存击穿的区别在于缓存击穿是并发查询同一条数据，缓存雪崩是大批量不同数据到过期时间失效从而查询数据库；</p><ul><li>解决方案：</li></ul><p>&emsp;&emsp; 1、缓存数据的过期时间随机设定，防止同一时间大批量的数据过期失效；</p><p>&emsp;&emsp; 2、分布式部署缓存的话，将热点数据均匀分布在不同的缓存数据库中；</p><p>&emsp;&emsp; 3、设置热点数据不过期；</p>","site":{"data":{}},"excerpt":"<h2 id=\"redis关于缓存的一些问题\"><a href=\"#redis关于缓存的一些问题\" class=\"headerlink\" title=\"redis关于缓存的一些问题\"></a>redis关于缓存的一些问题</h2><p>&emsp;&emsp; 缓存的作用：前台发送获取数据的请求，后台先查询缓存是否有需要的数据，存在则直接返回结果，不存在则从数据库中查询，查询到数据则更新缓存，返回结果，没有查询到返回定义的状态信息；</p><p>&emsp;&emsp;业务场景中，当我们需要设计一个缓存系统时，不得不考虑缓存所面对的一些问题</p><ul><li>缓存穿透</li><li>缓存击穿</li><li>缓存雪崩","more":"<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3></li><li>描述：</li></ul><p>&emsp;&emsp;缓存穿透是指缓存和数据库中都没有数据，用户不断的发送请求，由于缓存是不命中被动写入的，而出于容错考虑，存储层数据库查不到数据则不写入缓存，这将导致每个请求都会进行数据库的查询，失去了缓存的意义；</p><ul><li>场景：</li></ul><p>&emsp;&emsp; 可能会有人利用不存在的key频繁的请求数据，导致数据库压力过大甚至直接挂掉；</p><ul><li>解决方案：</li></ul><p>&emsp;&emsp; 1、接口层进行key的校验，比如用户鉴权校验，用户ID校验；能够确定不存在key的直接进行拦截；</p><p>&emsp;&emsp; 2、对不存在的key直接设置空值，设置过期时间，避免用户短时间用同一个key频繁请求；</p><p>&emsp;&emsp; 3、<a href=\"https://blog.leslie168.com/posts/1886603895.html\">使用布隆过滤器</a></p><h3 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h3><ul><li>描述：</li></ul><p>&emsp;&emsp; 缓存击穿是指缓存中没有的数据但是存储层数据库中有的数据，一般出现的情况是缓存时间到期了，这时由于并发用户请求太多，同时读取缓存没有数据，又同时去查询数据库，导致数据库压力过大；</p><ul><li>解决方案：</li></ul><p>&emsp;&emsp; 1、设置热点数据不过期或加大过期时间；</p><p>&emsp;&emsp; 2、接口限流，熔断，降级；重要的接口做好限流策略，防止用户恶意刷接口；当接口中的某些服务不可用时，进行熔断，失败快速返回机制；</p><p>&emsp;&emsp; 3、加互斥锁；第一个读取缓存的请求发现没有数据则获取锁，查询数据库更新缓存后释放锁并返回结果，则其他线程请求获取锁失败则等待并重新从缓存中读取数据；</p><h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><ul><li>描述：</li></ul><p>&emsp;&emsp; 缓存雪崩是指缓存中的数据大批量到过期时间，而查询数据量过大，引起数据库压力过大甚至宕机；和缓存击穿的区别在于缓存击穿是并发查询同一条数据，缓存雪崩是大批量不同数据到过期时间失效从而查询数据库；</p><ul><li>解决方案：</li></ul><p>&emsp;&emsp; 1、缓存数据的过期时间随机设定，防止同一时间大批量的数据过期失效；</p><p>&emsp;&emsp; 2、分布式部署缓存的话，将热点数据均匀分布在不同的缓存数据库中；</p><p>&emsp;&emsp; 3、设置热点数据不过期；</p>"},{"title":"tcp_socket","type":"categories","copyright":true,"keywords":["tcp","socket","python"],"abbrlink":3022795043,"date":"2022-03-01T06:52:00.000Z","_content":"\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n## 用python实现tcp socket服务端与客户端的通信\n\n#### tcp客户端\n```python\nimport socket\nimport traceback\nimport threading\n\n\ndef send_msg(client_socket):\n    # 准备发送数据\n    send_data = input(\"要发送的数据：\").encode('utf8')\n    # 发送数据\n    client_socket.send(send_data)\n\n\ndef recv_msg(client_socket):\n    # 接收数据\n        recv_data = client_socket.recv(1024).decode('utf8')\n        print(recv_data)\n\n\ndef main():\n    # 创建socket\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 建立连接\n    client_socket.connect(('127.0.0.1', 8989))\n    try:\n        while 1:\n            # 发送数据\n            send_msg(client_socket)\n            # 接收数据\n            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))\n            recv_process.start()\n            recv_process.join()\n            # recv_msg(client_socket)\n            flag = input(\"是否结束会话(yes or no):\")\n            if flag == 'yes':\n                # 关闭socket\n                client_socket.close()\n                break\n    except:\n        client_socket.close()\n        print('客户端出现异常', traceback.format_exc())\n```\n<!-- more -->\n\n#### tcp服务端\n```python\nimport socket\nimport threading\nimport traceback\n\n\ndef recv_msg(client_socket):\n    # 接收客户端的数据\n    recv_data = client_socket.recv(1024).decode(\"utf8\")\n    print(recv_data)\n\n\ndef send_msg(client_socket):\n    # 返回给客户端的数据\n    send_data = input(\"返回给客户端的数据：\").encode('utf8')\n    client_socket.send(send_data)\n\n\ndef main():\n    # 创建socket\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 设置socket选项， 立即释放端口\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n    # 绑定端口\n    server_socket.bind(('', 8989))\n    # 设置监听\n    server_socket.listen(128)\n    # 创建服务于客户端的socket\n    client_socket, ip_port = server_socket.accept()\n    try:\n        while 1:\n            # 返回给客户端的数据\n            send_msg(client_socket)\n            # 接收客户端的数据\n            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))\n            recv_process.start()\n            # recv_msg(client_socket)\n            recv_process.join()\n            # 关闭服务客户端的socket\n            client_socket.close()\n    except:\n        # 关闭服务客户端的socket\n        client_socket.close()\n        print(\"服务器出现异常：\", traceback.format_exc())\n    # 关闭监听的socket, 不再接收客户端的连接\n    server_socket.close()\n```\n\n\n\n\n","source":"_posts/tcp-socket.md","raw":"---\ntitle: tcp_socket\ntype: categories\ncopyright: true\ntags:\n  - python\n  - tcp\n  - socket\ncategories:\n  - python\n  - tcp\nkeywords:\n  - tcp\n  - socket\n  - python\nabbrlink: 3022795043\ndate: 2022-03-01 14:52:00\n---\n\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n## 用python实现tcp socket服务端与客户端的通信\n\n#### tcp客户端\n```python\nimport socket\nimport traceback\nimport threading\n\n\ndef send_msg(client_socket):\n    # 准备发送数据\n    send_data = input(\"要发送的数据：\").encode('utf8')\n    # 发送数据\n    client_socket.send(send_data)\n\n\ndef recv_msg(client_socket):\n    # 接收数据\n        recv_data = client_socket.recv(1024).decode('utf8')\n        print(recv_data)\n\n\ndef main():\n    # 创建socket\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 建立连接\n    client_socket.connect(('127.0.0.1', 8989))\n    try:\n        while 1:\n            # 发送数据\n            send_msg(client_socket)\n            # 接收数据\n            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))\n            recv_process.start()\n            recv_process.join()\n            # recv_msg(client_socket)\n            flag = input(\"是否结束会话(yes or no):\")\n            if flag == 'yes':\n                # 关闭socket\n                client_socket.close()\n                break\n    except:\n        client_socket.close()\n        print('客户端出现异常', traceback.format_exc())\n```\n<!-- more -->\n\n#### tcp服务端\n```python\nimport socket\nimport threading\nimport traceback\n\n\ndef recv_msg(client_socket):\n    # 接收客户端的数据\n    recv_data = client_socket.recv(1024).decode(\"utf8\")\n    print(recv_data)\n\n\ndef send_msg(client_socket):\n    # 返回给客户端的数据\n    send_data = input(\"返回给客户端的数据：\").encode('utf8')\n    client_socket.send(send_data)\n\n\ndef main():\n    # 创建socket\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 设置socket选项， 立即释放端口\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n    # 绑定端口\n    server_socket.bind(('', 8989))\n    # 设置监听\n    server_socket.listen(128)\n    # 创建服务于客户端的socket\n    client_socket, ip_port = server_socket.accept()\n    try:\n        while 1:\n            # 返回给客户端的数据\n            send_msg(client_socket)\n            # 接收客户端的数据\n            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))\n            recv_process.start()\n            # recv_msg(client_socket)\n            recv_process.join()\n            # 关闭服务客户端的socket\n            client_socket.close()\n    except:\n        # 关闭服务客户端的socket\n        client_socket.close()\n        print(\"服务器出现异常：\", traceback.format_exc())\n    # 关闭监听的socket, 不再接收客户端的连接\n    server_socket.close()\n```\n\n\n\n\n","slug":"tcp-socket","published":1,"updated":"2022-03-13T11:49:16.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde08d003f9jx346hi1tx9","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><h2 id=\"用python实现tcp-socket服务端与客户端的通信\"><a href=\"#用python实现tcp-socket服务端与客户端的通信\" class=\"headerlink\" title=\"用python实现tcp socket服务端与客户端的通信\"></a>用python实现tcp socket服务端与客户端的通信</h2><h4 id=\"tcp客户端\"><a href=\"#tcp客户端\" class=\"headerlink\" title=\"tcp客户端\"></a>tcp客户端</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 准备发送数据</span></span><br><span class=\"line\">    send_data = input(<span class=\"string\">\"要发送的数据：\"</span>).encode(<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 发送数据</span></span><br><span class=\"line\">    client_socket.send(send_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">recv_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 接收数据</span></span><br><span class=\"line\">        recv_data = client_socket.recv(<span class=\"number\">1024</span>).decode(<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">        print(recv_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建socket</span></span><br><span class=\"line\">    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    <span class=\"comment\"># 建立连接</span></span><br><span class=\"line\">    client_socket.connect((<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">8989</span>))</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 发送数据</span></span><br><span class=\"line\">            send_msg(client_socket)</span><br><span class=\"line\">            <span class=\"comment\"># 接收数据</span></span><br><span class=\"line\">            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))</span><br><span class=\"line\">            recv_process.start()</span><br><span class=\"line\">            recv_process.join()</span><br><span class=\"line\">            <span class=\"comment\"># recv_msg(client_socket)</span></span><br><span class=\"line\">            flag = input(<span class=\"string\">\"是否结束会话(yes or no):\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag == <span class=\"string\">'yes'</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 关闭socket</span></span><br><span class=\"line\">                client_socket.close()</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        client_socket.close()</span><br><span class=\"line\">        print(<span class=\"string\">'客户端出现异常'</span>, traceback.format_exc())</span><br></pre></td></tr></table></figure><a id=\"more\"></a><h4 id=\"tcp服务端\"><a href=\"#tcp服务端\" class=\"headerlink\" title=\"tcp服务端\"></a>tcp服务端</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">recv_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 接收客户端的数据</span></span><br><span class=\"line\">    recv_data = client_socket.recv(<span class=\"number\">1024</span>).decode(<span class=\"string\">\"utf8\"</span>)</span><br><span class=\"line\">    print(recv_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回给客户端的数据</span></span><br><span class=\"line\">    send_data = input(<span class=\"string\">\"返回给客户端的数据：\"</span>).encode(<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">    client_socket.send(send_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建socket</span></span><br><span class=\"line\">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    <span class=\"comment\"># 设置socket选项， 立即释放端口</span></span><br><span class=\"line\">    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 绑定端口</span></span><br><span class=\"line\">    server_socket.bind((<span class=\"string\">''</span>, <span class=\"number\">8989</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 设置监听</span></span><br><span class=\"line\">    server_socket.listen(<span class=\"number\">128</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 创建服务于客户端的socket</span></span><br><span class=\"line\">    client_socket, ip_port = server_socket.accept()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 返回给客户端的数据</span></span><br><span class=\"line\">            send_msg(client_socket)</span><br><span class=\"line\">            <span class=\"comment\"># 接收客户端的数据</span></span><br><span class=\"line\">            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))</span><br><span class=\"line\">            recv_process.start()</span><br><span class=\"line\">            <span class=\"comment\"># recv_msg(client_socket)</span></span><br><span class=\"line\">            recv_process.join()</span><br><span class=\"line\">            <span class=\"comment\"># 关闭服务客户端的socket</span></span><br><span class=\"line\">            client_socket.close()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 关闭服务客户端的socket</span></span><br><span class=\"line\">        client_socket.close()</span><br><span class=\"line\">        print(<span class=\"string\">\"服务器出现异常：\"</span>, traceback.format_exc())</span><br><span class=\"line\">    <span class=\"comment\"># 关闭监听的socket, 不再接收客户端的连接</span></span><br><span class=\"line\">    server_socket.close()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><h2 id=\"用python实现tcp-socket服务端与客户端的通信\"><a href=\"#用python实现tcp-socket服务端与客户端的通信\" class=\"headerlink\" title=\"用python实现tcp socket服务端与客户端的通信\"></a>用python实现tcp socket服务端与客户端的通信</h2><h4 id=\"tcp客户端\"><a href=\"#tcp客户端\" class=\"headerlink\" title=\"tcp客户端\"></a>tcp客户端</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 准备发送数据</span></span><br><span class=\"line\">    send_data = input(<span class=\"string\">\"要发送的数据：\"</span>).encode(<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 发送数据</span></span><br><span class=\"line\">    client_socket.send(send_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">recv_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 接收数据</span></span><br><span class=\"line\">        recv_data = client_socket.recv(<span class=\"number\">1024</span>).decode(<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">        print(recv_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建socket</span></span><br><span class=\"line\">    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    <span class=\"comment\"># 建立连接</span></span><br><span class=\"line\">    client_socket.connect((<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">8989</span>))</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 发送数据</span></span><br><span class=\"line\">            send_msg(client_socket)</span><br><span class=\"line\">            <span class=\"comment\"># 接收数据</span></span><br><span class=\"line\">            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))</span><br><span class=\"line\">            recv_process.start()</span><br><span class=\"line\">            recv_process.join()</span><br><span class=\"line\">            <span class=\"comment\"># recv_msg(client_socket)</span></span><br><span class=\"line\">            flag = input(<span class=\"string\">\"是否结束会话(yes or no):\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag == <span class=\"string\">'yes'</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 关闭socket</span></span><br><span class=\"line\">                client_socket.close()</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        client_socket.close()</span><br><span class=\"line\">        print(<span class=\"string\">'客户端出现异常'</span>, traceback.format_exc())</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"tcp服务端\"><a href=\"#tcp服务端\" class=\"headerlink\" title=\"tcp服务端\"></a>tcp服务端</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">recv_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 接收客户端的数据</span></span><br><span class=\"line\">    recv_data = client_socket.recv(<span class=\"number\">1024</span>).decode(<span class=\"string\">\"utf8\"</span>)</span><br><span class=\"line\">    print(recv_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回给客户端的数据</span></span><br><span class=\"line\">    send_data = input(<span class=\"string\">\"返回给客户端的数据：\"</span>).encode(<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">    client_socket.send(send_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建socket</span></span><br><span class=\"line\">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    <span class=\"comment\"># 设置socket选项， 立即释放端口</span></span><br><span class=\"line\">    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 绑定端口</span></span><br><span class=\"line\">    server_socket.bind((<span class=\"string\">''</span>, <span class=\"number\">8989</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 设置监听</span></span><br><span class=\"line\">    server_socket.listen(<span class=\"number\">128</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 创建服务于客户端的socket</span></span><br><span class=\"line\">    client_socket, ip_port = server_socket.accept()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 返回给客户端的数据</span></span><br><span class=\"line\">            send_msg(client_socket)</span><br><span class=\"line\">            <span class=\"comment\"># 接收客户端的数据</span></span><br><span class=\"line\">            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))</span><br><span class=\"line\">            recv_process.start()</span><br><span class=\"line\">            <span class=\"comment\"># recv_msg(client_socket)</span></span><br><span class=\"line\">            recv_process.join()</span><br><span class=\"line\">            <span class=\"comment\"># 关闭服务客户端的socket</span></span><br><span class=\"line\">            client_socket.close()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 关闭服务客户端的socket</span></span><br><span class=\"line\">        client_socket.close()</span><br><span class=\"line\">        print(<span class=\"string\">\"服务器出现异常：\"</span>, traceback.format_exc())</span><br><span class=\"line\">    <span class=\"comment\"># 关闭监听的socket, 不再接收客户端的连接</span></span><br><span class=\"line\">    server_socket.close()</span><br></pre></td></tr></table></figure>"},{"title":"python版布隆过滤器(二)","type":"categories","copyright":true,"keywords":"redis","abbrlink":3745698069,"date":"2019-12-31T09:30:00.000Z","_content":"\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n[python版布隆过滤器(一)][blom]\n\n## 布隆过滤器扩容和删除过期数据\n\n&emsp;&emsp; 我们知道，布隆过滤器是不可变的，但如果布隆过滤器容量确实不够了，该怎么办呢？或者如果要每个月都删除几个月前的去重数据，该如何处理呢？这边要记录一种布隆过滤器的巧用，多个布隆过滤器组成的循环布隆过滤器。\n\n<!-- more -->\n\n### 布隆过滤器扩容\n&emsp;&emsp; 因为布隆过滤器的不可逆，我们没法重新建一个更大的布隆过滤器然后去把数据重新导入。这边采取的扩容的方法是，保留原有的布隆过滤器，建立一个更大的，新增数据都放在新的布隆过滤器中，去重的时候检查所有的布隆过滤器。\n\n代码实现：\n```python\nclass BloomFilterAdapter(object):\n    def __init__(self, old_filters, new_filter):\n        self.old_filters = old_filters\n        self.new_filter = new_filter\n\n    def add(self, key):\n        self.new_filter.add(key)\n\n    def exists(self, key):\n        return any([f.exists(key) for f in self.old_filters]) or self.new_filter.exists(key)\n\n    def __len__(self):\n        return sum([len(f) for f in self.old_filters]) + len(self.new_filter)\n```\n\n### 删除过期数据\n\n&emsp;&emsp; 为了实现这么一个需求：使用布隆过滤器对url去重，但是每五个月要重新爬取一次。这边介绍一种循环的布隆过滤器，类似于之前的思路，由多个布隆过滤器组成，每个月都清空最早的那个过滤器。\n\n```python\nclass CircleBloomFilter(object):\n    def __init__(self, filter_num):\n        \"\"\"\n        :param filter_num: 预期包含的filter数量\n        \"\"\"\n        self.filter_num = filter_num\n        self.filters = [new_bloomfilter()]\n\n    def do_circle(self):\n        \"\"\"\n        执行循环逻辑\n        :return: \n        \"\"\"\n        if len(self.filters) >= self.filter_num:\n            self.filters.pop(0)\n        self.filters.append(new_bloomfilter())\n\n    def add(self, key):\n        self.filters[-1].add(key)\n\n    def exists(self,key):\n        return any([f.exists(key) for f in self.filters])\n    \n    def __len__(self):\n        return sum([len(f) for f in self.filters])\n```\n\n&emsp;&emsp; 1、我们只需要定期执行do_circle方法就可以定期清除最早的过滤器；\n\n&emsp;&emsp; 2、上面的add方法是对最后一个过滤器执行添加的操作，查询判断则是对所有过滤器都进行判断，这种适合于插入数据过多，而查询判断较少的场景；\n\n&emsp;&emsp; 3、另一种场景则是插入数据较少，而查询判断过多的场景；因此add方法和exists方法可以适当修改一下；\n```python\n    def add(self,key):\n        [f.add(key) for f in self.filters]\n        \n    def exists(self,key):\n        return self.filters[0].exists(key)\n```\n我们在插入数据过程中，对每个过滤器都执行添加操作，而在查询判断的过程中，我们只需要对任意一个过滤器进行查询就可以了。\n\n\n[blom]: https://blog.leslie168.com/posts/1886603895.html\n","source":"_posts/python版布隆过滤器2.md","raw":"---\ntitle: python版布隆过滤器(二)\ntype: categories\ncopyright: true\ntags:\n  - python\n  - redis\ncategories:\n  - 数据库\n  - redis\nkeywords: redis\nabbrlink: 3745698069\ndate: 2019-12-31 17:30:00\n---\n\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n[python版布隆过滤器(一)][blom]\n\n## 布隆过滤器扩容和删除过期数据\n\n&emsp;&emsp; 我们知道，布隆过滤器是不可变的，但如果布隆过滤器容量确实不够了，该怎么办呢？或者如果要每个月都删除几个月前的去重数据，该如何处理呢？这边要记录一种布隆过滤器的巧用，多个布隆过滤器组成的循环布隆过滤器。\n\n<!-- more -->\n\n### 布隆过滤器扩容\n&emsp;&emsp; 因为布隆过滤器的不可逆，我们没法重新建一个更大的布隆过滤器然后去把数据重新导入。这边采取的扩容的方法是，保留原有的布隆过滤器，建立一个更大的，新增数据都放在新的布隆过滤器中，去重的时候检查所有的布隆过滤器。\n\n代码实现：\n```python\nclass BloomFilterAdapter(object):\n    def __init__(self, old_filters, new_filter):\n        self.old_filters = old_filters\n        self.new_filter = new_filter\n\n    def add(self, key):\n        self.new_filter.add(key)\n\n    def exists(self, key):\n        return any([f.exists(key) for f in self.old_filters]) or self.new_filter.exists(key)\n\n    def __len__(self):\n        return sum([len(f) for f in self.old_filters]) + len(self.new_filter)\n```\n\n### 删除过期数据\n\n&emsp;&emsp; 为了实现这么一个需求：使用布隆过滤器对url去重，但是每五个月要重新爬取一次。这边介绍一种循环的布隆过滤器，类似于之前的思路，由多个布隆过滤器组成，每个月都清空最早的那个过滤器。\n\n```python\nclass CircleBloomFilter(object):\n    def __init__(self, filter_num):\n        \"\"\"\n        :param filter_num: 预期包含的filter数量\n        \"\"\"\n        self.filter_num = filter_num\n        self.filters = [new_bloomfilter()]\n\n    def do_circle(self):\n        \"\"\"\n        执行循环逻辑\n        :return: \n        \"\"\"\n        if len(self.filters) >= self.filter_num:\n            self.filters.pop(0)\n        self.filters.append(new_bloomfilter())\n\n    def add(self, key):\n        self.filters[-1].add(key)\n\n    def exists(self,key):\n        return any([f.exists(key) for f in self.filters])\n    \n    def __len__(self):\n        return sum([len(f) for f in self.filters])\n```\n\n&emsp;&emsp; 1、我们只需要定期执行do_circle方法就可以定期清除最早的过滤器；\n\n&emsp;&emsp; 2、上面的add方法是对最后一个过滤器执行添加的操作，查询判断则是对所有过滤器都进行判断，这种适合于插入数据过多，而查询判断较少的场景；\n\n&emsp;&emsp; 3、另一种场景则是插入数据较少，而查询判断过多的场景；因此add方法和exists方法可以适当修改一下；\n```python\n    def add(self,key):\n        [f.add(key) for f in self.filters]\n        \n    def exists(self,key):\n        return self.filters[0].exists(key)\n```\n我们在插入数据过程中，对每个过滤器都执行添加操作，而在查询判断的过程中，我们只需要对任意一个过滤器进行查询就可以了。\n\n\n[blom]: https://blog.leslie168.com/posts/1886603895.html\n","slug":"python版布隆过滤器2","published":1,"updated":"2022-03-13T13:46:54.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde08e003i9jx38fsee8p5","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><p><a href=\"https://blog.leslie168.com/posts/1886603895.html\">python版布隆过滤器(一)</a></p><h2 id=\"布隆过滤器扩容和删除过期数据\"><a href=\"#布隆过滤器扩容和删除过期数据\" class=\"headerlink\" title=\"布隆过滤器扩容和删除过期数据\"></a>布隆过滤器扩容和删除过期数据</h2><p>&emsp;&emsp; 我们知道，布隆过滤器是不可变的，但如果布隆过滤器容量确实不够了，该怎么办呢？或者如果要每个月都删除几个月前的去重数据，该如何处理呢？这边要记录一种布隆过滤器的巧用，多个布隆过滤器组成的循环布隆过滤器。</p><a id=\"more\"></a><h3 id=\"布隆过滤器扩容\"><a href=\"#布隆过滤器扩容\" class=\"headerlink\" title=\"布隆过滤器扩容\"></a>布隆过滤器扩容</h3><p>&emsp;&emsp; 因为布隆过滤器的不可逆，我们没法重新建一个更大的布隆过滤器然后去把数据重新导入。这边采取的扩容的方法是，保留原有的布隆过滤器，建立一个更大的，新增数据都放在新的布隆过滤器中，去重的时候检查所有的布隆过滤器。</p><p>代码实现：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BloomFilterAdapter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, old_filters, new_filter)</span>:</span></span><br><span class=\"line\">        self.old_filters = old_filters</span><br><span class=\"line\">        self.new_filter = new_filter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        self.new_filter.add(key)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exists</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> any([f.exists(key) <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> self.old_filters]) <span class=\"keyword\">or</span> self.new_filter.exists(key)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum([len(f) <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> self.old_filters]) + len(self.new_filter)</span><br></pre></td></tr></table></figure><h3 id=\"删除过期数据\"><a href=\"#删除过期数据\" class=\"headerlink\" title=\"删除过期数据\"></a>删除过期数据</h3><p>&emsp;&emsp; 为了实现这么一个需求：使用布隆过滤器对url去重，但是每五个月要重新爬取一次。这边介绍一种循环的布隆过滤器，类似于之前的思路，由多个布隆过滤器组成，每个月都清空最早的那个过滤器。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleBloomFilter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, filter_num)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :param filter_num: 预期包含的filter数量</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.filter_num = filter_num</span><br><span class=\"line\">        self.filters = [new_bloomfilter()]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_circle</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        执行循环逻辑</span></span><br><span class=\"line\"><span class=\"string\">        :return: </span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(self.filters) &gt;= self.filter_num:</span><br><span class=\"line\">            self.filters.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        self.filters.append(new_bloomfilter())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        self.filters[<span class=\"number\">-1</span>].add(key)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exists</span><span class=\"params\">(self,key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> any([f.exists(key) <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> self.filters])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum([len(f) <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> self.filters])</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 1、我们只需要定期执行do_circle方法就可以定期清除最早的过滤器；</p><p>&emsp;&emsp; 2、上面的add方法是对最后一个过滤器执行添加的操作，查询判断则是对所有过滤器都进行判断，这种适合于插入数据过多，而查询判断较少的场景；</p><p>&emsp;&emsp; 3、另一种场景则是插入数据较少，而查询判断过多的场景；因此add方法和exists方法可以适当修改一下；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(self,key)</span>:</span></span><br><span class=\"line\">    [f.add(key) <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> self.filters]</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exists</span><span class=\"params\">(self,key)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.filters[<span class=\"number\">0</span>].exists(key)</span><br></pre></td></tr></table></figure><p>我们在插入数据过程中，对每个过滤器都执行添加操作，而在查询判断的过程中，我们只需要对任意一个过滤器进行查询就可以了。</p>","site":{"data":{}},"excerpt":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><p><a href=\"https://blog.leslie168.com/posts/1886603895.html\">python版布隆过滤器(一)</a></p><h2 id=\"布隆过滤器扩容和删除过期数据\"><a href=\"#布隆过滤器扩容和删除过期数据\" class=\"headerlink\" title=\"布隆过滤器扩容和删除过期数据\"></a>布隆过滤器扩容和删除过期数据</h2><p>&emsp;&emsp; 我们知道，布隆过滤器是不可变的，但如果布隆过滤器容量确实不够了，该怎么办呢？或者如果要每个月都删除几个月前的去重数据，该如何处理呢？这边要记录一种布隆过滤器的巧用，多个布隆过滤器组成的循环布隆过滤器。</p>","more":"<h3 id=\"布隆过滤器扩容\"><a href=\"#布隆过滤器扩容\" class=\"headerlink\" title=\"布隆过滤器扩容\"></a>布隆过滤器扩容</h3><p>&emsp;&emsp; 因为布隆过滤器的不可逆，我们没法重新建一个更大的布隆过滤器然后去把数据重新导入。这边采取的扩容的方法是，保留原有的布隆过滤器，建立一个更大的，新增数据都放在新的布隆过滤器中，去重的时候检查所有的布隆过滤器。</p><p>代码实现：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BloomFilterAdapter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, old_filters, new_filter)</span>:</span></span><br><span class=\"line\">        self.old_filters = old_filters</span><br><span class=\"line\">        self.new_filter = new_filter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        self.new_filter.add(key)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exists</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> any([f.exists(key) <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> self.old_filters]) <span class=\"keyword\">or</span> self.new_filter.exists(key)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum([len(f) <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> self.old_filters]) + len(self.new_filter)</span><br></pre></td></tr></table></figure><h3 id=\"删除过期数据\"><a href=\"#删除过期数据\" class=\"headerlink\" title=\"删除过期数据\"></a>删除过期数据</h3><p>&emsp;&emsp; 为了实现这么一个需求：使用布隆过滤器对url去重，但是每五个月要重新爬取一次。这边介绍一种循环的布隆过滤器，类似于之前的思路，由多个布隆过滤器组成，每个月都清空最早的那个过滤器。</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleBloomFilter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, filter_num)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :param filter_num: 预期包含的filter数量</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.filter_num = filter_num</span><br><span class=\"line\">        self.filters = [new_bloomfilter()]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_circle</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        执行循环逻辑</span></span><br><span class=\"line\"><span class=\"string\">        :return: </span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(self.filters) &gt;= self.filter_num:</span><br><span class=\"line\">            self.filters.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        self.filters.append(new_bloomfilter())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        self.filters[<span class=\"number\">-1</span>].add(key)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exists</span><span class=\"params\">(self,key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> any([f.exists(key) <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> self.filters])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum([len(f) <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> self.filters])</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 1、我们只需要定期执行do_circle方法就可以定期清除最早的过滤器；</p><p>&emsp;&emsp; 2、上面的add方法是对最后一个过滤器执行添加的操作，查询判断则是对所有过滤器都进行判断，这种适合于插入数据过多，而查询判断较少的场景；</p><p>&emsp;&emsp; 3、另一种场景则是插入数据较少，而查询判断过多的场景；因此add方法和exists方法可以适当修改一下；</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(self,key)</span>:</span></span><br><span class=\"line\">    [f.add(key) <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> self.filters]</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exists</span><span class=\"params\">(self,key)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.filters[<span class=\"number\">0</span>].exists(key)</span><br></pre></td></tr></table></figure><p>我们在插入数据过程中，对每个过滤器都执行添加操作，而在查询判断的过程中，我们只需要对任意一个过滤器进行查询就可以了。</p>"},{"title":"百度贴吧图片抓取","type":"categories","copyright":true,"abbrlink":282659514,"date":"2020-01-02T07:34:54.000Z","_content":"\n## python爬取百度贴吧张国荣图片\n\n一直喜欢哥哥的歌，也一直听哥哥的歌，突然想着收集一些哥哥的照片，所以写了一个爬虫爬取哥哥的图片，也给大家参考一下；\n\n#### 这里我用的request-html这个包\n```python\nfrom requests_html import HTMLSession\nfrom requests_html import HTML\n```\n\n#### 构造请求\n<!--more-->\n```python\nclass CrawlSpider(object):\n    def __init__(self):\n        self.sess = HTMLSession()\n        self.headers = {\n            \"Host\": \"tieba.baidu.com\",\n            \"Referer\": \"https://www.baidu.com/\",\n            \"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\"\n        }\n```\n#### 分析请求的api,发现它是get请求，带有参数\n\n```python\nself.params = {\n            \"kw\": \"张国荣\",\n            \"tab\": \"album\",\n            \"subtab\": \"album_good\",\n            \"cat_id\": \"\"\n        }\n```\n#### 发送请求，找到分类的id\n```python\nresp = self.sess.get(url=\"http://tieba.baidu.com/f?\",params=self.params, headers=self.headers)\ncategory_list = re.findall('<li cat-id=\"(.*)\"><span>', resp.text)\n```\n#### 对每个分类构造api请求，获取每个图册的id\n```python\nall_tid_list = []\nfor cat_id in category_list:\n    self.params[\"cat_id\"] = cat_id\n    self.params[\"pagelets\"] = 'album/pagelet/album_good'\n    self.params[\"pagelets_stamp\"] = \"%013d\"%(1000 * time.time())\n    try:\n        resp = self.sess.get(url=\"http://tieba.baidu.com/f?\", params=self.params, headers=self.headers)\n        resp.html.render()\n        html = HTML(html=resp.html.text)\n        tid_list = re.findall(r\"/p/\\d+\", re.sub(r\"\\\\\", '', str(html.links)))\n        all_tid_list.extend(tid_list)\n    except Exception as err:\n        print(\"获取tid失败{}\".format(err))\nreturn all_tid_list\n```\n\n#### 拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“_”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\n```python\nparams = {\n        \"kw\": \"张国荣\",\n        \"alt\": \"jview\",\n        \"rn\": \"200\",\n        \"tid\": tid,\n        \"pn\": \"1\",\n        \"ps\": \"1\",\n        \"pe\": \"40\",\n        \"info\": \"1\",\n        \"_\": \"%013d\" % (1000 * time.time())\n    }\n```\n#### 构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\n```python\nbase_url = \"http://tieba.baidu.com/photo/g/bw/picture/list?\"\nresp = self.sess.get(url=base_url, params=params, headers=self.headers).text\ntime.sleep(random.random() + 1)\nresp = json.loads(resp)\ntitle = resp[\"data\"][\"title\"]\npic_list = resp[\"data\"][\"pic_list\"]\n```\n\n#### 保存我们需要的图册标题和图片链接\n```python\ntry:\n    image_list = []\n    for item in self.total_images:\n        image_dict = {}\n        image_url = []\n        image_dict[\"title\"] = item[\"title\"]\n        for each in item[\"images_info\"]:\n            image_url.append(each[\"purl\"])\n        image_dict[\"image_url\"] = image_url\n        image_list.append(image_dict)\n\n    with open(\"image_urls.json\", \"w\", encoding='GBK') as f:\n        f.write(json.dumps(image_list))\nexcept Exception as err:\n    print(\"写入数据失败{}\".format(err))\n```\n\n这样我们就拿到了哥哥的图片链接了，然后我们请求图片链接，下载图片即可\n![张国荣](/image/crawl/leslie.png)\n\n## 完整代码可以看我的gitub链接：\n[https://github.com/gongjiaqiang/my_spider](https://github.com/gongjiaqiang/my_spider)","source":"_posts/百度贴吧图片抓取.md","raw":"---\ntitle: 百度贴吧图片抓取\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 爬虫\ncategories:\n  - python\n  - 爬虫\nabbrlink: 282659514\ndate: 2020-01-02 15:34:54\n---\n\n## python爬取百度贴吧张国荣图片\n\n一直喜欢哥哥的歌，也一直听哥哥的歌，突然想着收集一些哥哥的照片，所以写了一个爬虫爬取哥哥的图片，也给大家参考一下；\n\n#### 这里我用的request-html这个包\n```python\nfrom requests_html import HTMLSession\nfrom requests_html import HTML\n```\n\n#### 构造请求\n<!--more-->\n```python\nclass CrawlSpider(object):\n    def __init__(self):\n        self.sess = HTMLSession()\n        self.headers = {\n            \"Host\": \"tieba.baidu.com\",\n            \"Referer\": \"https://www.baidu.com/\",\n            \"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\"\n        }\n```\n#### 分析请求的api,发现它是get请求，带有参数\n\n```python\nself.params = {\n            \"kw\": \"张国荣\",\n            \"tab\": \"album\",\n            \"subtab\": \"album_good\",\n            \"cat_id\": \"\"\n        }\n```\n#### 发送请求，找到分类的id\n```python\nresp = self.sess.get(url=\"http://tieba.baidu.com/f?\",params=self.params, headers=self.headers)\ncategory_list = re.findall('<li cat-id=\"(.*)\"><span>', resp.text)\n```\n#### 对每个分类构造api请求，获取每个图册的id\n```python\nall_tid_list = []\nfor cat_id in category_list:\n    self.params[\"cat_id\"] = cat_id\n    self.params[\"pagelets\"] = 'album/pagelet/album_good'\n    self.params[\"pagelets_stamp\"] = \"%013d\"%(1000 * time.time())\n    try:\n        resp = self.sess.get(url=\"http://tieba.baidu.com/f?\", params=self.params, headers=self.headers)\n        resp.html.render()\n        html = HTML(html=resp.html.text)\n        tid_list = re.findall(r\"/p/\\d+\", re.sub(r\"\\\\\", '', str(html.links)))\n        all_tid_list.extend(tid_list)\n    except Exception as err:\n        print(\"获取tid失败{}\".format(err))\nreturn all_tid_list\n```\n\n#### 拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“_”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\n```python\nparams = {\n        \"kw\": \"张国荣\",\n        \"alt\": \"jview\",\n        \"rn\": \"200\",\n        \"tid\": tid,\n        \"pn\": \"1\",\n        \"ps\": \"1\",\n        \"pe\": \"40\",\n        \"info\": \"1\",\n        \"_\": \"%013d\" % (1000 * time.time())\n    }\n```\n#### 构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\n```python\nbase_url = \"http://tieba.baidu.com/photo/g/bw/picture/list?\"\nresp = self.sess.get(url=base_url, params=params, headers=self.headers).text\ntime.sleep(random.random() + 1)\nresp = json.loads(resp)\ntitle = resp[\"data\"][\"title\"]\npic_list = resp[\"data\"][\"pic_list\"]\n```\n\n#### 保存我们需要的图册标题和图片链接\n```python\ntry:\n    image_list = []\n    for item in self.total_images:\n        image_dict = {}\n        image_url = []\n        image_dict[\"title\"] = item[\"title\"]\n        for each in item[\"images_info\"]:\n            image_url.append(each[\"purl\"])\n        image_dict[\"image_url\"] = image_url\n        image_list.append(image_dict)\n\n    with open(\"image_urls.json\", \"w\", encoding='GBK') as f:\n        f.write(json.dumps(image_list))\nexcept Exception as err:\n    print(\"写入数据失败{}\".format(err))\n```\n\n这样我们就拿到了哥哥的图片链接了，然后我们请求图片链接，下载图片即可\n![张国荣](/image/crawl/leslie.png)\n\n## 完整代码可以看我的gitub链接：\n[https://github.com/gongjiaqiang/my_spider](https://github.com/gongjiaqiang/my_spider)","slug":"百度贴吧图片抓取","published":1,"updated":"2022-03-13T11:49:16.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde08f003m9jx3gy0z8dyp","content":"<h2 id=\"python爬取百度贴吧张国荣图片\"><a href=\"#python爬取百度贴吧张国荣图片\" class=\"headerlink\" title=\"python爬取百度贴吧张国荣图片\"></a>python爬取百度贴吧张国荣图片</h2><p>一直喜欢哥哥的歌，也一直听哥哥的歌，突然想着收集一些哥哥的照片，所以写了一个爬虫爬取哥哥的图片，也给大家参考一下；</p><h4 id=\"这里我用的request-html这个包\"><a href=\"#这里我用的request-html这个包\" class=\"headerlink\" title=\"这里我用的request-html这个包\"></a>这里我用的request-html这个包</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> HTMLSession</span><br><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> HTML</span><br></pre></td></tr></table></figure><h4 id=\"构造请求\"><a href=\"#构造请求\" class=\"headerlink\" title=\"构造请求\"></a>构造请求</h4><a id=\"more\"></a><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrawlSpider</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.sess = HTMLSession()</span><br><span class=\"line\">        self.headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Host\"</span>: <span class=\"string\">\"tieba.baidu.com\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Referer\"</span>: <span class=\"string\">\"https://www.baidu.com/\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"User-Agent\"</span>:<span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\"</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure><h4 id=\"分析请求的api-发现它是get请求，带有参数\"><a href=\"#分析请求的api-发现它是get请求，带有参数\" class=\"headerlink\" title=\"分析请求的api,发现它是get请求，带有参数\"></a>分析请求的api,发现它是get请求，带有参数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.params = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"kw\"</span>: <span class=\"string\">\"张国荣\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"tab\"</span>: <span class=\"string\">\"album\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"subtab\"</span>: <span class=\"string\">\"album_good\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"cat_id\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure><h4 id=\"发送请求，找到分类的id\"><a href=\"#发送请求，找到分类的id\" class=\"headerlink\" title=\"发送请求，找到分类的id\"></a>发送请求，找到分类的id</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resp = self.sess.get(url=<span class=\"string\">\"http://tieba.baidu.com/f?\"</span>,params=self.params, headers=self.headers)</span><br><span class=\"line\">category_list = re.findall(<span class=\"string\">'&lt;li cat-id=\"(.*)\"&gt;&lt;span&gt;'</span>, resp.text)</span><br></pre></td></tr></table></figure><h4 id=\"对每个分类构造api请求，获取每个图册的id\"><a href=\"#对每个分类构造api请求，获取每个图册的id\" class=\"headerlink\" title=\"对每个分类构造api请求，获取每个图册的id\"></a>对每个分类构造api请求，获取每个图册的id</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all_tid_list = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> cat_id <span class=\"keyword\">in</span> category_list:</span><br><span class=\"line\">    self.params[<span class=\"string\">\"cat_id\"</span>] = cat_id</span><br><span class=\"line\">    self.params[<span class=\"string\">\"pagelets\"</span>] = <span class=\"string\">'album/pagelet/album_good'</span></span><br><span class=\"line\">    self.params[<span class=\"string\">\"pagelets_stamp\"</span>] = <span class=\"string\">\"%013d\"</span>%(<span class=\"number\">1000</span> * time.time())</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        resp = self.sess.get(url=<span class=\"string\">\"http://tieba.baidu.com/f?\"</span>, params=self.params, headers=self.headers)</span><br><span class=\"line\">        resp.html.render()</span><br><span class=\"line\">        html = HTML(html=resp.html.text)</span><br><span class=\"line\">        tid_list = re.findall(<span class=\"string\">r\"/p/\\d+\"</span>, re.sub(<span class=\"string\">r\"\\\\\"</span>, <span class=\"string\">''</span>, str(html.links)))</span><br><span class=\"line\">        all_tid_list.extend(tid_list)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">        print(<span class=\"string\">\"获取tid失败&#123;&#125;\"</span>.format(err))</span><br><span class=\"line\"><span class=\"keyword\">return</span> all_tid_list</span><br></pre></td></tr></table></figure><h4 id=\"拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“-”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\"><a href=\"#拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“-”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\" class=\"headerlink\" title=\"拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“_”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\"></a>拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“_”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">params = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"kw\"</span>: <span class=\"string\">\"张国荣\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"alt\"</span>: <span class=\"string\">\"jview\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"rn\"</span>: <span class=\"string\">\"200\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"tid\"</span>: tid,</span><br><span class=\"line\">        <span class=\"string\">\"pn\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ps\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pe\"</span>: <span class=\"string\">\"40\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"info\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"_\"</span>: <span class=\"string\">\"%013d\"</span> % (<span class=\"number\">1000</span> * time.time())</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><h4 id=\"构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\"><a href=\"#构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\" class=\"headerlink\" title=\"构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\"></a>构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_url = <span class=\"string\">\"http://tieba.baidu.com/photo/g/bw/picture/list?\"</span></span><br><span class=\"line\">resp = self.sess.get(url=base_url, params=params, headers=self.headers).text</span><br><span class=\"line\">time.sleep(random.random() + <span class=\"number\">1</span>)</span><br><span class=\"line\">resp = json.loads(resp)</span><br><span class=\"line\">title = resp[<span class=\"string\">\"data\"</span>][<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">pic_list = resp[<span class=\"string\">\"data\"</span>][<span class=\"string\">\"pic_list\"</span>]</span><br></pre></td></tr></table></figure><h4 id=\"保存我们需要的图册标题和图片链接\"><a href=\"#保存我们需要的图册标题和图片链接\" class=\"headerlink\" title=\"保存我们需要的图册标题和图片链接\"></a>保存我们需要的图册标题和图片链接</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    image_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.total_images:</span><br><span class=\"line\">        image_dict = &#123;&#125;</span><br><span class=\"line\">        image_url = []</span><br><span class=\"line\">        image_dict[<span class=\"string\">\"title\"</span>] = item[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> item[<span class=\"string\">\"images_info\"</span>]:</span><br><span class=\"line\">            image_url.append(each[<span class=\"string\">\"purl\"</span>])</span><br><span class=\"line\">        image_dict[<span class=\"string\">\"image_url\"</span>] = image_url</span><br><span class=\"line\">        image_list.append(image_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"image_urls.json\"</span>, <span class=\"string\">\"w\"</span>, encoding=<span class=\"string\">'GBK'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(json.dumps(image_list))</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入数据失败&#123;&#125;\"</span>.format(err))</span><br></pre></td></tr></table></figure><p>这样我们就拿到了哥哥的图片链接了，然后我们请求图片链接，下载图片即可<br><img src=\"/image/crawl/leslie.png\" alt=\"张国荣\"></p><h2 id=\"完整代码可以看我的gitub链接：\"><a href=\"#完整代码可以看我的gitub链接：\" class=\"headerlink\" title=\"完整代码可以看我的gitub链接：\"></a>完整代码可以看我的gitub链接：</h2><p><a href=\"https://github.com/gongjiaqiang/my_spider\" target=\"_blank\" rel=\"noopener\">https://github.com/gongjiaqiang/my_spider</a></p>","site":{"data":{}},"excerpt":"<h2 id=\"python爬取百度贴吧张国荣图片\"><a href=\"#python爬取百度贴吧张国荣图片\" class=\"headerlink\" title=\"python爬取百度贴吧张国荣图片\"></a>python爬取百度贴吧张国荣图片</h2><p>一直喜欢哥哥的歌，也一直听哥哥的歌，突然想着收集一些哥哥的照片，所以写了一个爬虫爬取哥哥的图片，也给大家参考一下；</p><h4 id=\"这里我用的request-html这个包\"><a href=\"#这里我用的request-html这个包\" class=\"headerlink\" title=\"这里我用的request-html这个包\"></a>这里我用的request-html这个包</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> HTMLSession</span><br><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> HTML</span><br></pre></td></tr></table></figure><h4 id=\"构造请求\"><a href=\"#构造请求\" class=\"headerlink\" title=\"构造请求\"></a>构造请求</h4>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrawlSpider</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.sess = HTMLSession()</span><br><span class=\"line\">        self.headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Host\"</span>: <span class=\"string\">\"tieba.baidu.com\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Referer\"</span>: <span class=\"string\">\"https://www.baidu.com/\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"User-Agent\"</span>:<span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\"</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure><h4 id=\"分析请求的api-发现它是get请求，带有参数\"><a href=\"#分析请求的api-发现它是get请求，带有参数\" class=\"headerlink\" title=\"分析请求的api,发现它是get请求，带有参数\"></a>分析请求的api,发现它是get请求，带有参数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.params = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"kw\"</span>: <span class=\"string\">\"张国荣\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"tab\"</span>: <span class=\"string\">\"album\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"subtab\"</span>: <span class=\"string\">\"album_good\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"cat_id\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure><h4 id=\"发送请求，找到分类的id\"><a href=\"#发送请求，找到分类的id\" class=\"headerlink\" title=\"发送请求，找到分类的id\"></a>发送请求，找到分类的id</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resp = self.sess.get(url=<span class=\"string\">\"http://tieba.baidu.com/f?\"</span>,params=self.params, headers=self.headers)</span><br><span class=\"line\">category_list = re.findall(<span class=\"string\">'&lt;li cat-id=\"(.*)\"&gt;&lt;span&gt;'</span>, resp.text)</span><br></pre></td></tr></table></figure><h4 id=\"对每个分类构造api请求，获取每个图册的id\"><a href=\"#对每个分类构造api请求，获取每个图册的id\" class=\"headerlink\" title=\"对每个分类构造api请求，获取每个图册的id\"></a>对每个分类构造api请求，获取每个图册的id</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all_tid_list = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> cat_id <span class=\"keyword\">in</span> category_list:</span><br><span class=\"line\">    self.params[<span class=\"string\">\"cat_id\"</span>] = cat_id</span><br><span class=\"line\">    self.params[<span class=\"string\">\"pagelets\"</span>] = <span class=\"string\">'album/pagelet/album_good'</span></span><br><span class=\"line\">    self.params[<span class=\"string\">\"pagelets_stamp\"</span>] = <span class=\"string\">\"%013d\"</span>%(<span class=\"number\">1000</span> * time.time())</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        resp = self.sess.get(url=<span class=\"string\">\"http://tieba.baidu.com/f?\"</span>, params=self.params, headers=self.headers)</span><br><span class=\"line\">        resp.html.render()</span><br><span class=\"line\">        html = HTML(html=resp.html.text)</span><br><span class=\"line\">        tid_list = re.findall(<span class=\"string\">r\"/p/\\d+\"</span>, re.sub(<span class=\"string\">r\"\\\\\"</span>, <span class=\"string\">''</span>, str(html.links)))</span><br><span class=\"line\">        all_tid_list.extend(tid_list)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">        print(<span class=\"string\">\"获取tid失败&#123;&#125;\"</span>.format(err))</span><br><span class=\"line\"><span class=\"keyword\">return</span> all_tid_list</span><br></pre></td></tr></table></figure><h4 id=\"拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“-”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\"><a href=\"#拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“-”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\" class=\"headerlink\" title=\"拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“_”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\"></a>拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“_”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">params = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"kw\"</span>: <span class=\"string\">\"张国荣\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"alt\"</span>: <span class=\"string\">\"jview\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"rn\"</span>: <span class=\"string\">\"200\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"tid\"</span>: tid,</span><br><span class=\"line\">        <span class=\"string\">\"pn\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ps\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pe\"</span>: <span class=\"string\">\"40\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"info\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"_\"</span>: <span class=\"string\">\"%013d\"</span> % (<span class=\"number\">1000</span> * time.time())</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><h4 id=\"构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\"><a href=\"#构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\" class=\"headerlink\" title=\"构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\"></a>构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_url = <span class=\"string\">\"http://tieba.baidu.com/photo/g/bw/picture/list?\"</span></span><br><span class=\"line\">resp = self.sess.get(url=base_url, params=params, headers=self.headers).text</span><br><span class=\"line\">time.sleep(random.random() + <span class=\"number\">1</span>)</span><br><span class=\"line\">resp = json.loads(resp)</span><br><span class=\"line\">title = resp[<span class=\"string\">\"data\"</span>][<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">pic_list = resp[<span class=\"string\">\"data\"</span>][<span class=\"string\">\"pic_list\"</span>]</span><br></pre></td></tr></table></figure><h4 id=\"保存我们需要的图册标题和图片链接\"><a href=\"#保存我们需要的图册标题和图片链接\" class=\"headerlink\" title=\"保存我们需要的图册标题和图片链接\"></a>保存我们需要的图册标题和图片链接</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    image_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.total_images:</span><br><span class=\"line\">        image_dict = &#123;&#125;</span><br><span class=\"line\">        image_url = []</span><br><span class=\"line\">        image_dict[<span class=\"string\">\"title\"</span>] = item[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> item[<span class=\"string\">\"images_info\"</span>]:</span><br><span class=\"line\">            image_url.append(each[<span class=\"string\">\"purl\"</span>])</span><br><span class=\"line\">        image_dict[<span class=\"string\">\"image_url\"</span>] = image_url</span><br><span class=\"line\">        image_list.append(image_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"image_urls.json\"</span>, <span class=\"string\">\"w\"</span>, encoding=<span class=\"string\">'GBK'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(json.dumps(image_list))</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入数据失败&#123;&#125;\"</span>.format(err))</span><br></pre></td></tr></table></figure><p>这样我们就拿到了哥哥的图片链接了，然后我们请求图片链接，下载图片即可<br><img src=\"/image/crawl/leslie.png\" alt=\"张国荣\"></p><h2 id=\"完整代码可以看我的gitub链接：\"><a href=\"#完整代码可以看我的gitub链接：\" class=\"headerlink\" title=\"完整代码可以看我的gitub链接：\"></a>完整代码可以看我的gitub链接：</h2><p><a href=\"https://github.com/gongjiaqiang/my_spider\" target=\"_blank\" rel=\"noopener\">https://github.com/gongjiaqiang/my_spider</a></p>"},{"title":"搭建k8s集群","type":"categories","copyright":true,"keywords":"kubernetes","abbrlink":1883251673,"date":"2022-03-20T14:05:33.000Z","_content":"\n\n#### 准备工作\n- 满足安装docker项目所需的要求，比如64位Linux操作系统，3.10及以上的内核版本\n- x86或者ARM架构均可\n- 机器之间网络互通，这是容器之间网络互通的前提\n- 有外网访问权限，需要拉取镜像\n- 能够访问 gcr.io、quay.io 这个两个docker registry，因为小部分镜像需要在这里拉取\n- 单机可用资源建议2核CPU， 8GB内存或以上\n- 30GB或以上的可用磁盘空间，这主要是留给docker镜像和日志文件使用\n\n<!-- more -->\n\n#### 目标\n- 在所有节点上安装docker 和kubeadm\n- 部署kubernets Master\n- 部署容器网络插件\n- 部署Dashboard 可视化插件\n- 部署容器存储插件\n\n\n#### 安装kubeadm和docker\n```\ncurl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\ncat <<EOF > /etc/apt/sources.list.d/kubernetes.list \ndeb http://mirrors.ustc.edu.cn/kubernetes/apt kubernetes-xenial main\nEOF\napt-get update \napt-get install -y docker.io kubeadm\n```\n\n上述安装kubeadm的过程中，kubeadm和kubelet、kubectl、kubernetes-cni这几个二进制文件都会被自动安装好\n\n#### 部署K8s的master节点\n++通过配置文件来部署，自定义一些功能++\n\n1.编写yaml文件（kubeadm.yaml）\n```\napiVersion: kubeadm.k8s.io/v1alpha1 \nkind: MasterConfiguration \ncontrollerManagerExtraArgs:\n    horizontal-pod-autoscaler-use-rest-clients: \"true\" \n    horizontal-pod-autoscaler-sync-period: \"10s\"\n    node-monitor-grace-period: \"10s\" \napiServerExtraArgs:  \n    runtime-config: \"api/all=true\" \nkubernetesVersion: \"stable-1.11\"\n```\n配置中，设置horizontal-pod-autoscaler-use-rest-clients: \"true\"，将来部署kube-controller-manager能够使用自定义资源进行水平扩展\n\n**部署命令**\n```\nkubeadm init --config kubeadm.yaml\n```\n\n部署完成会生成一行指令：\n```\n kubeadm join 10.168.0.2:6443 --token 00bwbx.uvnaa2ewjflwu1ry --discovery-token- ....\n```\n这个join命令，是用来给这个master节点添加多个工作节点(worker)的命令，需要记录下来。\n\n**部署配置信息**\n```\nmkdir -p $HONE/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\nk8s集群默认需要加密方式访问，这几条命令，就是将刚刚部署生成的kubernetes集群的安全配置文件，保存在当前用户的.kube目录下，kubectl默认会使用这个目录下的授权信息访问k8s集群。\n\n**查看节点状态**\n```\n$ kubectl get nodes\nNAME      STATUS     ROLES     AGE       VERSION \nmaster    NotReady   master    1d        v1.11.1\n```\n\n**查看节点对象详细信息**\n```\nkubectl describe node master\n```\n\n**检查这个节点上各个系统Pod的状态**\n```\nkubectl get pods -n kube-system\n```\nkube-system是k8s项目预留的系统Pod的工作空间\n\n\n#### 部署网络插件\n\n部署网络插件只需执行kubectl apply指令，以Weave为例：\n```\nkubectl apply -f https://git.io/weave-kube-1.6\n```\n部署完成后，执行 kubectl get pods -n kube-system重新检查Pod状态\n\n\n#### 部署k8s的worker节点\nk8s的worker节点跟master节点几乎相同，它们运行着的都是一个kubelet组件，唯一的区别在于，kubeadm init的过程中，kubelet启动后， master节点上还会自动运行kube-apiserver、kube-scheduler、 kube-controller-manger 这三个系统Pod\n- 安装kubeadm 和 docker\n- 执行部署master节点时生成的kubeadm join 指令\n```\n$ kubeadm join 10.168.0.2:6443 --token 00bwbx.uvnaa2ewjflwu1ry --discovery-token-ca-cert ...\n```\n\n#### 通过Taint/Toleration调整master执行Pod的策略\n默认情况下master节点是不允许运行用户Pod的，而k8s做到这一点，依靠的是k8s的Taint/Toleration机制。\n\n**原理：**\n一旦某个节点被加上一个Taint,即被‘打上了污点’，那么所有的Pod就都不能在这个节点上运行。\n\n*打上污点命令*\n```\n$ kubectl taint nodes node1 foo=bar:NoSchedule\n```\n这时，该node1节点上就会增加一个键值对格式的Taint，即foo=bar:NoSchedule\n其中值里面的NoSchedule，意味着这个Taint只会在调度新的Pod时产生作用，不会影响已经在node1上运行的Pod，哪怕它们没有Toleration。\n\n#### Pod声明 Toleration\n在Pod的.yaml文件中的spec部分，加入tolerations字段即可：\n```\napiVersion: v1\nkind: Pod\n...\nspec:\n    tolerations:\n    - key: \"foo\"\n      operator: \"Equal\"\n      value: \"bar\"\n      effect: \"NoSchedule\"\n```\n这个Toleration的含义是，这个Pod能“接受”所有键值对为foo=bar 的Taint。\n\n#### 让Pod运行在master节点上\n\n```\napiVersion: v1\nkind: Pod\n...\nspec:\n    tolerations:\n    - key: \"foo\"\n      operator: \"Exists\"\n      effect: \"NoSchedule\"\n```\n\"Exists\"操作符，表示该Pod能容忍所有以foo为键的Taint.\n\n#### 如果只想要一个单节点的K8S,删除这个Taint才是正确的选择\n```\n$ kubectl taint nodes --all node-role.kubernetes.io/master-\n```\n我们在\"node-role.kubernetes.io/master\" 这个键后面加上了一个短横线\"-\"，这个格式就是移除所有以\"node-role.kubernetes.io/master\"为键的Taint。\n\n\n#### 部署Dashboard可视化插件\n```\n $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/dep... \n```\n部署完成后，可用查看Dashboard对应的Pod的状态了：\n```\n$ kubectl get pods -n kube-system\n```\n**注意：**\n由于Dashboard是一个web server, 1.7版本后的默认只能通过Proxy的方式在本地访问。\n\n#### 部署容器存储插件\nk8s 集群的最后一块拼图：容器持久化存储\n> **容器最典型的特征之一：无状态**\n如果你在某一台机器上启动了一个容器，无法看到其他机器上的容器在它们的数据卷里写入的文件。\n\n容器的持久化存储，就是用来保存容器存储状态的重要手段：存储插件会在容器里挂载一个基于网络或者其它机制的远程数据卷，使得在容器里创建的文件，实际上是保存在远程存储服务器上，或者以分布式的方式保存在多个节点上，而与当前宿主机没有任何绑定关系。\n\n本次部署中，选择一个很重要的k8s存储插件项目：Rook\nRook项目是一个基于Ceph的k8s存储插件，Rook在自己的实现中加入了水平扩展，迁移，灾难备份，监控等大量的企业级功能，使得这个项目变成一个完整的、生成级别可用的容器存储插件。\n\n```\n$ kubectl apply -f https://raw.githubusercontent.com/rook/rook/master/cluster/examples/k...\n```\n","source":"_posts/搭建k8s集群.md","raw":"---\ntitle: 搭建k8s集群\ntype: categories\ncopyright: true\ntags:\n  - k8s\ncategories:\n  - k8s\nkeywords: kubernetes\nabbrlink: 1883251673\ndate: 2022-03-20 22:05:33\n---\n\n\n#### 准备工作\n- 满足安装docker项目所需的要求，比如64位Linux操作系统，3.10及以上的内核版本\n- x86或者ARM架构均可\n- 机器之间网络互通，这是容器之间网络互通的前提\n- 有外网访问权限，需要拉取镜像\n- 能够访问 gcr.io、quay.io 这个两个docker registry，因为小部分镜像需要在这里拉取\n- 单机可用资源建议2核CPU， 8GB内存或以上\n- 30GB或以上的可用磁盘空间，这主要是留给docker镜像和日志文件使用\n\n<!-- more -->\n\n#### 目标\n- 在所有节点上安装docker 和kubeadm\n- 部署kubernets Master\n- 部署容器网络插件\n- 部署Dashboard 可视化插件\n- 部署容器存储插件\n\n\n#### 安装kubeadm和docker\n```\ncurl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\ncat <<EOF > /etc/apt/sources.list.d/kubernetes.list \ndeb http://mirrors.ustc.edu.cn/kubernetes/apt kubernetes-xenial main\nEOF\napt-get update \napt-get install -y docker.io kubeadm\n```\n\n上述安装kubeadm的过程中，kubeadm和kubelet、kubectl、kubernetes-cni这几个二进制文件都会被自动安装好\n\n#### 部署K8s的master节点\n++通过配置文件来部署，自定义一些功能++\n\n1.编写yaml文件（kubeadm.yaml）\n```\napiVersion: kubeadm.k8s.io/v1alpha1 \nkind: MasterConfiguration \ncontrollerManagerExtraArgs:\n    horizontal-pod-autoscaler-use-rest-clients: \"true\" \n    horizontal-pod-autoscaler-sync-period: \"10s\"\n    node-monitor-grace-period: \"10s\" \napiServerExtraArgs:  \n    runtime-config: \"api/all=true\" \nkubernetesVersion: \"stable-1.11\"\n```\n配置中，设置horizontal-pod-autoscaler-use-rest-clients: \"true\"，将来部署kube-controller-manager能够使用自定义资源进行水平扩展\n\n**部署命令**\n```\nkubeadm init --config kubeadm.yaml\n```\n\n部署完成会生成一行指令：\n```\n kubeadm join 10.168.0.2:6443 --token 00bwbx.uvnaa2ewjflwu1ry --discovery-token- ....\n```\n这个join命令，是用来给这个master节点添加多个工作节点(worker)的命令，需要记录下来。\n\n**部署配置信息**\n```\nmkdir -p $HONE/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\nk8s集群默认需要加密方式访问，这几条命令，就是将刚刚部署生成的kubernetes集群的安全配置文件，保存在当前用户的.kube目录下，kubectl默认会使用这个目录下的授权信息访问k8s集群。\n\n**查看节点状态**\n```\n$ kubectl get nodes\nNAME      STATUS     ROLES     AGE       VERSION \nmaster    NotReady   master    1d        v1.11.1\n```\n\n**查看节点对象详细信息**\n```\nkubectl describe node master\n```\n\n**检查这个节点上各个系统Pod的状态**\n```\nkubectl get pods -n kube-system\n```\nkube-system是k8s项目预留的系统Pod的工作空间\n\n\n#### 部署网络插件\n\n部署网络插件只需执行kubectl apply指令，以Weave为例：\n```\nkubectl apply -f https://git.io/weave-kube-1.6\n```\n部署完成后，执行 kubectl get pods -n kube-system重新检查Pod状态\n\n\n#### 部署k8s的worker节点\nk8s的worker节点跟master节点几乎相同，它们运行着的都是一个kubelet组件，唯一的区别在于，kubeadm init的过程中，kubelet启动后， master节点上还会自动运行kube-apiserver、kube-scheduler、 kube-controller-manger 这三个系统Pod\n- 安装kubeadm 和 docker\n- 执行部署master节点时生成的kubeadm join 指令\n```\n$ kubeadm join 10.168.0.2:6443 --token 00bwbx.uvnaa2ewjflwu1ry --discovery-token-ca-cert ...\n```\n\n#### 通过Taint/Toleration调整master执行Pod的策略\n默认情况下master节点是不允许运行用户Pod的，而k8s做到这一点，依靠的是k8s的Taint/Toleration机制。\n\n**原理：**\n一旦某个节点被加上一个Taint,即被‘打上了污点’，那么所有的Pod就都不能在这个节点上运行。\n\n*打上污点命令*\n```\n$ kubectl taint nodes node1 foo=bar:NoSchedule\n```\n这时，该node1节点上就会增加一个键值对格式的Taint，即foo=bar:NoSchedule\n其中值里面的NoSchedule，意味着这个Taint只会在调度新的Pod时产生作用，不会影响已经在node1上运行的Pod，哪怕它们没有Toleration。\n\n#### Pod声明 Toleration\n在Pod的.yaml文件中的spec部分，加入tolerations字段即可：\n```\napiVersion: v1\nkind: Pod\n...\nspec:\n    tolerations:\n    - key: \"foo\"\n      operator: \"Equal\"\n      value: \"bar\"\n      effect: \"NoSchedule\"\n```\n这个Toleration的含义是，这个Pod能“接受”所有键值对为foo=bar 的Taint。\n\n#### 让Pod运行在master节点上\n\n```\napiVersion: v1\nkind: Pod\n...\nspec:\n    tolerations:\n    - key: \"foo\"\n      operator: \"Exists\"\n      effect: \"NoSchedule\"\n```\n\"Exists\"操作符，表示该Pod能容忍所有以foo为键的Taint.\n\n#### 如果只想要一个单节点的K8S,删除这个Taint才是正确的选择\n```\n$ kubectl taint nodes --all node-role.kubernetes.io/master-\n```\n我们在\"node-role.kubernetes.io/master\" 这个键后面加上了一个短横线\"-\"，这个格式就是移除所有以\"node-role.kubernetes.io/master\"为键的Taint。\n\n\n#### 部署Dashboard可视化插件\n```\n $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/dep... \n```\n部署完成后，可用查看Dashboard对应的Pod的状态了：\n```\n$ kubectl get pods -n kube-system\n```\n**注意：**\n由于Dashboard是一个web server, 1.7版本后的默认只能通过Proxy的方式在本地访问。\n\n#### 部署容器存储插件\nk8s 集群的最后一块拼图：容器持久化存储\n> **容器最典型的特征之一：无状态**\n如果你在某一台机器上启动了一个容器，无法看到其他机器上的容器在它们的数据卷里写入的文件。\n\n容器的持久化存储，就是用来保存容器存储状态的重要手段：存储插件会在容器里挂载一个基于网络或者其它机制的远程数据卷，使得在容器里创建的文件，实际上是保存在远程存储服务器上，或者以分布式的方式保存在多个节点上，而与当前宿主机没有任何绑定关系。\n\n本次部署中，选择一个很重要的k8s存储插件项目：Rook\nRook项目是一个基于Ceph的k8s存储插件，Rook在自己的实现中加入了水平扩展，迁移，灾难备份，监控等大量的企业级功能，使得这个项目变成一个完整的、生成级别可用的容器存储插件。\n\n```\n$ kubectl apply -f https://raw.githubusercontent.com/rook/rook/master/cluster/examples/k...\n```\n","slug":"搭建k8s集群","published":1,"updated":"2022-03-20T14:21:26.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde08h003q9jx3g6fqd7yq","content":"<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><ul><li>满足安装docker项目所需的要求，比如64位Linux操作系统，3.10及以上的内核版本</li><li>x86或者ARM架构均可</li><li>机器之间网络互通，这是容器之间网络互通的前提</li><li>有外网访问权限，需要拉取镜像</li><li>能够访问 gcr.io、quay.io 这个两个docker registry，因为小部分镜像需要在这里拉取</li><li>单机可用资源建议2核CPU， 8GB内存或以上</li><li>30GB或以上的可用磁盘空间，这主要是留给docker镜像和日志文件使用</li></ul><a id=\"more\"></a><h4 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h4><ul><li>在所有节点上安装docker 和kubeadm</li><li>部署kubernets Master</li><li>部署容器网络插件</li><li>部署Dashboard 可视化插件</li><li>部署容器存储插件</li></ul><h4 id=\"安装kubeadm和docker\"><a href=\"#安装kubeadm和docker\" class=\"headerlink\" title=\"安装kubeadm和docker\"></a>安装kubeadm和docker</h4><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s http<span class=\"variable\">s:</span>//packages.cloud.google.<span class=\"keyword\">com</span>/apt/doc/apt-key.gpg | apt-key <span class=\"built_in\">add</span> -</span><br><span class=\"line\"><span class=\"keyword\">cat</span> &lt;&lt;EOF &gt; /etc/apt/sources.<span class=\"keyword\">list</span>.d/kubernetes.<span class=\"keyword\">list</span> </span><br><span class=\"line\"><span class=\"keyword\">deb</span> http://mirrors.ustc.edu.<span class=\"keyword\">cn</span>/kubernetes/apt kubernetes-xenial main</span><br><span class=\"line\">EOF</span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span> </span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install -<span class=\"keyword\">y</span> docker.io kubeadm</span><br></pre></td></tr></table></figure><p>上述安装kubeadm的过程中，kubeadm和kubelet、kubectl、kubernetes-cni这几个二进制文件都会被自动安装好</p><h4 id=\"部署K8s的master节点\"><a href=\"#部署K8s的master节点\" class=\"headerlink\" title=\"部署K8s的master节点\"></a>部署K8s的master节点</h4><p>++通过配置文件来部署，自定义一些功能++</p><p>1.编写yaml文件（kubeadm.yaml）</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">apiVersion:</span> kubeadm.k8s.io/v1alpha1 </span><br><span class=\"line\"><span class=\"string\">kind:</span> MasterConfiguration </span><br><span class=\"line\"><span class=\"string\">controllerManagerExtraArgs:</span></span><br><span class=\"line\">    horizontal-pod-autoscaler-use-rest-<span class=\"string\">clients:</span> <span class=\"string\">\"true\"</span> </span><br><span class=\"line\">    horizontal-pod-autoscaler-sync-<span class=\"string\">period:</span> <span class=\"string\">\"10s\"</span></span><br><span class=\"line\">    node-monitor-grace-<span class=\"string\">period:</span> <span class=\"string\">\"10s\"</span> </span><br><span class=\"line\"><span class=\"string\">apiServerExtraArgs:</span>  </span><br><span class=\"line\">    runtime-<span class=\"string\">config:</span> <span class=\"string\">\"api/all=true\"</span> </span><br><span class=\"line\"><span class=\"string\">kubernetesVersion:</span> <span class=\"string\">\"stable-1.11\"</span></span><br></pre></td></tr></table></figure><p>配置中，设置horizontal-pod-autoscaler-use-rest-clients: “true”，将来部署kube-controller-manager能够使用自定义资源进行水平扩展</p><p><strong>部署命令</strong></p><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init <span class=\"comment\">--config kubeadm.yaml</span></span><br></pre></td></tr></table></figure><p>部署完成会生成一行指令：</p><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join <span class=\"number\">10.168</span><span class=\"number\">.0</span><span class=\"number\">.2</span>:<span class=\"number\">6443</span> --token <span class=\"number\">00</span>bwbx.uvnaa2ewjflwu1ry --discovery-token- ....</span><br></pre></td></tr></table></figure><p>这个join命令，是用来给这个master节点添加多个工作节点(worker)的命令，需要记录下来。</p><p><strong>部署配置信息</strong></p><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$HONE</span>/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>k8s集群默认需要加密方式访问，这几条命令，就是将刚刚部署生成的kubernetes集群的安全配置文件，保存在当前用户的.kube目录下，kubectl默认会使用这个目录下的授权信息访问k8s集群。</p><p><strong>查看节点状态</strong></p><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get nodes</span><br><span class=\"line\">NAME      STATUS     ROLES     AGE       <span class=\"keyword\">VERSION</span> </span><br><span class=\"line\"><span class=\"keyword\">master</span>    <span class=\"title\">NotReady</span>   <span class=\"keyword\">master</span>    <span class=\"title\">1d</span>        v1.<span class=\"number\">11.1</span></span><br></pre></td></tr></table></figure><p><strong>查看节点对象详细信息</strong></p><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl describe <span class=\"keyword\">node</span> <span class=\"title\">master</span></span><br></pre></td></tr></table></figure><p><strong>检查这个节点上各个系统Pod的状态</strong></p><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">get</span> pods -n kube-<span class=\"keyword\">system</span></span><br></pre></td></tr></table></figure><p>kube-system是k8s项目预留的系统Pod的工作空间</p><h4 id=\"部署网络插件\"><a href=\"#部署网络插件\" class=\"headerlink\" title=\"部署网络插件\"></a>部署网络插件</h4><p>部署网络插件只需执行kubectl apply指令，以Weave为例：</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f <span class=\"string\">https:</span><span class=\"comment\">//git.io/weave-kube-1.6</span></span><br></pre></td></tr></table></figure><p>部署完成后，执行 kubectl get pods -n kube-system重新检查Pod状态</p><h4 id=\"部署k8s的worker节点\"><a href=\"#部署k8s的worker节点\" class=\"headerlink\" title=\"部署k8s的worker节点\"></a>部署k8s的worker节点</h4><p>k8s的worker节点跟master节点几乎相同，它们运行着的都是一个kubelet组件，唯一的区别在于，kubeadm init的过程中，kubelet启动后， master节点上还会自动运行kube-apiserver、kube-scheduler、 kube-controller-manger 这三个系统Pod</p><ul><li>安装kubeadm 和 docker</li><li>执行部署master节点时生成的kubeadm join 指令<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm join <span class=\"number\">10.168</span><span class=\"number\">.0</span><span class=\"number\">.2</span>:<span class=\"number\">6443</span> --token <span class=\"number\">00</span>bwbx.uvnaa2ewjflwu1ry --discovery-token-ca-cert ...</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"通过Taint-Toleration调整master执行Pod的策略\"><a href=\"#通过Taint-Toleration调整master执行Pod的策略\" class=\"headerlink\" title=\"通过Taint/Toleration调整master执行Pod的策略\"></a>通过Taint/Toleration调整master执行Pod的策略</h4><p>默认情况下master节点是不允许运行用户Pod的，而k8s做到这一点，依靠的是k8s的Taint/Toleration机制。</p><p><strong>原理：</strong><br>一旦某个节点被加上一个Taint,即被‘打上了污点’，那么所有的Pod就都不能在这个节点上运行。</p><p><em>打上污点命令</em></p><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl taint nodes node1 <span class=\"attribute\">foo</span>=bar:NoSchedule</span><br></pre></td></tr></table></figure><p>这时，该node1节点上就会增加一个键值对格式的Taint，即foo=bar:NoSchedule<br>其中值里面的NoSchedule，意味着这个Taint只会在调度新的Pod时产生作用，不会影响已经在node1上运行的Pod，哪怕它们没有Toleration。</p><h4 id=\"Pod声明-Toleration\"><a href=\"#Pod声明-Toleration\" class=\"headerlink\" title=\"Pod声明 Toleration\"></a>Pod声明 Toleration</h4><p>在Pod的.yaml文件中的spec部分，加入tolerations字段即可：</p><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">apiVersion</span>: v1</span><br><span class=\"line\"><span class=\"attribute\">kind</span>: Pod</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"attribute\">spec</span>:</span><br><span class=\"line\">    <span class=\"attribute\">tolerations</span>:</span><br><span class=\"line\">    - <span class=\"attribute\">key</span>: <span class=\"string\">\"foo\"</span></span><br><span class=\"line\">      <span class=\"attribute\">operator</span>: <span class=\"string\">\"Equal\"</span></span><br><span class=\"line\">      <span class=\"attribute\">value</span>: <span class=\"string\">\"bar\"</span></span><br><span class=\"line\">      <span class=\"attribute\">effect</span>: <span class=\"string\">\"NoSchedule\"</span></span><br></pre></td></tr></table></figure><p>这个Toleration的含义是，这个Pod能“接受”所有键值对为foo=bar 的Taint。</p><h4 id=\"让Pod运行在master节点上\"><a href=\"#让Pod运行在master节点上\" class=\"headerlink\" title=\"让Pod运行在master节点上\"></a>让Pod运行在master节点上</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">apiVersion</span>: v1</span><br><span class=\"line\"><span class=\"attribute\">kind</span>: Pod</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"attribute\">spec</span>:</span><br><span class=\"line\">    <span class=\"attribute\">tolerations</span>:</span><br><span class=\"line\">    - <span class=\"attribute\">key</span>: <span class=\"string\">\"foo\"</span></span><br><span class=\"line\">      <span class=\"attribute\">operator</span>: <span class=\"string\">\"Exists\"</span></span><br><span class=\"line\">      <span class=\"attribute\">effect</span>: <span class=\"string\">\"NoSchedule\"</span></span><br></pre></td></tr></table></figure><p>“Exists”操作符，表示该Pod能容忍所有以foo为键的Taint.</p><h4 id=\"如果只想要一个单节点的K8S-删除这个Taint才是正确的选择\"><a href=\"#如果只想要一个单节点的K8S-删除这个Taint才是正确的选择\" class=\"headerlink\" title=\"如果只想要一个单节点的K8S,删除这个Taint才是正确的选择\"></a>如果只想要一个单节点的K8S,删除这个Taint才是正确的选择</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl taint nodes --all <span class=\"keyword\">node</span><span class=\"title\">-role</span>.kubernetes.io/<span class=\"literal\">master</span>-</span><br></pre></td></tr></table></figure><p>我们在”node-role.kubernetes.io/master” 这个键后面加上了一个短横线”-“，这个格式就是移除所有以”node-role.kubernetes.io/master”为键的Taint。</p><h4 id=\"部署Dashboard可视化插件\"><a href=\"#部署Dashboard可视化插件\" class=\"headerlink\" title=\"部署Dashboard可视化插件\"></a>部署Dashboard可视化插件</h4><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>kubectl apply -f <span class=\"symbol\">https:</span>/<span class=\"regexp\">/raw.githubusercontent.com/kubernetes</span><span class=\"regexp\">/dashboard/master</span><span class=\"regexp\">/src/dep</span>...</span><br></pre></td></tr></table></figure><p>部署完成后，可用查看Dashboard对应的Pod的状态了：</p><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> kubectl get pods -n kube-<span class=\"keyword\">system</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>由于Dashboard是一个web server, 1.7版本后的默认只能通过Proxy的方式在本地访问。</p><h4 id=\"部署容器存储插件\"><a href=\"#部署容器存储插件\" class=\"headerlink\" title=\"部署容器存储插件\"></a>部署容器存储插件</h4><p>k8s 集群的最后一块拼图：容器持久化存储</p><blockquote><p><strong>容器最典型的特征之一：无状态</strong><br>如果你在某一台机器上启动了一个容器，无法看到其他机器上的容器在它们的数据卷里写入的文件。</p></blockquote><p>容器的持久化存储，就是用来保存容器存储状态的重要手段：存储插件会在容器里挂载一个基于网络或者其它机制的远程数据卷，使得在容器里创建的文件，实际上是保存在远程存储服务器上，或者以分布式的方式保存在多个节点上，而与当前宿主机没有任何绑定关系。</p><p>本次部署中，选择一个很重要的k8s存储插件项目：Rook<br>Rook项目是一个基于Ceph的k8s存储插件，Rook在自己的实现中加入了水平扩展，迁移，灾难备份，监控等大量的企业级功能，使得这个项目变成一个完整的、生成级别可用的容器存储插件。</p><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/rook/</span>rook<span class=\"regexp\">/master/</span>cluster<span class=\"regexp\">/examples/</span>k...</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><ul><li>满足安装docker项目所需的要求，比如64位Linux操作系统，3.10及以上的内核版本</li><li>x86或者ARM架构均可</li><li>机器之间网络互通，这是容器之间网络互通的前提</li><li>有外网访问权限，需要拉取镜像</li><li>能够访问 gcr.io、quay.io 这个两个docker registry，因为小部分镜像需要在这里拉取</li><li>单机可用资源建议2核CPU， 8GB内存或以上</li><li>30GB或以上的可用磁盘空间，这主要是留给docker镜像和日志文件使用</li></ul>","more":"<h4 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h4><ul><li>在所有节点上安装docker 和kubeadm</li><li>部署kubernets Master</li><li>部署容器网络插件</li><li>部署Dashboard 可视化插件</li><li>部署容器存储插件</li></ul><h4 id=\"安装kubeadm和docker\"><a href=\"#安装kubeadm和docker\" class=\"headerlink\" title=\"安装kubeadm和docker\"></a>安装kubeadm和docker</h4><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s http<span class=\"variable\">s:</span>//packages.cloud.google.<span class=\"keyword\">com</span>/apt/doc/apt-key.gpg | apt-key <span class=\"built_in\">add</span> -</span><br><span class=\"line\"><span class=\"keyword\">cat</span> &lt;&lt;EOF &gt; /etc/apt/sources.<span class=\"keyword\">list</span>.d/kubernetes.<span class=\"keyword\">list</span> </span><br><span class=\"line\"><span class=\"keyword\">deb</span> http://mirrors.ustc.edu.<span class=\"keyword\">cn</span>/kubernetes/apt kubernetes-xenial main</span><br><span class=\"line\">EOF</span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span> </span><br><span class=\"line\">apt-<span class=\"built_in\">get</span> install -<span class=\"keyword\">y</span> docker.io kubeadm</span><br></pre></td></tr></table></figure><p>上述安装kubeadm的过程中，kubeadm和kubelet、kubectl、kubernetes-cni这几个二进制文件都会被自动安装好</p><h4 id=\"部署K8s的master节点\"><a href=\"#部署K8s的master节点\" class=\"headerlink\" title=\"部署K8s的master节点\"></a>部署K8s的master节点</h4><p>++通过配置文件来部署，自定义一些功能++</p><p>1.编写yaml文件（kubeadm.yaml）</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">apiVersion:</span> kubeadm.k8s.io/v1alpha1 </span><br><span class=\"line\"><span class=\"string\">kind:</span> MasterConfiguration </span><br><span class=\"line\"><span class=\"string\">controllerManagerExtraArgs:</span></span><br><span class=\"line\">    horizontal-pod-autoscaler-use-rest-<span class=\"string\">clients:</span> <span class=\"string\">\"true\"</span> </span><br><span class=\"line\">    horizontal-pod-autoscaler-sync-<span class=\"string\">period:</span> <span class=\"string\">\"10s\"</span></span><br><span class=\"line\">    node-monitor-grace-<span class=\"string\">period:</span> <span class=\"string\">\"10s\"</span> </span><br><span class=\"line\"><span class=\"string\">apiServerExtraArgs:</span>  </span><br><span class=\"line\">    runtime-<span class=\"string\">config:</span> <span class=\"string\">\"api/all=true\"</span> </span><br><span class=\"line\"><span class=\"string\">kubernetesVersion:</span> <span class=\"string\">\"stable-1.11\"</span></span><br></pre></td></tr></table></figure><p>配置中，设置horizontal-pod-autoscaler-use-rest-clients: “true”，将来部署kube-controller-manager能够使用自定义资源进行水平扩展</p><p><strong>部署命令</strong></p><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init <span class=\"comment\">--config kubeadm.yaml</span></span><br></pre></td></tr></table></figure><p>部署完成会生成一行指令：</p><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join <span class=\"number\">10.168</span><span class=\"number\">.0</span><span class=\"number\">.2</span>:<span class=\"number\">6443</span> --token <span class=\"number\">00</span>bwbx.uvnaa2ewjflwu1ry --discovery-token- ....</span><br></pre></td></tr></table></figure><p>这个join命令，是用来给这个master节点添加多个工作节点(worker)的命令，需要记录下来。</p><p><strong>部署配置信息</strong></p><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$HONE</span>/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>k8s集群默认需要加密方式访问，这几条命令，就是将刚刚部署生成的kubernetes集群的安全配置文件，保存在当前用户的.kube目录下，kubectl默认会使用这个目录下的授权信息访问k8s集群。</p><p><strong>查看节点状态</strong></p><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get nodes</span><br><span class=\"line\">NAME      STATUS     ROLES     AGE       <span class=\"keyword\">VERSION</span> </span><br><span class=\"line\"><span class=\"keyword\">master</span>    <span class=\"title\">NotReady</span>   <span class=\"keyword\">master</span>    <span class=\"title\">1d</span>        v1.<span class=\"number\">11.1</span></span><br></pre></td></tr></table></figure><p><strong>查看节点对象详细信息</strong></p><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl describe <span class=\"keyword\">node</span> <span class=\"title\">master</span></span><br></pre></td></tr></table></figure><p><strong>检查这个节点上各个系统Pod的状态</strong></p><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">get</span> pods -n kube-<span class=\"keyword\">system</span></span><br></pre></td></tr></table></figure><p>kube-system是k8s项目预留的系统Pod的工作空间</p><h4 id=\"部署网络插件\"><a href=\"#部署网络插件\" class=\"headerlink\" title=\"部署网络插件\"></a>部署网络插件</h4><p>部署网络插件只需执行kubectl apply指令，以Weave为例：</p><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f <span class=\"string\">https:</span><span class=\"comment\">//git.io/weave-kube-1.6</span></span><br></pre></td></tr></table></figure><p>部署完成后，执行 kubectl get pods -n kube-system重新检查Pod状态</p><h4 id=\"部署k8s的worker节点\"><a href=\"#部署k8s的worker节点\" class=\"headerlink\" title=\"部署k8s的worker节点\"></a>部署k8s的worker节点</h4><p>k8s的worker节点跟master节点几乎相同，它们运行着的都是一个kubelet组件，唯一的区别在于，kubeadm init的过程中，kubelet启动后， master节点上还会自动运行kube-apiserver、kube-scheduler、 kube-controller-manger 这三个系统Pod</p><ul><li>安装kubeadm 和 docker</li><li>执行部署master节点时生成的kubeadm join 指令<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm join <span class=\"number\">10.168</span><span class=\"number\">.0</span><span class=\"number\">.2</span>:<span class=\"number\">6443</span> --token <span class=\"number\">00</span>bwbx.uvnaa2ewjflwu1ry --discovery-token-ca-cert ...</span><br></pre></td></tr></table></figure></li></ul><h4 id=\"通过Taint-Toleration调整master执行Pod的策略\"><a href=\"#通过Taint-Toleration调整master执行Pod的策略\" class=\"headerlink\" title=\"通过Taint/Toleration调整master执行Pod的策略\"></a>通过Taint/Toleration调整master执行Pod的策略</h4><p>默认情况下master节点是不允许运行用户Pod的，而k8s做到这一点，依靠的是k8s的Taint/Toleration机制。</p><p><strong>原理：</strong><br>一旦某个节点被加上一个Taint,即被‘打上了污点’，那么所有的Pod就都不能在这个节点上运行。</p><p><em>打上污点命令</em></p><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl taint nodes node1 <span class=\"attribute\">foo</span>=bar:NoSchedule</span><br></pre></td></tr></table></figure><p>这时，该node1节点上就会增加一个键值对格式的Taint，即foo=bar:NoSchedule<br>其中值里面的NoSchedule，意味着这个Taint只会在调度新的Pod时产生作用，不会影响已经在node1上运行的Pod，哪怕它们没有Toleration。</p><h4 id=\"Pod声明-Toleration\"><a href=\"#Pod声明-Toleration\" class=\"headerlink\" title=\"Pod声明 Toleration\"></a>Pod声明 Toleration</h4><p>在Pod的.yaml文件中的spec部分，加入tolerations字段即可：</p><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">apiVersion</span>: v1</span><br><span class=\"line\"><span class=\"attribute\">kind</span>: Pod</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"attribute\">spec</span>:</span><br><span class=\"line\">    <span class=\"attribute\">tolerations</span>:</span><br><span class=\"line\">    - <span class=\"attribute\">key</span>: <span class=\"string\">\"foo\"</span></span><br><span class=\"line\">      <span class=\"attribute\">operator</span>: <span class=\"string\">\"Equal\"</span></span><br><span class=\"line\">      <span class=\"attribute\">value</span>: <span class=\"string\">\"bar\"</span></span><br><span class=\"line\">      <span class=\"attribute\">effect</span>: <span class=\"string\">\"NoSchedule\"</span></span><br></pre></td></tr></table></figure><p>这个Toleration的含义是，这个Pod能“接受”所有键值对为foo=bar 的Taint。</p><h4 id=\"让Pod运行在master节点上\"><a href=\"#让Pod运行在master节点上\" class=\"headerlink\" title=\"让Pod运行在master节点上\"></a>让Pod运行在master节点上</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">apiVersion</span>: v1</span><br><span class=\"line\"><span class=\"attribute\">kind</span>: Pod</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"attribute\">spec</span>:</span><br><span class=\"line\">    <span class=\"attribute\">tolerations</span>:</span><br><span class=\"line\">    - <span class=\"attribute\">key</span>: <span class=\"string\">\"foo\"</span></span><br><span class=\"line\">      <span class=\"attribute\">operator</span>: <span class=\"string\">\"Exists\"</span></span><br><span class=\"line\">      <span class=\"attribute\">effect</span>: <span class=\"string\">\"NoSchedule\"</span></span><br></pre></td></tr></table></figure><p>“Exists”操作符，表示该Pod能容忍所有以foo为键的Taint.</p><h4 id=\"如果只想要一个单节点的K8S-删除这个Taint才是正确的选择\"><a href=\"#如果只想要一个单节点的K8S-删除这个Taint才是正确的选择\" class=\"headerlink\" title=\"如果只想要一个单节点的K8S,删除这个Taint才是正确的选择\"></a>如果只想要一个单节点的K8S,删除这个Taint才是正确的选择</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl taint nodes --all <span class=\"keyword\">node</span><span class=\"title\">-role</span>.kubernetes.io/<span class=\"literal\">master</span>-</span><br></pre></td></tr></table></figure><p>我们在”node-role.kubernetes.io/master” 这个键后面加上了一个短横线”-“，这个格式就是移除所有以”node-role.kubernetes.io/master”为键的Taint。</p><h4 id=\"部署Dashboard可视化插件\"><a href=\"#部署Dashboard可视化插件\" class=\"headerlink\" title=\"部署Dashboard可视化插件\"></a>部署Dashboard可视化插件</h4><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>kubectl apply -f <span class=\"symbol\">https:</span>/<span class=\"regexp\">/raw.githubusercontent.com/kubernetes</span><span class=\"regexp\">/dashboard/master</span><span class=\"regexp\">/src/dep</span>...</span><br></pre></td></tr></table></figure><p>部署完成后，可用查看Dashboard对应的Pod的状态了：</p><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> kubectl get pods -n kube-<span class=\"keyword\">system</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>由于Dashboard是一个web server, 1.7版本后的默认只能通过Proxy的方式在本地访问。</p><h4 id=\"部署容器存储插件\"><a href=\"#部署容器存储插件\" class=\"headerlink\" title=\"部署容器存储插件\"></a>部署容器存储插件</h4><p>k8s 集群的最后一块拼图：容器持久化存储</p><blockquote><p><strong>容器最典型的特征之一：无状态</strong><br>如果你在某一台机器上启动了一个容器，无法看到其他机器上的容器在它们的数据卷里写入的文件。</p></blockquote><p>容器的持久化存储，就是用来保存容器存储状态的重要手段：存储插件会在容器里挂载一个基于网络或者其它机制的远程数据卷，使得在容器里创建的文件，实际上是保存在远程存储服务器上，或者以分布式的方式保存在多个节点上，而与当前宿主机没有任何绑定关系。</p><p>本次部署中，选择一个很重要的k8s存储插件项目：Rook<br>Rook项目是一个基于Ceph的k8s存储插件，Rook在自己的实现中加入了水平扩展，迁移，灾难备份，监控等大量的企业级功能，使得这个项目变成一个完整的、生成级别可用的容器存储插件。</p><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https:<span class=\"regexp\">//</span>raw.githubusercontent.com<span class=\"regexp\">/rook/</span>rook<span class=\"regexp\">/master/</span>cluster<span class=\"regexp\">/examples/</span>k...</span><br></pre></td></tr></table></figure>"},{"title":"解决api变化问题","type":"categories","copyright":true,"abbrlink":865398304,"date":"2020-01-02T07:48:11.000Z","_content":"\n## python解决api变化的问题\n\n案例：http://cic.org.vn\n\n&emsp;&emsp;该网站用python进行模拟登录时，url链接是经过js加载生成的，当我们用requests发送get请求的时候，返回的结果并不是真正的主页数据，而是一段js代码，但是直接从这段js代码中解析我们需要的登录页url很困难，因此这里我们可以构造一个轻量级的js环境，执行js代码来获取我们需要的数据。\n\n环境：\n我们通过jsdom来构造一个轻量的环境，它是基于node的，因此我们需要安装node环境，这里安装的是node8的版本；\n<!--more-->\n\n```\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nsudo apt-get install -y nodejs\n```\n安装jsdom\n```\nnpm install jsdom\n```\n\n创建js的运行环境\n```python\njs_env = '''\n    const jsdom = require(\"jsdom\");const { JSDOM } = jsdom;\n    const dom = new JSDOM(`<!DOCTYPE html><p>Hello world</p>`, {\n        url: \"%s\",\n        contentType: \"text/html;charset=utf-8\",\n        includeNodeLocations: true,\n        storageQuota: 10000000\n    });\n    const window=dom.window;\n    const document=dom.window.document;\n    const navigator = dom.window.navigator;\n    '''\n```\n### 爬虫部分\n#### 导包\n```python\n# -*- coding: utf-8 -*-\n\nimport execjs\nimport requests\nfrom scrapy import Selector\n```\n\n#### 构造请求\n```python\nsess = requests.Session()\n\nheaders = {\n    'Host': 'cic.org.vn',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n    'Accept-Language': 'en-US,en;q=0.9',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Connection': 'keep-alive',\n    'Upgrade-Insecure-Requests': '1'\n}\n\nurl = \"http://cic.org.vn/\"\nres = sess.get(url=url, headers=headers)\nhtml = Selector(text=res.text)\njs = html.xpath(\"/html/head/script/text()\").extract_first()\n```\n\n#### 将我们获取的js代码加载到我们能构建的js运行环境中\n\n```python\nctx = execjs.compile(js_env % res.url + js)\n```\n\n执行js获取生成的下一个链接\n\n```python\nnext_url = ctx.eval(\"href\") + ctx.eval(\"query\")\nprint(next_url)\n\n# 结果\nurl = \"https://cic.org.vn/webcenter/portal/CMSPortal/;jsessionid=4Hej6rGiIAbPiBs6nsBUMP61E9XNGVRYkRzjI5H0kxOhUW9dTaqR!873813657?_afrLoop=715225492645337\"\n```\n\n接下来的步骤都类似上一步，直到我们最终得到登录的url；最后我们就可以正常的模拟登录进行操作抓取数据了。\n\n## 总结\n&emsp;&emsp;本次的案例是我第一次遇到的爬虫情况，该网站的主页url也是经过js加载的，其参数是一直变化的，其返回的结果并不是主页的数据，因此我们无法直接从返回的数据中解析出我们需要的参数，所以我们构造这么一个轻量级的js环境进行交互，直接问询我们需要的url参数，到最终获取我们需要的登录页链接中间这种js交互需要3次。","source":"_posts/解决api变化问题.md","raw":"---\ntitle: 解决api变化问题\ntype: categories\ncopyright: true\ntags:\n  - 项目\n  - requests\n  - jsdom\ncategories:\n  - python\n  - 爬虫\nabbrlink: 865398304\ndate: 2020-01-02 15:48:11\n---\n\n## python解决api变化的问题\n\n案例：http://cic.org.vn\n\n&emsp;&emsp;该网站用python进行模拟登录时，url链接是经过js加载生成的，当我们用requests发送get请求的时候，返回的结果并不是真正的主页数据，而是一段js代码，但是直接从这段js代码中解析我们需要的登录页url很困难，因此这里我们可以构造一个轻量级的js环境，执行js代码来获取我们需要的数据。\n\n环境：\n我们通过jsdom来构造一个轻量的环境，它是基于node的，因此我们需要安装node环境，这里安装的是node8的版本；\n<!--more-->\n\n```\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nsudo apt-get install -y nodejs\n```\n安装jsdom\n```\nnpm install jsdom\n```\n\n创建js的运行环境\n```python\njs_env = '''\n    const jsdom = require(\"jsdom\");const { JSDOM } = jsdom;\n    const dom = new JSDOM(`<!DOCTYPE html><p>Hello world</p>`, {\n        url: \"%s\",\n        contentType: \"text/html;charset=utf-8\",\n        includeNodeLocations: true,\n        storageQuota: 10000000\n    });\n    const window=dom.window;\n    const document=dom.window.document;\n    const navigator = dom.window.navigator;\n    '''\n```\n### 爬虫部分\n#### 导包\n```python\n# -*- coding: utf-8 -*-\n\nimport execjs\nimport requests\nfrom scrapy import Selector\n```\n\n#### 构造请求\n```python\nsess = requests.Session()\n\nheaders = {\n    'Host': 'cic.org.vn',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n    'Accept-Language': 'en-US,en;q=0.9',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Connection': 'keep-alive',\n    'Upgrade-Insecure-Requests': '1'\n}\n\nurl = \"http://cic.org.vn/\"\nres = sess.get(url=url, headers=headers)\nhtml = Selector(text=res.text)\njs = html.xpath(\"/html/head/script/text()\").extract_first()\n```\n\n#### 将我们获取的js代码加载到我们能构建的js运行环境中\n\n```python\nctx = execjs.compile(js_env % res.url + js)\n```\n\n执行js获取生成的下一个链接\n\n```python\nnext_url = ctx.eval(\"href\") + ctx.eval(\"query\")\nprint(next_url)\n\n# 结果\nurl = \"https://cic.org.vn/webcenter/portal/CMSPortal/;jsessionid=4Hej6rGiIAbPiBs6nsBUMP61E9XNGVRYkRzjI5H0kxOhUW9dTaqR!873813657?_afrLoop=715225492645337\"\n```\n\n接下来的步骤都类似上一步，直到我们最终得到登录的url；最后我们就可以正常的模拟登录进行操作抓取数据了。\n\n## 总结\n&emsp;&emsp;本次的案例是我第一次遇到的爬虫情况，该网站的主页url也是经过js加载的，其参数是一直变化的，其返回的结果并不是主页的数据，因此我们无法直接从返回的数据中解析出我们需要的参数，所以我们构造这么一个轻量级的js环境进行交互，直接问询我们需要的url参数，到最终获取我们需要的登录页链接中间这种js交互需要3次。","slug":"解决api变化问题","published":1,"updated":"2022-03-13T11:49:16.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde08q003u9jx39vdi5zzw","content":"<h2 id=\"python解决api变化的问题\"><a href=\"#python解决api变化的问题\" class=\"headerlink\" title=\"python解决api变化的问题\"></a>python解决api变化的问题</h2><p>案例：<a href=\"http://cic.org.vn\" target=\"_blank\" rel=\"noopener\">http://cic.org.vn</a></p><p>&emsp;&emsp;该网站用python进行模拟登录时，url链接是经过js加载生成的，当我们用requests发送get请求的时候，返回的结果并不是真正的主页数据，而是一段js代码，但是直接从这段js代码中解析我们需要的登录页url很困难，因此这里我们可以构造一个轻量级的js环境，执行js代码来获取我们需要的数据。</p><p>环境：<br>我们通过jsdom来构造一个轻量的环境，它是基于node的，因此我们需要安装node环境，这里安装的是node8的版本；</p><a id=\"more\"></a><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL http<span class=\"variable\">s:</span>//<span class=\"keyword\">deb</span>.nodesource.<span class=\"keyword\">com</span>/setup_8.<span class=\"keyword\">x</span> | sudo -E bash -</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install -<span class=\"keyword\">y</span> nodejs</span><br></pre></td></tr></table></figure><p>安装jsdom</p><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> jsdom</span><br></pre></td></tr></table></figure><p>创建js的运行环境</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js_env = <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    const jsdom = require(\"jsdom\");const &#123; JSDOM &#125; = jsdom;</span></span><br><span class=\"line\"><span class=\"string\">    const dom = new JSDOM(`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`, &#123;</span></span><br><span class=\"line\"><span class=\"string\">        url: \"%s\",</span></span><br><span class=\"line\"><span class=\"string\">        contentType: \"text/html;charset=utf-8\",</span></span><br><span class=\"line\"><span class=\"string\">        includeNodeLocations: true,</span></span><br><span class=\"line\"><span class=\"string\">        storageQuota: 10000000</span></span><br><span class=\"line\"><span class=\"string\">    &#125;);</span></span><br><span class=\"line\"><span class=\"string\">    const window=dom.window;</span></span><br><span class=\"line\"><span class=\"string\">    const document=dom.window.document;</span></span><br><span class=\"line\"><span class=\"string\">    const navigator = dom.window.navigator;</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br></pre></td></tr></table></figure><h3 id=\"爬虫部分\"><a href=\"#爬虫部分\" class=\"headerlink\" title=\"爬虫部分\"></a>爬虫部分</h3><h4 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> execjs</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> Selector</span><br></pre></td></tr></table></figure><h4 id=\"构造请求\"><a href=\"#构造请求\" class=\"headerlink\" title=\"构造请求\"></a>构造请求</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sess = requests.Session()</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'Host'</span>: <span class=\"string\">'cic.org.vn'</span>,</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept'</span>: <span class=\"string\">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'en-US,en;q=0.9'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Encoding'</span>: <span class=\"string\">'gzip, deflate, br'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Connection'</span>: <span class=\"string\">'keep-alive'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Upgrade-Insecure-Requests'</span>: <span class=\"string\">'1'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://cic.org.vn/\"</span></span><br><span class=\"line\">res = sess.get(url=url, headers=headers)</span><br><span class=\"line\">html = Selector(text=res.text)</span><br><span class=\"line\">js = html.xpath(<span class=\"string\">\"/html/head/script/text()\"</span>).extract_first()</span><br></pre></td></tr></table></figure><h4 id=\"将我们获取的js代码加载到我们能构建的js运行环境中\"><a href=\"#将我们获取的js代码加载到我们能构建的js运行环境中\" class=\"headerlink\" title=\"将我们获取的js代码加载到我们能构建的js运行环境中\"></a>将我们获取的js代码加载到我们能构建的js运行环境中</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx = execjs.compile(js_env % res.url + js)</span><br></pre></td></tr></table></figure><p>执行js获取生成的下一个链接</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next_url = ctx.eval(<span class=\"string\">\"href\"</span>) + ctx.eval(<span class=\"string\">\"query\"</span>)</span><br><span class=\"line\">print(next_url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 结果</span></span><br><span class=\"line\">url = <span class=\"string\">\"https://cic.org.vn/webcenter/portal/CMSPortal/;jsessionid=4Hej6rGiIAbPiBs6nsBUMP61E9XNGVRYkRzjI5H0kxOhUW9dTaqR!873813657?_afrLoop=715225492645337\"</span></span><br></pre></td></tr></table></figure><p>接下来的步骤都类似上一步，直到我们最终得到登录的url；最后我们就可以正常的模拟登录进行操作抓取数据了。</p><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>&emsp;&emsp;本次的案例是我第一次遇到的爬虫情况，该网站的主页url也是经过js加载的，其参数是一直变化的，其返回的结果并不是主页的数据，因此我们无法直接从返回的数据中解析出我们需要的参数，所以我们构造这么一个轻量级的js环境进行交互，直接问询我们需要的url参数，到最终获取我们需要的登录页链接中间这种js交互需要3次。</p>","site":{"data":{}},"excerpt":"<h2 id=\"python解决api变化的问题\"><a href=\"#python解决api变化的问题\" class=\"headerlink\" title=\"python解决api变化的问题\"></a>python解决api变化的问题</h2><p>案例：<a href=\"http://cic.org.vn\" target=\"_blank\" rel=\"noopener\">http://cic.org.vn</a></p><p>&emsp;&emsp;该网站用python进行模拟登录时，url链接是经过js加载生成的，当我们用requests发送get请求的时候，返回的结果并不是真正的主页数据，而是一段js代码，但是直接从这段js代码中解析我们需要的登录页url很困难，因此这里我们可以构造一个轻量级的js环境，执行js代码来获取我们需要的数据。</p><p>环境：<br>我们通过jsdom来构造一个轻量的环境，它是基于node的，因此我们需要安装node环境，这里安装的是node8的版本；</p>","more":"<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL http<span class=\"variable\">s:</span>//<span class=\"keyword\">deb</span>.nodesource.<span class=\"keyword\">com</span>/setup_8.<span class=\"keyword\">x</span> | sudo -E bash -</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install -<span class=\"keyword\">y</span> nodejs</span><br></pre></td></tr></table></figure><p>安装jsdom</p><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> jsdom</span><br></pre></td></tr></table></figure><p>创建js的运行环境</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js_env = <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    const jsdom = require(\"jsdom\");const &#123; JSDOM &#125; = jsdom;</span></span><br><span class=\"line\"><span class=\"string\">    const dom = new JSDOM(`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`, &#123;</span></span><br><span class=\"line\"><span class=\"string\">        url: \"%s\",</span></span><br><span class=\"line\"><span class=\"string\">        contentType: \"text/html;charset=utf-8\",</span></span><br><span class=\"line\"><span class=\"string\">        includeNodeLocations: true,</span></span><br><span class=\"line\"><span class=\"string\">        storageQuota: 10000000</span></span><br><span class=\"line\"><span class=\"string\">    &#125;);</span></span><br><span class=\"line\"><span class=\"string\">    const window=dom.window;</span></span><br><span class=\"line\"><span class=\"string\">    const document=dom.window.document;</span></span><br><span class=\"line\"><span class=\"string\">    const navigator = dom.window.navigator;</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br></pre></td></tr></table></figure><h3 id=\"爬虫部分\"><a href=\"#爬虫部分\" class=\"headerlink\" title=\"爬虫部分\"></a>爬虫部分</h3><h4 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> execjs</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> Selector</span><br></pre></td></tr></table></figure><h4 id=\"构造请求\"><a href=\"#构造请求\" class=\"headerlink\" title=\"构造请求\"></a>构造请求</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sess = requests.Session()</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'Host'</span>: <span class=\"string\">'cic.org.vn'</span>,</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept'</span>: <span class=\"string\">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'en-US,en;q=0.9'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Encoding'</span>: <span class=\"string\">'gzip, deflate, br'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Connection'</span>: <span class=\"string\">'keep-alive'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Upgrade-Insecure-Requests'</span>: <span class=\"string\">'1'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://cic.org.vn/\"</span></span><br><span class=\"line\">res = sess.get(url=url, headers=headers)</span><br><span class=\"line\">html = Selector(text=res.text)</span><br><span class=\"line\">js = html.xpath(<span class=\"string\">\"/html/head/script/text()\"</span>).extract_first()</span><br></pre></td></tr></table></figure><h4 id=\"将我们获取的js代码加载到我们能构建的js运行环境中\"><a href=\"#将我们获取的js代码加载到我们能构建的js运行环境中\" class=\"headerlink\" title=\"将我们获取的js代码加载到我们能构建的js运行环境中\"></a>将我们获取的js代码加载到我们能构建的js运行环境中</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx = execjs.compile(js_env % res.url + js)</span><br></pre></td></tr></table></figure><p>执行js获取生成的下一个链接</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next_url = ctx.eval(<span class=\"string\">\"href\"</span>) + ctx.eval(<span class=\"string\">\"query\"</span>)</span><br><span class=\"line\">print(next_url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 结果</span></span><br><span class=\"line\">url = <span class=\"string\">\"https://cic.org.vn/webcenter/portal/CMSPortal/;jsessionid=4Hej6rGiIAbPiBs6nsBUMP61E9XNGVRYkRzjI5H0kxOhUW9dTaqR!873813657?_afrLoop=715225492645337\"</span></span><br></pre></td></tr></table></figure><p>接下来的步骤都类似上一步，直到我们最终得到登录的url；最后我们就可以正常的模拟登录进行操作抓取数据了。</p><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>&emsp;&emsp;本次的案例是我第一次遇到的爬虫情况，该网站的主页url也是经过js加载的，其参数是一直变化的，其返回的结果并不是主页的数据，因此我们无法直接从返回的数据中解析出我们需要的参数，所以我们构造这么一个轻量级的js环境进行交互，直接问询我们需要的url参数，到最终获取我们需要的登录页链接中间这种js交互需要3次。</p>"},{"title":"tcp和udp的区别","type":"categories","copyright":true,"keywords":["TCP","UDP"],"top":79,"abbrlink":810003588,"date":"2022-03-03T06:44:07.000Z","_content":"\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n## tcp的特点\n- 面向连接， 数据发送之前先建立连接，那么这样能保证对方的ip地址是有效的\n- 应答机制， 对方收到数据以后会进行回复\n- 超时重传， 数据在发送过程中，如果对方一直没有回复，那么会隔一段时间再次发送数据，如果对方一直没有回复，那么就会认为对方掉线了。\n- 错误校验， 发送的数据和接收的数据会进行比较，如果数据不一致，会删除数据重新发送，如果是重复数据也会删除。\n- 流量控制， 如果接收方没有及时接收数据，那么发送方就不会一直发送数据，比如先发1M数据，等接收方开始接收数据的时候才开始继续发送数据。\n<!-- more -->\n\n## tcp和udp的对比\n- tcp面向连接，udp不面向连接，直接发送数据\n- tcp能保证数据的准确性和有效性，udp保证不了\n- tcp有超时重传机制，udp没有\n- tcp有流量控制（果接收方没有及时接收数据，那么发送方就不会一直发送数据，），udp没有\n- tcp因为需要建立连接，需要资源开销，udp 不需要建立连接，没有太多资源开销，那么这样tcp的传输数据不如udp\n- tcp不适合做广播，udp适合做广播\n\n## tcp注意点\n- tcp服务器一般情况下都需要绑定，否则客户端找不到这个服务器\n\n- tcp客户端一般不绑定，因为是主动链接服务器，所以只要确定好服务器的ip、port等信息就好，本地客户端可以随机\n- tcp服务器中通过listen可以将socket创建出来的主动套接字变为被动的，这是做tcp服务器时必须要做的\n- 当客户端需要链接服务器时，就需要使用connect进行链接，udp是不需要链接的而是直接发送，但是tcp必须先链接，只有链接成功才能通信\n- 当一个tcp客户端连接服务器时，服务器端会有1个新的套接字，这个套接字用来标记这个客户端，单独为这个客户端服务\n- listen后的套接字是被动套接字，用来接收新的客户端的链接请求的，而accept返回的新套接字是标记这个新客户端的\n- 关闭listen后的套接字意味着被动套接字关闭了，会导致新的客户端不能够链接服务器，但是之前已经链接成功的客户端正常通信。\n- 关闭accept返回的套接字意味着这个客户端已经服务完毕\n- 当客户端的套接字调用close后，服务器端会recv解堵塞，并且返回的长度为0，因此服务器可以通过返回数据的长度来区别客户端是否已经下线\n\n\n## tcp的三次握手和四次挥手\n### 三次握手\n- 第一次握手：客户端发送syn包(syn=x)到服务器，并进入SYN_SEND状态，等待服务器确认；\n- 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n- 第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。\n\n### 四次挥手\n- 第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。\n- 第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。\n- 第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。\n- 第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。\n\n","source":"_posts/tcp和udp的区别.md","raw":"---\ntitle: tcp和udp的区别\ntype: categories\ncopyright: true\ntags: '-python - tcp&udp'\ncategories:\n  - python\n  - tcp\nkeywords:\n  - TCP\n  - UDP\ntop: 79\nabbrlink: 810003588\ndate: 2022-03-03 14:44:07\n---\n\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n## tcp的特点\n- 面向连接， 数据发送之前先建立连接，那么这样能保证对方的ip地址是有效的\n- 应答机制， 对方收到数据以后会进行回复\n- 超时重传， 数据在发送过程中，如果对方一直没有回复，那么会隔一段时间再次发送数据，如果对方一直没有回复，那么就会认为对方掉线了。\n- 错误校验， 发送的数据和接收的数据会进行比较，如果数据不一致，会删除数据重新发送，如果是重复数据也会删除。\n- 流量控制， 如果接收方没有及时接收数据，那么发送方就不会一直发送数据，比如先发1M数据，等接收方开始接收数据的时候才开始继续发送数据。\n<!-- more -->\n\n## tcp和udp的对比\n- tcp面向连接，udp不面向连接，直接发送数据\n- tcp能保证数据的准确性和有效性，udp保证不了\n- tcp有超时重传机制，udp没有\n- tcp有流量控制（果接收方没有及时接收数据，那么发送方就不会一直发送数据，），udp没有\n- tcp因为需要建立连接，需要资源开销，udp 不需要建立连接，没有太多资源开销，那么这样tcp的传输数据不如udp\n- tcp不适合做广播，udp适合做广播\n\n## tcp注意点\n- tcp服务器一般情况下都需要绑定，否则客户端找不到这个服务器\n\n- tcp客户端一般不绑定，因为是主动链接服务器，所以只要确定好服务器的ip、port等信息就好，本地客户端可以随机\n- tcp服务器中通过listen可以将socket创建出来的主动套接字变为被动的，这是做tcp服务器时必须要做的\n- 当客户端需要链接服务器时，就需要使用connect进行链接，udp是不需要链接的而是直接发送，但是tcp必须先链接，只有链接成功才能通信\n- 当一个tcp客户端连接服务器时，服务器端会有1个新的套接字，这个套接字用来标记这个客户端，单独为这个客户端服务\n- listen后的套接字是被动套接字，用来接收新的客户端的链接请求的，而accept返回的新套接字是标记这个新客户端的\n- 关闭listen后的套接字意味着被动套接字关闭了，会导致新的客户端不能够链接服务器，但是之前已经链接成功的客户端正常通信。\n- 关闭accept返回的套接字意味着这个客户端已经服务完毕\n- 当客户端的套接字调用close后，服务器端会recv解堵塞，并且返回的长度为0，因此服务器可以通过返回数据的长度来区别客户端是否已经下线\n\n\n## tcp的三次握手和四次挥手\n### 三次握手\n- 第一次握手：客户端发送syn包(syn=x)到服务器，并进入SYN_SEND状态，等待服务器确认；\n- 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n- 第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。\n\n### 四次挥手\n- 第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。\n- 第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。\n- 第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。\n- 第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。\n\n","slug":"tcp和udp的区别","published":1,"updated":"2022-03-13T11:49:16.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde08s003y9jx30518hvs3","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><h2 id=\"tcp的特点\"><a href=\"#tcp的特点\" class=\"headerlink\" title=\"tcp的特点\"></a>tcp的特点</h2><ul><li>面向连接， 数据发送之前先建立连接，那么这样能保证对方的ip地址是有效的</li><li>应答机制， 对方收到数据以后会进行回复</li><li>超时重传， 数据在发送过程中，如果对方一直没有回复，那么会隔一段时间再次发送数据，如果对方一直没有回复，那么就会认为对方掉线了。</li><li>错误校验， 发送的数据和接收的数据会进行比较，如果数据不一致，会删除数据重新发送，如果是重复数据也会删除。</li><li>流量控制， 如果接收方没有及时接收数据，那么发送方就不会一直发送数据，比如先发1M数据，等接收方开始接收数据的时候才开始继续发送数据。<a id=\"more\"></a></li></ul><h2 id=\"tcp和udp的对比\"><a href=\"#tcp和udp的对比\" class=\"headerlink\" title=\"tcp和udp的对比\"></a>tcp和udp的对比</h2><ul><li>tcp面向连接，udp不面向连接，直接发送数据</li><li>tcp能保证数据的准确性和有效性，udp保证不了</li><li>tcp有超时重传机制，udp没有</li><li>tcp有流量控制（果接收方没有及时接收数据，那么发送方就不会一直发送数据，），udp没有</li><li>tcp因为需要建立连接，需要资源开销，udp 不需要建立连接，没有太多资源开销，那么这样tcp的传输数据不如udp</li><li>tcp不适合做广播，udp适合做广播</li></ul><h2 id=\"tcp注意点\"><a href=\"#tcp注意点\" class=\"headerlink\" title=\"tcp注意点\"></a>tcp注意点</h2><ul><li><p>tcp服务器一般情况下都需要绑定，否则客户端找不到这个服务器</p></li><li><p>tcp客户端一般不绑定，因为是主动链接服务器，所以只要确定好服务器的ip、port等信息就好，本地客户端可以随机</p></li><li><p>tcp服务器中通过listen可以将socket创建出来的主动套接字变为被动的，这是做tcp服务器时必须要做的</p></li><li><p>当客户端需要链接服务器时，就需要使用connect进行链接，udp是不需要链接的而是直接发送，但是tcp必须先链接，只有链接成功才能通信</p></li><li><p>当一个tcp客户端连接服务器时，服务器端会有1个新的套接字，这个套接字用来标记这个客户端，单独为这个客户端服务</p></li><li><p>listen后的套接字是被动套接字，用来接收新的客户端的链接请求的，而accept返回的新套接字是标记这个新客户端的</p></li><li><p>关闭listen后的套接字意味着被动套接字关闭了，会导致新的客户端不能够链接服务器，但是之前已经链接成功的客户端正常通信。</p></li><li><p>关闭accept返回的套接字意味着这个客户端已经服务完毕</p></li><li><p>当客户端的套接字调用close后，服务器端会recv解堵塞，并且返回的长度为0，因此服务器可以通过返回数据的长度来区别客户端是否已经下线</p></li></ul><h2 id=\"tcp的三次握手和四次挥手\"><a href=\"#tcp的三次握手和四次挥手\" class=\"headerlink\" title=\"tcp的三次握手和四次挥手\"></a>tcp的三次握手和四次挥手</h2><h3 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h3><ul><li>第一次握手：客户端发送syn包(syn=x)到服务器，并进入SYN_SEND状态，等待服务器确认；</li><li>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；</li><li>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</li></ul><h3 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h3><ul><li>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。</li><li>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。</li><li>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</li><li>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</li></ul>","site":{"data":{}},"excerpt":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><h2 id=\"tcp的特点\"><a href=\"#tcp的特点\" class=\"headerlink\" title=\"tcp的特点\"></a>tcp的特点</h2><ul><li>面向连接， 数据发送之前先建立连接，那么这样能保证对方的ip地址是有效的</li><li>应答机制， 对方收到数据以后会进行回复</li><li>超时重传， 数据在发送过程中，如果对方一直没有回复，那么会隔一段时间再次发送数据，如果对方一直没有回复，那么就会认为对方掉线了。</li><li>错误校验， 发送的数据和接收的数据会进行比较，如果数据不一致，会删除数据重新发送，如果是重复数据也会删除。</li><li>流量控制， 如果接收方没有及时接收数据，那么发送方就不会一直发送数据，比如先发1M数据，等接收方开始接收数据的时候才开始继续发送数据。","more":"</li></ul><h2 id=\"tcp和udp的对比\"><a href=\"#tcp和udp的对比\" class=\"headerlink\" title=\"tcp和udp的对比\"></a>tcp和udp的对比</h2><ul><li>tcp面向连接，udp不面向连接，直接发送数据</li><li>tcp能保证数据的准确性和有效性，udp保证不了</li><li>tcp有超时重传机制，udp没有</li><li>tcp有流量控制（果接收方没有及时接收数据，那么发送方就不会一直发送数据，），udp没有</li><li>tcp因为需要建立连接，需要资源开销，udp 不需要建立连接，没有太多资源开销，那么这样tcp的传输数据不如udp</li><li>tcp不适合做广播，udp适合做广播</li></ul><h2 id=\"tcp注意点\"><a href=\"#tcp注意点\" class=\"headerlink\" title=\"tcp注意点\"></a>tcp注意点</h2><ul><li><p>tcp服务器一般情况下都需要绑定，否则客户端找不到这个服务器</p></li><li><p>tcp客户端一般不绑定，因为是主动链接服务器，所以只要确定好服务器的ip、port等信息就好，本地客户端可以随机</p></li><li><p>tcp服务器中通过listen可以将socket创建出来的主动套接字变为被动的，这是做tcp服务器时必须要做的</p></li><li><p>当客户端需要链接服务器时，就需要使用connect进行链接，udp是不需要链接的而是直接发送，但是tcp必须先链接，只有链接成功才能通信</p></li><li><p>当一个tcp客户端连接服务器时，服务器端会有1个新的套接字，这个套接字用来标记这个客户端，单独为这个客户端服务</p></li><li><p>listen后的套接字是被动套接字，用来接收新的客户端的链接请求的，而accept返回的新套接字是标记这个新客户端的</p></li><li><p>关闭listen后的套接字意味着被动套接字关闭了，会导致新的客户端不能够链接服务器，但是之前已经链接成功的客户端正常通信。</p></li><li><p>关闭accept返回的套接字意味着这个客户端已经服务完毕</p></li><li><p>当客户端的套接字调用close后，服务器端会recv解堵塞，并且返回的长度为0，因此服务器可以通过返回数据的长度来区别客户端是否已经下线</p></li></ul><h2 id=\"tcp的三次握手和四次挥手\"><a href=\"#tcp的三次握手和四次挥手\" class=\"headerlink\" title=\"tcp的三次握手和四次挥手\"></a>tcp的三次握手和四次挥手</h2><h3 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h3><ul><li>第一次握手：客户端发送syn包(syn=x)到服务器，并进入SYN_SEND状态，等待服务器确认；</li><li>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态；</li><li>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</li></ul><h3 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h3><ul><li>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。</li><li>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。</li><li>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</li><li>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</li></ul>"},{"title":"排序","type":"categories","copyright":true,"keywords":"排序","top":100,"abbrlink":2755965992,"date":"2022-03-01T06:07:13.000Z","_content":"\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n## python中的几种排序方法\n\n使用python来实现数据的几种排序方法，包括冒泡排序，直接选择排序，直接插入排序，快排，归并排序，二分法查找，堆排序等\n\n#### 1. 冒泡排序\n```python\ndef bubble_sort(list):\n    for i in range(len(list)-1):\n        current_status = False\n        for j in range(len(list) - i -1):\n            if list[j] > list[j + 1]:\n                list[j], list[j + 1] = list[j + 1], list[j]\n                current_status = True\n        if not current_status:\n            break\n    return list\n```\n<!-- more -->\n\n#### 2. 直接选择排序\n```python\ndef select_sort(list):\n    for i in range(len(list) - 1):\n        min_index = i\n        for j in range(i + 1, len(list)):\n            if list[j] < list[min_index]:\n                min_index = j\n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n```\n\n#### 3. 直接插入排序\n```python\ndef insert_sort(list):\n    for i in range(1, len(list)):\n        min_value = list[i]\n        j = i - 1\n        while j >= 0 and list[j] > min_value:\n            list[j + 1] = list[j]\n            j -= 1\n        list[j + 1] = min_value\n    return list\n```\n\n#### 4. 快速排序\n```python\ndef partition(list, left, right):\n    tmp = list[left]\n    while left < right:\n        while left < right and list[right] >= tmp:\n            right -= 1\n        list[left] = list[right]\n        while left < right and list[left] <= tmp:\n            left += 1\n        list[right] = list[left]\n    list[left] = tmp\n    return list\n\n\n# 快速排序\ndef quick_sort(list, left, right):\n    if left < right:\n        mid = partition(list, left, right)\n        quick_sort(list, left, mid - 1)\n        quick_sort(list, mid + 1, right)\n        return list\n```\n\n#### 5. 归并排序\n```python\n# 归并排序\ndef merge(list, low, mid, high):\n    \"\"\"\n    两段需要归并的序列从左到右遍历， 逐一比较，小的就放到tmp里\n    :param list:\n    :param low:\n    :param mid:\n    :param high:\n    :return:\n    \"\"\"\n    tmp = []\n    i = low\n    j = mid + 1\n    while i <= mid and j <= high:\n        if list[i] < list[j]:\n            tmp.append(list[i])\n            i += 1\n        else:\n            tmp.append(list[j])\n            j += 1\n\n    while i <= mid:\n        tmp.append(list[i])\n        i += 1\n\n    while j <= high:\n        tmp.append(list[j])\n        j += 1\n    list[low: high + 1] = tmp\n    return list\n\n\ndef merge_sort(list, low, high):\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(list, low, mid)\n        merge_sort(list, mid + 1, high)\n        return merge(list, low, mid, high)\n```\n\n#### 6. 二分法查找\n```python\nimport math\n# 二分法查找\ndef binary_sort(list, a):\n    list.sort()\n    low = 0\n    high = len(list) - 1\n    while low <= high:\n        mid = math.floor((low + high) / 2)\n        if list[mid] < a:\n            low = mid + 1\n        elif list[mid] > a:\n            high = mid - 1\n        else:\n            return mid\n    return None\n```\n\n#### 7. 堆排序\n```python\n# 堆排序\ndef sift(list, left, right):\n    i = left\n    j = 2 * i + 1\n    tmp = list[i]\n    while j <= right:\n        if j < right and list[j] < list[j + 1]:\n            j += 1\n        if tmp < list[i]:\n            list[i] = list[j]\n            i = j\n            j = 2 * j + 1\n        else:\n            break\n    list[i] = tmp\n\n\ndef heap(list):\n    n = len(list)\n    for i in range(n//2 - 1, -1, -1):\n        sift(list, i, n -1)\n    for i in range(n -1, -1, -1):\n        list[0], list[i] = list[i], list[0]\n        sift(list, 0, i - 1)\n```\n\n#### 测试\n```python\nimport random\n\n\nif __name__ == '__main__':\n    li = list(range(10))\n    random.shuffle(li)\n    print(li)\n```\n\n#### 字符串全排序\n```python\nimport itertools\n\n\ndef fun1(s=''):\n    if len(s) <= 1:\n        return [s]\n    l1 = []\n    for i in range(len(s)):\n        for j in fun1(s[0:i] + s[i+1:]):\n            l1.append(s[i] + j)\n    return l1\n\n\ndef main():\n    a = fun1('abc')\n    print(len(a), a)\n\n\ndef func2():\n    list1 = [1, 2, 3, 4]\n    list2 = []\n    for i in range(1, len(list1) + 1):\n        iter = itertools.combinations(list1, i)\n        list2.append(list(iter))\n    print(list2)\n\n\nif __name__ == '__main__':\n    # main()\n    func2()\n```\n\n","source":"_posts/排序.md","raw":"---\ntitle: 排序\ntype: categories\ncopyright: true\ntags:\n  - python\n  - 排序\ncategories:\n  - python\n  - 排序\nkeywords: 排序\ntop: 100\nabbrlink: 2755965992\ndate: 2022-03-01 14:07:13\n---\n\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n## python中的几种排序方法\n\n使用python来实现数据的几种排序方法，包括冒泡排序，直接选择排序，直接插入排序，快排，归并排序，二分法查找，堆排序等\n\n#### 1. 冒泡排序\n```python\ndef bubble_sort(list):\n    for i in range(len(list)-1):\n        current_status = False\n        for j in range(len(list) - i -1):\n            if list[j] > list[j + 1]:\n                list[j], list[j + 1] = list[j + 1], list[j]\n                current_status = True\n        if not current_status:\n            break\n    return list\n```\n<!-- more -->\n\n#### 2. 直接选择排序\n```python\ndef select_sort(list):\n    for i in range(len(list) - 1):\n        min_index = i\n        for j in range(i + 1, len(list)):\n            if list[j] < list[min_index]:\n                min_index = j\n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n```\n\n#### 3. 直接插入排序\n```python\ndef insert_sort(list):\n    for i in range(1, len(list)):\n        min_value = list[i]\n        j = i - 1\n        while j >= 0 and list[j] > min_value:\n            list[j + 1] = list[j]\n            j -= 1\n        list[j + 1] = min_value\n    return list\n```\n\n#### 4. 快速排序\n```python\ndef partition(list, left, right):\n    tmp = list[left]\n    while left < right:\n        while left < right and list[right] >= tmp:\n            right -= 1\n        list[left] = list[right]\n        while left < right and list[left] <= tmp:\n            left += 1\n        list[right] = list[left]\n    list[left] = tmp\n    return list\n\n\n# 快速排序\ndef quick_sort(list, left, right):\n    if left < right:\n        mid = partition(list, left, right)\n        quick_sort(list, left, mid - 1)\n        quick_sort(list, mid + 1, right)\n        return list\n```\n\n#### 5. 归并排序\n```python\n# 归并排序\ndef merge(list, low, mid, high):\n    \"\"\"\n    两段需要归并的序列从左到右遍历， 逐一比较，小的就放到tmp里\n    :param list:\n    :param low:\n    :param mid:\n    :param high:\n    :return:\n    \"\"\"\n    tmp = []\n    i = low\n    j = mid + 1\n    while i <= mid and j <= high:\n        if list[i] < list[j]:\n            tmp.append(list[i])\n            i += 1\n        else:\n            tmp.append(list[j])\n            j += 1\n\n    while i <= mid:\n        tmp.append(list[i])\n        i += 1\n\n    while j <= high:\n        tmp.append(list[j])\n        j += 1\n    list[low: high + 1] = tmp\n    return list\n\n\ndef merge_sort(list, low, high):\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(list, low, mid)\n        merge_sort(list, mid + 1, high)\n        return merge(list, low, mid, high)\n```\n\n#### 6. 二分法查找\n```python\nimport math\n# 二分法查找\ndef binary_sort(list, a):\n    list.sort()\n    low = 0\n    high = len(list) - 1\n    while low <= high:\n        mid = math.floor((low + high) / 2)\n        if list[mid] < a:\n            low = mid + 1\n        elif list[mid] > a:\n            high = mid - 1\n        else:\n            return mid\n    return None\n```\n\n#### 7. 堆排序\n```python\n# 堆排序\ndef sift(list, left, right):\n    i = left\n    j = 2 * i + 1\n    tmp = list[i]\n    while j <= right:\n        if j < right and list[j] < list[j + 1]:\n            j += 1\n        if tmp < list[i]:\n            list[i] = list[j]\n            i = j\n            j = 2 * j + 1\n        else:\n            break\n    list[i] = tmp\n\n\ndef heap(list):\n    n = len(list)\n    for i in range(n//2 - 1, -1, -1):\n        sift(list, i, n -1)\n    for i in range(n -1, -1, -1):\n        list[0], list[i] = list[i], list[0]\n        sift(list, 0, i - 1)\n```\n\n#### 测试\n```python\nimport random\n\n\nif __name__ == '__main__':\n    li = list(range(10))\n    random.shuffle(li)\n    print(li)\n```\n\n#### 字符串全排序\n```python\nimport itertools\n\n\ndef fun1(s=''):\n    if len(s) <= 1:\n        return [s]\n    l1 = []\n    for i in range(len(s)):\n        for j in fun1(s[0:i] + s[i+1:]):\n            l1.append(s[i] + j)\n    return l1\n\n\ndef main():\n    a = fun1('abc')\n    print(len(a), a)\n\n\ndef func2():\n    list1 = [1, 2, 3, 4]\n    list2 = []\n    for i in range(1, len(list1) + 1):\n        iter = itertools.combinations(list1, i)\n        list2.append(list(iter))\n    print(list2)\n\n\nif __name__ == '__main__':\n    # main()\n    func2()\n```\n\n","slug":"排序","published":1,"updated":"2022-03-13T11:49:16.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde08t00429jx38vsuf23l","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><h2 id=\"python中的几种排序方法\"><a href=\"#python中的几种排序方法\" class=\"headerlink\" title=\"python中的几种排序方法\"></a>python中的几种排序方法</h2><p>使用python来实现数据的几种排序方法，包括冒泡排序，直接选择排序，直接插入排序，快排，归并排序，二分法查找，堆排序等</p><h4 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1. 冒泡排序\"></a>1. 冒泡排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(list)<span class=\"number\">-1</span>):</span><br><span class=\"line\">        current_status = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(list) - i <span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> list[j] &gt; list[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                list[j], list[j + <span class=\"number\">1</span>] = list[j + <span class=\"number\">1</span>], list[j]</span><br><span class=\"line\">                current_status = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> current_status:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure><a id=\"more\"></a><h4 id=\"2-直接选择排序\"><a href=\"#2-直接选择排序\" class=\"headerlink\" title=\"2. 直接选择排序\"></a>2. 直接选择排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_sort</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(list) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        min_index = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i + <span class=\"number\">1</span>, len(list)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> list[j] &lt; list[min_index]:</span><br><span class=\"line\">                min_index = j</span><br><span class=\"line\">        list[i], list[min_index] = list[min_index], list[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure><h4 id=\"3-直接插入排序\"><a href=\"#3-直接插入排序\" class=\"headerlink\" title=\"3. 直接插入排序\"></a>3. 直接插入排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(list)):</span><br><span class=\"line\">        min_value = list[i]</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> list[j] &gt; min_value:</span><br><span class=\"line\">            list[j + <span class=\"number\">1</span>] = list[j]</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">        list[j + <span class=\"number\">1</span>] = min_value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure><h4 id=\"4-快速排序\"><a href=\"#4-快速排序\" class=\"headerlink\" title=\"4. 快速排序\"></a>4. 快速排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partition</span><span class=\"params\">(list, left, right)</span>:</span></span><br><span class=\"line\">    tmp = list[left]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> list[right] &gt;= tmp:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span></span><br><span class=\"line\">        list[left] = list[right]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> list[left] &lt;= tmp:</span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">        list[right] = list[left]</span><br><span class=\"line\">    list[left] = tmp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 快速排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(list, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        mid = partition(list, left, right)</span><br><span class=\"line\">        quick_sort(list, left, mid - <span class=\"number\">1</span>)</span><br><span class=\"line\">        quick_sort(list, mid + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure><h4 id=\"5-归并排序\"><a href=\"#5-归并排序\" class=\"headerlink\" title=\"5. 归并排序\"></a>5. 归并排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 归并排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span><span class=\"params\">(list, low, mid, high)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    两段需要归并的序列从左到右遍历， 逐一比较，小的就放到tmp里</span></span><br><span class=\"line\"><span class=\"string\">    :param list:</span></span><br><span class=\"line\"><span class=\"string\">    :param low:</span></span><br><span class=\"line\"><span class=\"string\">    :param mid:</span></span><br><span class=\"line\"><span class=\"string\">    :param high:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    tmp = []</span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid <span class=\"keyword\">and</span> j &lt;= high:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> list[i] &lt; list[j]:</span><br><span class=\"line\">            tmp.append(list[i])</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            tmp.append(list[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid:</span><br><span class=\"line\">        tmp.append(list[i])</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:</span><br><span class=\"line\">        tmp.append(list[j])</span><br><span class=\"line\">        j += <span class=\"number\">1</span></span><br><span class=\"line\">    list[low: high + <span class=\"number\">1</span>] = tmp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge_sort</span><span class=\"params\">(list, low, high)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> low &lt; high:</span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        merge_sort(list, low, mid)</span><br><span class=\"line\">        merge_sort(list, mid + <span class=\"number\">1</span>, high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> merge(list, low, mid, high)</span><br></pre></td></tr></table></figure><h4 id=\"6-二分法查找\"><a href=\"#6-二分法查找\" class=\"headerlink\" title=\"6. 二分法查找\"></a>6. 二分法查找</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"comment\"># 二分法查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_sort</span><span class=\"params\">(list, a)</span>:</span></span><br><span class=\"line\">    list.sort()</span><br><span class=\"line\">    low = <span class=\"number\">0</span></span><br><span class=\"line\">    high = len(list) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">        mid = math.floor((low + high) / <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> list[mid] &lt; a:</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> list[mid] &gt; a:</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure><h4 id=\"7-堆排序\"><a href=\"#7-堆排序\" class=\"headerlink\" title=\"7. 堆排序\"></a>7. 堆排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 堆排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sift</span><span class=\"params\">(list, left, right)</span>:</span></span><br><span class=\"line\">    i = left</span><br><span class=\"line\">    j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">    tmp = list[i]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= right:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j &lt; right <span class=\"keyword\">and</span> list[j] &lt; list[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp &lt; list[i]:</span><br><span class=\"line\">            list[i] = list[j]</span><br><span class=\"line\">            i = j</span><br><span class=\"line\">            j = <span class=\"number\">2</span> * j + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    list[i] = tmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heap</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    n = len(list)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n//<span class=\"number\">2</span> - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        sift(list, i, n <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n <span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        list[<span class=\"number\">0</span>], list[i] = list[i], list[<span class=\"number\">0</span>]</span><br><span class=\"line\">        sift(list, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure><h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    li = list(range(<span class=\"number\">10</span>))</span><br><span class=\"line\">    random.shuffle(li)</span><br><span class=\"line\">    print(li)</span><br></pre></td></tr></table></figure><h4 id=\"字符串全排序\"><a href=\"#字符串全排序\" class=\"headerlink\" title=\"字符串全排序\"></a>字符串全排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun1</span><span class=\"params\">(s=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(s) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [s]</span><br><span class=\"line\">    l1 = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> fun1(s[<span class=\"number\">0</span>:i] + s[i+<span class=\"number\">1</span>:]):</span><br><span class=\"line\">            l1.append(s[i] + j)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    a = fun1(<span class=\"string\">'abc'</span>)</span><br><span class=\"line\">    print(len(a), a)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    list1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    list2 = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(list1) + <span class=\"number\">1</span>):</span><br><span class=\"line\">        iter = itertools.combinations(list1, i)</span><br><span class=\"line\">        list2.append(list(iter))</span><br><span class=\"line\">    print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># main()</span></span><br><span class=\"line\">    func2()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><h2 id=\"python中的几种排序方法\"><a href=\"#python中的几种排序方法\" class=\"headerlink\" title=\"python中的几种排序方法\"></a>python中的几种排序方法</h2><p>使用python来实现数据的几种排序方法，包括冒泡排序，直接选择排序，直接插入排序，快排，归并排序，二分法查找，堆排序等</p><h4 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1. 冒泡排序\"></a>1. 冒泡排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(list)<span class=\"number\">-1</span>):</span><br><span class=\"line\">        current_status = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(list) - i <span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> list[j] &gt; list[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                list[j], list[j + <span class=\"number\">1</span>] = list[j + <span class=\"number\">1</span>], list[j]</span><br><span class=\"line\">                current_status = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> current_status:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"2-直接选择排序\"><a href=\"#2-直接选择排序\" class=\"headerlink\" title=\"2. 直接选择排序\"></a>2. 直接选择排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_sort</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(list) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        min_index = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i + <span class=\"number\">1</span>, len(list)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> list[j] &lt; list[min_index]:</span><br><span class=\"line\">                min_index = j</span><br><span class=\"line\">        list[i], list[min_index] = list[min_index], list[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure><h4 id=\"3-直接插入排序\"><a href=\"#3-直接插入排序\" class=\"headerlink\" title=\"3. 直接插入排序\"></a>3. 直接插入排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(list)):</span><br><span class=\"line\">        min_value = list[i]</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> list[j] &gt; min_value:</span><br><span class=\"line\">            list[j + <span class=\"number\">1</span>] = list[j]</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">        list[j + <span class=\"number\">1</span>] = min_value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure><h4 id=\"4-快速排序\"><a href=\"#4-快速排序\" class=\"headerlink\" title=\"4. 快速排序\"></a>4. 快速排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partition</span><span class=\"params\">(list, left, right)</span>:</span></span><br><span class=\"line\">    tmp = list[left]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> list[right] &gt;= tmp:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span></span><br><span class=\"line\">        list[left] = list[right]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> list[left] &lt;= tmp:</span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">        list[right] = list[left]</span><br><span class=\"line\">    list[left] = tmp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 快速排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(list, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        mid = partition(list, left, right)</span><br><span class=\"line\">        quick_sort(list, left, mid - <span class=\"number\">1</span>)</span><br><span class=\"line\">        quick_sort(list, mid + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure><h4 id=\"5-归并排序\"><a href=\"#5-归并排序\" class=\"headerlink\" title=\"5. 归并排序\"></a>5. 归并排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 归并排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span><span class=\"params\">(list, low, mid, high)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    两段需要归并的序列从左到右遍历， 逐一比较，小的就放到tmp里</span></span><br><span class=\"line\"><span class=\"string\">    :param list:</span></span><br><span class=\"line\"><span class=\"string\">    :param low:</span></span><br><span class=\"line\"><span class=\"string\">    :param mid:</span></span><br><span class=\"line\"><span class=\"string\">    :param high:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    tmp = []</span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid <span class=\"keyword\">and</span> j &lt;= high:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> list[i] &lt; list[j]:</span><br><span class=\"line\">            tmp.append(list[i])</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            tmp.append(list[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid:</span><br><span class=\"line\">        tmp.append(list[i])</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:</span><br><span class=\"line\">        tmp.append(list[j])</span><br><span class=\"line\">        j += <span class=\"number\">1</span></span><br><span class=\"line\">    list[low: high + <span class=\"number\">1</span>] = tmp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge_sort</span><span class=\"params\">(list, low, high)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> low &lt; high:</span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        merge_sort(list, low, mid)</span><br><span class=\"line\">        merge_sort(list, mid + <span class=\"number\">1</span>, high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> merge(list, low, mid, high)</span><br></pre></td></tr></table></figure><h4 id=\"6-二分法查找\"><a href=\"#6-二分法查找\" class=\"headerlink\" title=\"6. 二分法查找\"></a>6. 二分法查找</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"comment\"># 二分法查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_sort</span><span class=\"params\">(list, a)</span>:</span></span><br><span class=\"line\">    list.sort()</span><br><span class=\"line\">    low = <span class=\"number\">0</span></span><br><span class=\"line\">    high = len(list) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">        mid = math.floor((low + high) / <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> list[mid] &lt; a:</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> list[mid] &gt; a:</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure><h4 id=\"7-堆排序\"><a href=\"#7-堆排序\" class=\"headerlink\" title=\"7. 堆排序\"></a>7. 堆排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 堆排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sift</span><span class=\"params\">(list, left, right)</span>:</span></span><br><span class=\"line\">    i = left</span><br><span class=\"line\">    j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">    tmp = list[i]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= right:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j &lt; right <span class=\"keyword\">and</span> list[j] &lt; list[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp &lt; list[i]:</span><br><span class=\"line\">            list[i] = list[j]</span><br><span class=\"line\">            i = j</span><br><span class=\"line\">            j = <span class=\"number\">2</span> * j + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    list[i] = tmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heap</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    n = len(list)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n//<span class=\"number\">2</span> - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        sift(list, i, n <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n <span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        list[<span class=\"number\">0</span>], list[i] = list[i], list[<span class=\"number\">0</span>]</span><br><span class=\"line\">        sift(list, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure><h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    li = list(range(<span class=\"number\">10</span>))</span><br><span class=\"line\">    random.shuffle(li)</span><br><span class=\"line\">    print(li)</span><br></pre></td></tr></table></figure><h4 id=\"字符串全排序\"><a href=\"#字符串全排序\" class=\"headerlink\" title=\"字符串全排序\"></a>字符串全排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun1</span><span class=\"params\">(s=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(s) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [s]</span><br><span class=\"line\">    l1 = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> fun1(s[<span class=\"number\">0</span>:i] + s[i+<span class=\"number\">1</span>:]):</span><br><span class=\"line\">            l1.append(s[i] + j)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    a = fun1(<span class=\"string\">'abc'</span>)</span><br><span class=\"line\">    print(len(a), a)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    list1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    list2 = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(list1) + <span class=\"number\">1</span>):</span><br><span class=\"line\">        iter = itertools.combinations(list1, i)</span><br><span class=\"line\">        list2.append(list(iter))</span><br><span class=\"line\">    print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># main()</span></span><br><span class=\"line\">    func2()</span><br></pre></td></tr></table></figure>"},{"title":"myql查询语句优化","type":"categories","copyright":true,"keywords":"SQL","abbrlink":2149736776,"date":"2022-03-03T09:41:13.000Z","_content":"\n\n## Sql语句优化和索引\n### Innerjoin和左连接，右连接，子查询\n- inner join内连接也叫等值连接是，left/rightjoin是外连接。\n```\nSELECT A.id,A.name,B.id,B.name FROM A LEFT JOIN B ON A.id =B.id;\nSELECT A.id,A.name,B.id,B.name FROM A RIGHT JOIN ON B A.id= B.id;\nSELECT A.id,A.name,B.id,B.name FROM A INNER JOIN ON A.id =B.id;\n```\n经过来之多方面的证实inner join性能比较快，因为inner join是等值连接，或许返回的行数比较少。但是我们要记得有些语句隐形的用到了等值连接，如：\n```\nSELECT A.id,A.name,B.id,B.name FROM A,B WHERE A.id = B.id;\n```\n推荐：能用inner join连接尽量使用inner join连接\n<!-- more -->\n\n- 子查询的性能又比外连接性能慢，尽量用外连接来替换子查询。\n```\n  Select* from A where exists (select * from B where id>=3000 and A.uuid=B.uuid);\n```\nA表的数据为十万级表，B表为百万级表，在本机执行差不多用2秒左右，我们可以通过explain可以查看到子查询是一个相关子查询(DEPENDENCE SUBQUERY);Mysql是先对外表A执行全表查询，然后根据uuid逐次执行子查询，如果外层表是一个很大的表，我们可以想象查询性能会表现比这个更加糟糕。\n  一种简单的优化就是用innerjoin的方法来代替子查询，查询语句改为：\n```\n   Select* from A inner join B using(uuid) where b.uuid>=3000;\n```\n 这个语句执行测试不到一秒；\n\n- 在使用ON 和 WHERE 的时候，记得它们的顺序，如：\n```\nSELECT A.id,A.name,B.id,B.name FROM A LEFT JOIN B ON A.id =B.id WHERE B.NAME=’XXX’\n```\n执行过程会先执行ON 后面先过滤掉B表的一些行数。然而WHERE是后再过滤他们两个连接产生的记录。\n不过在这里提醒一下大家：ON后面的条件只能过滤出B表的条数，但是连接返回的记录的行数还是A表的行数是一样。如：\n```\nSELECT A.id,A.name,B.id,B.name FROM A LEFT JOIN B ON A.id =B.id;\n```\n返回的记录数是A表的条数，ON后面的条件只起到过滤B表的记录数，而\n```\nSELECT A.id,A.name,B.id,B.name FROM A ,B WHERE A.id = B.id\n```\n返回的条数，是笛卡尔积后，符合A.id = B.id这个条件的记录\n\n- 使用JOIN时候，应该用小的结果驱动打的结果（left join 左边表结果尽量小，如果有条件应该放到左边先处理，right join同理反向），同事尽量把牵涉到多表联合的查询拆分多个query(多个表查询效率低，容易锁表和阻塞)。如：\n```\nSelect * from A left join B ona.id=B.ref_id where B.ref_id>10;\n```\n可以优化为：\n```\nselect * from (select * from A wehre id >10) T1 left join B onT1.id=B.ref_id;\n```\n\n### 建立索引,加快查询性能.\n\n### limit千万级分页的时候优化\n- 在我们平时用limit,如：\n```\nSelect * from A order by id limit 1,10;\n```\n这样在表数据很少的时候，看不出什么性能问题，倘若到达千万级，如：\n```\nSelect * from A order by id limit10000000,10;\n```\n虽然都是只查询10记录，但是这个就性能就让人受不了了。所以为什么当表数据很大的时候，我们还继续用持久层框架如hibernate,ibatis就会有一些性能问题，除非持久层框架对这些大数据表做过优化。\n- 在遇见上面的情况，我们可以用另外一种语句优化，如：\n```\nSelect * from A where id>=(Select idfrom a limit 10000000,1) limit 10;\n```\n确实这样快了很多，不过前提是，id字段建立了索引。也许这个还不是最优的，其实还可以这样写：\n```\nSelect * from A where id between 10000000and 10000010;\n```\n这样的效率更加高。\n\n### 尽量避免Select * 命令\n从表中读取越多的数据，查询会变得更慢。它会增加磁盘的操作时间，还是在数据库服务器与web服务器是独立分开的情况下，你将会经历非常漫长的网络延迟。仅仅是因为数据不必要的在服务器之间传输\n\n### 尽量不要使用BY RAND()命令\n如果您真需要随机显示你的结果，有很多更好的途径实现。而这个函数可能会为表中每一个独立的行执行BY RAND()命令—这个会消耗处理器的处理能力，然后给你仅仅返回一行\n\n### 利用limit 1取得唯一行\n有时要查询一张表时，你要知道需要看一行，你可能去查询一条独特的记录。你可以使用limit 1.来终止数据库引擎继续扫描整个表或者索引,如：\n```\nSelect * from A  where namelike ‘%xxx’ limit 1;\n```\n这样只要查询符合like ‘%xxx’的记录，那么引擎就不会继续扫描表或者索引了。\n\n### 尽量少排序\n排序操作会消耗较多的CPU资源，所以减少排序可以在缓存命中率高等\n\n### 尽量少OR\n当where子句中存在多个条件以“或”并存的时候，Mysql的优化器并没有很好的解决其执行计划优化问题，再加上mysql特有的sql与Storage分层架构方式，造成了其性能比较地下，很多时候使用union all或者union(必要的时候)的方式代替“or”会得到更好的效果。\n\n### 尽量用union all 代替union\nunion和union all的差异主要是前者需要将两个（或者多个）结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的cpu运算，加大资源消耗及延迟。所以当我们可以确认不可能出现重复结果集或者不在乎重复结果集的时候，尽量使用union all而不是union.\n\n### 避免类型转换\n这里所说的“类型转换”是指where子句中出现column字段的类型和传入的参数类型不一致的时候发生的类型转换。人为的上通过转换函数进行转换，直接导致mysql无法使用索引。如果非要转型，应该在传入参数上进行转换\n\n### 不要在列上进行运算\n如下面:\n```\nselect * fromusers where YEAR(adddate)<2007;\n```\n将在每个行进行运算，这些导致索引失效进行全表扫描，因此我们可以改成：\n```\nSelect * from users where adddate<’2007-01-01’;\n```\n### 尽量不要使用NOT IN和<>操作\n- NOT IN和<>操作都不会使用索引，而是将会进行全表扫描。NOT IN可以NOT EXISTS代替，id<>3则可以使用id>3 or id <3;如果NOT EXISTS是子查询，还可以尽量转化为外连接或者等值连接，要看具体sql的业务逻辑。\n\n- 把NOT IN转化为LEFT JOIN如：\n```\nSELECT * FROM customerinfo WHERE CustomerIDNOT in (SELECT CustomerID FROM salesinfo );\n```\n优化：\n```\nSELECT * FROM customerinfo LEFT JOINsalesinfoON customerinfo.CustomerID=salesinfo. CustomerID WHEREsalesinfo.CustomerID IS NULL;\n```\n### 使用批量插入节省交互（最好是使用存储过程）\n\n### 锁定表\n尽管事务是维护数据库完整性的一个非常好的方法,但却因为它的独占性,有时会影响数据库的性能,尤其是在很多的应用系统中.由于事务执行的过程中,数据库将会被锁定,因此其他的用户请求只能暂时等待直到该事务结算.如果一个数据库系统只有少数几个用户来使用,事务造成的影响不会成为一个太大问题;但假设有成千上万的用户同时访问一个数据库系统,例如访问一个电子商务网站,就会产生比较严重的响应延迟.其实有些情况下我们可以通过锁定表的方法来获得更好的性能.如:\n```\nLOCK TABLE inventory write\nSelect quanity from inventory whereitem=’book’;\n…\nUpdate inventory set quantity=11 whereitem=’book’;\nUNLOCK TABLES;\n```\n这里，我们用一个select语句取出初始数据，通过一些计算，用update语句将新值更新到列表中。包含有write关键字的LOCK TABLE语句可以保证在UNLOCK TABLES命令被执行之前，不会有其他的访问来对inventory进行插入，更新或者删除的操作。\n\n### 对多表关联的查询，建立视图\n对多表的关联可能会有性能上的问题，我们可以对多表建立视图，这样操作简单话，增加数据安全性，通过视图，用户只能查询和修改指定的数据。且提高表的逻辑独立性，视图可以屏蔽原有表结构变化带来的影响\n\n\n\n\n\n\n","source":"_posts/myql查询语句优化.md","raw":"---\ntitle: myql查询语句优化\ntype: categories\ncopyright: true\ntags:\n  - 数据库\n  - mysql\ncategories:\n  - 数据库\n  - mysql\nkeywords: SQL\nabbrlink: 2149736776\ndate: 2022-03-03 17:41:13\n---\n\n\n## Sql语句优化和索引\n### Innerjoin和左连接，右连接，子查询\n- inner join内连接也叫等值连接是，left/rightjoin是外连接。\n```\nSELECT A.id,A.name,B.id,B.name FROM A LEFT JOIN B ON A.id =B.id;\nSELECT A.id,A.name,B.id,B.name FROM A RIGHT JOIN ON B A.id= B.id;\nSELECT A.id,A.name,B.id,B.name FROM A INNER JOIN ON A.id =B.id;\n```\n经过来之多方面的证实inner join性能比较快，因为inner join是等值连接，或许返回的行数比较少。但是我们要记得有些语句隐形的用到了等值连接，如：\n```\nSELECT A.id,A.name,B.id,B.name FROM A,B WHERE A.id = B.id;\n```\n推荐：能用inner join连接尽量使用inner join连接\n<!-- more -->\n\n- 子查询的性能又比外连接性能慢，尽量用外连接来替换子查询。\n```\n  Select* from A where exists (select * from B where id>=3000 and A.uuid=B.uuid);\n```\nA表的数据为十万级表，B表为百万级表，在本机执行差不多用2秒左右，我们可以通过explain可以查看到子查询是一个相关子查询(DEPENDENCE SUBQUERY);Mysql是先对外表A执行全表查询，然后根据uuid逐次执行子查询，如果外层表是一个很大的表，我们可以想象查询性能会表现比这个更加糟糕。\n  一种简单的优化就是用innerjoin的方法来代替子查询，查询语句改为：\n```\n   Select* from A inner join B using(uuid) where b.uuid>=3000;\n```\n 这个语句执行测试不到一秒；\n\n- 在使用ON 和 WHERE 的时候，记得它们的顺序，如：\n```\nSELECT A.id,A.name,B.id,B.name FROM A LEFT JOIN B ON A.id =B.id WHERE B.NAME=’XXX’\n```\n执行过程会先执行ON 后面先过滤掉B表的一些行数。然而WHERE是后再过滤他们两个连接产生的记录。\n不过在这里提醒一下大家：ON后面的条件只能过滤出B表的条数，但是连接返回的记录的行数还是A表的行数是一样。如：\n```\nSELECT A.id,A.name,B.id,B.name FROM A LEFT JOIN B ON A.id =B.id;\n```\n返回的记录数是A表的条数，ON后面的条件只起到过滤B表的记录数，而\n```\nSELECT A.id,A.name,B.id,B.name FROM A ,B WHERE A.id = B.id\n```\n返回的条数，是笛卡尔积后，符合A.id = B.id这个条件的记录\n\n- 使用JOIN时候，应该用小的结果驱动打的结果（left join 左边表结果尽量小，如果有条件应该放到左边先处理，right join同理反向），同事尽量把牵涉到多表联合的查询拆分多个query(多个表查询效率低，容易锁表和阻塞)。如：\n```\nSelect * from A left join B ona.id=B.ref_id where B.ref_id>10;\n```\n可以优化为：\n```\nselect * from (select * from A wehre id >10) T1 left join B onT1.id=B.ref_id;\n```\n\n### 建立索引,加快查询性能.\n\n### limit千万级分页的时候优化\n- 在我们平时用limit,如：\n```\nSelect * from A order by id limit 1,10;\n```\n这样在表数据很少的时候，看不出什么性能问题，倘若到达千万级，如：\n```\nSelect * from A order by id limit10000000,10;\n```\n虽然都是只查询10记录，但是这个就性能就让人受不了了。所以为什么当表数据很大的时候，我们还继续用持久层框架如hibernate,ibatis就会有一些性能问题，除非持久层框架对这些大数据表做过优化。\n- 在遇见上面的情况，我们可以用另外一种语句优化，如：\n```\nSelect * from A where id>=(Select idfrom a limit 10000000,1) limit 10;\n```\n确实这样快了很多，不过前提是，id字段建立了索引。也许这个还不是最优的，其实还可以这样写：\n```\nSelect * from A where id between 10000000and 10000010;\n```\n这样的效率更加高。\n\n### 尽量避免Select * 命令\n从表中读取越多的数据，查询会变得更慢。它会增加磁盘的操作时间，还是在数据库服务器与web服务器是独立分开的情况下，你将会经历非常漫长的网络延迟。仅仅是因为数据不必要的在服务器之间传输\n\n### 尽量不要使用BY RAND()命令\n如果您真需要随机显示你的结果，有很多更好的途径实现。而这个函数可能会为表中每一个独立的行执行BY RAND()命令—这个会消耗处理器的处理能力，然后给你仅仅返回一行\n\n### 利用limit 1取得唯一行\n有时要查询一张表时，你要知道需要看一行，你可能去查询一条独特的记录。你可以使用limit 1.来终止数据库引擎继续扫描整个表或者索引,如：\n```\nSelect * from A  where namelike ‘%xxx’ limit 1;\n```\n这样只要查询符合like ‘%xxx’的记录，那么引擎就不会继续扫描表或者索引了。\n\n### 尽量少排序\n排序操作会消耗较多的CPU资源，所以减少排序可以在缓存命中率高等\n\n### 尽量少OR\n当where子句中存在多个条件以“或”并存的时候，Mysql的优化器并没有很好的解决其执行计划优化问题，再加上mysql特有的sql与Storage分层架构方式，造成了其性能比较地下，很多时候使用union all或者union(必要的时候)的方式代替“or”会得到更好的效果。\n\n### 尽量用union all 代替union\nunion和union all的差异主要是前者需要将两个（或者多个）结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的cpu运算，加大资源消耗及延迟。所以当我们可以确认不可能出现重复结果集或者不在乎重复结果集的时候，尽量使用union all而不是union.\n\n### 避免类型转换\n这里所说的“类型转换”是指where子句中出现column字段的类型和传入的参数类型不一致的时候发生的类型转换。人为的上通过转换函数进行转换，直接导致mysql无法使用索引。如果非要转型，应该在传入参数上进行转换\n\n### 不要在列上进行运算\n如下面:\n```\nselect * fromusers where YEAR(adddate)<2007;\n```\n将在每个行进行运算，这些导致索引失效进行全表扫描，因此我们可以改成：\n```\nSelect * from users where adddate<’2007-01-01’;\n```\n### 尽量不要使用NOT IN和<>操作\n- NOT IN和<>操作都不会使用索引，而是将会进行全表扫描。NOT IN可以NOT EXISTS代替，id<>3则可以使用id>3 or id <3;如果NOT EXISTS是子查询，还可以尽量转化为外连接或者等值连接，要看具体sql的业务逻辑。\n\n- 把NOT IN转化为LEFT JOIN如：\n```\nSELECT * FROM customerinfo WHERE CustomerIDNOT in (SELECT CustomerID FROM salesinfo );\n```\n优化：\n```\nSELECT * FROM customerinfo LEFT JOINsalesinfoON customerinfo.CustomerID=salesinfo. CustomerID WHEREsalesinfo.CustomerID IS NULL;\n```\n### 使用批量插入节省交互（最好是使用存储过程）\n\n### 锁定表\n尽管事务是维护数据库完整性的一个非常好的方法,但却因为它的独占性,有时会影响数据库的性能,尤其是在很多的应用系统中.由于事务执行的过程中,数据库将会被锁定,因此其他的用户请求只能暂时等待直到该事务结算.如果一个数据库系统只有少数几个用户来使用,事务造成的影响不会成为一个太大问题;但假设有成千上万的用户同时访问一个数据库系统,例如访问一个电子商务网站,就会产生比较严重的响应延迟.其实有些情况下我们可以通过锁定表的方法来获得更好的性能.如:\n```\nLOCK TABLE inventory write\nSelect quanity from inventory whereitem=’book’;\n…\nUpdate inventory set quantity=11 whereitem=’book’;\nUNLOCK TABLES;\n```\n这里，我们用一个select语句取出初始数据，通过一些计算，用update语句将新值更新到列表中。包含有write关键字的LOCK TABLE语句可以保证在UNLOCK TABLES命令被执行之前，不会有其他的访问来对inventory进行插入，更新或者删除的操作。\n\n### 对多表关联的查询，建立视图\n对多表的关联可能会有性能上的问题，我们可以对多表建立视图，这样操作简单话，增加数据安全性，通过视图，用户只能查询和修改指定的数据。且提高表的逻辑独立性，视图可以屏蔽原有表结构变化带来的影响\n\n\n\n\n\n\n","slug":"myql查询语句优化","published":1,"updated":"2022-03-13T13:52:07.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde09k007w9jx3gr3h96yj","content":"<h2 id=\"Sql语句优化和索引\"><a href=\"#Sql语句优化和索引\" class=\"headerlink\" title=\"Sql语句优化和索引\"></a>Sql语句优化和索引</h2><h3 id=\"Innerjoin和左连接，右连接，子查询\"><a href=\"#Innerjoin和左连接，右连接，子查询\" class=\"headerlink\" title=\"Innerjoin和左连接，右连接，子查询\"></a>Innerjoin和左连接，右连接，子查询</h3><ul><li><p>inner join内连接也叫等值连接是，left/rightjoin是外连接。</p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>name,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>name FROM A LEFT JOIN B ON <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id =<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id;</span><br><span class=\"line\">SELECT <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>name,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>name FROM A RIGHT JOIN ON B <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id= <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id;</span><br><span class=\"line\">SELECT <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>name,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>name FROM A INNER JOIN ON <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id =<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id;</span><br></pre></td></tr></table></figure><p>经过来之多方面的证实inner join性能比较快，因为inner join是等值连接，或许返回的行数比较少。但是我们要记得有些语句隐形的用到了等值连接，如：</p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>name,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>name FROM A,B WHERE <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id;</span><br></pre></td></tr></table></figure><p>推荐：能用inner join连接尽量使用inner join连接</p><a id=\"more\"></a></li><li><p>子查询的性能又比外连接性能慢，尽量用外连接来替换子查询。</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">Select</span>* <span class=\"keyword\">from</span> A <span class=\"keyword\">where</span> <span class=\"keyword\">exists</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> B <span class=\"keyword\">where</span> id&gt;=<span class=\"number\">3000</span> <span class=\"keyword\">and</span> A.<span class=\"built_in\">uuid</span>=B.<span class=\"built_in\">uuid</span>);</span><br></pre></td></tr></table></figure><p>A表的数据为十万级表，B表为百万级表，在本机执行差不多用2秒左右，我们可以通过explain可以查看到子查询是一个相关子查询(DEPENDENCE SUBQUERY);Mysql是先对外表A执行全表查询，然后根据uuid逐次执行子查询，如果外层表是一个很大的表，我们可以想象查询性能会表现比这个更加糟糕。<br>一种简单的优化就是用innerjoin的方法来代替子查询，查询语句改为：</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">Select</span>* <span class=\"keyword\">from</span> A <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> B <span class=\"keyword\">using</span>(<span class=\"built_in\">uuid</span>) <span class=\"keyword\">where</span> b.<span class=\"built_in\">uuid</span>&gt;=<span class=\"number\">3000</span>;</span><br></pre></td></tr></table></figure><p>这个语句执行测试不到一秒；</p></li><li><p>在使用ON 和 WHERE 的时候，记得它们的顺序，如：</p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>name,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>name FROM A LEFT JOIN B ON <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id =<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id WHERE B.NAME=’XXX’</span><br></pre></td></tr></table></figure><p>执行过程会先执行ON 后面先过滤掉B表的一些行数。然而WHERE是后再过滤他们两个连接产生的记录。<br>不过在这里提醒一下大家：ON后面的条件只能过滤出B表的条数，但是连接返回的记录的行数还是A表的行数是一样。如：</p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>name,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>name FROM A LEFT JOIN B ON <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id =<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id;</span><br></pre></td></tr></table></figure><p>返回的记录数是A表的条数，ON后面的条件只起到过滤B表的记录数，而</p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>name,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>name FROM A ,B WHERE <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id</span><br></pre></td></tr></table></figure><p>返回的条数，是笛卡尔积后，符合A.id = B.id这个条件的记录</p></li><li><p>使用JOIN时候，应该用小的结果驱动打的结果（left join 左边表结果尽量小，如果有条件应该放到左边先处理，right join同理反向），同事尽量把牵涉到多表联合的查询拆分多个query(多个表查询效率低，容易锁表和阻塞)。如：</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> A <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> B ona.id=B.ref_id <span class=\"keyword\">where</span> B.ref_id&gt;<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure><p>可以优化为：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> A wehre <span class=\"keyword\">id</span> &gt;<span class=\"number\">10</span>) T1 <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> B onT1.id=B.ref_id;</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"建立索引-加快查询性能\"><a href=\"#建立索引-加快查询性能\" class=\"headerlink\" title=\"建立索引,加快查询性能.\"></a>建立索引,加快查询性能.</h3><h3 id=\"limit千万级分页的时候优化\"><a href=\"#limit千万级分页的时候优化\" class=\"headerlink\" title=\"limit千万级分页的时候优化\"></a>limit千万级分页的时候优化</h3><ul><li>在我们平时用limit,如：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> A <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span> <span class=\"keyword\">limit</span> <span class=\"number\">1</span>,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>这样在表数据很少的时候，看不出什么性能问题，倘若到达千万级，如：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> A <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span> limit10000000,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>虽然都是只查询10记录，但是这个就性能就让人受不了了。所以为什么当表数据很大的时候，我们还继续用持久层框架如hibernate,ibatis就会有一些性能问题，除非持久层框架对这些大数据表做过优化。</li><li>在遇见上面的情况，我们可以用另外一种语句优化，如：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> A <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>&gt;=(<span class=\"keyword\">Select</span> idfrom a <span class=\"keyword\">limit</span> <span class=\"number\">10000000</span>,<span class=\"number\">1</span>) <span class=\"keyword\">limit</span> <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>确实这样快了很多，不过前提是，id字段建立了索引。也许这个还不是最优的，其实还可以这样写：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> A <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> <span class=\"keyword\">between</span> <span class=\"number\">10000000</span><span class=\"keyword\">and</span> <span class=\"number\">10000010</span>;</span><br></pre></td></tr></table></figure>这样的效率更加高。</li></ul><h3 id=\"尽量避免Select-命令\"><a href=\"#尽量避免Select-命令\" class=\"headerlink\" title=\"尽量避免Select * 命令\"></a>尽量避免Select * 命令</h3><p>从表中读取越多的数据，查询会变得更慢。它会增加磁盘的操作时间，还是在数据库服务器与web服务器是独立分开的情况下，你将会经历非常漫长的网络延迟。仅仅是因为数据不必要的在服务器之间传输</p><h3 id=\"尽量不要使用BY-RAND-命令\"><a href=\"#尽量不要使用BY-RAND-命令\" class=\"headerlink\" title=\"尽量不要使用BY RAND()命令\"></a>尽量不要使用BY RAND()命令</h3><p>如果您真需要随机显示你的结果，有很多更好的途径实现。而这个函数可能会为表中每一个独立的行执行BY RAND()命令—这个会消耗处理器的处理能力，然后给你仅仅返回一行</p><h3 id=\"利用limit-1取得唯一行\"><a href=\"#利用limit-1取得唯一行\" class=\"headerlink\" title=\"利用limit 1取得唯一行\"></a>利用limit 1取得唯一行</h3><p>有时要查询一张表时，你要知道需要看一行，你可能去查询一条独特的记录。你可以使用limit 1.来终止数据库引擎继续扫描整个表或者索引,如：</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> A  <span class=\"keyword\">where</span> namelike ‘%xxx’ <span class=\"keyword\">limit</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure><p>这样只要查询符合like ‘%xxx’的记录，那么引擎就不会继续扫描表或者索引了。</p><h3 id=\"尽量少排序\"><a href=\"#尽量少排序\" class=\"headerlink\" title=\"尽量少排序\"></a>尽量少排序</h3><p>排序操作会消耗较多的CPU资源，所以减少排序可以在缓存命中率高等</p><h3 id=\"尽量少OR\"><a href=\"#尽量少OR\" class=\"headerlink\" title=\"尽量少OR\"></a>尽量少OR</h3><p>当where子句中存在多个条件以“或”并存的时候，Mysql的优化器并没有很好的解决其执行计划优化问题，再加上mysql特有的sql与Storage分层架构方式，造成了其性能比较地下，很多时候使用union all或者union(必要的时候)的方式代替“or”会得到更好的效果。</p><h3 id=\"尽量用union-all-代替union\"><a href=\"#尽量用union-all-代替union\" class=\"headerlink\" title=\"尽量用union all 代替union\"></a>尽量用union all 代替union</h3><p>union和union all的差异主要是前者需要将两个（或者多个）结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的cpu运算，加大资源消耗及延迟。所以当我们可以确认不可能出现重复结果集或者不在乎重复结果集的时候，尽量使用union all而不是union.</p><h3 id=\"避免类型转换\"><a href=\"#避免类型转换\" class=\"headerlink\" title=\"避免类型转换\"></a>避免类型转换</h3><p>这里所说的“类型转换”是指where子句中出现column字段的类型和传入的参数类型不一致的时候发生的类型转换。人为的上通过转换函数进行转换，直接导致mysql无法使用索引。如果非要转型，应该在传入参数上进行转换</p><h3 id=\"不要在列上进行运算\"><a href=\"#不要在列上进行运算\" class=\"headerlink\" title=\"不要在列上进行运算\"></a>不要在列上进行运算</h3><p>如下面:</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * fromusers <span class=\"keyword\">where</span> <span class=\"keyword\">YEAR</span>(adddate)&lt;<span class=\"number\">2007</span>;</span><br></pre></td></tr></table></figure><p>将在每个行进行运算，这些导致索引失效进行全表扫描，因此我们可以改成：</p><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select * <span class=\"keyword\">from</span><span class=\"built_in\"> users </span>where adddate&lt;’2007-01-01’;</span><br></pre></td></tr></table></figure><h3 id=\"尽量不要使用NOT-IN和-lt-gt-操作\"><a href=\"#尽量不要使用NOT-IN和-lt-gt-操作\" class=\"headerlink\" title=\"尽量不要使用NOT IN和&lt;&gt;操作\"></a>尽量不要使用NOT IN和&lt;&gt;操作</h3><ul><li><p>NOT IN和&lt;&gt;操作都不会使用索引，而是将会进行全表扫描。NOT IN可以NOT EXISTS代替，id&lt;&gt;3则可以使用id&gt;3 or id &lt;3;如果NOT EXISTS是子查询，还可以尽量转化为外连接或者等值连接，要看具体sql的业务逻辑。</p></li><li><p>把NOT IN转化为LEFT JOIN如：</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> customerinfo <span class=\"keyword\">WHERE</span> CustomerIDNOT <span class=\"keyword\">in</span> (<span class=\"keyword\">SELECT</span> CustomerID <span class=\"keyword\">FROM</span> salesinfo );</span><br></pre></td></tr></table></figure><p>优化：</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> customerinfo <span class=\"keyword\">LEFT</span> JOINsalesinfoON customerinfo.CustomerID=salesinfo. CustomerID WHEREsalesinfo.CustomerID <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id=\"使用批量插入节省交互（最好是使用存储过程）\"><a href=\"#使用批量插入节省交互（最好是使用存储过程）\" class=\"headerlink\" title=\"使用批量插入节省交互（最好是使用存储过程）\"></a>使用批量插入节省交互（最好是使用存储过程）</h3></li></ul><h3 id=\"锁定表\"><a href=\"#锁定表\" class=\"headerlink\" title=\"锁定表\"></a>锁定表</h3><p>尽管事务是维护数据库完整性的一个非常好的方法,但却因为它的独占性,有时会影响数据库的性能,尤其是在很多的应用系统中.由于事务执行的过程中,数据库将会被锁定,因此其他的用户请求只能暂时等待直到该事务结算.如果一个数据库系统只有少数几个用户来使用,事务造成的影响不会成为一个太大问题;但假设有成千上万的用户同时访问一个数据库系统,例如访问一个电子商务网站,就会产生比较严重的响应延迟.其实有些情况下我们可以通过锁定表的方法来获得更好的性能.如:</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">LOCK</span> <span class=\"keyword\">TABLE</span> inventory write</span><br><span class=\"line\"><span class=\"keyword\">Select</span> quanity <span class=\"keyword\">from</span> inventory whereitem=’book’;</span><br><span class=\"line\">…</span><br><span class=\"line\"><span class=\"keyword\">Update</span> inventory <span class=\"keyword\">set</span> quantity=<span class=\"number\">11</span> whereitem=’book’;</span><br><span class=\"line\"><span class=\"keyword\">UNLOCK</span> <span class=\"keyword\">TABLES</span>;</span><br></pre></td></tr></table></figure><p>这里，我们用一个select语句取出初始数据，通过一些计算，用update语句将新值更新到列表中。包含有write关键字的LOCK TABLE语句可以保证在UNLOCK TABLES命令被执行之前，不会有其他的访问来对inventory进行插入，更新或者删除的操作。</p><h3 id=\"对多表关联的查询，建立视图\"><a href=\"#对多表关联的查询，建立视图\" class=\"headerlink\" title=\"对多表关联的查询，建立视图\"></a>对多表关联的查询，建立视图</h3><p>对多表的关联可能会有性能上的问题，我们可以对多表建立视图，这样操作简单话，增加数据安全性，通过视图，用户只能查询和修改指定的数据。且提高表的逻辑独立性，视图可以屏蔽原有表结构变化带来的影响</p>","site":{"data":{}},"excerpt":"<h2 id=\"Sql语句优化和索引\"><a href=\"#Sql语句优化和索引\" class=\"headerlink\" title=\"Sql语句优化和索引\"></a>Sql语句优化和索引</h2><h3 id=\"Innerjoin和左连接，右连接，子查询\"><a href=\"#Innerjoin和左连接，右连接，子查询\" class=\"headerlink\" title=\"Innerjoin和左连接，右连接，子查询\"></a>Innerjoin和左连接，右连接，子查询</h3><ul><li><p>inner join内连接也叫等值连接是，left/rightjoin是外连接。</p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>name,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>name FROM A LEFT JOIN B ON <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id =<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id;</span><br><span class=\"line\">SELECT <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>name,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>name FROM A RIGHT JOIN ON B <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id= <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id;</span><br><span class=\"line\">SELECT <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>name,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>name FROM A INNER JOIN ON <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id =<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id;</span><br></pre></td></tr></table></figure><p>经过来之多方面的证实inner join性能比较快，因为inner join是等值连接，或许返回的行数比较少。但是我们要记得有些语句隐形的用到了等值连接，如：</p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>name,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>name FROM A,B WHERE <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id;</span><br></pre></td></tr></table></figure><p>推荐：能用inner join连接尽量使用inner join连接</p>","more":"</li><li><p>子查询的性能又比外连接性能慢，尽量用外连接来替换子查询。</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">Select</span>* <span class=\"keyword\">from</span> A <span class=\"keyword\">where</span> <span class=\"keyword\">exists</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> B <span class=\"keyword\">where</span> id&gt;=<span class=\"number\">3000</span> <span class=\"keyword\">and</span> A.<span class=\"built_in\">uuid</span>=B.<span class=\"built_in\">uuid</span>);</span><br></pre></td></tr></table></figure><p>A表的数据为十万级表，B表为百万级表，在本机执行差不多用2秒左右，我们可以通过explain可以查看到子查询是一个相关子查询(DEPENDENCE SUBQUERY);Mysql是先对外表A执行全表查询，然后根据uuid逐次执行子查询，如果外层表是一个很大的表，我们可以想象查询性能会表现比这个更加糟糕。<br>一种简单的优化就是用innerjoin的方法来代替子查询，查询语句改为：</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">Select</span>* <span class=\"keyword\">from</span> A <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> B <span class=\"keyword\">using</span>(<span class=\"built_in\">uuid</span>) <span class=\"keyword\">where</span> b.<span class=\"built_in\">uuid</span>&gt;=<span class=\"number\">3000</span>;</span><br></pre></td></tr></table></figure><p>这个语句执行测试不到一秒；</p></li><li><p>在使用ON 和 WHERE 的时候，记得它们的顺序，如：</p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>name,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>name FROM A LEFT JOIN B ON <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id =<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id WHERE B.NAME=’XXX’</span><br></pre></td></tr></table></figure><p>执行过程会先执行ON 后面先过滤掉B表的一些行数。然而WHERE是后再过滤他们两个连接产生的记录。<br>不过在这里提醒一下大家：ON后面的条件只能过滤出B表的条数，但是连接返回的记录的行数还是A表的行数是一样。如：</p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>name,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>name FROM A LEFT JOIN B ON <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id =<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id;</span><br></pre></td></tr></table></figure><p>返回的记录数是A表的条数，ON后面的条件只起到过滤B表的记录数，而</p><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>name,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id,<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>name FROM A ,B WHERE <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">A</span>.</span></span>id = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">B</span>.</span></span>id</span><br></pre></td></tr></table></figure><p>返回的条数，是笛卡尔积后，符合A.id = B.id这个条件的记录</p></li><li><p>使用JOIN时候，应该用小的结果驱动打的结果（left join 左边表结果尽量小，如果有条件应该放到左边先处理，right join同理反向），同事尽量把牵涉到多表联合的查询拆分多个query(多个表查询效率低，容易锁表和阻塞)。如：</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> A <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> B ona.id=B.ref_id <span class=\"keyword\">where</span> B.ref_id&gt;<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure><p>可以优化为：</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> A wehre <span class=\"keyword\">id</span> &gt;<span class=\"number\">10</span>) T1 <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> B onT1.id=B.ref_id;</span><br></pre></td></tr></table></figure></li></ul><h3 id=\"建立索引-加快查询性能\"><a href=\"#建立索引-加快查询性能\" class=\"headerlink\" title=\"建立索引,加快查询性能.\"></a>建立索引,加快查询性能.</h3><h3 id=\"limit千万级分页的时候优化\"><a href=\"#limit千万级分页的时候优化\" class=\"headerlink\" title=\"limit千万级分页的时候优化\"></a>limit千万级分页的时候优化</h3><ul><li>在我们平时用limit,如：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> A <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span> <span class=\"keyword\">limit</span> <span class=\"number\">1</span>,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>这样在表数据很少的时候，看不出什么性能问题，倘若到达千万级，如：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> A <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span> limit10000000,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>虽然都是只查询10记录，但是这个就性能就让人受不了了。所以为什么当表数据很大的时候，我们还继续用持久层框架如hibernate,ibatis就会有一些性能问题，除非持久层框架对这些大数据表做过优化。</li><li>在遇见上面的情况，我们可以用另外一种语句优化，如：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> A <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>&gt;=(<span class=\"keyword\">Select</span> idfrom a <span class=\"keyword\">limit</span> <span class=\"number\">10000000</span>,<span class=\"number\">1</span>) <span class=\"keyword\">limit</span> <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>确实这样快了很多，不过前提是，id字段建立了索引。也许这个还不是最优的，其实还可以这样写：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> A <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> <span class=\"keyword\">between</span> <span class=\"number\">10000000</span><span class=\"keyword\">and</span> <span class=\"number\">10000010</span>;</span><br></pre></td></tr></table></figure>这样的效率更加高。</li></ul><h3 id=\"尽量避免Select-命令\"><a href=\"#尽量避免Select-命令\" class=\"headerlink\" title=\"尽量避免Select * 命令\"></a>尽量避免Select * 命令</h3><p>从表中读取越多的数据，查询会变得更慢。它会增加磁盘的操作时间，还是在数据库服务器与web服务器是独立分开的情况下，你将会经历非常漫长的网络延迟。仅仅是因为数据不必要的在服务器之间传输</p><h3 id=\"尽量不要使用BY-RAND-命令\"><a href=\"#尽量不要使用BY-RAND-命令\" class=\"headerlink\" title=\"尽量不要使用BY RAND()命令\"></a>尽量不要使用BY RAND()命令</h3><p>如果您真需要随机显示你的结果，有很多更好的途径实现。而这个函数可能会为表中每一个独立的行执行BY RAND()命令—这个会消耗处理器的处理能力，然后给你仅仅返回一行</p><h3 id=\"利用limit-1取得唯一行\"><a href=\"#利用limit-1取得唯一行\" class=\"headerlink\" title=\"利用limit 1取得唯一行\"></a>利用limit 1取得唯一行</h3><p>有时要查询一张表时，你要知道需要看一行，你可能去查询一条独特的记录。你可以使用limit 1.来终止数据库引擎继续扫描整个表或者索引,如：</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> A  <span class=\"keyword\">where</span> namelike ‘%xxx’ <span class=\"keyword\">limit</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure><p>这样只要查询符合like ‘%xxx’的记录，那么引擎就不会继续扫描表或者索引了。</p><h3 id=\"尽量少排序\"><a href=\"#尽量少排序\" class=\"headerlink\" title=\"尽量少排序\"></a>尽量少排序</h3><p>排序操作会消耗较多的CPU资源，所以减少排序可以在缓存命中率高等</p><h3 id=\"尽量少OR\"><a href=\"#尽量少OR\" class=\"headerlink\" title=\"尽量少OR\"></a>尽量少OR</h3><p>当where子句中存在多个条件以“或”并存的时候，Mysql的优化器并没有很好的解决其执行计划优化问题，再加上mysql特有的sql与Storage分层架构方式，造成了其性能比较地下，很多时候使用union all或者union(必要的时候)的方式代替“or”会得到更好的效果。</p><h3 id=\"尽量用union-all-代替union\"><a href=\"#尽量用union-all-代替union\" class=\"headerlink\" title=\"尽量用union all 代替union\"></a>尽量用union all 代替union</h3><p>union和union all的差异主要是前者需要将两个（或者多个）结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的cpu运算，加大资源消耗及延迟。所以当我们可以确认不可能出现重复结果集或者不在乎重复结果集的时候，尽量使用union all而不是union.</p><h3 id=\"避免类型转换\"><a href=\"#避免类型转换\" class=\"headerlink\" title=\"避免类型转换\"></a>避免类型转换</h3><p>这里所说的“类型转换”是指where子句中出现column字段的类型和传入的参数类型不一致的时候发生的类型转换。人为的上通过转换函数进行转换，直接导致mysql无法使用索引。如果非要转型，应该在传入参数上进行转换</p><h3 id=\"不要在列上进行运算\"><a href=\"#不要在列上进行运算\" class=\"headerlink\" title=\"不要在列上进行运算\"></a>不要在列上进行运算</h3><p>如下面:</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * fromusers <span class=\"keyword\">where</span> <span class=\"keyword\">YEAR</span>(adddate)&lt;<span class=\"number\">2007</span>;</span><br></pre></td></tr></table></figure><p>将在每个行进行运算，这些导致索引失效进行全表扫描，因此我们可以改成：</p><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select * <span class=\"keyword\">from</span><span class=\"built_in\"> users </span>where adddate&lt;’2007-01-01’;</span><br></pre></td></tr></table></figure><h3 id=\"尽量不要使用NOT-IN和-lt-gt-操作\"><a href=\"#尽量不要使用NOT-IN和-lt-gt-操作\" class=\"headerlink\" title=\"尽量不要使用NOT IN和&lt;&gt;操作\"></a>尽量不要使用NOT IN和&lt;&gt;操作</h3><ul><li><p>NOT IN和&lt;&gt;操作都不会使用索引，而是将会进行全表扫描。NOT IN可以NOT EXISTS代替，id&lt;&gt;3则可以使用id&gt;3 or id &lt;3;如果NOT EXISTS是子查询，还可以尽量转化为外连接或者等值连接，要看具体sql的业务逻辑。</p></li><li><p>把NOT IN转化为LEFT JOIN如：</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> customerinfo <span class=\"keyword\">WHERE</span> CustomerIDNOT <span class=\"keyword\">in</span> (<span class=\"keyword\">SELECT</span> CustomerID <span class=\"keyword\">FROM</span> salesinfo );</span><br></pre></td></tr></table></figure><p>优化：</p><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> customerinfo <span class=\"keyword\">LEFT</span> JOINsalesinfoON customerinfo.CustomerID=salesinfo. CustomerID WHEREsalesinfo.CustomerID <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id=\"使用批量插入节省交互（最好是使用存储过程）\"><a href=\"#使用批量插入节省交互（最好是使用存储过程）\" class=\"headerlink\" title=\"使用批量插入节省交互（最好是使用存储过程）\"></a>使用批量插入节省交互（最好是使用存储过程）</h3></li></ul><h3 id=\"锁定表\"><a href=\"#锁定表\" class=\"headerlink\" title=\"锁定表\"></a>锁定表</h3><p>尽管事务是维护数据库完整性的一个非常好的方法,但却因为它的独占性,有时会影响数据库的性能,尤其是在很多的应用系统中.由于事务执行的过程中,数据库将会被锁定,因此其他的用户请求只能暂时等待直到该事务结算.如果一个数据库系统只有少数几个用户来使用,事务造成的影响不会成为一个太大问题;但假设有成千上万的用户同时访问一个数据库系统,例如访问一个电子商务网站,就会产生比较严重的响应延迟.其实有些情况下我们可以通过锁定表的方法来获得更好的性能.如:</p><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">LOCK</span> <span class=\"keyword\">TABLE</span> inventory write</span><br><span class=\"line\"><span class=\"keyword\">Select</span> quanity <span class=\"keyword\">from</span> inventory whereitem=’book’;</span><br><span class=\"line\">…</span><br><span class=\"line\"><span class=\"keyword\">Update</span> inventory <span class=\"keyword\">set</span> quantity=<span class=\"number\">11</span> whereitem=’book’;</span><br><span class=\"line\"><span class=\"keyword\">UNLOCK</span> <span class=\"keyword\">TABLES</span>;</span><br></pre></td></tr></table></figure><p>这里，我们用一个select语句取出初始数据，通过一些计算，用update语句将新值更新到列表中。包含有write关键字的LOCK TABLE语句可以保证在UNLOCK TABLES命令被执行之前，不会有其他的访问来对inventory进行插入，更新或者删除的操作。</p><h3 id=\"对多表关联的查询，建立视图\"><a href=\"#对多表关联的查询，建立视图\" class=\"headerlink\" title=\"对多表关联的查询，建立视图\"></a>对多表关联的查询，建立视图</h3><p>对多表的关联可能会有性能上的问题，我们可以对多表建立视图，这样操作简单话，增加数据安全性，通过视图，用户只能查询和修改指定的数据。且提高表的逻辑独立性，视图可以屏蔽原有表结构变化带来的影响</p>"},{"title":"numpy学习","type":"categories","copyright":true,"abbrlink":3939334463,"date":"2020-01-02T08:32:20.000Z","_content":"\n## numpy学习小结\n\n### 安装numpy包\n```\npip3 install numpy\n```\n### 导包\n```python\nimport numpy as np\n```\n<!--more-->\n\n* ndarray.ndim：数组的维数。在Python世界中，维数称之为rank\n* ndarray.shape：数组的维度。这是一系列数字，长度由数组的维度（ndim）决定。例如：长度为n的一维数组的shape是n。一个n行m列的矩阵的shape是n,m\n* ndarray.size：数组中所有元素的数量\n* ndarray.dtype：数组中元素的类型，例如numpy.int32, numpy.int16或者numpy.float64\n* ndarray.itemsize：数组中每个元素的大小，单位为字节\n* ndarray.data：存储数组元素的缓冲。通常我们只需要通过下标来访问元素，而不需要访问缓冲\n\n```python\na = np.array([1,2,3])\nprint(a)\nprint(\"a's ndim {}\".format(a.ndim))\nprint(\"a's shape {}\".format(a.shape))\nprint(\"a's size {}\".format(a.size))\nprint(\"a's dtype {}\".format(a.dtype))\nprint(\"a's itemsize {}\".format(a.itemsize))\n\n# [1 2 3]\n# a's ndim 1\n# a's shape (3,)\n# a's size 3\n# a's dtype int32\n# a's itemsize 4\n```\n\n```python\nb = np.array([[1,2,3],[4,5,6]])\nprint(b)\nprint(\"b's ndim {}\".format(b.ndim))\nprint(\"b's shape {}\".format(b.shape))\nprint(\"b's size {}\".format(b.size))\nprint(\"b's dtype {}\".format(b.dtype))\nprint(\"b's itemsize {}\".format(b.itemsize))\n\n# [[1 2 3]\n#  [4 5 6]]\n# b's ndim 2\n# b's shape (2, 3)\n# b's size 6\n# b's dtype int32\n# b's itemsize 4\n```\n\n* zeros：用来创建元素全部是0的数组\n* ones：用来创建元素全部是1的数组\n* empty：用来创建未初始化的数据，因此是内容是不确定的\n* arange：通过指定范围和步长来创建数组\n* linespace：通过指定范围和元素数量来创建数组\n* random：用来生成随机数\n\n```python\nc = np.zeros((2,3))     \nprint(c)\n# [[0. 0. 0.]\n#  [0. 0. 0.]]\n\nd = np.ones((3,2))\nprint(d)\n# [[1. 1.]\n#  [1. 1.]\n#  [1. 1.]]\n\ne = np.empty((2,3))\nprint(e)\n# [[6.23042070e-307 3.56043053e-307 1.37961641e-306]\n#  [6.23039015e-307 1.69115935e-306 2.11392033e-307]]\n\nf = np.arange(1,2,0.3)\nprint(f)\n# [1.  1.3 1.6 1.9]\n\ng = np.linspace(1,2,3)\nprint(g)\n# [1.  1.5 2. ]\n\nh = np.random.random((2,3))\nprint(h)\n# [[0.64425744 0.4496131  0.88346286]\n#  [0.3458989  0.89334331 0.61867948]]\n```\n&emsp;&emsp;除了生成数组之外，当我们已经持有某个数据之后，我们可能会需要根据已有数组来产生一些新的数据结构，这时候我们可以使用下面这些函数：\n* reshape：根据已有数组和指定的shape，生成一个新的数组\n* vstack：用来将多个数组在垂直（v代表vertical）方向拼接（数组的维度必须匹配）\n* hstack：用来将多个数组在水平（h代表horizontal）方向拼接（数组的维度必须匹配）\n* hsplit：用来将数组在水平方向拆分\n* vsplit：用来将数组在垂直方向拆分\n\n&emsp;&emsp;下面我们通过一些例子来进行说明。为了便于测试，我们先创建几个数据。这里我们创建了：\n* zero_line：一行包含3个0的数组\n* one_column：一列包含3个1的数组\n* a：一个2行3列的矩阵\n* b：[11, 20)区间的整数数组\n\n```python\nzero_line = np.zeros((1,3))\none_column = np.ones((3,1))\n# [[0. 0. 0.]]\n# [[1.]\n#  [1.]\n#  [1.]]\n\na = np.array(([1,2,3],[4,5,6]))\nb = np.arange(11,20)\n# [[1 2 3]\n#  [4 5 6]]\n# [11 12 13 14 15 16 17 18 19]\n\n#数组b原先是一个一维数组，现在我们通过reshape方法将其调整成为一个3行3列的矩阵\n#这里的第二参数设为-1，表示根据实际情况自动决定。由于原先是9个元素的数组，因此调整后刚好是3X3的矩阵\nb = b.reshape(3,-1)\nprint(b)\n# [[11 12 13]\n#  [14 15 16]\n#  [17 18 19]]\n\n# 竖直方向拼接数组\nc = np.vstack((a,b,zero_line))\nprint(c)\n# [[ 1.  2.  3.]\n#  [ 4.  5.  6.]\n#  [11. 12. 13.]\n#  [14. 15. 16.]\n#  [17. 18. 19.]\n#  [ 0.  0.  0.]]\n\na = a.reshape(3,-1)\nprint(a)\n# [[1 2]\n#  [3 4]\n#  [5 6]]\n# 水平方向拼接数组\nd = np.hstack((a,b,one_column))\nprint(d)\n# [[ 1.  2. 11. 12. 13.  1.]\n#  [ 3.  4. 14. 15. 16.  1.]\n#  [ 5.  6. 17. 18. 19.  1.]]\n\n# 指定数量进行水平拆分\ne = np.hsplit(d,3)\nprint(e)\n# [array([[1., 2.],\n#        [3., 4.],\n#        [5., 6.]]), array([[11., 12.],\n#        [14., 15.],\n#        [17., 18.]]), array([[13.,  1.],\n#        [16.,  1.],\n#        [19.,  1.]])]\n\n# 指定列数进行水平拆分\nf = np.hsplit(d,(1,3))\nprint(f)\n# [array([[1.],\n#        [3.],\n#        [5.]]), array([[ 2., 11.],\n#        [ 4., 14.],\n#        [ 6., 17.]]), array([[12., 13.,  1.],\n#        [15., 16.,  1.],\n#        [18., 19.,  1.]])]\n\n# 竖直拆分\ng = np.vsplit(d,3)\nprint(g)\n# [array([[ 1.,  2., 11., 12., 13.,  1.]]), array([[ 3.,  4., 14., 15., 16.,  1.]]), array([[ 5.,  6., 17., 18., 19.,  1.]])]\n```\n\n### 索引\n```python\nbase_data = np.arange(100,200)\nprint(base_data)\nprint(base_data[10])\n\"\"\"\n[100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117\n 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135\n 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153\n 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171\n 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189\n 190 191 192 193 194 195 196 197 198 199]\n110\n\"\"\"\nevery_five = np.arange(0,100,5)\nprint(every_five)\n# [ 0  5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95]\n\nprint(base_data[every_five])\n# [100 105 110 115 120 125 130 135 140 145 150 155 160 165 170 175 180 185 190 195]\n\na = np.array([(1,2),[10,20]])\nprint(a)\n# [[ 1  2]\n#  [10 20]]\nprint(base_data[a])\n# [[101 102]\n#  [110 120]]\n\nbase_data2 = base_data.reshape(10, -1)\nprint(base_data2)\n\"\"\"\n[[100 101 102 103 104 105 106 107 108 109]\n [110 111 112 113 114 115 116 117 118 119]\n [120 121 122 123 124 125 126 127 128 129]\n [130 131 132 133 134 135 136 137 138 139]\n [140 141 142 143 144 145 146 147 148 149]\n [150 151 152 153 154 155 156 157 158 159]\n [160 161 162 163 164 165 166 167 168 169]\n [170 171 172 173 174 175 176 177 178 179]\n [180 181 182 183 184 185 186 187 188 189]\n [190 191 192 193 194 195 196 197 198 199]]\n\"\"\"\nprint(base_data2[-1,-1])  # 199\n\n# 切片索引从0开始\nprint(base_data2[2, :])\n# [120 121 122 123 124 125 126 127 128 129]\nprint(base_data2[:,3])\n# [103 113 123 133 143 153 163 173 183 193]\n```\n\n### 数字运算\n```python\nbase_data = (np.random.random((5,5))-0.5) * 100\n\"\"\"\n[[ -4.99893607  39.77193936 -15.46706727  16.80691258 -38.51945213]\n [-49.06612449  49.35329335  -0.4216167   13.12483635 -41.60876645]\n [-43.18292355 -25.25568989   0.44448147  -2.89856688 -24.13873839]\n [ 32.75485688  11.0737333   18.77766764  22.513295     3.48913839]\n [-10.96543248 -40.42721305  30.38299405 -32.77083843  40.39435566]]\n\"\"\"\nprint(np.amin(base_data))\n# -49.06612449306485\n\nprint(np.amax(base_data))\n# 49.35329334672289\n\nprint(np.average(base_data))\n# -2.0333544702011186\n\nprint(np.sin(base_data))\n\"\"\"\n[[ 0.95922553  0.87660695 -0.23857285 -0.89073028 -0.73137794]\n [ 0.93180625 -0.7908454  -0.40923611  0.52988566  0.69474259]\n [ 0.71691953 -0.12263914  0.42998979 -0.24064058  0.83821559]\n [ 0.9732393  -0.99694714 -0.07182638 -0.4987417  -0.34059131]\n [ 0.99954577 -0.40180897 -0.858805   -0.97678732  0.43167496]]\n\"\"\"\nprint(np.sum(base_data))\n# -50.83386175502796\n```\n\n### 矩阵运算\n```python\nbase_data = np.floor((np.random.random((5,5))-0.5) * 100)\n\"\"\"\n[[ 39. -20. -44. -45.   6.]\n [ -5.  44.  42. -33.  -6.]\n [-14.  -9. -13. -30.  -4.]\n [ 31. -50.   5.   7.  45.]\n [ 39. -16.  42.  39. -24.]]\n\"\"\"\n# 矩阵转置\nprint(base_data.T)  或着\nprint(base_data.transpose())\n\"\"\"\n[[ 39.  -5. -14.  31.  39.]\n [-20.  44.  -9. -50. -16.]\n [-44.  42. -13.   5.  42.]\n [-45. -33. -30.   7.  39.]\n [  6.  -6.  -4.  45. -24.]]\n\"\"\"\nmatri_one = np.ones((5,5))\n\"\"\"\n[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]\n\"\"\"\nminu_one = np.dot(matri_one, -1)\n\"\"\"\n[[-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]]\n\"\"\"\nprint(np.dot(base_data,minu_one))\n\"\"\"\n[[-32. -32. -32. -32. -32.]\n [-84. -84. -84. -84. -84.]\n [-72. -72. -72. -72. -72.]\n [ 51.  51.  51.  51.  51.]\n [ 46.  46.  46.  46.  46.]]\n\"\"\"\n```\n### 随机数\n生成20个随机数，它们每一个都是[0.0, 1.0)之间\n根据指定的shape生成随机数\n生成指定范围内（[0, 100)）的指定数量（20）的随机整数\n对已有的数据（[0, 1, 2, ..., 19]）的顺序随机打乱顺序\n\n```python\nprint(\"random: {}\\n\".format(np.random.random(20)))\n\"\"\"\nrandom: [0.105123   0.90013672 0.58255936 0.27769054 0.00139627 0.69873449\n 0.32550338 0.72112185 0.35799445 0.72302835 0.67139936 0.30039148\n 0.83770639 0.07878046 0.77641452 0.6054163  0.72421693 0.77157218\n 0.08644228 0.65128463]\n\"\"\"\n\nprint(\"rand: {}\\n\".format(np.random.rand(3, 4)))\n\"\"\"\nrand: [[0.73446485 0.30451937 0.49029421 0.62473099]\n [0.09829422 0.55518899 0.83903237 0.71153898]\n [0.11826133 0.53736883 0.47913765 0.0438171 ]]\n\"\"\"\n\nprint(\"randint: {}\\n\".format(np.random.randint(0, 100, 20)))\n\"\"\"\nrandint: [39 51 97 22 92 29 19 54 92 30  5 61 26 19 92 59 23 64 85 97]\n\"\"\"\n\nprint(\"permutation: {}\\n\".format(np.random.permutation(np.arange(20))))\n\"\"\"\npermutation: [ 5  0 14 10  6 13 11  7 18 19  2 12 17  3  9  8  1 15  4 16]\n\"\"\"\n```\n","source":"_posts/numpy学习.md","raw":"---\ntitle: numpy学习\ntype: categories\ncopyright: true\ntags:\n  - 数据分析\n  - python\ncategories:\n  - python\n  - 数据分析\nabbrlink: 3939334463\ndate: 2020-01-02 16:32:20\n---\n\n## numpy学习小结\n\n### 安装numpy包\n```\npip3 install numpy\n```\n### 导包\n```python\nimport numpy as np\n```\n<!--more-->\n\n* ndarray.ndim：数组的维数。在Python世界中，维数称之为rank\n* ndarray.shape：数组的维度。这是一系列数字，长度由数组的维度（ndim）决定。例如：长度为n的一维数组的shape是n。一个n行m列的矩阵的shape是n,m\n* ndarray.size：数组中所有元素的数量\n* ndarray.dtype：数组中元素的类型，例如numpy.int32, numpy.int16或者numpy.float64\n* ndarray.itemsize：数组中每个元素的大小，单位为字节\n* ndarray.data：存储数组元素的缓冲。通常我们只需要通过下标来访问元素，而不需要访问缓冲\n\n```python\na = np.array([1,2,3])\nprint(a)\nprint(\"a's ndim {}\".format(a.ndim))\nprint(\"a's shape {}\".format(a.shape))\nprint(\"a's size {}\".format(a.size))\nprint(\"a's dtype {}\".format(a.dtype))\nprint(\"a's itemsize {}\".format(a.itemsize))\n\n# [1 2 3]\n# a's ndim 1\n# a's shape (3,)\n# a's size 3\n# a's dtype int32\n# a's itemsize 4\n```\n\n```python\nb = np.array([[1,2,3],[4,5,6]])\nprint(b)\nprint(\"b's ndim {}\".format(b.ndim))\nprint(\"b's shape {}\".format(b.shape))\nprint(\"b's size {}\".format(b.size))\nprint(\"b's dtype {}\".format(b.dtype))\nprint(\"b's itemsize {}\".format(b.itemsize))\n\n# [[1 2 3]\n#  [4 5 6]]\n# b's ndim 2\n# b's shape (2, 3)\n# b's size 6\n# b's dtype int32\n# b's itemsize 4\n```\n\n* zeros：用来创建元素全部是0的数组\n* ones：用来创建元素全部是1的数组\n* empty：用来创建未初始化的数据，因此是内容是不确定的\n* arange：通过指定范围和步长来创建数组\n* linespace：通过指定范围和元素数量来创建数组\n* random：用来生成随机数\n\n```python\nc = np.zeros((2,3))     \nprint(c)\n# [[0. 0. 0.]\n#  [0. 0. 0.]]\n\nd = np.ones((3,2))\nprint(d)\n# [[1. 1.]\n#  [1. 1.]\n#  [1. 1.]]\n\ne = np.empty((2,3))\nprint(e)\n# [[6.23042070e-307 3.56043053e-307 1.37961641e-306]\n#  [6.23039015e-307 1.69115935e-306 2.11392033e-307]]\n\nf = np.arange(1,2,0.3)\nprint(f)\n# [1.  1.3 1.6 1.9]\n\ng = np.linspace(1,2,3)\nprint(g)\n# [1.  1.5 2. ]\n\nh = np.random.random((2,3))\nprint(h)\n# [[0.64425744 0.4496131  0.88346286]\n#  [0.3458989  0.89334331 0.61867948]]\n```\n&emsp;&emsp;除了生成数组之外，当我们已经持有某个数据之后，我们可能会需要根据已有数组来产生一些新的数据结构，这时候我们可以使用下面这些函数：\n* reshape：根据已有数组和指定的shape，生成一个新的数组\n* vstack：用来将多个数组在垂直（v代表vertical）方向拼接（数组的维度必须匹配）\n* hstack：用来将多个数组在水平（h代表horizontal）方向拼接（数组的维度必须匹配）\n* hsplit：用来将数组在水平方向拆分\n* vsplit：用来将数组在垂直方向拆分\n\n&emsp;&emsp;下面我们通过一些例子来进行说明。为了便于测试，我们先创建几个数据。这里我们创建了：\n* zero_line：一行包含3个0的数组\n* one_column：一列包含3个1的数组\n* a：一个2行3列的矩阵\n* b：[11, 20)区间的整数数组\n\n```python\nzero_line = np.zeros((1,3))\none_column = np.ones((3,1))\n# [[0. 0. 0.]]\n# [[1.]\n#  [1.]\n#  [1.]]\n\na = np.array(([1,2,3],[4,5,6]))\nb = np.arange(11,20)\n# [[1 2 3]\n#  [4 5 6]]\n# [11 12 13 14 15 16 17 18 19]\n\n#数组b原先是一个一维数组，现在我们通过reshape方法将其调整成为一个3行3列的矩阵\n#这里的第二参数设为-1，表示根据实际情况自动决定。由于原先是9个元素的数组，因此调整后刚好是3X3的矩阵\nb = b.reshape(3,-1)\nprint(b)\n# [[11 12 13]\n#  [14 15 16]\n#  [17 18 19]]\n\n# 竖直方向拼接数组\nc = np.vstack((a,b,zero_line))\nprint(c)\n# [[ 1.  2.  3.]\n#  [ 4.  5.  6.]\n#  [11. 12. 13.]\n#  [14. 15. 16.]\n#  [17. 18. 19.]\n#  [ 0.  0.  0.]]\n\na = a.reshape(3,-1)\nprint(a)\n# [[1 2]\n#  [3 4]\n#  [5 6]]\n# 水平方向拼接数组\nd = np.hstack((a,b,one_column))\nprint(d)\n# [[ 1.  2. 11. 12. 13.  1.]\n#  [ 3.  4. 14. 15. 16.  1.]\n#  [ 5.  6. 17. 18. 19.  1.]]\n\n# 指定数量进行水平拆分\ne = np.hsplit(d,3)\nprint(e)\n# [array([[1., 2.],\n#        [3., 4.],\n#        [5., 6.]]), array([[11., 12.],\n#        [14., 15.],\n#        [17., 18.]]), array([[13.,  1.],\n#        [16.,  1.],\n#        [19.,  1.]])]\n\n# 指定列数进行水平拆分\nf = np.hsplit(d,(1,3))\nprint(f)\n# [array([[1.],\n#        [3.],\n#        [5.]]), array([[ 2., 11.],\n#        [ 4., 14.],\n#        [ 6., 17.]]), array([[12., 13.,  1.],\n#        [15., 16.,  1.],\n#        [18., 19.,  1.]])]\n\n# 竖直拆分\ng = np.vsplit(d,3)\nprint(g)\n# [array([[ 1.,  2., 11., 12., 13.,  1.]]), array([[ 3.,  4., 14., 15., 16.,  1.]]), array([[ 5.,  6., 17., 18., 19.,  1.]])]\n```\n\n### 索引\n```python\nbase_data = np.arange(100,200)\nprint(base_data)\nprint(base_data[10])\n\"\"\"\n[100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117\n 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135\n 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153\n 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171\n 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189\n 190 191 192 193 194 195 196 197 198 199]\n110\n\"\"\"\nevery_five = np.arange(0,100,5)\nprint(every_five)\n# [ 0  5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95]\n\nprint(base_data[every_five])\n# [100 105 110 115 120 125 130 135 140 145 150 155 160 165 170 175 180 185 190 195]\n\na = np.array([(1,2),[10,20]])\nprint(a)\n# [[ 1  2]\n#  [10 20]]\nprint(base_data[a])\n# [[101 102]\n#  [110 120]]\n\nbase_data2 = base_data.reshape(10, -1)\nprint(base_data2)\n\"\"\"\n[[100 101 102 103 104 105 106 107 108 109]\n [110 111 112 113 114 115 116 117 118 119]\n [120 121 122 123 124 125 126 127 128 129]\n [130 131 132 133 134 135 136 137 138 139]\n [140 141 142 143 144 145 146 147 148 149]\n [150 151 152 153 154 155 156 157 158 159]\n [160 161 162 163 164 165 166 167 168 169]\n [170 171 172 173 174 175 176 177 178 179]\n [180 181 182 183 184 185 186 187 188 189]\n [190 191 192 193 194 195 196 197 198 199]]\n\"\"\"\nprint(base_data2[-1,-1])  # 199\n\n# 切片索引从0开始\nprint(base_data2[2, :])\n# [120 121 122 123 124 125 126 127 128 129]\nprint(base_data2[:,3])\n# [103 113 123 133 143 153 163 173 183 193]\n```\n\n### 数字运算\n```python\nbase_data = (np.random.random((5,5))-0.5) * 100\n\"\"\"\n[[ -4.99893607  39.77193936 -15.46706727  16.80691258 -38.51945213]\n [-49.06612449  49.35329335  -0.4216167   13.12483635 -41.60876645]\n [-43.18292355 -25.25568989   0.44448147  -2.89856688 -24.13873839]\n [ 32.75485688  11.0737333   18.77766764  22.513295     3.48913839]\n [-10.96543248 -40.42721305  30.38299405 -32.77083843  40.39435566]]\n\"\"\"\nprint(np.amin(base_data))\n# -49.06612449306485\n\nprint(np.amax(base_data))\n# 49.35329334672289\n\nprint(np.average(base_data))\n# -2.0333544702011186\n\nprint(np.sin(base_data))\n\"\"\"\n[[ 0.95922553  0.87660695 -0.23857285 -0.89073028 -0.73137794]\n [ 0.93180625 -0.7908454  -0.40923611  0.52988566  0.69474259]\n [ 0.71691953 -0.12263914  0.42998979 -0.24064058  0.83821559]\n [ 0.9732393  -0.99694714 -0.07182638 -0.4987417  -0.34059131]\n [ 0.99954577 -0.40180897 -0.858805   -0.97678732  0.43167496]]\n\"\"\"\nprint(np.sum(base_data))\n# -50.83386175502796\n```\n\n### 矩阵运算\n```python\nbase_data = np.floor((np.random.random((5,5))-0.5) * 100)\n\"\"\"\n[[ 39. -20. -44. -45.   6.]\n [ -5.  44.  42. -33.  -6.]\n [-14.  -9. -13. -30.  -4.]\n [ 31. -50.   5.   7.  45.]\n [ 39. -16.  42.  39. -24.]]\n\"\"\"\n# 矩阵转置\nprint(base_data.T)  或着\nprint(base_data.transpose())\n\"\"\"\n[[ 39.  -5. -14.  31.  39.]\n [-20.  44.  -9. -50. -16.]\n [-44.  42. -13.   5.  42.]\n [-45. -33. -30.   7.  39.]\n [  6.  -6.  -4.  45. -24.]]\n\"\"\"\nmatri_one = np.ones((5,5))\n\"\"\"\n[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]\n\"\"\"\nminu_one = np.dot(matri_one, -1)\n\"\"\"\n[[-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]]\n\"\"\"\nprint(np.dot(base_data,minu_one))\n\"\"\"\n[[-32. -32. -32. -32. -32.]\n [-84. -84. -84. -84. -84.]\n [-72. -72. -72. -72. -72.]\n [ 51.  51.  51.  51.  51.]\n [ 46.  46.  46.  46.  46.]]\n\"\"\"\n```\n### 随机数\n生成20个随机数，它们每一个都是[0.0, 1.0)之间\n根据指定的shape生成随机数\n生成指定范围内（[0, 100)）的指定数量（20）的随机整数\n对已有的数据（[0, 1, 2, ..., 19]）的顺序随机打乱顺序\n\n```python\nprint(\"random: {}\\n\".format(np.random.random(20)))\n\"\"\"\nrandom: [0.105123   0.90013672 0.58255936 0.27769054 0.00139627 0.69873449\n 0.32550338 0.72112185 0.35799445 0.72302835 0.67139936 0.30039148\n 0.83770639 0.07878046 0.77641452 0.6054163  0.72421693 0.77157218\n 0.08644228 0.65128463]\n\"\"\"\n\nprint(\"rand: {}\\n\".format(np.random.rand(3, 4)))\n\"\"\"\nrand: [[0.73446485 0.30451937 0.49029421 0.62473099]\n [0.09829422 0.55518899 0.83903237 0.71153898]\n [0.11826133 0.53736883 0.47913765 0.0438171 ]]\n\"\"\"\n\nprint(\"randint: {}\\n\".format(np.random.randint(0, 100, 20)))\n\"\"\"\nrandint: [39 51 97 22 92 29 19 54 92 30  5 61 26 19 92 59 23 64 85 97]\n\"\"\"\n\nprint(\"permutation: {}\\n\".format(np.random.permutation(np.arange(20))))\n\"\"\"\npermutation: [ 5  0 14 10  6 13 11  7 18 19  2 12 17  3  9  8  1 15  4 16]\n\"\"\"\n```\n","slug":"numpy学习","published":1,"updated":"2022-03-13T11:49:16.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde09l007x9jx3g7hzg1ru","content":"<h2 id=\"numpy学习小结\"><a href=\"#numpy学习小结\" class=\"headerlink\" title=\"numpy学习小结\"></a>numpy学习小结</h2><h3 id=\"安装numpy包\"><a href=\"#安装numpy包\" class=\"headerlink\" title=\"安装numpy包\"></a>安装numpy包</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 <span class=\"keyword\">install</span> numpy</span><br></pre></td></tr></table></figure><h3 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure><a id=\"more\"></a><ul><li>ndarray.ndim：数组的维数。在Python世界中，维数称之为rank</li><li>ndarray.shape：数组的维度。这是一系列数字，长度由数组的维度（ndim）决定。例如：长度为n的一维数组的shape是n。一个n行m列的矩阵的shape是n,m</li><li>ndarray.size：数组中所有元素的数量</li><li>ndarray.dtype：数组中元素的类型，例如numpy.int32, numpy.int16或者numpy.float64</li><li>ndarray.itemsize：数组中每个元素的大小，单位为字节</li><li>ndarray.data：存储数组元素的缓冲。通常我们只需要通过下标来访问元素，而不需要访问缓冲</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(<span class=\"string\">\"a's ndim &#123;&#125;\"</span>.format(a.ndim))</span><br><span class=\"line\">print(<span class=\"string\">\"a's shape &#123;&#125;\"</span>.format(a.shape))</span><br><span class=\"line\">print(<span class=\"string\">\"a's size &#123;&#125;\"</span>.format(a.size))</span><br><span class=\"line\">print(<span class=\"string\">\"a's dtype &#123;&#125;\"</span>.format(a.dtype))</span><br><span class=\"line\">print(<span class=\"string\">\"a's itemsize &#123;&#125;\"</span>.format(a.itemsize))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [1 2 3]</span></span><br><span class=\"line\"><span class=\"comment\"># a's ndim 1</span></span><br><span class=\"line\"><span class=\"comment\"># a's shape (3,)</span></span><br><span class=\"line\"><span class=\"comment\"># a's size 3</span></span><br><span class=\"line\"><span class=\"comment\"># a's dtype int32</span></span><br><span class=\"line\"><span class=\"comment\"># a's itemsize 4</span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</span><br><span class=\"line\">print(b)</span><br><span class=\"line\">print(<span class=\"string\">\"b's ndim &#123;&#125;\"</span>.format(b.ndim))</span><br><span class=\"line\">print(<span class=\"string\">\"b's shape &#123;&#125;\"</span>.format(b.shape))</span><br><span class=\"line\">print(<span class=\"string\">\"b's size &#123;&#125;\"</span>.format(b.size))</span><br><span class=\"line\">print(<span class=\"string\">\"b's dtype &#123;&#125;\"</span>.format(b.dtype))</span><br><span class=\"line\">print(<span class=\"string\">\"b's itemsize &#123;&#125;\"</span>.format(b.itemsize))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [[1 2 3]</span></span><br><span class=\"line\"><span class=\"comment\">#  [4 5 6]]</span></span><br><span class=\"line\"><span class=\"comment\"># b's ndim 2</span></span><br><span class=\"line\"><span class=\"comment\"># b's shape (2, 3)</span></span><br><span class=\"line\"><span class=\"comment\"># b's size 6</span></span><br><span class=\"line\"><span class=\"comment\"># b's dtype int32</span></span><br><span class=\"line\"><span class=\"comment\"># b's itemsize 4</span></span><br></pre></td></tr></table></figure><ul><li>zeros：用来创建元素全部是0的数组</li><li>ones：用来创建元素全部是1的数组</li><li>empty：用来创建未初始化的数据，因此是内容是不确定的</li><li>arange：通过指定范围和步长来创建数组</li><li>linespace：通过指定范围和元素数量来创建数组</li><li>random：用来生成随机数</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = np.zeros((<span class=\"number\">2</span>,<span class=\"number\">3</span>))     </span><br><span class=\"line\">print(c)</span><br><span class=\"line\"><span class=\"comment\"># [[0. 0. 0.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0. 0. 0.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">d = np.ones((<span class=\"number\">3</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">print(d)</span><br><span class=\"line\"><span class=\"comment\"># [[1. 1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1. 1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1. 1.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">e = np.empty((<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">print(e)</span><br><span class=\"line\"><span class=\"comment\"># [[6.23042070e-307 3.56043053e-307 1.37961641e-306]</span></span><br><span class=\"line\"><span class=\"comment\">#  [6.23039015e-307 1.69115935e-306 2.11392033e-307]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">f = np.arange(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0.3</span>)</span><br><span class=\"line\">print(f)</span><br><span class=\"line\"><span class=\"comment\"># [1.  1.3 1.6 1.9]</span></span><br><span class=\"line\"></span><br><span class=\"line\">g = np.linspace(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">print(g)</span><br><span class=\"line\"><span class=\"comment\"># [1.  1.5 2. ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">h = np.random.random((<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">print(h)</span><br><span class=\"line\"><span class=\"comment\"># [[0.64425744 0.4496131  0.88346286]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0.3458989  0.89334331 0.61867948]]</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;除了生成数组之外，当我们已经持有某个数据之后，我们可能会需要根据已有数组来产生一些新的数据结构，这时候我们可以使用下面这些函数：</p><ul><li>reshape：根据已有数组和指定的shape，生成一个新的数组</li><li>vstack：用来将多个数组在垂直（v代表vertical）方向拼接（数组的维度必须匹配）</li><li>hstack：用来将多个数组在水平（h代表horizontal）方向拼接（数组的维度必须匹配）</li><li>hsplit：用来将数组在水平方向拆分</li><li>vsplit：用来将数组在垂直方向拆分</li></ul><p>&emsp;&emsp;下面我们通过一些例子来进行说明。为了便于测试，我们先创建几个数据。这里我们创建了：</p><ul><li>zero_line：一行包含3个0的数组</li><li>one_column：一列包含3个1的数组</li><li>a：一个2行3列的矩阵</li><li>b：[11, 20)区间的整数数组</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zero_line = np.zeros((<span class=\"number\">1</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">one_column = np.ones((<span class=\"number\">3</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\"># [[0. 0. 0.]]</span></span><br><span class=\"line\"><span class=\"comment\"># [[1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.array(([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]))</span><br><span class=\"line\">b = np.arange(<span class=\"number\">11</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"comment\"># [[1 2 3]</span></span><br><span class=\"line\"><span class=\"comment\">#  [4 5 6]]</span></span><br><span class=\"line\"><span class=\"comment\"># [11 12 13 14 15 16 17 18 19]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#数组b原先是一个一维数组，现在我们通过reshape方法将其调整成为一个3行3列的矩阵</span></span><br><span class=\"line\"><span class=\"comment\">#这里的第二参数设为-1，表示根据实际情况自动决定。由于原先是9个元素的数组，因此调整后刚好是3X3的矩阵</span></span><br><span class=\"line\">b = b.reshape(<span class=\"number\">3</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\"><span class=\"comment\"># [[11 12 13]</span></span><br><span class=\"line\"><span class=\"comment\">#  [14 15 16]</span></span><br><span class=\"line\"><span class=\"comment\">#  [17 18 19]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 竖直方向拼接数组</span></span><br><span class=\"line\">c = np.vstack((a,b,zero_line))</span><br><span class=\"line\">print(c)</span><br><span class=\"line\"><span class=\"comment\"># [[ 1.  2.  3.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 4.  5.  6.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [11. 12. 13.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [14. 15. 16.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [17. 18. 19.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 0.  0.  0.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = a.reshape(<span class=\"number\">3</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"comment\"># [[1 2]</span></span><br><span class=\"line\"><span class=\"comment\">#  [3 4]</span></span><br><span class=\"line\"><span class=\"comment\">#  [5 6]]</span></span><br><span class=\"line\"><span class=\"comment\"># 水平方向拼接数组</span></span><br><span class=\"line\">d = np.hstack((a,b,one_column))</span><br><span class=\"line\">print(d)</span><br><span class=\"line\"><span class=\"comment\"># [[ 1.  2. 11. 12. 13.  1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 3.  4. 14. 15. 16.  1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 5.  6. 17. 18. 19.  1.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定数量进行水平拆分</span></span><br><span class=\"line\">e = np.hsplit(d,<span class=\"number\">3</span>)</span><br><span class=\"line\">print(e)</span><br><span class=\"line\"><span class=\"comment\"># [array([[1., 2.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [3., 4.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [5., 6.]]), array([[11., 12.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [14., 15.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [17., 18.]]), array([[13.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [16.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [19.,  1.]])]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定列数进行水平拆分</span></span><br><span class=\"line\">f = np.hsplit(d,(<span class=\"number\">1</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">print(f)</span><br><span class=\"line\"><span class=\"comment\"># [array([[1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [3.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [5.]]), array([[ 2., 11.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [ 4., 14.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [ 6., 17.]]), array([[12., 13.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [15., 16.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [18., 19.,  1.]])]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 竖直拆分</span></span><br><span class=\"line\">g = np.vsplit(d,<span class=\"number\">3</span>)</span><br><span class=\"line\">print(g)</span><br><span class=\"line\"><span class=\"comment\"># [array([[ 1.,  2., 11., 12., 13.,  1.]]), array([[ 3.,  4., 14., 15., 16.,  1.]]), array([[ 5.,  6., 17., 18., 19.,  1.]])]</span></span><br></pre></td></tr></table></figure><h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_data = np.arange(<span class=\"number\">100</span>,<span class=\"number\">200</span>)</span><br><span class=\"line\">print(base_data)</span><br><span class=\"line\">print(base_data[<span class=\"number\">10</span>])</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117</span></span><br><span class=\"line\"><span class=\"string\"> 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135</span></span><br><span class=\"line\"><span class=\"string\"> 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153</span></span><br><span class=\"line\"><span class=\"string\"> 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171</span></span><br><span class=\"line\"><span class=\"string\"> 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189</span></span><br><span class=\"line\"><span class=\"string\"> 190 191 192 193 194 195 196 197 198 199]</span></span><br><span class=\"line\"><span class=\"string\">110</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">every_five = np.arange(<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">print(every_five)</span><br><span class=\"line\"><span class=\"comment\"># [ 0  5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95]</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(base_data[every_five])</span><br><span class=\"line\"><span class=\"comment\"># [100 105 110 115 120 125 130 135 140 145 150 155 160 165 170 175 180 185 190 195]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.array([(<span class=\"number\">1</span>,<span class=\"number\">2</span>),[<span class=\"number\">10</span>,<span class=\"number\">20</span>]])</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"comment\"># [[ 1  2]</span></span><br><span class=\"line\"><span class=\"comment\">#  [10 20]]</span></span><br><span class=\"line\">print(base_data[a])</span><br><span class=\"line\"><span class=\"comment\"># [[101 102]</span></span><br><span class=\"line\"><span class=\"comment\">#  [110 120]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">base_data2 = base_data.reshape(<span class=\"number\">10</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\">print(base_data2)</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[100 101 102 103 104 105 106 107 108 109]</span></span><br><span class=\"line\"><span class=\"string\"> [110 111 112 113 114 115 116 117 118 119]</span></span><br><span class=\"line\"><span class=\"string\"> [120 121 122 123 124 125 126 127 128 129]</span></span><br><span class=\"line\"><span class=\"string\"> [130 131 132 133 134 135 136 137 138 139]</span></span><br><span class=\"line\"><span class=\"string\"> [140 141 142 143 144 145 146 147 148 149]</span></span><br><span class=\"line\"><span class=\"string\"> [150 151 152 153 154 155 156 157 158 159]</span></span><br><span class=\"line\"><span class=\"string\"> [160 161 162 163 164 165 166 167 168 169]</span></span><br><span class=\"line\"><span class=\"string\"> [170 171 172 173 174 175 176 177 178 179]</span></span><br><span class=\"line\"><span class=\"string\"> [180 181 182 183 184 185 186 187 188 189]</span></span><br><span class=\"line\"><span class=\"string\"> [190 191 192 193 194 195 196 197 198 199]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(base_data2[<span class=\"number\">-1</span>,<span class=\"number\">-1</span>])  <span class=\"comment\"># 199</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切片索引从0开始</span></span><br><span class=\"line\">print(base_data2[<span class=\"number\">2</span>, :])</span><br><span class=\"line\"><span class=\"comment\"># [120 121 122 123 124 125 126 127 128 129]</span></span><br><span class=\"line\">print(base_data2[:,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\"># [103 113 123 133 143 153 163 173 183 193]</span></span><br></pre></td></tr></table></figure><h3 id=\"数字运算\"><a href=\"#数字运算\" class=\"headerlink\" title=\"数字运算\"></a>数字运算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_data = (np.random.random((<span class=\"number\">5</span>,<span class=\"number\">5</span>))<span class=\"number\">-0.5</span>) * <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ -4.99893607  39.77193936 -15.46706727  16.80691258 -38.51945213]</span></span><br><span class=\"line\"><span class=\"string\"> [-49.06612449  49.35329335  -0.4216167   13.12483635 -41.60876645]</span></span><br><span class=\"line\"><span class=\"string\"> [-43.18292355 -25.25568989   0.44448147  -2.89856688 -24.13873839]</span></span><br><span class=\"line\"><span class=\"string\"> [ 32.75485688  11.0737333   18.77766764  22.513295     3.48913839]</span></span><br><span class=\"line\"><span class=\"string\"> [-10.96543248 -40.42721305  30.38299405 -32.77083843  40.39435566]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(np.amin(base_data))</span><br><span class=\"line\"><span class=\"comment\"># -49.06612449306485</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.amax(base_data))</span><br><span class=\"line\"><span class=\"comment\"># 49.35329334672289</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.average(base_data))</span><br><span class=\"line\"><span class=\"comment\"># -2.0333544702011186</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.sin(base_data))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ 0.95922553  0.87660695 -0.23857285 -0.89073028 -0.73137794]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.93180625 -0.7908454  -0.40923611  0.52988566  0.69474259]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.71691953 -0.12263914  0.42998979 -0.24064058  0.83821559]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.9732393  -0.99694714 -0.07182638 -0.4987417  -0.34059131]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.99954577 -0.40180897 -0.858805   -0.97678732  0.43167496]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(np.sum(base_data))</span><br><span class=\"line\"><span class=\"comment\"># -50.83386175502796</span></span><br></pre></td></tr></table></figure><h3 id=\"矩阵运算\"><a href=\"#矩阵运算\" class=\"headerlink\" title=\"矩阵运算\"></a>矩阵运算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_data = np.floor((np.random.random((<span class=\"number\">5</span>,<span class=\"number\">5</span>))<span class=\"number\">-0.5</span>) * <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ 39. -20. -44. -45.   6.]</span></span><br><span class=\"line\"><span class=\"string\"> [ -5.  44.  42. -33.  -6.]</span></span><br><span class=\"line\"><span class=\"string\"> [-14.  -9. -13. -30.  -4.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 31. -50.   5.   7.  45.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 39. -16.  42.  39. -24.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># 矩阵转置</span></span><br><span class=\"line\">print(base_data.T)  或着</span><br><span class=\"line\">print(base_data.transpose())</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ 39.  -5. -14.  31.  39.]</span></span><br><span class=\"line\"><span class=\"string\"> [-20.  44.  -9. -50. -16.]</span></span><br><span class=\"line\"><span class=\"string\"> [-44.  42. -13.   5.  42.]</span></span><br><span class=\"line\"><span class=\"string\"> [-45. -33. -30.   7.  39.]</span></span><br><span class=\"line\"><span class=\"string\"> [  6.  -6.  -4.  45. -24.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">matri_one = np.ones((<span class=\"number\">5</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">minu_one = np.dot(matri_one, <span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(np.dot(base_data,minu_one))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[-32. -32. -32. -32. -32.]</span></span><br><span class=\"line\"><span class=\"string\"> [-84. -84. -84. -84. -84.]</span></span><br><span class=\"line\"><span class=\"string\"> [-72. -72. -72. -72. -72.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 51.  51.  51.  51.  51.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 46.  46.  46.  46.  46.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure><h3 id=\"随机数\"><a href=\"#随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数</h3><p>生成20个随机数，它们每一个都是[0.0, 1.0)之间<br>根据指定的shape生成随机数<br>生成指定范围内（[0, 100)）的指定数量（20）的随机整数<br>对已有的数据（[0, 1, 2, …, 19]）的顺序随机打乱顺序</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"random: &#123;&#125;\\n\"</span>.format(np.random.random(<span class=\"number\">20</span>)))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">random: [0.105123   0.90013672 0.58255936 0.27769054 0.00139627 0.69873449</span></span><br><span class=\"line\"><span class=\"string\"> 0.32550338 0.72112185 0.35799445 0.72302835 0.67139936 0.30039148</span></span><br><span class=\"line\"><span class=\"string\"> 0.83770639 0.07878046 0.77641452 0.6054163  0.72421693 0.77157218</span></span><br><span class=\"line\"><span class=\"string\"> 0.08644228 0.65128463]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"rand: &#123;&#125;\\n\"</span>.format(np.random.rand(<span class=\"number\">3</span>, <span class=\"number\">4</span>)))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">rand: [[0.73446485 0.30451937 0.49029421 0.62473099]</span></span><br><span class=\"line\"><span class=\"string\"> [0.09829422 0.55518899 0.83903237 0.71153898]</span></span><br><span class=\"line\"><span class=\"string\"> [0.11826133 0.53736883 0.47913765 0.0438171 ]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"randint: &#123;&#125;\\n\"</span>.format(np.random.randint(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">20</span>)))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">randint: [39 51 97 22 92 29 19 54 92 30  5 61 26 19 92 59 23 64 85 97]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"permutation: &#123;&#125;\\n\"</span>.format(np.random.permutation(np.arange(<span class=\"number\">20</span>))))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">permutation: [ 5  0 14 10  6 13 11  7 18 19  2 12 17  3  9  8  1 15  4 16]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"numpy学习小结\"><a href=\"#numpy学习小结\" class=\"headerlink\" title=\"numpy学习小结\"></a>numpy学习小结</h2><h3 id=\"安装numpy包\"><a href=\"#安装numpy包\" class=\"headerlink\" title=\"安装numpy包\"></a>安装numpy包</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 <span class=\"keyword\">install</span> numpy</span><br></pre></td></tr></table></figure><h3 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>","more":"<ul><li>ndarray.ndim：数组的维数。在Python世界中，维数称之为rank</li><li>ndarray.shape：数组的维度。这是一系列数字，长度由数组的维度（ndim）决定。例如：长度为n的一维数组的shape是n。一个n行m列的矩阵的shape是n,m</li><li>ndarray.size：数组中所有元素的数量</li><li>ndarray.dtype：数组中元素的类型，例如numpy.int32, numpy.int16或者numpy.float64</li><li>ndarray.itemsize：数组中每个元素的大小，单位为字节</li><li>ndarray.data：存储数组元素的缓冲。通常我们只需要通过下标来访问元素，而不需要访问缓冲</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(<span class=\"string\">\"a's ndim &#123;&#125;\"</span>.format(a.ndim))</span><br><span class=\"line\">print(<span class=\"string\">\"a's shape &#123;&#125;\"</span>.format(a.shape))</span><br><span class=\"line\">print(<span class=\"string\">\"a's size &#123;&#125;\"</span>.format(a.size))</span><br><span class=\"line\">print(<span class=\"string\">\"a's dtype &#123;&#125;\"</span>.format(a.dtype))</span><br><span class=\"line\">print(<span class=\"string\">\"a's itemsize &#123;&#125;\"</span>.format(a.itemsize))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [1 2 3]</span></span><br><span class=\"line\"><span class=\"comment\"># a's ndim 1</span></span><br><span class=\"line\"><span class=\"comment\"># a's shape (3,)</span></span><br><span class=\"line\"><span class=\"comment\"># a's size 3</span></span><br><span class=\"line\"><span class=\"comment\"># a's dtype int32</span></span><br><span class=\"line\"><span class=\"comment\"># a's itemsize 4</span></span><br></pre></td></tr></table></figure><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</span><br><span class=\"line\">print(b)</span><br><span class=\"line\">print(<span class=\"string\">\"b's ndim &#123;&#125;\"</span>.format(b.ndim))</span><br><span class=\"line\">print(<span class=\"string\">\"b's shape &#123;&#125;\"</span>.format(b.shape))</span><br><span class=\"line\">print(<span class=\"string\">\"b's size &#123;&#125;\"</span>.format(b.size))</span><br><span class=\"line\">print(<span class=\"string\">\"b's dtype &#123;&#125;\"</span>.format(b.dtype))</span><br><span class=\"line\">print(<span class=\"string\">\"b's itemsize &#123;&#125;\"</span>.format(b.itemsize))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [[1 2 3]</span></span><br><span class=\"line\"><span class=\"comment\">#  [4 5 6]]</span></span><br><span class=\"line\"><span class=\"comment\"># b's ndim 2</span></span><br><span class=\"line\"><span class=\"comment\"># b's shape (2, 3)</span></span><br><span class=\"line\"><span class=\"comment\"># b's size 6</span></span><br><span class=\"line\"><span class=\"comment\"># b's dtype int32</span></span><br><span class=\"line\"><span class=\"comment\"># b's itemsize 4</span></span><br></pre></td></tr></table></figure><ul><li>zeros：用来创建元素全部是0的数组</li><li>ones：用来创建元素全部是1的数组</li><li>empty：用来创建未初始化的数据，因此是内容是不确定的</li><li>arange：通过指定范围和步长来创建数组</li><li>linespace：通过指定范围和元素数量来创建数组</li><li>random：用来生成随机数</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = np.zeros((<span class=\"number\">2</span>,<span class=\"number\">3</span>))     </span><br><span class=\"line\">print(c)</span><br><span class=\"line\"><span class=\"comment\"># [[0. 0. 0.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0. 0. 0.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">d = np.ones((<span class=\"number\">3</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">print(d)</span><br><span class=\"line\"><span class=\"comment\"># [[1. 1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1. 1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1. 1.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">e = np.empty((<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">print(e)</span><br><span class=\"line\"><span class=\"comment\"># [[6.23042070e-307 3.56043053e-307 1.37961641e-306]</span></span><br><span class=\"line\"><span class=\"comment\">#  [6.23039015e-307 1.69115935e-306 2.11392033e-307]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">f = np.arange(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0.3</span>)</span><br><span class=\"line\">print(f)</span><br><span class=\"line\"><span class=\"comment\"># [1.  1.3 1.6 1.9]</span></span><br><span class=\"line\"></span><br><span class=\"line\">g = np.linspace(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">print(g)</span><br><span class=\"line\"><span class=\"comment\"># [1.  1.5 2. ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">h = np.random.random((<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">print(h)</span><br><span class=\"line\"><span class=\"comment\"># [[0.64425744 0.4496131  0.88346286]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0.3458989  0.89334331 0.61867948]]</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;除了生成数组之外，当我们已经持有某个数据之后，我们可能会需要根据已有数组来产生一些新的数据结构，这时候我们可以使用下面这些函数：</p><ul><li>reshape：根据已有数组和指定的shape，生成一个新的数组</li><li>vstack：用来将多个数组在垂直（v代表vertical）方向拼接（数组的维度必须匹配）</li><li>hstack：用来将多个数组在水平（h代表horizontal）方向拼接（数组的维度必须匹配）</li><li>hsplit：用来将数组在水平方向拆分</li><li>vsplit：用来将数组在垂直方向拆分</li></ul><p>&emsp;&emsp;下面我们通过一些例子来进行说明。为了便于测试，我们先创建几个数据。这里我们创建了：</p><ul><li>zero_line：一行包含3个0的数组</li><li>one_column：一列包含3个1的数组</li><li>a：一个2行3列的矩阵</li><li>b：[11, 20)区间的整数数组</li></ul><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zero_line = np.zeros((<span class=\"number\">1</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">one_column = np.ones((<span class=\"number\">3</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\"># [[0. 0. 0.]]</span></span><br><span class=\"line\"><span class=\"comment\"># [[1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.array(([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]))</span><br><span class=\"line\">b = np.arange(<span class=\"number\">11</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"comment\"># [[1 2 3]</span></span><br><span class=\"line\"><span class=\"comment\">#  [4 5 6]]</span></span><br><span class=\"line\"><span class=\"comment\"># [11 12 13 14 15 16 17 18 19]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#数组b原先是一个一维数组，现在我们通过reshape方法将其调整成为一个3行3列的矩阵</span></span><br><span class=\"line\"><span class=\"comment\">#这里的第二参数设为-1，表示根据实际情况自动决定。由于原先是9个元素的数组，因此调整后刚好是3X3的矩阵</span></span><br><span class=\"line\">b = b.reshape(<span class=\"number\">3</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\"><span class=\"comment\"># [[11 12 13]</span></span><br><span class=\"line\"><span class=\"comment\">#  [14 15 16]</span></span><br><span class=\"line\"><span class=\"comment\">#  [17 18 19]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 竖直方向拼接数组</span></span><br><span class=\"line\">c = np.vstack((a,b,zero_line))</span><br><span class=\"line\">print(c)</span><br><span class=\"line\"><span class=\"comment\"># [[ 1.  2.  3.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 4.  5.  6.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [11. 12. 13.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [14. 15. 16.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [17. 18. 19.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 0.  0.  0.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = a.reshape(<span class=\"number\">3</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"comment\"># [[1 2]</span></span><br><span class=\"line\"><span class=\"comment\">#  [3 4]</span></span><br><span class=\"line\"><span class=\"comment\">#  [5 6]]</span></span><br><span class=\"line\"><span class=\"comment\"># 水平方向拼接数组</span></span><br><span class=\"line\">d = np.hstack((a,b,one_column))</span><br><span class=\"line\">print(d)</span><br><span class=\"line\"><span class=\"comment\"># [[ 1.  2. 11. 12. 13.  1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 3.  4. 14. 15. 16.  1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 5.  6. 17. 18. 19.  1.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定数量进行水平拆分</span></span><br><span class=\"line\">e = np.hsplit(d,<span class=\"number\">3</span>)</span><br><span class=\"line\">print(e)</span><br><span class=\"line\"><span class=\"comment\"># [array([[1., 2.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [3., 4.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [5., 6.]]), array([[11., 12.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [14., 15.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [17., 18.]]), array([[13.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [16.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [19.,  1.]])]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定列数进行水平拆分</span></span><br><span class=\"line\">f = np.hsplit(d,(<span class=\"number\">1</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">print(f)</span><br><span class=\"line\"><span class=\"comment\"># [array([[1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [3.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [5.]]), array([[ 2., 11.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [ 4., 14.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [ 6., 17.]]), array([[12., 13.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [15., 16.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [18., 19.,  1.]])]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 竖直拆分</span></span><br><span class=\"line\">g = np.vsplit(d,<span class=\"number\">3</span>)</span><br><span class=\"line\">print(g)</span><br><span class=\"line\"><span class=\"comment\"># [array([[ 1.,  2., 11., 12., 13.,  1.]]), array([[ 3.,  4., 14., 15., 16.,  1.]]), array([[ 5.,  6., 17., 18., 19.,  1.]])]</span></span><br></pre></td></tr></table></figure><h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_data = np.arange(<span class=\"number\">100</span>,<span class=\"number\">200</span>)</span><br><span class=\"line\">print(base_data)</span><br><span class=\"line\">print(base_data[<span class=\"number\">10</span>])</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117</span></span><br><span class=\"line\"><span class=\"string\"> 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135</span></span><br><span class=\"line\"><span class=\"string\"> 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153</span></span><br><span class=\"line\"><span class=\"string\"> 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171</span></span><br><span class=\"line\"><span class=\"string\"> 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189</span></span><br><span class=\"line\"><span class=\"string\"> 190 191 192 193 194 195 196 197 198 199]</span></span><br><span class=\"line\"><span class=\"string\">110</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">every_five = np.arange(<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">print(every_five)</span><br><span class=\"line\"><span class=\"comment\"># [ 0  5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95]</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(base_data[every_five])</span><br><span class=\"line\"><span class=\"comment\"># [100 105 110 115 120 125 130 135 140 145 150 155 160 165 170 175 180 185 190 195]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.array([(<span class=\"number\">1</span>,<span class=\"number\">2</span>),[<span class=\"number\">10</span>,<span class=\"number\">20</span>]])</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"comment\"># [[ 1  2]</span></span><br><span class=\"line\"><span class=\"comment\">#  [10 20]]</span></span><br><span class=\"line\">print(base_data[a])</span><br><span class=\"line\"><span class=\"comment\"># [[101 102]</span></span><br><span class=\"line\"><span class=\"comment\">#  [110 120]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">base_data2 = base_data.reshape(<span class=\"number\">10</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\">print(base_data2)</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[100 101 102 103 104 105 106 107 108 109]</span></span><br><span class=\"line\"><span class=\"string\"> [110 111 112 113 114 115 116 117 118 119]</span></span><br><span class=\"line\"><span class=\"string\"> [120 121 122 123 124 125 126 127 128 129]</span></span><br><span class=\"line\"><span class=\"string\"> [130 131 132 133 134 135 136 137 138 139]</span></span><br><span class=\"line\"><span class=\"string\"> [140 141 142 143 144 145 146 147 148 149]</span></span><br><span class=\"line\"><span class=\"string\"> [150 151 152 153 154 155 156 157 158 159]</span></span><br><span class=\"line\"><span class=\"string\"> [160 161 162 163 164 165 166 167 168 169]</span></span><br><span class=\"line\"><span class=\"string\"> [170 171 172 173 174 175 176 177 178 179]</span></span><br><span class=\"line\"><span class=\"string\"> [180 181 182 183 184 185 186 187 188 189]</span></span><br><span class=\"line\"><span class=\"string\"> [190 191 192 193 194 195 196 197 198 199]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(base_data2[<span class=\"number\">-1</span>,<span class=\"number\">-1</span>])  <span class=\"comment\"># 199</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切片索引从0开始</span></span><br><span class=\"line\">print(base_data2[<span class=\"number\">2</span>, :])</span><br><span class=\"line\"><span class=\"comment\"># [120 121 122 123 124 125 126 127 128 129]</span></span><br><span class=\"line\">print(base_data2[:,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\"># [103 113 123 133 143 153 163 173 183 193]</span></span><br></pre></td></tr></table></figure><h3 id=\"数字运算\"><a href=\"#数字运算\" class=\"headerlink\" title=\"数字运算\"></a>数字运算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_data = (np.random.random((<span class=\"number\">5</span>,<span class=\"number\">5</span>))<span class=\"number\">-0.5</span>) * <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ -4.99893607  39.77193936 -15.46706727  16.80691258 -38.51945213]</span></span><br><span class=\"line\"><span class=\"string\"> [-49.06612449  49.35329335  -0.4216167   13.12483635 -41.60876645]</span></span><br><span class=\"line\"><span class=\"string\"> [-43.18292355 -25.25568989   0.44448147  -2.89856688 -24.13873839]</span></span><br><span class=\"line\"><span class=\"string\"> [ 32.75485688  11.0737333   18.77766764  22.513295     3.48913839]</span></span><br><span class=\"line\"><span class=\"string\"> [-10.96543248 -40.42721305  30.38299405 -32.77083843  40.39435566]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(np.amin(base_data))</span><br><span class=\"line\"><span class=\"comment\"># -49.06612449306485</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.amax(base_data))</span><br><span class=\"line\"><span class=\"comment\"># 49.35329334672289</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.average(base_data))</span><br><span class=\"line\"><span class=\"comment\"># -2.0333544702011186</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.sin(base_data))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ 0.95922553  0.87660695 -0.23857285 -0.89073028 -0.73137794]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.93180625 -0.7908454  -0.40923611  0.52988566  0.69474259]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.71691953 -0.12263914  0.42998979 -0.24064058  0.83821559]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.9732393  -0.99694714 -0.07182638 -0.4987417  -0.34059131]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.99954577 -0.40180897 -0.858805   -0.97678732  0.43167496]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(np.sum(base_data))</span><br><span class=\"line\"><span class=\"comment\"># -50.83386175502796</span></span><br></pre></td></tr></table></figure><h3 id=\"矩阵运算\"><a href=\"#矩阵运算\" class=\"headerlink\" title=\"矩阵运算\"></a>矩阵运算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_data = np.floor((np.random.random((<span class=\"number\">5</span>,<span class=\"number\">5</span>))<span class=\"number\">-0.5</span>) * <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ 39. -20. -44. -45.   6.]</span></span><br><span class=\"line\"><span class=\"string\"> [ -5.  44.  42. -33.  -6.]</span></span><br><span class=\"line\"><span class=\"string\"> [-14.  -9. -13. -30.  -4.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 31. -50.   5.   7.  45.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 39. -16.  42.  39. -24.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># 矩阵转置</span></span><br><span class=\"line\">print(base_data.T)  或着</span><br><span class=\"line\">print(base_data.transpose())</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ 39.  -5. -14.  31.  39.]</span></span><br><span class=\"line\"><span class=\"string\"> [-20.  44.  -9. -50. -16.]</span></span><br><span class=\"line\"><span class=\"string\"> [-44.  42. -13.   5.  42.]</span></span><br><span class=\"line\"><span class=\"string\"> [-45. -33. -30.   7.  39.]</span></span><br><span class=\"line\"><span class=\"string\"> [  6.  -6.  -4.  45. -24.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">matri_one = np.ones((<span class=\"number\">5</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">minu_one = np.dot(matri_one, <span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(np.dot(base_data,minu_one))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[-32. -32. -32. -32. -32.]</span></span><br><span class=\"line\"><span class=\"string\"> [-84. -84. -84. -84. -84.]</span></span><br><span class=\"line\"><span class=\"string\"> [-72. -72. -72. -72. -72.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 51.  51.  51.  51.  51.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 46.  46.  46.  46.  46.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure><h3 id=\"随机数\"><a href=\"#随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数</h3><p>生成20个随机数，它们每一个都是[0.0, 1.0)之间<br>根据指定的shape生成随机数<br>生成指定范围内（[0, 100)）的指定数量（20）的随机整数<br>对已有的数据（[0, 1, 2, …, 19]）的顺序随机打乱顺序</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"random: &#123;&#125;\\n\"</span>.format(np.random.random(<span class=\"number\">20</span>)))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">random: [0.105123   0.90013672 0.58255936 0.27769054 0.00139627 0.69873449</span></span><br><span class=\"line\"><span class=\"string\"> 0.32550338 0.72112185 0.35799445 0.72302835 0.67139936 0.30039148</span></span><br><span class=\"line\"><span class=\"string\"> 0.83770639 0.07878046 0.77641452 0.6054163  0.72421693 0.77157218</span></span><br><span class=\"line\"><span class=\"string\"> 0.08644228 0.65128463]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"rand: &#123;&#125;\\n\"</span>.format(np.random.rand(<span class=\"number\">3</span>, <span class=\"number\">4</span>)))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">rand: [[0.73446485 0.30451937 0.49029421 0.62473099]</span></span><br><span class=\"line\"><span class=\"string\"> [0.09829422 0.55518899 0.83903237 0.71153898]</span></span><br><span class=\"line\"><span class=\"string\"> [0.11826133 0.53736883 0.47913765 0.0438171 ]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"randint: &#123;&#125;\\n\"</span>.format(np.random.randint(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">20</span>)))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">randint: [39 51 97 22 92 29 19 54 92 30  5 61 26 19 92 59 23 64 85 97]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"permutation: &#123;&#125;\\n\"</span>.format(np.random.permutation(np.arange(<span class=\"number\">20</span>))))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">permutation: [ 5  0 14 10  6 13 11  7 18 19  2 12 17  3  9  8  1 15  4 16]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>"},{"title":"进程线程协程","type":"categories","copyright":true,"keywords":["进程","线程","协程"],"top":80,"abbrlink":1755581907,"date":"2022-03-03T05:52:27.000Z","_content":"\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n## 多任务的概念\n多任务就是操作系统同时运行多个任务。\n- 并发：指的是任务数多余CPU核数，通过操作系统的各种任务调度算法，实现用多个任务“一起”执行（实际上总有一些任务不在执行，因为切换的速度相当快，看上去一起执行而已）\n- 并行：指的是任务数小于等于CPU核数，即任务真的是一起执行的\n\n<!-- more -->\n\n## 多线程\n线程就是程序中代码的一个执行分支，默认只有一个代码执行分支，也就说是主线程，开辟多个线程好比开辟多个代码的执行分支，能够完成多个任务一起值。 线程是cpu调度的基本单位。\n\n- 线程的使用 导入threading模块\n- 多线程执行顺序是无序的\n- 主线程会等待所有子线程执行完成以后程序再退出\n```python\n# 创建线程\n    xxx = threading.Thread(target=yyy)\n# 设置守护主线程，主线程退出后，子线程直接销毁\n    xxx.setDaemon(True)\n# 线程的启动\n    xxx.start()\n```\n1.每个线程默认有一个名字，尽管上面的例子中没有指定线程对象的name，但是python会自动为线程指定一个名字。\n\n2.无法控制线程调度程序，但可以通过别的方式来影响线程调度的方式。\n\n3.在一个进程内的所有线程共享全局变量，很方便在多个线程间共享数据\n\n4.缺点就是，线程是对全局变量随意遂改可能造成多线程之间对全局变量的混乱（即线程非安全）\n\n\n## 互斥锁\n某个线程要更改共享数据时，先将其锁定，此时资源的状态为“锁定”，其他线程不能更改；直到该线程释放资源，将资源的状态变成“非锁定”，其他的线程才能再次锁定该资源。互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。\n\n互斥锁为资源引入了一个状态：锁定/非锁定\n```python\n# 创建锁\nmutex = threading.Lock()\n# 锁定\nmutex.acquire()\n# 释放\nmutex.release()\n```\n如果在调用acquire对这个锁上锁之前 它已经被 其他线程上了锁，那么此时acquire会堵塞，直到这个锁被解锁为止\n\n锁的好处：\n- 确保了某段关键代码只能有一个线程从头到尾完整地执行\n\n锁的坏处：\n- 阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了\n- 由于可以存在多个锁，不同的线程有不同的锁，并试图获取对方持有的锁时，可能会造成死锁\n\n避免死锁\n- 程序设计时要尽量避免（银行家算法）\n- 添加超时时间等\n\n## 多进程\n程序：是一个静止的\n\n进程：一个程序运行起来后，代码+用到的资源称之为进程，她是操作系统分配资源的基本单位。\n\n进程的状态：\n- 就绪态 ： 运行的条件都已经慢去，正在等待CPU执行\n- 执行态 ： CPU正在执行其功能\n- 等待态 ： 等待某些条件满足，例如一个程序sleep了，此时就是等待态了\n\n通俗来说一个运行起来的软件或者程序叫做进程，每启动一个进程都会向操作系统索要运行资源，所以进程是操作系统资源分配的基本单位，进程只提供资源，真正干活的是进程中的线程。\n\n你可以把进程想成公司（提供资源），员工可以想成线程（真正干活的人）。线程是依附在进程里面的，没有进程就没有线程，默认请求下一个进程只有一个线程（主线程）。\n\n进程之间不共享全局变量\n\n#### 进程和线程对比\n- 进程：一个运行起来的程序或者软件就叫做进程，没启动一个进程都会想操作系统索要运行资源，进程只提供资源，真正干活的是线程，进程是操作系统资源分配的基本单位，进程可以理解成公司（公司提供资源）\n- 线程：线程是运行程序中（进程）执行分支，默认情况下进程中只有一个线程（主线程），多个分支可以完成多个任务一起执行。 线程是cup调度基本单位\n- 进程之间不共享全局变量， 线程之间共享全局变量\n\n- 多进程开发比多线程开发的程序稳定性和健壮性要强，因为某个进程挂掉不会影响其它进程的运行，如果是多线程模式开发，进程挂掉，进程中所有的线程都会消耗\n\n#### 消息队列queue\n初始化Queue()对象时（例如：q=Queue()），若括号中没有指定最大可接收的消息数量，或数量为负值，那么就代表可接受的消息数量没有上限（直到内存的尽头）；\n\n    Queue.qsize()：返回当前队列包含的消息数量；\n\n    Queue.empty()：如果队列为空，返回True，反之False ；\n\n    Queue.full()：如果队列满了，返回True,反之False；\n\nQueue.get([block[, timeout]])：获取队列中的一条消息，然后将其从列队中移除，block默认值为True；\n- 如果block使用默认值，且没有设置timeout（单位秒），消息列队如果为空，此时程序将被阻塞（停在读取状态），直到从消息列队读到消息为止，如果设置了timeout，则会等待timeout秒，若还没读取到任何消息，则抛出\"Queue.Empty\"异常；\n\n- 如果block值为False，消息列队如果为空，则会立刻抛出\"Queue.Empty\"异常；\n- Queue.get_nowait()：相当Queue.get(False)；\n\nQueue.put(item,[block[, timeout]])：将item消息写入队列，block默认值为True；\n- 如果block使用默认值，且没有设置timeout（单位秒），消息列队如果已经没有空间可写入，此时程序将被阻塞（停在写入状态），直到从消息列队腾出空间为止，如果设置了timeout，则会等待timeout秒，若还没空间，则抛出\"Queue.Full\"异常；\n\n- 如果block值为False，消息列队如果没有空间可写入，则会立刻抛出\"Queue.Full\"异常；\n- Queue.put_nowait(item)：相当Queue.put(item, False)；\n    \n导入消息队列\n```python\nfrom multiprocessing import Queue\n# 初始化一个Queue对象\nqueue = Queue() 里面参数为空代表没有上限\n```\n\n进程池pool\n```python\n# 导入进程池\nfrom multiprocessing import Pool\n# 创建进程池\npo = Pool(5)  参数5表示最大进程数为5\n```\n            \nmultiprocessing.Pool常用函数解析：\n- apply_async(func[, args[, kwds]]) ：使用非阻塞方式调用func（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表；\n- close()：关闭Pool，使其不再接受新的任务；\n- terminate()：不管任务是否完成，立即终止；\n- join()：主进程阻塞，等待子进程的退出， 必须在close或terminate之后使用；\n- 如果要使用Pool创建进程，就需要使用multiprocessing.Manager()中的Queue()，而不是multiprocessing.Queue()\n\n## 协程\n\n协程: \n\n又称为微线程，也是用户基线程，可以在不开劈线程的基础上完成多个任务交替值，程序员可以控制执行顺序\n\n如何理解: \n\n如果在函数里面只看一个yield关键字，那么可以理解程是协程\n\n学习协程的目的:\n \n在单线程的基础上完成多个任务，可以使用这个协程，多个任务一定是交替执行的\n\ngevent的使用：\n```python\nimport gevent\n# 打补丁\nfrom gevent import monkey\n# 打补丁， 让gevent能够失败系统的耗时操作，完成协程之间自动进行切换\n# 提示： 打补丁的代码一定要先执行\n# 提示： gevent封装的greenlet框架\nmonkey.patch_all()\n# 创建协程指派对应的任务\ng1 = gevent.spawn(work1)\ng2 = gevent.spawn(work2)\n# 主线程不会等待所有的协程把任务执行完成以后程序在退出。\n# 等待协程把任务执行完成以后程序在退出\ng1.join()\ng2.join()\n```\n\n## 迭代器\n迭代器是访问集合元素的一种方式，迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，知道所有元素被访问完结束。迭代器只能往前不能后退。\n\n可迭代对象有：\n\n列表、字典、元组、字符串、集合、range、\n        \n判断是否是可迭代对象：\n```python\nresult = isinstance（object, Iterable）\n```\n自定义可迭代对象\n```python\nfrom collections import Iterable , Iterator \n```   \n在类里面提供__iter__和__next__方法创建的对象就是迭代器，迭代器记录当前遍历位置及获取下一个位置的值。\n\n\n## 生成器\n生成器就是一种特殊的迭代器\n\n生成器的创建方式：\n- 和列表生成式类似，只不过把列表的[ ]改成了( )\n```python\ng1 = (x*3 for x in range(3))\n```\n- 函数里面如果存在yield关键字，那么就表示是一个生成器\n启动生成器的时候如果有代码执行遇到yield那么代码会暂停，下次在启动生成器的时候会在暂停的位置上继续往下执行\n\n 生成器中使用return关键字语法上没有问题\n 在生成器执行完return操作，就会停止迭代，跑着停止迭代异常\n\n- return关键字： 只能返回一次结果\n- yield关键字：代码执行到yield会暂停，再次启动生成器会继续往下执行，每启动一次生成器都会返回一个值，yield会返回多个值\n\n使用send方法可以给生成器传入参数\n\n第一个启动生成器一般都是用next函数，如果使用send方法启动生成器需要传入参数会None，再次启动生成器可以传入非空的数据可以不是None\n\n## 全局解释器锁(GIL)\n作用：保证用一时刻只有一个线程可以执行代码\n\nPython中的多线程是假的\n\n原因：\n\nPython的解释器由c写的cpython，而cpython中就存在GIL\npython解释器：cpython    jpython    pypython\n\n解决的办法：\n- 更换解释器，比如使用jpython解释器\n- 使用多进程来完成多任务的操作\n\n在程序当中，如果需要大量消耗内存的，比如进行科学计算时，使用多进程要比多线程快；在进行IO操作（中间有时间阻塞的操作）时，多线程要比多进程快。\n\n","source":"_posts/进程线程协程.md","raw":"---\ntitle: 进程线程协程\ntype: categories\ncopyright: true\ntags:\n  - python\ncategories:\n  - python\n  - 基础\nkeywords:\n  - 进程\n  - 线程\n  - 协程\ntop: 80\nabbrlink: 1755581907\ndate: 2022-03-03 13:52:27\n---\n\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n## 多任务的概念\n多任务就是操作系统同时运行多个任务。\n- 并发：指的是任务数多余CPU核数，通过操作系统的各种任务调度算法，实现用多个任务“一起”执行（实际上总有一些任务不在执行，因为切换的速度相当快，看上去一起执行而已）\n- 并行：指的是任务数小于等于CPU核数，即任务真的是一起执行的\n\n<!-- more -->\n\n## 多线程\n线程就是程序中代码的一个执行分支，默认只有一个代码执行分支，也就说是主线程，开辟多个线程好比开辟多个代码的执行分支，能够完成多个任务一起值。 线程是cpu调度的基本单位。\n\n- 线程的使用 导入threading模块\n- 多线程执行顺序是无序的\n- 主线程会等待所有子线程执行完成以后程序再退出\n```python\n# 创建线程\n    xxx = threading.Thread(target=yyy)\n# 设置守护主线程，主线程退出后，子线程直接销毁\n    xxx.setDaemon(True)\n# 线程的启动\n    xxx.start()\n```\n1.每个线程默认有一个名字，尽管上面的例子中没有指定线程对象的name，但是python会自动为线程指定一个名字。\n\n2.无法控制线程调度程序，但可以通过别的方式来影响线程调度的方式。\n\n3.在一个进程内的所有线程共享全局变量，很方便在多个线程间共享数据\n\n4.缺点就是，线程是对全局变量随意遂改可能造成多线程之间对全局变量的混乱（即线程非安全）\n\n\n## 互斥锁\n某个线程要更改共享数据时，先将其锁定，此时资源的状态为“锁定”，其他线程不能更改；直到该线程释放资源，将资源的状态变成“非锁定”，其他的线程才能再次锁定该资源。互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。\n\n互斥锁为资源引入了一个状态：锁定/非锁定\n```python\n# 创建锁\nmutex = threading.Lock()\n# 锁定\nmutex.acquire()\n# 释放\nmutex.release()\n```\n如果在调用acquire对这个锁上锁之前 它已经被 其他线程上了锁，那么此时acquire会堵塞，直到这个锁被解锁为止\n\n锁的好处：\n- 确保了某段关键代码只能有一个线程从头到尾完整地执行\n\n锁的坏处：\n- 阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了\n- 由于可以存在多个锁，不同的线程有不同的锁，并试图获取对方持有的锁时，可能会造成死锁\n\n避免死锁\n- 程序设计时要尽量避免（银行家算法）\n- 添加超时时间等\n\n## 多进程\n程序：是一个静止的\n\n进程：一个程序运行起来后，代码+用到的资源称之为进程，她是操作系统分配资源的基本单位。\n\n进程的状态：\n- 就绪态 ： 运行的条件都已经慢去，正在等待CPU执行\n- 执行态 ： CPU正在执行其功能\n- 等待态 ： 等待某些条件满足，例如一个程序sleep了，此时就是等待态了\n\n通俗来说一个运行起来的软件或者程序叫做进程，每启动一个进程都会向操作系统索要运行资源，所以进程是操作系统资源分配的基本单位，进程只提供资源，真正干活的是进程中的线程。\n\n你可以把进程想成公司（提供资源），员工可以想成线程（真正干活的人）。线程是依附在进程里面的，没有进程就没有线程，默认请求下一个进程只有一个线程（主线程）。\n\n进程之间不共享全局变量\n\n#### 进程和线程对比\n- 进程：一个运行起来的程序或者软件就叫做进程，没启动一个进程都会想操作系统索要运行资源，进程只提供资源，真正干活的是线程，进程是操作系统资源分配的基本单位，进程可以理解成公司（公司提供资源）\n- 线程：线程是运行程序中（进程）执行分支，默认情况下进程中只有一个线程（主线程），多个分支可以完成多个任务一起执行。 线程是cup调度基本单位\n- 进程之间不共享全局变量， 线程之间共享全局变量\n\n- 多进程开发比多线程开发的程序稳定性和健壮性要强，因为某个进程挂掉不会影响其它进程的运行，如果是多线程模式开发，进程挂掉，进程中所有的线程都会消耗\n\n#### 消息队列queue\n初始化Queue()对象时（例如：q=Queue()），若括号中没有指定最大可接收的消息数量，或数量为负值，那么就代表可接受的消息数量没有上限（直到内存的尽头）；\n\n    Queue.qsize()：返回当前队列包含的消息数量；\n\n    Queue.empty()：如果队列为空，返回True，反之False ；\n\n    Queue.full()：如果队列满了，返回True,反之False；\n\nQueue.get([block[, timeout]])：获取队列中的一条消息，然后将其从列队中移除，block默认值为True；\n- 如果block使用默认值，且没有设置timeout（单位秒），消息列队如果为空，此时程序将被阻塞（停在读取状态），直到从消息列队读到消息为止，如果设置了timeout，则会等待timeout秒，若还没读取到任何消息，则抛出\"Queue.Empty\"异常；\n\n- 如果block值为False，消息列队如果为空，则会立刻抛出\"Queue.Empty\"异常；\n- Queue.get_nowait()：相当Queue.get(False)；\n\nQueue.put(item,[block[, timeout]])：将item消息写入队列，block默认值为True；\n- 如果block使用默认值，且没有设置timeout（单位秒），消息列队如果已经没有空间可写入，此时程序将被阻塞（停在写入状态），直到从消息列队腾出空间为止，如果设置了timeout，则会等待timeout秒，若还没空间，则抛出\"Queue.Full\"异常；\n\n- 如果block值为False，消息列队如果没有空间可写入，则会立刻抛出\"Queue.Full\"异常；\n- Queue.put_nowait(item)：相当Queue.put(item, False)；\n    \n导入消息队列\n```python\nfrom multiprocessing import Queue\n# 初始化一个Queue对象\nqueue = Queue() 里面参数为空代表没有上限\n```\n\n进程池pool\n```python\n# 导入进程池\nfrom multiprocessing import Pool\n# 创建进程池\npo = Pool(5)  参数5表示最大进程数为5\n```\n            \nmultiprocessing.Pool常用函数解析：\n- apply_async(func[, args[, kwds]]) ：使用非阻塞方式调用func（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表；\n- close()：关闭Pool，使其不再接受新的任务；\n- terminate()：不管任务是否完成，立即终止；\n- join()：主进程阻塞，等待子进程的退出， 必须在close或terminate之后使用；\n- 如果要使用Pool创建进程，就需要使用multiprocessing.Manager()中的Queue()，而不是multiprocessing.Queue()\n\n## 协程\n\n协程: \n\n又称为微线程，也是用户基线程，可以在不开劈线程的基础上完成多个任务交替值，程序员可以控制执行顺序\n\n如何理解: \n\n如果在函数里面只看一个yield关键字，那么可以理解程是协程\n\n学习协程的目的:\n \n在单线程的基础上完成多个任务，可以使用这个协程，多个任务一定是交替执行的\n\ngevent的使用：\n```python\nimport gevent\n# 打补丁\nfrom gevent import monkey\n# 打补丁， 让gevent能够失败系统的耗时操作，完成协程之间自动进行切换\n# 提示： 打补丁的代码一定要先执行\n# 提示： gevent封装的greenlet框架\nmonkey.patch_all()\n# 创建协程指派对应的任务\ng1 = gevent.spawn(work1)\ng2 = gevent.spawn(work2)\n# 主线程不会等待所有的协程把任务执行完成以后程序在退出。\n# 等待协程把任务执行完成以后程序在退出\ng1.join()\ng2.join()\n```\n\n## 迭代器\n迭代器是访问集合元素的一种方式，迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，知道所有元素被访问完结束。迭代器只能往前不能后退。\n\n可迭代对象有：\n\n列表、字典、元组、字符串、集合、range、\n        \n判断是否是可迭代对象：\n```python\nresult = isinstance（object, Iterable）\n```\n自定义可迭代对象\n```python\nfrom collections import Iterable , Iterator \n```   \n在类里面提供__iter__和__next__方法创建的对象就是迭代器，迭代器记录当前遍历位置及获取下一个位置的值。\n\n\n## 生成器\n生成器就是一种特殊的迭代器\n\n生成器的创建方式：\n- 和列表生成式类似，只不过把列表的[ ]改成了( )\n```python\ng1 = (x*3 for x in range(3))\n```\n- 函数里面如果存在yield关键字，那么就表示是一个生成器\n启动生成器的时候如果有代码执行遇到yield那么代码会暂停，下次在启动生成器的时候会在暂停的位置上继续往下执行\n\n 生成器中使用return关键字语法上没有问题\n 在生成器执行完return操作，就会停止迭代，跑着停止迭代异常\n\n- return关键字： 只能返回一次结果\n- yield关键字：代码执行到yield会暂停，再次启动生成器会继续往下执行，每启动一次生成器都会返回一个值，yield会返回多个值\n\n使用send方法可以给生成器传入参数\n\n第一个启动生成器一般都是用next函数，如果使用send方法启动生成器需要传入参数会None，再次启动生成器可以传入非空的数据可以不是None\n\n## 全局解释器锁(GIL)\n作用：保证用一时刻只有一个线程可以执行代码\n\nPython中的多线程是假的\n\n原因：\n\nPython的解释器由c写的cpython，而cpython中就存在GIL\npython解释器：cpython    jpython    pypython\n\n解决的办法：\n- 更换解释器，比如使用jpython解释器\n- 使用多进程来完成多任务的操作\n\n在程序当中，如果需要大量消耗内存的，比如进行科学计算时，使用多进程要比多线程快；在进行IO操作（中间有时间阻塞的操作）时，多线程要比多进程快。\n\n","slug":"进程线程协程","published":1,"updated":"2022-03-13T11:49:16.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde09m007z9jx36c77c3bw","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><h2 id=\"多任务的概念\"><a href=\"#多任务的概念\" class=\"headerlink\" title=\"多任务的概念\"></a>多任务的概念</h2><p>多任务就是操作系统同时运行多个任务。</p><ul><li>并发：指的是任务数多余CPU核数，通过操作系统的各种任务调度算法，实现用多个任务“一起”执行（实际上总有一些任务不在执行，因为切换的速度相当快，看上去一起执行而已）</li><li>并行：指的是任务数小于等于CPU核数，即任务真的是一起执行的</li></ul><a id=\"more\"></a><h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><p>线程就是程序中代码的一个执行分支，默认只有一个代码执行分支，也就说是主线程，开辟多个线程好比开辟多个代码的执行分支，能够完成多个任务一起值。 线程是cpu调度的基本单位。</p><ul><li>线程的使用 导入threading模块</li><li>多线程执行顺序是无序的</li><li>主线程会等待所有子线程执行完成以后程序再退出<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建线程</span></span><br><span class=\"line\">    xxx = threading.Thread(target=yyy)</span><br><span class=\"line\"><span class=\"comment\"># 设置守护主线程，主线程退出后，子线程直接销毁</span></span><br><span class=\"line\">    xxx.setDaemon(<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># 线程的启动</span></span><br><span class=\"line\">    xxx.start()</span><br></pre></td></tr></table></figure></li></ul><p>1.每个线程默认有一个名字，尽管上面的例子中没有指定线程对象的name，但是python会自动为线程指定一个名字。</p><p>2.无法控制线程调度程序，但可以通过别的方式来影响线程调度的方式。</p><p>3.在一个进程内的所有线程共享全局变量，很方便在多个线程间共享数据</p><p>4.缺点就是，线程是对全局变量随意遂改可能造成多线程之间对全局变量的混乱（即线程非安全）</p><h2 id=\"互斥锁\"><a href=\"#互斥锁\" class=\"headerlink\" title=\"互斥锁\"></a>互斥锁</h2><p>某个线程要更改共享数据时，先将其锁定，此时资源的状态为“锁定”，其他线程不能更改；直到该线程释放资源，将资源的状态变成“非锁定”，其他的线程才能再次锁定该资源。互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。</p><p>互斥锁为资源引入了一个状态：锁定/非锁定</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建锁</span></span><br><span class=\"line\">mutex = threading.Lock()</span><br><span class=\"line\"><span class=\"comment\"># 锁定</span></span><br><span class=\"line\">mutex.acquire()</span><br><span class=\"line\"><span class=\"comment\"># 释放</span></span><br><span class=\"line\">mutex.release()</span><br></pre></td></tr></table></figure><p>如果在调用acquire对这个锁上锁之前 它已经被 其他线程上了锁，那么此时acquire会堵塞，直到这个锁被解锁为止</p><p>锁的好处：</p><ul><li>确保了某段关键代码只能有一个线程从头到尾完整地执行</li></ul><p>锁的坏处：</p><ul><li>阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了</li><li>由于可以存在多个锁，不同的线程有不同的锁，并试图获取对方持有的锁时，可能会造成死锁</li></ul><p>避免死锁</p><ul><li>程序设计时要尽量避免（银行家算法）</li><li>添加超时时间等</li></ul><h2 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h2><p>程序：是一个静止的</p><p>进程：一个程序运行起来后，代码+用到的资源称之为进程，她是操作系统分配资源的基本单位。</p><p>进程的状态：</p><ul><li>就绪态 ： 运行的条件都已经慢去，正在等待CPU执行</li><li>执行态 ： CPU正在执行其功能</li><li>等待态 ： 等待某些条件满足，例如一个程序sleep了，此时就是等待态了</li></ul><p>通俗来说一个运行起来的软件或者程序叫做进程，每启动一个进程都会向操作系统索要运行资源，所以进程是操作系统资源分配的基本单位，进程只提供资源，真正干活的是进程中的线程。</p><p>你可以把进程想成公司（提供资源），员工可以想成线程（真正干活的人）。线程是依附在进程里面的，没有进程就没有线程，默认请求下一个进程只有一个线程（主线程）。</p><p>进程之间不共享全局变量</p><h4 id=\"进程和线程对比\"><a href=\"#进程和线程对比\" class=\"headerlink\" title=\"进程和线程对比\"></a>进程和线程对比</h4><ul><li><p>进程：一个运行起来的程序或者软件就叫做进程，没启动一个进程都会想操作系统索要运行资源，进程只提供资源，真正干活的是线程，进程是操作系统资源分配的基本单位，进程可以理解成公司（公司提供资源）</p></li><li><p>线程：线程是运行程序中（进程）执行分支，默认情况下进程中只有一个线程（主线程），多个分支可以完成多个任务一起执行。 线程是cup调度基本单位</p></li><li><p>进程之间不共享全局变量， 线程之间共享全局变量</p></li><li><p>多进程开发比多线程开发的程序稳定性和健壮性要强，因为某个进程挂掉不会影响其它进程的运行，如果是多线程模式开发，进程挂掉，进程中所有的线程都会消耗</p></li></ul><h4 id=\"消息队列queue\"><a href=\"#消息队列queue\" class=\"headerlink\" title=\"消息队列queue\"></a>消息队列queue</h4><p>初始化Queue()对象时（例如：q=Queue()），若括号中没有指定最大可接收的消息数量，或数量为负值，那么就代表可接受的消息数量没有上限（直到内存的尽头）；</p><pre><code>Queue.qsize()：返回当前队列包含的消息数量；\n\nQueue.empty()：如果队列为空，返回True，反之False ；\n\nQueue.full()：如果队列满了，返回True,反之False；</code></pre><p>Queue.get([block[, timeout]])：获取队列中的一条消息，然后将其从列队中移除，block默认值为True；</p><ul><li><p>如果block使用默认值，且没有设置timeout（单位秒），消息列队如果为空，此时程序将被阻塞（停在读取状态），直到从消息列队读到消息为止，如果设置了timeout，则会等待timeout秒，若还没读取到任何消息，则抛出”Queue.Empty”异常；</p></li><li><p>如果block值为False，消息列队如果为空，则会立刻抛出”Queue.Empty”异常；</p></li><li><p>Queue.get_nowait()：相当Queue.get(False)；</p></li></ul><p>Queue.put(item,[block[, timeout]])：将item消息写入队列，block默认值为True；</p><ul><li><p>如果block使用默认值，且没有设置timeout（单位秒），消息列队如果已经没有空间可写入，此时程序将被阻塞（停在写入状态），直到从消息列队腾出空间为止，如果设置了timeout，则会等待timeout秒，若还没空间，则抛出”Queue.Full”异常；</p></li><li><p>如果block值为False，消息列队如果没有空间可写入，则会立刻抛出”Queue.Full”异常；</p></li><li><p>Queue.put_nowait(item)：相当Queue.put(item, False)；</p></li></ul><p>导入消息队列</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"><span class=\"comment\"># 初始化一个Queue对象</span></span><br><span class=\"line\">queue = Queue() 里面参数为空代表没有上限</span><br></pre></td></tr></table></figure><p>进程池pool</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入进程池</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"><span class=\"comment\"># 创建进程池</span></span><br><span class=\"line\">po = Pool(<span class=\"number\">5</span>)  参数<span class=\"number\">5</span>表示最大进程数为<span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p>multiprocessing.Pool常用函数解析：</p><ul><li>apply_async(func[, args[, kwds]]) ：使用非阻塞方式调用func（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表；</li><li>close()：关闭Pool，使其不再接受新的任务；</li><li>terminate()：不管任务是否完成，立即终止；</li><li>join()：主进程阻塞，等待子进程的退出， 必须在close或terminate之后使用；</li><li>如果要使用Pool创建进程，就需要使用multiprocessing.Manager()中的Queue()，而不是multiprocessing.Queue()</li></ul><h2 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h2><p>协程:</p><p>又称为微线程，也是用户基线程，可以在不开劈线程的基础上完成多个任务交替值，程序员可以控制执行顺序</p><p>如何理解:</p><p>如果在函数里面只看一个yield关键字，那么可以理解程是协程</p><p>学习协程的目的:</p><p>在单线程的基础上完成多个任务，可以使用这个协程，多个任务一定是交替执行的</p><p>gevent的使用：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gevent</span><br><span class=\"line\"><span class=\"comment\"># 打补丁</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> gevent <span class=\"keyword\">import</span> monkey</span><br><span class=\"line\"><span class=\"comment\"># 打补丁， 让gevent能够失败系统的耗时操作，完成协程之间自动进行切换</span></span><br><span class=\"line\"><span class=\"comment\"># 提示： 打补丁的代码一定要先执行</span></span><br><span class=\"line\"><span class=\"comment\"># 提示： gevent封装的greenlet框架</span></span><br><span class=\"line\">monkey.patch_all()</span><br><span class=\"line\"><span class=\"comment\"># 创建协程指派对应的任务</span></span><br><span class=\"line\">g1 = gevent.spawn(work1)</span><br><span class=\"line\">g2 = gevent.spawn(work2)</span><br><span class=\"line\"><span class=\"comment\"># 主线程不会等待所有的协程把任务执行完成以后程序在退出。</span></span><br><span class=\"line\"><span class=\"comment\"># 等待协程把任务执行完成以后程序在退出</span></span><br><span class=\"line\">g1.join()</span><br><span class=\"line\">g2.join()</span><br></pre></td></tr></table></figure><h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><p>迭代器是访问集合元素的一种方式，迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，知道所有元素被访问完结束。迭代器只能往前不能后退。</p><p>可迭代对象有：</p><p>列表、字典、元组、字符串、集合、range、</p><p>判断是否是可迭代对象：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = isinstance（object, Iterable）</span><br></pre></td></tr></table></figure><p>自定义可迭代对象</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Iterable , Iterator </span><br><span class=\"line\">```   </span><br><span class=\"line\">在类里面提供__iter__和__next__方法创建的对象就是迭代器，迭代器记录当前遍历位置及获取下一个位置的值。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 生成器</span></span><br><span class=\"line\">生成器就是一种特殊的迭代器</span><br><span class=\"line\"></span><br><span class=\"line\">生成器的创建方式：</span><br><span class=\"line\">- 和列表生成式类似，只不过把列表的[ ]改成了( )</span><br><span class=\"line\">```python</span><br><span class=\"line\">g1 = (x*<span class=\"number\">3</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure><ul><li><p>函数里面如果存在yield关键字，那么就表示是一个生成器<br>启动生成器的时候如果有代码执行遇到yield那么代码会暂停，下次在启动生成器的时候会在暂停的位置上继续往下执行</p><p>生成器中使用return关键字语法上没有问题<br>在生成器执行完return操作，就会停止迭代，跑着停止迭代异常</p></li><li><p>return关键字： 只能返回一次结果</p></li><li><p>yield关键字：代码执行到yield会暂停，再次启动生成器会继续往下执行，每启动一次生成器都会返回一个值，yield会返回多个值</p></li></ul><p>使用send方法可以给生成器传入参数</p><p>第一个启动生成器一般都是用next函数，如果使用send方法启动生成器需要传入参数会None，再次启动生成器可以传入非空的数据可以不是None</p><h2 id=\"全局解释器锁-GIL\"><a href=\"#全局解释器锁-GIL\" class=\"headerlink\" title=\"全局解释器锁(GIL)\"></a>全局解释器锁(GIL)</h2><p>作用：保证用一时刻只有一个线程可以执行代码</p><p>Python中的多线程是假的</p><p>原因：</p><p>Python的解释器由c写的cpython，而cpython中就存在GIL<br>python解释器：cpython jpython pypython</p><p>解决的办法：</p><ul><li>更换解释器，比如使用jpython解释器</li><li>使用多进程来完成多任务的操作</li></ul><p>在程序当中，如果需要大量消耗内存的，比如进行科学计算时，使用多进程要比多线程快；在进行IO操作（中间有时间阻塞的操作）时，多线程要比多进程快。</p>","site":{"data":{}},"excerpt":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script><h2 id=\"多任务的概念\"><a href=\"#多任务的概念\" class=\"headerlink\" title=\"多任务的概念\"></a>多任务的概念</h2><p>多任务就是操作系统同时运行多个任务。</p><ul><li>并发：指的是任务数多余CPU核数，通过操作系统的各种任务调度算法，实现用多个任务“一起”执行（实际上总有一些任务不在执行，因为切换的速度相当快，看上去一起执行而已）</li><li>并行：指的是任务数小于等于CPU核数，即任务真的是一起执行的</li></ul>","more":"<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><p>线程就是程序中代码的一个执行分支，默认只有一个代码执行分支，也就说是主线程，开辟多个线程好比开辟多个代码的执行分支，能够完成多个任务一起值。 线程是cpu调度的基本单位。</p><ul><li>线程的使用 导入threading模块</li><li>多线程执行顺序是无序的</li><li>主线程会等待所有子线程执行完成以后程序再退出<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建线程</span></span><br><span class=\"line\">    xxx = threading.Thread(target=yyy)</span><br><span class=\"line\"><span class=\"comment\"># 设置守护主线程，主线程退出后，子线程直接销毁</span></span><br><span class=\"line\">    xxx.setDaemon(<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># 线程的启动</span></span><br><span class=\"line\">    xxx.start()</span><br></pre></td></tr></table></figure></li></ul><p>1.每个线程默认有一个名字，尽管上面的例子中没有指定线程对象的name，但是python会自动为线程指定一个名字。</p><p>2.无法控制线程调度程序，但可以通过别的方式来影响线程调度的方式。</p><p>3.在一个进程内的所有线程共享全局变量，很方便在多个线程间共享数据</p><p>4.缺点就是，线程是对全局变量随意遂改可能造成多线程之间对全局变量的混乱（即线程非安全）</p><h2 id=\"互斥锁\"><a href=\"#互斥锁\" class=\"headerlink\" title=\"互斥锁\"></a>互斥锁</h2><p>某个线程要更改共享数据时，先将其锁定，此时资源的状态为“锁定”，其他线程不能更改；直到该线程释放资源，将资源的状态变成“非锁定”，其他的线程才能再次锁定该资源。互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。</p><p>互斥锁为资源引入了一个状态：锁定/非锁定</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建锁</span></span><br><span class=\"line\">mutex = threading.Lock()</span><br><span class=\"line\"><span class=\"comment\"># 锁定</span></span><br><span class=\"line\">mutex.acquire()</span><br><span class=\"line\"><span class=\"comment\"># 释放</span></span><br><span class=\"line\">mutex.release()</span><br></pre></td></tr></table></figure><p>如果在调用acquire对这个锁上锁之前 它已经被 其他线程上了锁，那么此时acquire会堵塞，直到这个锁被解锁为止</p><p>锁的好处：</p><ul><li>确保了某段关键代码只能有一个线程从头到尾完整地执行</li></ul><p>锁的坏处：</p><ul><li>阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了</li><li>由于可以存在多个锁，不同的线程有不同的锁，并试图获取对方持有的锁时，可能会造成死锁</li></ul><p>避免死锁</p><ul><li>程序设计时要尽量避免（银行家算法）</li><li>添加超时时间等</li></ul><h2 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h2><p>程序：是一个静止的</p><p>进程：一个程序运行起来后，代码+用到的资源称之为进程，她是操作系统分配资源的基本单位。</p><p>进程的状态：</p><ul><li>就绪态 ： 运行的条件都已经慢去，正在等待CPU执行</li><li>执行态 ： CPU正在执行其功能</li><li>等待态 ： 等待某些条件满足，例如一个程序sleep了，此时就是等待态了</li></ul><p>通俗来说一个运行起来的软件或者程序叫做进程，每启动一个进程都会向操作系统索要运行资源，所以进程是操作系统资源分配的基本单位，进程只提供资源，真正干活的是进程中的线程。</p><p>你可以把进程想成公司（提供资源），员工可以想成线程（真正干活的人）。线程是依附在进程里面的，没有进程就没有线程，默认请求下一个进程只有一个线程（主线程）。</p><p>进程之间不共享全局变量</p><h4 id=\"进程和线程对比\"><a href=\"#进程和线程对比\" class=\"headerlink\" title=\"进程和线程对比\"></a>进程和线程对比</h4><ul><li><p>进程：一个运行起来的程序或者软件就叫做进程，没启动一个进程都会想操作系统索要运行资源，进程只提供资源，真正干活的是线程，进程是操作系统资源分配的基本单位，进程可以理解成公司（公司提供资源）</p></li><li><p>线程：线程是运行程序中（进程）执行分支，默认情况下进程中只有一个线程（主线程），多个分支可以完成多个任务一起执行。 线程是cup调度基本单位</p></li><li><p>进程之间不共享全局变量， 线程之间共享全局变量</p></li><li><p>多进程开发比多线程开发的程序稳定性和健壮性要强，因为某个进程挂掉不会影响其它进程的运行，如果是多线程模式开发，进程挂掉，进程中所有的线程都会消耗</p></li></ul><h4 id=\"消息队列queue\"><a href=\"#消息队列queue\" class=\"headerlink\" title=\"消息队列queue\"></a>消息队列queue</h4><p>初始化Queue()对象时（例如：q=Queue()），若括号中没有指定最大可接收的消息数量，或数量为负值，那么就代表可接受的消息数量没有上限（直到内存的尽头）；</p><pre><code>Queue.qsize()：返回当前队列包含的消息数量；\n\nQueue.empty()：如果队列为空，返回True，反之False ；\n\nQueue.full()：如果队列满了，返回True,反之False；</code></pre><p>Queue.get([block[, timeout]])：获取队列中的一条消息，然后将其从列队中移除，block默认值为True；</p><ul><li><p>如果block使用默认值，且没有设置timeout（单位秒），消息列队如果为空，此时程序将被阻塞（停在读取状态），直到从消息列队读到消息为止，如果设置了timeout，则会等待timeout秒，若还没读取到任何消息，则抛出”Queue.Empty”异常；</p></li><li><p>如果block值为False，消息列队如果为空，则会立刻抛出”Queue.Empty”异常；</p></li><li><p>Queue.get_nowait()：相当Queue.get(False)；</p></li></ul><p>Queue.put(item,[block[, timeout]])：将item消息写入队列，block默认值为True；</p><ul><li><p>如果block使用默认值，且没有设置timeout（单位秒），消息列队如果已经没有空间可写入，此时程序将被阻塞（停在写入状态），直到从消息列队腾出空间为止，如果设置了timeout，则会等待timeout秒，若还没空间，则抛出”Queue.Full”异常；</p></li><li><p>如果block值为False，消息列队如果没有空间可写入，则会立刻抛出”Queue.Full”异常；</p></li><li><p>Queue.put_nowait(item)：相当Queue.put(item, False)；</p></li></ul><p>导入消息队列</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"><span class=\"comment\"># 初始化一个Queue对象</span></span><br><span class=\"line\">queue = Queue() 里面参数为空代表没有上限</span><br></pre></td></tr></table></figure><p>进程池pool</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入进程池</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"><span class=\"comment\"># 创建进程池</span></span><br><span class=\"line\">po = Pool(<span class=\"number\">5</span>)  参数<span class=\"number\">5</span>表示最大进程数为<span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p>multiprocessing.Pool常用函数解析：</p><ul><li>apply_async(func[, args[, kwds]]) ：使用非阻塞方式调用func（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表；</li><li>close()：关闭Pool，使其不再接受新的任务；</li><li>terminate()：不管任务是否完成，立即终止；</li><li>join()：主进程阻塞，等待子进程的退出， 必须在close或terminate之后使用；</li><li>如果要使用Pool创建进程，就需要使用multiprocessing.Manager()中的Queue()，而不是multiprocessing.Queue()</li></ul><h2 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h2><p>协程:</p><p>又称为微线程，也是用户基线程，可以在不开劈线程的基础上完成多个任务交替值，程序员可以控制执行顺序</p><p>如何理解:</p><p>如果在函数里面只看一个yield关键字，那么可以理解程是协程</p><p>学习协程的目的:</p><p>在单线程的基础上完成多个任务，可以使用这个协程，多个任务一定是交替执行的</p><p>gevent的使用：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gevent</span><br><span class=\"line\"><span class=\"comment\"># 打补丁</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> gevent <span class=\"keyword\">import</span> monkey</span><br><span class=\"line\"><span class=\"comment\"># 打补丁， 让gevent能够失败系统的耗时操作，完成协程之间自动进行切换</span></span><br><span class=\"line\"><span class=\"comment\"># 提示： 打补丁的代码一定要先执行</span></span><br><span class=\"line\"><span class=\"comment\"># 提示： gevent封装的greenlet框架</span></span><br><span class=\"line\">monkey.patch_all()</span><br><span class=\"line\"><span class=\"comment\"># 创建协程指派对应的任务</span></span><br><span class=\"line\">g1 = gevent.spawn(work1)</span><br><span class=\"line\">g2 = gevent.spawn(work2)</span><br><span class=\"line\"><span class=\"comment\"># 主线程不会等待所有的协程把任务执行完成以后程序在退出。</span></span><br><span class=\"line\"><span class=\"comment\"># 等待协程把任务执行完成以后程序在退出</span></span><br><span class=\"line\">g1.join()</span><br><span class=\"line\">g2.join()</span><br></pre></td></tr></table></figure><h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><p>迭代器是访问集合元素的一种方式，迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，知道所有元素被访问完结束。迭代器只能往前不能后退。</p><p>可迭代对象有：</p><p>列表、字典、元组、字符串、集合、range、</p><p>判断是否是可迭代对象：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = isinstance（object, Iterable）</span><br></pre></td></tr></table></figure><p>自定义可迭代对象</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Iterable , Iterator </span><br><span class=\"line\">```   </span><br><span class=\"line\">在类里面提供__iter__和__next__方法创建的对象就是迭代器，迭代器记录当前遍历位置及获取下一个位置的值。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 生成器</span></span><br><span class=\"line\">生成器就是一种特殊的迭代器</span><br><span class=\"line\"></span><br><span class=\"line\">生成器的创建方式：</span><br><span class=\"line\">- 和列表生成式类似，只不过把列表的[ ]改成了( )</span><br><span class=\"line\">```python</span><br><span class=\"line\">g1 = (x*<span class=\"number\">3</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure><ul><li><p>函数里面如果存在yield关键字，那么就表示是一个生成器<br>启动生成器的时候如果有代码执行遇到yield那么代码会暂停，下次在启动生成器的时候会在暂停的位置上继续往下执行</p><p>生成器中使用return关键字语法上没有问题<br>在生成器执行完return操作，就会停止迭代，跑着停止迭代异常</p></li><li><p>return关键字： 只能返回一次结果</p></li><li><p>yield关键字：代码执行到yield会暂停，再次启动生成器会继续往下执行，每启动一次生成器都会返回一个值，yield会返回多个值</p></li></ul><p>使用send方法可以给生成器传入参数</p><p>第一个启动生成器一般都是用next函数，如果使用send方法启动生成器需要传入参数会None，再次启动生成器可以传入非空的数据可以不是None</p><h2 id=\"全局解释器锁-GIL\"><a href=\"#全局解释器锁-GIL\" class=\"headerlink\" title=\"全局解释器锁(GIL)\"></a>全局解释器锁(GIL)</h2><p>作用：保证用一时刻只有一个线程可以执行代码</p><p>Python中的多线程是假的</p><p>原因：</p><p>Python的解释器由c写的cpython，而cpython中就存在GIL<br>python解释器：cpython jpython pypython</p><p>解决的办法：</p><ul><li>更换解释器，比如使用jpython解释器</li><li>使用多进程来完成多任务的操作</li></ul><p>在程序当中，如果需要大量消耗内存的，比如进行科学计算时，使用多进程要比多线程快；在进行IO操作（中间有时间阻塞的操作）时，多线程要比多进程快。</p>"},{"title":"pep8的使用","copyright":true,"abbrlink":1562858183,"date":"2019-12-30T11:23:56.000Z","_content":"\n## 1 介绍(Introduction)\n本文档给出了包含主要Python发行版中的标准库的Python代码的编码约定。\n随着时间的推移，随着更多的约定被识别，过去的约定被语言本身的变化所淘汰，这种风格指南也在不断发展。\n\n<!--more-->\n## 2 代码布局(Code Lay-Out)\n### 2.1 缩进(Indentation)\n每个缩进需要使用4个空格。\n\n连续行所包装的元素应该要么采用Python隐式续行，即垂直对齐于圆括号、方括号和花括号，要么采用悬挂缩进。采用悬挂缩进时需考虑以下两点：第一行不应该包括参数，并且在续行中需要再缩进一级以便清楚表示。\n\n正确的写法\n\n    # 同开始分界符(左括号)对齐\n    foo = long_function_name(var_one, var_two,\n                             var_three, var_four)\n                             \n    # 续行多缩进一级以同其他代码区别\n    def long_function_name(\n            var_one, var_two, var_three,\n            var_four):\n        print(var_one)\n       \n    # 悬挂缩进需要多缩进一级\n    foo = long_function_name(\n        var_one, var_two,\n        var_three, var_four)\n\n错误的写法\n\n    # 采用悬挂缩进时第一行不应该有参数\n    foo = long_function_name(var_one, var_two,\n        var_three, var_four)\n     \n    # 续行并没有被区分开，因此需要再缩进一级\n    def long_function_name(\n        var_one, var_two, var_three,\n        var_four):\n        print(var_one)\n\n对于延续行，4个空格的规则是可选使用的。\n\n同样可行的例子:\n\n\n    # 悬挂缩进可以不采用4空格的缩进方法。\n    foo = long_function_name(\n      var_one, var_two,\n      var_three, var_four)\n      \n如果if语句太长，需要用多行书写，2个字符(例如,if)加上一个空格和一个左括号刚好是4空格的缩进，但这对多行条件语句的续行是没用的。因为这会和if语句中嵌套的其他的缩进的语句产生视觉上的冲突。这份PEP中并没有做出明确的说明应该怎样来区分条件语句和if语句中所嵌套的语句。以下几种方法都是可行的，但不仅仅只限于这几种方法：\n\n    # 不采用额外缩进\n    if (this_is_one_thing and\n        that_is_another_thing):\n        do_something()\n    \n    # 增加一行注释，在编辑器中显示时能有所区分\n    # supporting syntax highlighting.\n    if (this_is_one_thing and\n        that_is_another_thing):\n        # Since both conditions are true, we can frobnicate.\n        do_something()\n    \n    # 在条件语句的续行增加一级缩进\n    if (this_is_one_thing\n            and that_is_another_thing):\n        do_something()\n        \n多行结束右圆/方/花括号可以单独一行书写，和上一行的缩进对齐：\n\n    my_list = [\n        1, 2, 3,\n        4, 5, 6,\n        ]\n    result = some_function_that_takes_arguments(\n        'a', 'b', 'c',\n        'd', 'e', 'f',\n        )\n        \n也可以和多行开始的第一行的第一个字符对齐：\n\n    my_list = [\n        1, 2, 3,\n        4, 5, 6,\n    ]\n    result = some_function_that_takes_arguments(\n        'a', 'b', 'c',\n        'd', 'e', 'f',\n    )\n    \nTab还是空格？(Tab Or Space?)\n\n推荐使用空格来进行缩进。\n\nTab应该只在现有代码已经使用tab进行缩进的情况下使用，以便和现有代码保持一致。\n\nPython 3不允许tab和空格混合使用。\n\nPython 2的代码若有tab和空格混合使用的情况，应该把tab全部转换为只有空格。\n\n### 2.2 每行最大长度(Maximum Line Length)\n将所有行都限制在79个字符长度以内。\n\n对于连续大段的文字（比如文档字符串(docstring)或注释），其结构上的限制更少，这些行应该被限制在72个字符长度内。\n\n限制编辑器的窗口宽度能让好几个文件同时打开在屏幕上显示，在使用代码评审(code review)工具时在两个相邻窗口显示两个版本的代码效果很好。\n\n很多工具的默认自动换行会破坏代码的结构，使代码更难以理解。在窗口大小设置为80个字符的编辑器中，即使在换行时编辑器可能会在最后一列放置一个记号，为避免自动换行也需要限制每行字符长度。一些基于web的工具可能根本没有自动换行的功能。\n\n一些团队会强烈希望行长度比79个字符更长。当代码仅仅只由一个团队维护时，可以达成一致让行长度增加到80到100字符(实际上最大行长是99字符)，注释和文档字符串仍然是以72字符换行。\n\nPython标准库比较传统，将行长限制在79个字符以内（文档字符串/注释为72个字符）。\n\n一种推荐的换行方式是利用Python圆括号、方括号和花括号中的隐式续行。长行可以通过在括号内换行来分成多行。应该最好加上反斜杠来区别续行。\n\n隐式续行\n\n    a = ('sdfaf' \n        'test')\n\n有时续行只能使用反斜杠。例如，较长的多个with语句不能采用隐式续行，只能接受反斜杠表示换行：\n\n    with open('/path/to/some/file/you/want/to/read') as file_1, \\\n         open('/path/to/some/file/being/written', 'w') as file_2:\n        file_2.write(file_1.read())\n        \n### 2.3 二元运算符之前还是之后换行？(Should a line break before or after a binary operator?)\n\n长期以来一直推荐的风格是在二元运算符之后换行。但是这样会影响代码可读性，包括两个方面：一是运算符会分散在屏幕上的不同列上，二是每个运算符会留在前一行并远离操作数。所以，阅读代码的时候眼睛必须做更多的工作来确定哪些操作数被加，哪些操作数被减：\n\n    # 错误的例子：运算符远离操作数\n    income = (gross_wages +\n              taxable_interest +\n              (dividends - qualified_dividends) -\n              ira_deduction -\n              student_loan_interest)\n        \n为了解决这个可读性问题，数学家及其出版商遵循相反的规定。Donald Knuth在他的“电脑和排版”系列中解释了传统的规则：“尽管在段落中的公式总是在二元运算符之后换行，但显示公式时总是在二元运算符之前换行”。\n        \n    # 正确的例子：更容易匹配运算符与操作数\n    income = (gross_wages\n              + taxable_interest\n              + (dividends - qualified_dividends)\n              - ira_deduction\n              - student_loan_interest)\n              \n在Python代码中，只要在统一项目中约定一致，就可以在二元运算符之前或之后换行。对于新编写的代码，建议使用Knuth的风格。\n        \n### 2.4 空行(Blank Line)\n\n使用2个空行来分隔最外层的函数(function)和类(class)定义。\n\n使用1个空行来分隔类中的方法(method)定义。\n\n可以使用额外的空行（尽量少）来分隔一组相关的函数。在一系列相关的仅占一行的函数之间，空行也可以被省略（比如一组虚函数定义）。\n\n在函数内使用空行（尽量少）使代码逻辑更清晰。\n\n例子：\n\n    def func():\n        \n        \n        class A(object):\n            pass\n        \n        def func1():\n            a = A()\n            \n        def func2():\n            print('aaa')\n            print('bbb')\n\nPython支持control-L（如:^L）换页符作为空格；许多工具将这些符号作为分页符，因此你可以使用这些符号来分页或者区分文件中的相关区域。注意，一些编辑器和基于web的代码预览器可能不会将control-L识别为分页符，而是显示成其他符号。\n\n### 2.5 源文件编码(Source File Encoding)\n\nPython核心发行版中的代码应该一直使用UTF-8（Python 2中使用ASCII）。\n\n使用ASCII（Python 2）或者UTF-8（Python 3）的文件不应该添加编码声明。\n\n在标准库中，只有用作测试目的，或者注释或文档字符串需要提及作者名字而不得不使用非ASCII字符时，才能使用非默认的编码。否则，在字符串文字中包括非ASCII数据时，推荐使用\\x, \\u, \\U或\\N等转义符。\n\n对于Python 3.0及其以后的版本中，标准库遵循以下原则（参见PEP 3131）：Python标准库中的所有标识符都必须只采用ASCII编码的标识符，在可行的条件下也应当使用英文词（很多情况下，使用的缩写和技术术语词都不是英文）。此外，字符串文字和注释应该只包括ASCII编码。只有两种例外：\n\n(a) 测试情况下为了测试非ASCII编码的特性\n\n(b) 作者名字。作者名字不是由拉丁字母组成的也必须提供一个拉丁音译名。\n\n鼓励具有全球受众的开放源码项目采用类似的原则。\n\n### 2.6 模块引用(Imports)\n\nImports应该分行写，而不是都写在一行，例如：\n\n    # 分开写\n    import os\n    import sys\n    \n    # 不要像下面一样写在一行\n    import sys, os\n    \n这样写也是可以的：\n\n    from subprocess import Popen, PIPE\n    \nImports应该写在代码文件的开头，位于模块(module)注释和文档字符串(docstring)之后，模块全局变量(globals)和常量(constants)声明之前。\n    \nImports应该按照下面的顺序分组来写：\n\n1. 标准库imports\n2. 相关第三方imports\n3. 本地应用/库的特定imports\n\n如：\n\n    import re\n    from lxml import etree\n    from ak_spider.common.mongo_models import *\n    from ak_spider.settings import CAPTCHA_SERVER, AK_PROXY_SERVER, logger\n\n不同组的imports之前用空格隔开。\n\n推荐使用绝对(absolute)imports，因为这样通常更易读，在import系统没有正确配置（比如中的路径以sys.path结束）的情况下，也会有更好的表现（或者至少会给出错误信息）：\n    \n    import mypkg.sibling\n    from mypkg import sibling\n    from mypkg.sibling import example\n    \n然而，除了绝对imports，显式的相对imports也是一种可以接受的替代方式。特别是当处理复杂的包布局(package layouts)时，采用绝对imports会显得啰嗦。\n    \n    from . import sibling\n    from .sibling import example\n    \n标准库代码应当一直使用绝对imports，避免复杂的包布局。\n\n隐式的相对imports应该永不使用，并且Python 3中已经被去掉了\n\n当从一个包括类的模块中import一个类时，通常可以这样写：\n\n    from myclass import MyClass\n    from foo.bar.yourclass import YourClass\n    \n如果和本地命名的拼写产生了冲突，应当直接import模块：\n\n    import myclass\n    import foo.bar.yourclass\n    \n然后使用”myclass.MyClass”和”foo.bar.yourclass.YourClass”。\n\n避免使用通配符imports(from <module> import *)，因为会造成在当前命名空间出现的命名含义不清晰，给读者和许多自动化工具造成困扰。有一个可以正当使用通配符import的情形，即将一个内部接口重新发布成公共API的一部分（比如，使用备选的加速模块中的定义去覆盖纯Python实现的接口，预先无法知晓具体哪些定义将被覆盖）。\n\n当使用这种方式重新发布命名时，指南后面关于公共和内部接口的部分仍然适用。\n\n### 2.7 模块级的双下划线命名(Module level dunder names)\n\n模块中的“双下滑线”（变量名以两个下划线开头，两个下划线结尾）变量，比如__all__，__author，__version__等，应该写在文档字符串(docstring)之后，除了form __future__引用(imports)的任何其它类型的引用语句之前。Python要求模块中__future__的导入必须出现在除文档字符串(docstring)之外的任何其他代码之前。\n    \n例如：\n\n    \"\"\"This is the example module.\n    \n    This module does stuff.\n    \"\"\"\n    \n    from __future__ import barry_as_FLUFL\n    \n    __all__ = ['a', 'b', 'c']\n    __version__ = '0.1'\n    __author__ = 'Cardinal Biggles'\n    \n    import os\n    import sys\n    \n##  3 字符串引用(String Quotes)\n\n在Python中表示字符串时，不管用单引号还是双引号都是一样的。但是不推荐将这两种方式看作一样并且混用。最好选择一种规则并坚持使用。当字符串中包含单引号时，采用双引号来表示字符串，反之也是一样，这样可以避免使用反斜杠，代码也更易读。\n\n对于三引号表示的字符串，使用双引号字符来表示(即用\"\"\"而不是''')。\n    \n## 4 表达式和语句中的空格(Whitespace In Expressions And Statements)\n\n    \n### 4.1 一些痛点(Pet Peeves)\n\n在下列情形中避免使用过多的空白：\n    \n方括号，圆括号和花括号之后：\n\n    #正确的例子:\n    spam(ham[1], {eggs: 2})\n    \n    #错误的例子：\n    spam( ham[ 1 ], { eggs: 2 } )\n    \n逗号，分号或冒号之前：\n\n    #正确的例子:\n    if x == 4: print x, y; x, y = y, x\n    \n    #错误的例子:\n    if x == 4 : print x , y ; x , y = y , x\n    \n不过，在切片操作时，冒号和二元运算符是一样的，应该在其左右两边保留相同数量的空格（就像对待优先级最低的运算符一样）。在扩展切片操作中，所有冒号的左右两边空格数都应该相等。不过也有例外，当切片操作中的参数被省略时，应该也忽略空格。\n\n    #正确的例子:\n    ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\n    ham[lower:upper], ham[lower:upper:], ham[lower::step]\n    ham[lower+offset : upper+offset]\n    ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\n    ham[lower + offset : upper + offset]\n    \n    #错误的例子:\n    ham[lower + offset:upper + offset]\n    ham[1: 9], ham[1 :9], ham[1:9 :3]\n    ham[lower : : upper]\n    ham[ : upper]\n    \n在调用函数时传递参数list的括号之前：\n\n    #正确的例子:\n    spam(1)\n    \n    #错误的例子:\n    pam (1)\n\n在索引和切片操作的左括号之前：\n\n    #正确的例子:\n    dct['key'] = lst[index]\n    \n    #错误的例子:\n    dct ['key'] = lst [index]\n    \n赋值(或其他)运算符周围使用多个空格来和其他语句对齐：\n\n    #正确的例子:\n    x = 1\n    y = 2\n    long_variable = 3\n    \n    #错误的例子:\n    x             = 1\n    y             = 2\n    long_variable = 3\n    \n### 4.2 其他建议(Other Recommendations)\n\n避免任何行末的空格。因为它通常是不可见的，它可能会令人困惑：例如反斜杠后跟空格和换行符不会作为续行标记。一些编辑器会自动去除行末空格，许多项目（如CPython本身）都有提交前的预处理钩子来自动去除行末空格。\n\n在二元运算符的两边都使用一个空格：赋值运算符(=)，增量赋值运算符(+=, -= etc.)，比较运算符(==, <, >, !=, <>, <=, >=, in, not in, is, is not)，布尔运算符(and, or, not)。\n    \n如果使用了优先级不同的运算符，则在优先级较低的操作符周围增加空白。请你自行判断，不过永远不要用超过1个空格，永远保持二元运算符两侧的空白数量一样。\n    \n    #正确的例子:\n    i = i + 1\n    submitted += 1\n    x = x*2 - 1\n    hypot2 = x*x + y*y\n    c = (a+b) * (a-b)\n    \n    #错误的例子:\n    i=i+1\n    submitted +=1\n    x = x * 2 - 1\n    hypot2 = x * x + y * y\n    c = (a + b) * (a - b)    \n\n使用=符号来表示关键字参数或参数默认值时，不要在其周围使用空格。\n\n    #正确的例子:\n    def complex(real, imag=0.0):\n    return magic(r=real, i=imag)\n    \n    #错误的例子:\n    def complex(real, imag = 0.0):\n    return magic(r = real, i = imag)\n\n函数注解中的:也遵循一般的:加空格的规则，在->两侧各使用一个空格。\n\n    #正确的例子:\n    def munge(input: AnyStr): ...\n    def munge() -> AnyStr: ...\n    \n    #错误的例子:\n    def munge(input:AnyStr): ...\n    def munge()->PosInt: ...\n    \n在组合使用函数注解和参数默认值时，需要在=两侧各使用一个空格（只有当这个参数既有函数注解，又有默认值的时候）。\n\n    #正确的例子:\n    def munge(sep: AnyStr = None): ...\n    def munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...\n    \n    #错误的例子:\n    def munge(input: AnyStr=None): ...\n    def munge(input: AnyStr, limit = 1000): ...\n    \n复合语句（即将多行语句写在一行）一般是不鼓励使用的。\n\n    #正确的例子:\n    if foo == 'blah':\n    do_blah_thing()\n    do_one()\n    do_two()\n    do_three()\n    \n    #最好不要这样:\n    if foo == 'blah': do_blah_thing()\n    do_one(); do_two(); do_three()\n    \n有时也可以将短小的if/for/while中的语句写在一行，但对于有多个分句的语句永远不要这样做。也要避免将多行都写在一起。\n    \n    #最好不要这样：\n    if foo == 'blah': do_blah_thing()\n    for x in lst: total += x\n    while t < 10: t = delay()\n    \n    #绝对不要这样：\n    if foo == 'blah': do_blah_thing()\n    else: do_non_blah_thing()\n    \n    try: something()\n    finally: cleanup()\n    \n    do_one(); do_two(); do_three(long, argument,\n    list, like, this)\n    \n    if foo == 'blah': one(); two(); three()\n    \n## 5 何时在末尾加逗号(When to use trailing commas)\n    \n末尾逗号通常是可选的，除非在定义单元素元组(tuple)时是必需的（而且在Python 2中，它们具有print语句的语义）。为了清楚起见，建议使用括号（技术上来说是冗余的）括起来。\n    \n    #正确的例子:\n    FILES = ('setup.cfg',)\n    \n    #也正确，但令人困惑:\n    FILES = 'setup.cfg',\n    \n当使用版本控制系统时，在将来有可能扩展的列表末尾添加冗余的逗号是有好处的。具体的做法是将每一个元素写在单独的一行，并在行尾添加逗号，右括号单独占一行。但是，与有括号在同一行的末尾元素后面加逗号是没有意义的（上述的单元素元组除外）。\n\n    #正确的例子:\n    FILES = [\n        'setup.cfg',\n        'tox.ini',\n        ]\n    initialize(FILES,\n               error=True,\n               )\n    \n    #错误的例子:\n    FILES = ['setup.cfg', 'tox.ini',]\n    initialize(FILES, error=True,)\n    \n## 6 注释(Comments)\n\n和代码矛盾的注释还不如没有。当代码有改动时，一定要优先更改注释使其保持最新。\n\n注释应该是完整的多个句子。如果注释是一个短语或一个句子，其首字母应该大写，除非开头是一个以小写字母开头的标识符（永远不要更改标识符的大小写）。\n\n如果注释很短，结束的句号可以被忽略。块注释通常由一段或几段完整的句子组成，每个句子都应该以句号结束。\n\n你应该在句尾的句号后再加上2个空格。\n\n使用英文写作，参考Strunk和White的《The Elements of Style》\n\n来自非英语国家的Python程序员们，请使用英文来写注释，除非你120%确定你的代码永远不会被不懂你所用语言的人阅读到。\n\n### 6.1 块注释（Block Comments）\n\n块注释一般写在对应代码之前，并且和对应代码有同样的缩进级别。块注释的每一行都应该以#和一个空格开头（除非该文本是在注释内缩进对齐的）。\n\n块注释中的段落应该用只含有单个#的一行隔开。\n\n### 6.2 行内注释（Inline Comments）\n\n尽量少用行内注释。\n\n行内注释是和代码语句写在一行内的注释。行内注释应该至少和代码语句之间有两个空格的间隔，并且以#和一个空格开始。\n\n行内注释通常不是必要的，在代码含义很明显时甚至会让人分心。请不要这样做：\n\n    x = x + 1                 # x自加\n\n但这样做是有用的：\n\n    x = x + 1                 # 边界补偿\n\n### 6.3 文档字符串(Documentation Strings)\n\n要知道如何写出好的文档字符串（docstring），请参考PEP 257\n\n所有的公共模块，函数，类和方法都应该有文档字符串。对于非公共方法，文档字符串不是必要的，但你应该留有注释说明该方法的功能，该注释应当出现在def的下一行。\n\nPEP 257描述了好的文档字符应该遵循的规则。其中最重要的是，多行文档字符串以单行\"\"\"结尾，不能有其他字符，例如：\n\n    \"\"\"Return a foobang\n    \n    Optional plotz says to frobnicate the bizbaz first.\n    \"\"\"\n\n对于仅有一行的文档字符串，结尾处的\"\"\"应该也写在这一行。\n\n## 7 命名约定（Naming Conventions）\n\nPython标准库的命名约定有一些混乱，因此我们永远都无法保持一致。但如今仍然存在一些推荐的命名标准。新的模块和包（包括第三方框架）应该采用这些标准，但若是已经存在的包有另一套风格的话，还是应当与原有的风格保持内部一致。\n\n### 7.1 首要原则（Overriding Principle）\n\n对于用户可见的公共部分API，其命名应当表达出功能用途而不是其具体的实现细节。\n\n### 7.2 描述：命名风格（Descriptive: Naming Styles）\n\n存在很多不同的命名风格，最好能够独立地从命名对象的用途认出采用了哪种命名风格。\n\n通常区分以下命名样式：\n\n- b (单个小写字母)\n- B (单个大写字母)\n- lowercase(小写)\n- lower_case_with_underscores(带下划线小写)\n- UPPERCASE(大写)\n- UPPER_CASE_WITH_UNDERSCORES(带下划线大写)\n- CapitalizedWords (也叫做CapWords或者CamelCase – 因为单词首字母大写看起来很像驼峰)。也被称作StudlyCaps。注意：当CapWords里包含缩写时，将缩写部分的字母都大写。HTTPServerError比HttpServerError要好。\n- mixedCase (注意：和CapitalizedWords不同在于其首字母小写！)\n- Capitalized_Words_With_Underscores (这种风格超丑！)\n\n也有风格使用简短唯一的前缀来表示一组相关的命名。这在Python中并不常见，但为了完整起见这里也捎带提一下。比如，os.stat()函数返回一个tuple，其中的元素名原本为st_mode,st-size,st_mtime等等。（这样做是为了强调和POSIX系统调用结构之间的关系，可以让程序员更熟悉。）\n\nX11库中的公共函数名都以X开头。在Python中这样的风格一般被认为是不必要的，因为属性和方法名之前已经有了对象名的前缀，而函数名前也有了模块名的前缀。\n\n此外，要区别以下划线开始或结尾的特殊形式（可以和其它的规则结合起来）：\n\n_single_leading_underscore: 以单个下划线开头是”内部使用”的弱标志。 比如， from M import *不会import下划线开头的对象。\n\nsingle_trailing_underscore_: 以单个下划线结尾用来避免和Python关键词产生冲突，例如:\n            \n        Tkinter.Toplevel(master, class_='ClassName')\n\n__double_leading_underscore: 以双下划线开头的风格命名类属性表示触发命名修饰（在FooBar类中，__boo命名会被修饰成_FooBar__boo;）。\n\n### 7.3 规范：命名约定(Prescriptive: Naming Conventions)\n\n#### 7.3.1 需要避免的命名(Names To Avoid)\n\n不要使用字符’l’（L的小写的字母），’O’（o大写的字母），或者’I’（i的大写的字母）来作为单个字符的变量名。\n\n在一些字体中，这些字符和数字1和0无法区别开来。比如，当想使用’l’时，使用’L’代替。\n\n#### 7.3.2 ASCII兼容性(ASCII Compatibility)\n\n标准库中使用的标识符必须与ASCII兼容(参见PEP 3131中的[policy](https://www.python.org/dev/peps/pep-3131/#policy-specification)这一节) 。\n\n#### 7.3.3 包和模块命名(Package And Module Names)\n\n模块命名应短小，且为全小写。若下划线能提高可读性，也可以在模块名中使用。Python包命名也应该短小，且为全小写，但不应使用下划线。\n\n当使用C或C++写的扩展模块有相应的Python模块提供更高级的接口时（比如，更加面向对象），C/C++模块名以下划线开头（例如，_sociket）\n\n#### 7.3.4 类命名(Class Names)\n\n类命名应该使用驼峰（CapWords）的命名约定。\n\n当接口已有文档说明且主要是被用作调用时，也可以使用函数的命名约定。\n\n注意对于内建命名(builtin names)有一个特殊的约定：大部分内建名都是一个单词（或者两个一起使用的单词），驼峰(CapWords)的约定只对异常命名和内建常量使用。\n\n#### 7.3.5 类型变量命名(Type variable names)\n\nPEP 484中引入的类型变量名称通常应使用简短的驼峰命名: T，AnyStr，Num。 建议将后缀_co或_contra添加到用于声明相应的协变(covariant)和逆变(contravariant)的行为。例如：\n\n    from typing import TypeVar\n    \n    VT_co = TypeVar('VT_co', covariant=True)\n    KT_contra = TypeVar('KT_contra', contravariant=True)\n\n#### 7.3.6 异常命名(Exception Names)\n\n由于异常实际上也是类，因此类命名约定也适用与异常。不同的是，如果异常实际上是抛出错误的话，异常名前应该加上”Error”的前缀。\n\n#### 7.3.7 全局变量命名(Global Variable Names)\n\n（在此之前，我们先假定这些变量都仅在同一个模块内使用。）这些约定同样也适用于函数命名。\n\n对于引用方式设计为from M import *的模块，应该使用__all__机制来避免import全局变量，或者采用下划线前缀的旧约定来命名全局变量，从而表明这些变量是“模块非公开的”。\n\n#### 7.3.8 函数命名(Function Names)\n\n函数命名应该都是小写，必要时使用下划线来提高可读性。\n\n只有当已有代码风格已经是混合大小写时（比如threading.py），为了保留向后兼容性才使用混合大小写。\n\n#### 7.3.9 函数和方法参数(Function And Method Arguments)\n\n实例方法的第一参数永远都是self。\n\n类方法的第一个参数永远都是cls。\n\n在函数参数名和保留关键字冲突时，相对于使用缩写或拼写简化，使用以下划线结尾的命名一般更好。比如，class_比clss更好。（或许使用同义词避免这样的冲突是更好的方式。）\n\n#### 7.3.10 方法命名和实例变量(Method Names And Instance Variables)\n\n使用函数命名的规则：小写单词，必要时使用下划线分开以提高可读性。\n\n仅对于非公开方法和变量命名在开头使用一个下划线。\n\n避免和子类的命名冲突，使用两个下划线开头来触发Python的命名修饰机制。\n\nPython类名的命名修饰规则：如果类Foo有一个属性叫__a，不能使用Foo.__a的方式访问该变量。（有用户可能仍然坚持使用Foo._Foo__a的方法访问。）一般来说，两个下划线开头的命名方法仅用于避免与设计为子类的类中的属性名冲突。\n\n#### 7.3.11 常量(Constants)\n\n常量通常是在模块级别定义的，使用全部大写并用下划线将单词分开。如：MAX_OVERFLOW和TOTAL 。\n\n#### 7.3.12 继承的设计(Designing For Inheritance)\n\n记得永远区别类的方法和实例变量（属性）应该是公开的还是非公开的。如果有疑虑的话，请选择非公开的；因为之后将非公开属性变为公开属性要容易些。\n\n公开属性是那些你希望和你定义的类无关的客户来使用的，并且确保不会出现向后不兼容的问题。非公开属性是那些不希望被第三方使用的部分，你可以不用保证非公开属性不会变化或被移除。\n\n我们在这里没有使用“私有（private）”这个词，因为在Python里没有什么属性是真正私有的（这样设计省略了大量不必要的工作）。\n\n另一类属性属于子类API的一部分（在其他语言中经常被称为”protected”）。一些类是为继承设计的，要么扩展要么修改类的部分行为。当设计这样的类时，需要谨慎明确地决定哪些属性是公开的，哪些属于子类API，哪些真的只会被你的基类调用。\n\n请记住以上几点，下面是Python风格的指南：\n\n- 公开属性不应该有开头下划线。\n- 如果公开属性的名字和保留关键字有冲突，在你的属性名尾部加上一个下划线。这比采用缩写和简写更好。（然而，和这条规则冲突的是，‘cls’对任何变量和参数来说都是一个更好地拼写，因为大家都知道这表示class，特别是在类方法的第一个参数里。）\n- 对于简单的公共数据属性，最后仅公开属性名字，不要公开复杂的调用或设值方法。请记住，如果你发现一个简单的数据属性需要增加功能行为时，Python为功能增强提供了一个简单的途径。这种情况下，使用Properties注解将功能实现隐藏在简单数据属性访问语法之后。注意 1：Properties注解仅仅对新风格类有用。\n注意 2：尽量保证功能行为没有副作用，尽管缓存这种副作用看上去并没有什么大问题。\n注意 3: 对计算量大的运算避免试用properties；属性的注解会让调用者相信访问的运算量是相对较小的。\n- 如果你的类将被子类继承的话，你有一些属性并不想让子类访问，考虑将他们命名为两个下划线开头并且结尾处没有下划线。这样会触发Python命名修饰算法，类名会被修饰添加到属性名中。这样可以避免属性命名冲突，以免子类会不经意间包含相同的命名。注意 1：注意命名修饰仅仅是简单地将类名加入到修饰名中，所以如果子类有相同的类名合属性名，你可能仍然会遇到命名冲突问题。\n注意 2：命名修饰可以有特定用途，比如在调试时，\\_\\_getattr\\_\\_()比较不方便。然而命名修饰算法的可以很好地记录，并且容意手动执行。\n注意 3：不是所有人都喜欢命名修饰。需要试着去平衡避免偶然命名冲突的需求和高级调用者使用的潜在可能性。\n\n### 7.4 公开和内部接口(Public And Internal Interfaces)\n\n任何向后兼容性保证仅对公开接口适用。相应地，用户能够清楚分辨公开接口和内部接口是很重要的。\n\n文档化的接口被认为是公开的，除非文档中明确申明了它们是临时的或者内部接口，不保证向后兼容性。所有文档中未提到的接口应该被认为是内部的。\n\n为了更好审视公开接口和内部接口，模块应该在__all属性中明确申明公开API是哪些。将__all__设为空list表示该模块中没有公开API。\n\n即使正确设置了__all属性，内部接口（包，模块，类，函数，属性或其他命名）也应该以一个下划线开头。\n\n如果接口的任一一个命名空间（包，模块或类）是内部的，那么该接口也应该是内部的\n\n引用的命名应该永远被认为是实现细节。其他模块不应当依赖这些非直接访问的引用命名，除非它们在文档中明确地被写为模块的API，例如os.path或者包的__init__模块，那些从子模块展现的功能。\n\n## 8 编程建议(Programming Recommendations)\n\n1 代码应该以不影响其他Python实现（PyPy，Jython，IronPython，Cython，Psyco等）的方式编写。\n\n例如，不要依赖于 CPython 在字符串拼接时的优化实现，像这种语句形式a += b和a = a + b。即使是 CPython（仅对某些类型起作用） 这种优化也是脆弱的，不是在所有的实现中都不使用引用计数。在库中性能敏感的部分，用''.join形式来代替。这会确保在所有不同的实现中字符串拼接是线性时间的。\n\n2 与单例作比较，像None应该用is或is not，从不使用==操作符。\n\n同样的，当心if x is not None这样的写法，你是不知真的要判断x不是None。例如，测试一个默认值为None的变量或参数是否设置成了其它值，其它值有可能是某种特殊类型（如容器），这种特殊类型在逻辑运算时其值会被当作Flase来看待。\n\n用is not操作符而不是not ... is。虽然这两个表达式是功能相同的，前一个是更可读的，是首选。\n\n推荐的写法:\n\n    if foo is not None:\n    \n不推荐的写法:\n\n    if not foo is None:\n\n3 用富比较实现排序操作的时候，最好实现所有六个比较操作符（ \\_\\_eq__ 、 \\_\\_ne__ 、 \\_\\_lt__ , \\_\\_le__ , \\_\\_gt__ , \\_\\_ge__），而不是依靠其他代码来进行特定比较。\n\n为了最大限度的减少工作量，functools.total_ordering()装饰器提供了一个工具去生成缺少的比较方法。\n\nPEP 207 说明了 Python 假定的所有反射规则。因此，解释器可能使用y > x替换x < y，使用y >= x替换x <= y，也可能交换x == y和x != y的操作数。sort()和min()操作肯定会使用<操作符，max()函数肯定会使用>操作符。当然，最好是六个操作符都实现，以便在其他情况下不会出现混淆。\n\n4 始终使用def语句来代替直接绑定了一个lambda表达式的赋值语句。\n\n推荐的写法:\n\n    def f(x): return 2*x\n\n不推荐的写法:\n\n    f = lambda x: 2*x\n\n第一个表单意味着生成的函数对象的名称是'f'而不是通用的'<lambda>'。通常这对异常追踪和字符串表述是更有用的。使用赋值语句消除了使用lambda表达式可以提供，而一个显式的def语句不能提供的唯一好处，如，lambda能镶嵌在一个很长的表达式里。\n\n5 异常类应派生自Exception而不是BaseException。直接继承BaseException是为Exception保留的，从BaseException继承并捕获异常这种做法几乎总是错的。\n\n设计异常的层次结构，应基于那些可能出现异常的代码，而不是引发异常的位置。编码的时候，以回答“出了什么问题？”为目标，而不是仅仅指出“这里出现了问题”（见 PEP 3151 一个内建异常结构层次的例子）。\n\n类的命名约定适用于异常，如果异常类是一个错误，你应该给异常类加一个后缀Error。用于非本地流程控制或者其他形式的信号的非错误异常不需要一个特殊的后缀。\n\n6 适当的使用异常链。在 Python 3 里，应该使用raise X from Y来指示显式替换，而不会丢失原始的追溯。\n\n当有意替换一个内部的异常时（在 Python 2 用raise X，Python 3.3+ 用raise X from None），请确保将相关详细信息转移到新异常中（例如，将KeyError转换为AttributeError时保留属性名称，或将原始异常的文本嵌入到新的异常消息中）。\n\n7 在 Python 2 里抛出异常时，用raise ValueError('message')代替旧式的raise ValueError, 'message'。\n\n在 Python 3 之后的语法里，旧式的异常抛出方式是非法的。\n\n使用括号形式的异常意味着，当你传给异常的参数过长或者包含字符串格式化时，你就不需要使用续行符了，这要感谢括号！\n\n8 捕获异常时，尽可能使用明确的异常，而不是用一个空的except:语句。\n\n例如，用：\n\n    try:\n        import platform_specific_module\n    except ImportError:\n        platform_specific_module = None\n\n一个空的except:语句将会捕获到SystemExit和KeyboardInterrupt异常，很难区分程序的中断到底是Ctrl+C还是其他问题引起的。如果你想捕获程序的所有错误，使用except Exception:(空except:等同于except BaseException)。\n\n一个好的经验是限制使用空except语句，除了这两种情况：\n\n- 如果异常处理程序会打印出或者记录回溯信息；至少用户意识到错误的存在。\n- 如果代码需要做一些清理工作，但后面用raise向上抛出异常。try .. finally是处理这种情况更好的方式。\n\n9 绑定异常给一个名字时，最好使用 Python 2.6 里添加的明确的名字绑定语法：\n\n    try:\n        process_data()\n    except Exception as exc:\n        raise DataProcessingFailedError(str(exc))\n\nPython 3 只支持这种语法，避免与基于逗号的旧式语法产生二义性。\n\n10 捕获操作系统错误时，最好使用 Python 3.3 里引进的明确的异常结构层次，而不是内省的errno值。\n\n11 另外，对于所有try / except子句，将try子句限制为必需的绝对最小代码量。同样，这样可以避免屏蔽错误。\n\n推荐的写法：\n\n    try:\n        value = collection[key]\n    except KeyError:\n        return key_not_found(key)\n    else:\n        return handle_value(value)\n        \n不推荐的写法：\n\n    try:\n        # Too broad!\n        return handle_value(collection[key])\n    except KeyError:\n        # Will also catch KeyError raised by handle_value()\n        return key_not_found(key)\n\n12 当某个资源仅被特定代码段使用，用with语句确保其在使用后被立即干净的清除了，try/finally也是也接受的。\n\n13 当它们做一些除了获取和释放资源之外的事的时候，上下文管理器应该通过单独的函数或方法调用。例如：\n\n推荐的写法:\n\n    with conn.begin_transaction():\n        do_stuff_in_transaction(conn)\n\n不推荐的写法：\n\n    with conn:\n        do_stuff_in_transaction(conn)\n\n第二个例子没有提供任何信息来表明__enter__和__exit__方法在完成一个事务后做了一些除了关闭连接以外的其它事。在这种情况下明确是很重要的。\n\n14 坚持使用return语句。函数内的return语句都应该返回一个表达式，或者None。如果一个return语句返回一个表达式，另一个没有返回值的应该用return None清晰的说明，并且在一个函数的结尾应该明确使用一个return语句（如果有返回值的话）。\n\n推荐的写法：\n\n    def foo(x):\n        if x >= 0:\n            return math.sqrt(x)\n        else:\n            return None\n    \n    def bar(x):\n        if x < 0:\n            return None\n        return math.sqrt(x)\n        \n不推荐的写法：\n\n    def foo(x):\n        if x >= 0:\n            return math.sqrt(x)\n    \n    def bar(x):\n        if x < 0:\n            return\n        return math.sqrt(x)\n\n15 用字符串方法代替字符串模块。\n\n字符串方法总是快得多，并且与unicode字符串共享相同的API。如果需要与2.0以下的Python的向后兼容，则覆盖此规则。\n\n16 用''.startswith()和''.endswith()代替字符串切片来检查前缀和后缀。\n\nstartswith()和endswith()是更简洁的，不容易出错的。例如：\n\n    #推荐的写法：\n    if foo.startswith('bar'):\n    \n    #不推荐的写法：\n    if foo[:3] == 'bar':\n\n17 对象类型的比较应该始终使用isinstance()而不是直接比较。\n\n    #推荐的写法：\n    if isinstance(obj, int):\n    \n    #不推荐的写法：\n    if type(obj) is type(1):\n\n当比较一个对象是不是字符串时，记住它有可能也是一个 unicode 字符串！在 Python 2 里面，str和unicode有一个公共的基类叫basestring，因此你可以这样做：\n\n    if isinstance(obj, basestring):\n\n注意，在 Python 3 里面，unicode和basestring已经不存在了（只有str），byte对象不再是字符串的一种（被一个整数序列替代）。\n\n18 对于序列（字符串、列表、元组）来说，空的序列为False：\n\n正确的写法：\n\n    if not seq:\n    if seq:\n\n错误的写法：\n\n    if len(seq):\n    if not len(seq):\n    \n19 不要让字符串对尾随的空格有依赖。这样的尾随空格是视觉上无法区分的，一些编辑器（或者，reindent.py）会将其裁剪掉。\n\n20 不要用==比较True和False。\n\n    #推荐的写法：\n    if greeting:\n    \n    #不推荐的写法：\n    if greeting == True:\n    \n    #更加不推荐的写法：\n    if greeting is True:\n    ","source":"_posts/pep8.md","raw":"---\ntitle: pep8的使用\ncopyright: true\ntags:\n  - 编码规范\ncategories: python\nabbrlink: 1562858183\ndate: 2019-12-30 19:23:56\n---\n\n## 1 介绍(Introduction)\n本文档给出了包含主要Python发行版中的标准库的Python代码的编码约定。\n随着时间的推移，随着更多的约定被识别，过去的约定被语言本身的变化所淘汰，这种风格指南也在不断发展。\n\n<!--more-->\n## 2 代码布局(Code Lay-Out)\n### 2.1 缩进(Indentation)\n每个缩进需要使用4个空格。\n\n连续行所包装的元素应该要么采用Python隐式续行，即垂直对齐于圆括号、方括号和花括号，要么采用悬挂缩进。采用悬挂缩进时需考虑以下两点：第一行不应该包括参数，并且在续行中需要再缩进一级以便清楚表示。\n\n正确的写法\n\n    # 同开始分界符(左括号)对齐\n    foo = long_function_name(var_one, var_two,\n                             var_three, var_four)\n                             \n    # 续行多缩进一级以同其他代码区别\n    def long_function_name(\n            var_one, var_two, var_three,\n            var_four):\n        print(var_one)\n       \n    # 悬挂缩进需要多缩进一级\n    foo = long_function_name(\n        var_one, var_two,\n        var_three, var_four)\n\n错误的写法\n\n    # 采用悬挂缩进时第一行不应该有参数\n    foo = long_function_name(var_one, var_two,\n        var_three, var_four)\n     \n    # 续行并没有被区分开，因此需要再缩进一级\n    def long_function_name(\n        var_one, var_two, var_three,\n        var_four):\n        print(var_one)\n\n对于延续行，4个空格的规则是可选使用的。\n\n同样可行的例子:\n\n\n    # 悬挂缩进可以不采用4空格的缩进方法。\n    foo = long_function_name(\n      var_one, var_two,\n      var_three, var_four)\n      \n如果if语句太长，需要用多行书写，2个字符(例如,if)加上一个空格和一个左括号刚好是4空格的缩进，但这对多行条件语句的续行是没用的。因为这会和if语句中嵌套的其他的缩进的语句产生视觉上的冲突。这份PEP中并没有做出明确的说明应该怎样来区分条件语句和if语句中所嵌套的语句。以下几种方法都是可行的，但不仅仅只限于这几种方法：\n\n    # 不采用额外缩进\n    if (this_is_one_thing and\n        that_is_another_thing):\n        do_something()\n    \n    # 增加一行注释，在编辑器中显示时能有所区分\n    # supporting syntax highlighting.\n    if (this_is_one_thing and\n        that_is_another_thing):\n        # Since both conditions are true, we can frobnicate.\n        do_something()\n    \n    # 在条件语句的续行增加一级缩进\n    if (this_is_one_thing\n            and that_is_another_thing):\n        do_something()\n        \n多行结束右圆/方/花括号可以单独一行书写，和上一行的缩进对齐：\n\n    my_list = [\n        1, 2, 3,\n        4, 5, 6,\n        ]\n    result = some_function_that_takes_arguments(\n        'a', 'b', 'c',\n        'd', 'e', 'f',\n        )\n        \n也可以和多行开始的第一行的第一个字符对齐：\n\n    my_list = [\n        1, 2, 3,\n        4, 5, 6,\n    ]\n    result = some_function_that_takes_arguments(\n        'a', 'b', 'c',\n        'd', 'e', 'f',\n    )\n    \nTab还是空格？(Tab Or Space?)\n\n推荐使用空格来进行缩进。\n\nTab应该只在现有代码已经使用tab进行缩进的情况下使用，以便和现有代码保持一致。\n\nPython 3不允许tab和空格混合使用。\n\nPython 2的代码若有tab和空格混合使用的情况，应该把tab全部转换为只有空格。\n\n### 2.2 每行最大长度(Maximum Line Length)\n将所有行都限制在79个字符长度以内。\n\n对于连续大段的文字（比如文档字符串(docstring)或注释），其结构上的限制更少，这些行应该被限制在72个字符长度内。\n\n限制编辑器的窗口宽度能让好几个文件同时打开在屏幕上显示，在使用代码评审(code review)工具时在两个相邻窗口显示两个版本的代码效果很好。\n\n很多工具的默认自动换行会破坏代码的结构，使代码更难以理解。在窗口大小设置为80个字符的编辑器中，即使在换行时编辑器可能会在最后一列放置一个记号，为避免自动换行也需要限制每行字符长度。一些基于web的工具可能根本没有自动换行的功能。\n\n一些团队会强烈希望行长度比79个字符更长。当代码仅仅只由一个团队维护时，可以达成一致让行长度增加到80到100字符(实际上最大行长是99字符)，注释和文档字符串仍然是以72字符换行。\n\nPython标准库比较传统，将行长限制在79个字符以内（文档字符串/注释为72个字符）。\n\n一种推荐的换行方式是利用Python圆括号、方括号和花括号中的隐式续行。长行可以通过在括号内换行来分成多行。应该最好加上反斜杠来区别续行。\n\n隐式续行\n\n    a = ('sdfaf' \n        'test')\n\n有时续行只能使用反斜杠。例如，较长的多个with语句不能采用隐式续行，只能接受反斜杠表示换行：\n\n    with open('/path/to/some/file/you/want/to/read') as file_1, \\\n         open('/path/to/some/file/being/written', 'w') as file_2:\n        file_2.write(file_1.read())\n        \n### 2.3 二元运算符之前还是之后换行？(Should a line break before or after a binary operator?)\n\n长期以来一直推荐的风格是在二元运算符之后换行。但是这样会影响代码可读性，包括两个方面：一是运算符会分散在屏幕上的不同列上，二是每个运算符会留在前一行并远离操作数。所以，阅读代码的时候眼睛必须做更多的工作来确定哪些操作数被加，哪些操作数被减：\n\n    # 错误的例子：运算符远离操作数\n    income = (gross_wages +\n              taxable_interest +\n              (dividends - qualified_dividends) -\n              ira_deduction -\n              student_loan_interest)\n        \n为了解决这个可读性问题，数学家及其出版商遵循相反的规定。Donald Knuth在他的“电脑和排版”系列中解释了传统的规则：“尽管在段落中的公式总是在二元运算符之后换行，但显示公式时总是在二元运算符之前换行”。\n        \n    # 正确的例子：更容易匹配运算符与操作数\n    income = (gross_wages\n              + taxable_interest\n              + (dividends - qualified_dividends)\n              - ira_deduction\n              - student_loan_interest)\n              \n在Python代码中，只要在统一项目中约定一致，就可以在二元运算符之前或之后换行。对于新编写的代码，建议使用Knuth的风格。\n        \n### 2.4 空行(Blank Line)\n\n使用2个空行来分隔最外层的函数(function)和类(class)定义。\n\n使用1个空行来分隔类中的方法(method)定义。\n\n可以使用额外的空行（尽量少）来分隔一组相关的函数。在一系列相关的仅占一行的函数之间，空行也可以被省略（比如一组虚函数定义）。\n\n在函数内使用空行（尽量少）使代码逻辑更清晰。\n\n例子：\n\n    def func():\n        \n        \n        class A(object):\n            pass\n        \n        def func1():\n            a = A()\n            \n        def func2():\n            print('aaa')\n            print('bbb')\n\nPython支持control-L（如:^L）换页符作为空格；许多工具将这些符号作为分页符，因此你可以使用这些符号来分页或者区分文件中的相关区域。注意，一些编辑器和基于web的代码预览器可能不会将control-L识别为分页符，而是显示成其他符号。\n\n### 2.5 源文件编码(Source File Encoding)\n\nPython核心发行版中的代码应该一直使用UTF-8（Python 2中使用ASCII）。\n\n使用ASCII（Python 2）或者UTF-8（Python 3）的文件不应该添加编码声明。\n\n在标准库中，只有用作测试目的，或者注释或文档字符串需要提及作者名字而不得不使用非ASCII字符时，才能使用非默认的编码。否则，在字符串文字中包括非ASCII数据时，推荐使用\\x, \\u, \\U或\\N等转义符。\n\n对于Python 3.0及其以后的版本中，标准库遵循以下原则（参见PEP 3131）：Python标准库中的所有标识符都必须只采用ASCII编码的标识符，在可行的条件下也应当使用英文词（很多情况下，使用的缩写和技术术语词都不是英文）。此外，字符串文字和注释应该只包括ASCII编码。只有两种例外：\n\n(a) 测试情况下为了测试非ASCII编码的特性\n\n(b) 作者名字。作者名字不是由拉丁字母组成的也必须提供一个拉丁音译名。\n\n鼓励具有全球受众的开放源码项目采用类似的原则。\n\n### 2.6 模块引用(Imports)\n\nImports应该分行写，而不是都写在一行，例如：\n\n    # 分开写\n    import os\n    import sys\n    \n    # 不要像下面一样写在一行\n    import sys, os\n    \n这样写也是可以的：\n\n    from subprocess import Popen, PIPE\n    \nImports应该写在代码文件的开头，位于模块(module)注释和文档字符串(docstring)之后，模块全局变量(globals)和常量(constants)声明之前。\n    \nImports应该按照下面的顺序分组来写：\n\n1. 标准库imports\n2. 相关第三方imports\n3. 本地应用/库的特定imports\n\n如：\n\n    import re\n    from lxml import etree\n    from ak_spider.common.mongo_models import *\n    from ak_spider.settings import CAPTCHA_SERVER, AK_PROXY_SERVER, logger\n\n不同组的imports之前用空格隔开。\n\n推荐使用绝对(absolute)imports，因为这样通常更易读，在import系统没有正确配置（比如中的路径以sys.path结束）的情况下，也会有更好的表现（或者至少会给出错误信息）：\n    \n    import mypkg.sibling\n    from mypkg import sibling\n    from mypkg.sibling import example\n    \n然而，除了绝对imports，显式的相对imports也是一种可以接受的替代方式。特别是当处理复杂的包布局(package layouts)时，采用绝对imports会显得啰嗦。\n    \n    from . import sibling\n    from .sibling import example\n    \n标准库代码应当一直使用绝对imports，避免复杂的包布局。\n\n隐式的相对imports应该永不使用，并且Python 3中已经被去掉了\n\n当从一个包括类的模块中import一个类时，通常可以这样写：\n\n    from myclass import MyClass\n    from foo.bar.yourclass import YourClass\n    \n如果和本地命名的拼写产生了冲突，应当直接import模块：\n\n    import myclass\n    import foo.bar.yourclass\n    \n然后使用”myclass.MyClass”和”foo.bar.yourclass.YourClass”。\n\n避免使用通配符imports(from <module> import *)，因为会造成在当前命名空间出现的命名含义不清晰，给读者和许多自动化工具造成困扰。有一个可以正当使用通配符import的情形，即将一个内部接口重新发布成公共API的一部分（比如，使用备选的加速模块中的定义去覆盖纯Python实现的接口，预先无法知晓具体哪些定义将被覆盖）。\n\n当使用这种方式重新发布命名时，指南后面关于公共和内部接口的部分仍然适用。\n\n### 2.7 模块级的双下划线命名(Module level dunder names)\n\n模块中的“双下滑线”（变量名以两个下划线开头，两个下划线结尾）变量，比如__all__，__author，__version__等，应该写在文档字符串(docstring)之后，除了form __future__引用(imports)的任何其它类型的引用语句之前。Python要求模块中__future__的导入必须出现在除文档字符串(docstring)之外的任何其他代码之前。\n    \n例如：\n\n    \"\"\"This is the example module.\n    \n    This module does stuff.\n    \"\"\"\n    \n    from __future__ import barry_as_FLUFL\n    \n    __all__ = ['a', 'b', 'c']\n    __version__ = '0.1'\n    __author__ = 'Cardinal Biggles'\n    \n    import os\n    import sys\n    \n##  3 字符串引用(String Quotes)\n\n在Python中表示字符串时，不管用单引号还是双引号都是一样的。但是不推荐将这两种方式看作一样并且混用。最好选择一种规则并坚持使用。当字符串中包含单引号时，采用双引号来表示字符串，反之也是一样，这样可以避免使用反斜杠，代码也更易读。\n\n对于三引号表示的字符串，使用双引号字符来表示(即用\"\"\"而不是''')。\n    \n## 4 表达式和语句中的空格(Whitespace In Expressions And Statements)\n\n    \n### 4.1 一些痛点(Pet Peeves)\n\n在下列情形中避免使用过多的空白：\n    \n方括号，圆括号和花括号之后：\n\n    #正确的例子:\n    spam(ham[1], {eggs: 2})\n    \n    #错误的例子：\n    spam( ham[ 1 ], { eggs: 2 } )\n    \n逗号，分号或冒号之前：\n\n    #正确的例子:\n    if x == 4: print x, y; x, y = y, x\n    \n    #错误的例子:\n    if x == 4 : print x , y ; x , y = y , x\n    \n不过，在切片操作时，冒号和二元运算符是一样的，应该在其左右两边保留相同数量的空格（就像对待优先级最低的运算符一样）。在扩展切片操作中，所有冒号的左右两边空格数都应该相等。不过也有例外，当切片操作中的参数被省略时，应该也忽略空格。\n\n    #正确的例子:\n    ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\n    ham[lower:upper], ham[lower:upper:], ham[lower::step]\n    ham[lower+offset : upper+offset]\n    ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\n    ham[lower + offset : upper + offset]\n    \n    #错误的例子:\n    ham[lower + offset:upper + offset]\n    ham[1: 9], ham[1 :9], ham[1:9 :3]\n    ham[lower : : upper]\n    ham[ : upper]\n    \n在调用函数时传递参数list的括号之前：\n\n    #正确的例子:\n    spam(1)\n    \n    #错误的例子:\n    pam (1)\n\n在索引和切片操作的左括号之前：\n\n    #正确的例子:\n    dct['key'] = lst[index]\n    \n    #错误的例子:\n    dct ['key'] = lst [index]\n    \n赋值(或其他)运算符周围使用多个空格来和其他语句对齐：\n\n    #正确的例子:\n    x = 1\n    y = 2\n    long_variable = 3\n    \n    #错误的例子:\n    x             = 1\n    y             = 2\n    long_variable = 3\n    \n### 4.2 其他建议(Other Recommendations)\n\n避免任何行末的空格。因为它通常是不可见的，它可能会令人困惑：例如反斜杠后跟空格和换行符不会作为续行标记。一些编辑器会自动去除行末空格，许多项目（如CPython本身）都有提交前的预处理钩子来自动去除行末空格。\n\n在二元运算符的两边都使用一个空格：赋值运算符(=)，增量赋值运算符(+=, -= etc.)，比较运算符(==, <, >, !=, <>, <=, >=, in, not in, is, is not)，布尔运算符(and, or, not)。\n    \n如果使用了优先级不同的运算符，则在优先级较低的操作符周围增加空白。请你自行判断，不过永远不要用超过1个空格，永远保持二元运算符两侧的空白数量一样。\n    \n    #正确的例子:\n    i = i + 1\n    submitted += 1\n    x = x*2 - 1\n    hypot2 = x*x + y*y\n    c = (a+b) * (a-b)\n    \n    #错误的例子:\n    i=i+1\n    submitted +=1\n    x = x * 2 - 1\n    hypot2 = x * x + y * y\n    c = (a + b) * (a - b)    \n\n使用=符号来表示关键字参数或参数默认值时，不要在其周围使用空格。\n\n    #正确的例子:\n    def complex(real, imag=0.0):\n    return magic(r=real, i=imag)\n    \n    #错误的例子:\n    def complex(real, imag = 0.0):\n    return magic(r = real, i = imag)\n\n函数注解中的:也遵循一般的:加空格的规则，在->两侧各使用一个空格。\n\n    #正确的例子:\n    def munge(input: AnyStr): ...\n    def munge() -> AnyStr: ...\n    \n    #错误的例子:\n    def munge(input:AnyStr): ...\n    def munge()->PosInt: ...\n    \n在组合使用函数注解和参数默认值时，需要在=两侧各使用一个空格（只有当这个参数既有函数注解，又有默认值的时候）。\n\n    #正确的例子:\n    def munge(sep: AnyStr = None): ...\n    def munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...\n    \n    #错误的例子:\n    def munge(input: AnyStr=None): ...\n    def munge(input: AnyStr, limit = 1000): ...\n    \n复合语句（即将多行语句写在一行）一般是不鼓励使用的。\n\n    #正确的例子:\n    if foo == 'blah':\n    do_blah_thing()\n    do_one()\n    do_two()\n    do_three()\n    \n    #最好不要这样:\n    if foo == 'blah': do_blah_thing()\n    do_one(); do_two(); do_three()\n    \n有时也可以将短小的if/for/while中的语句写在一行，但对于有多个分句的语句永远不要这样做。也要避免将多行都写在一起。\n    \n    #最好不要这样：\n    if foo == 'blah': do_blah_thing()\n    for x in lst: total += x\n    while t < 10: t = delay()\n    \n    #绝对不要这样：\n    if foo == 'blah': do_blah_thing()\n    else: do_non_blah_thing()\n    \n    try: something()\n    finally: cleanup()\n    \n    do_one(); do_two(); do_three(long, argument,\n    list, like, this)\n    \n    if foo == 'blah': one(); two(); three()\n    \n## 5 何时在末尾加逗号(When to use trailing commas)\n    \n末尾逗号通常是可选的，除非在定义单元素元组(tuple)时是必需的（而且在Python 2中，它们具有print语句的语义）。为了清楚起见，建议使用括号（技术上来说是冗余的）括起来。\n    \n    #正确的例子:\n    FILES = ('setup.cfg',)\n    \n    #也正确，但令人困惑:\n    FILES = 'setup.cfg',\n    \n当使用版本控制系统时，在将来有可能扩展的列表末尾添加冗余的逗号是有好处的。具体的做法是将每一个元素写在单独的一行，并在行尾添加逗号，右括号单独占一行。但是，与有括号在同一行的末尾元素后面加逗号是没有意义的（上述的单元素元组除外）。\n\n    #正确的例子:\n    FILES = [\n        'setup.cfg',\n        'tox.ini',\n        ]\n    initialize(FILES,\n               error=True,\n               )\n    \n    #错误的例子:\n    FILES = ['setup.cfg', 'tox.ini',]\n    initialize(FILES, error=True,)\n    \n## 6 注释(Comments)\n\n和代码矛盾的注释还不如没有。当代码有改动时，一定要优先更改注释使其保持最新。\n\n注释应该是完整的多个句子。如果注释是一个短语或一个句子，其首字母应该大写，除非开头是一个以小写字母开头的标识符（永远不要更改标识符的大小写）。\n\n如果注释很短，结束的句号可以被忽略。块注释通常由一段或几段完整的句子组成，每个句子都应该以句号结束。\n\n你应该在句尾的句号后再加上2个空格。\n\n使用英文写作，参考Strunk和White的《The Elements of Style》\n\n来自非英语国家的Python程序员们，请使用英文来写注释，除非你120%确定你的代码永远不会被不懂你所用语言的人阅读到。\n\n### 6.1 块注释（Block Comments）\n\n块注释一般写在对应代码之前，并且和对应代码有同样的缩进级别。块注释的每一行都应该以#和一个空格开头（除非该文本是在注释内缩进对齐的）。\n\n块注释中的段落应该用只含有单个#的一行隔开。\n\n### 6.2 行内注释（Inline Comments）\n\n尽量少用行内注释。\n\n行内注释是和代码语句写在一行内的注释。行内注释应该至少和代码语句之间有两个空格的间隔，并且以#和一个空格开始。\n\n行内注释通常不是必要的，在代码含义很明显时甚至会让人分心。请不要这样做：\n\n    x = x + 1                 # x自加\n\n但这样做是有用的：\n\n    x = x + 1                 # 边界补偿\n\n### 6.3 文档字符串(Documentation Strings)\n\n要知道如何写出好的文档字符串（docstring），请参考PEP 257\n\n所有的公共模块，函数，类和方法都应该有文档字符串。对于非公共方法，文档字符串不是必要的，但你应该留有注释说明该方法的功能，该注释应当出现在def的下一行。\n\nPEP 257描述了好的文档字符应该遵循的规则。其中最重要的是，多行文档字符串以单行\"\"\"结尾，不能有其他字符，例如：\n\n    \"\"\"Return a foobang\n    \n    Optional plotz says to frobnicate the bizbaz first.\n    \"\"\"\n\n对于仅有一行的文档字符串，结尾处的\"\"\"应该也写在这一行。\n\n## 7 命名约定（Naming Conventions）\n\nPython标准库的命名约定有一些混乱，因此我们永远都无法保持一致。但如今仍然存在一些推荐的命名标准。新的模块和包（包括第三方框架）应该采用这些标准，但若是已经存在的包有另一套风格的话，还是应当与原有的风格保持内部一致。\n\n### 7.1 首要原则（Overriding Principle）\n\n对于用户可见的公共部分API，其命名应当表达出功能用途而不是其具体的实现细节。\n\n### 7.2 描述：命名风格（Descriptive: Naming Styles）\n\n存在很多不同的命名风格，最好能够独立地从命名对象的用途认出采用了哪种命名风格。\n\n通常区分以下命名样式：\n\n- b (单个小写字母)\n- B (单个大写字母)\n- lowercase(小写)\n- lower_case_with_underscores(带下划线小写)\n- UPPERCASE(大写)\n- UPPER_CASE_WITH_UNDERSCORES(带下划线大写)\n- CapitalizedWords (也叫做CapWords或者CamelCase – 因为单词首字母大写看起来很像驼峰)。也被称作StudlyCaps。注意：当CapWords里包含缩写时，将缩写部分的字母都大写。HTTPServerError比HttpServerError要好。\n- mixedCase (注意：和CapitalizedWords不同在于其首字母小写！)\n- Capitalized_Words_With_Underscores (这种风格超丑！)\n\n也有风格使用简短唯一的前缀来表示一组相关的命名。这在Python中并不常见，但为了完整起见这里也捎带提一下。比如，os.stat()函数返回一个tuple，其中的元素名原本为st_mode,st-size,st_mtime等等。（这样做是为了强调和POSIX系统调用结构之间的关系，可以让程序员更熟悉。）\n\nX11库中的公共函数名都以X开头。在Python中这样的风格一般被认为是不必要的，因为属性和方法名之前已经有了对象名的前缀，而函数名前也有了模块名的前缀。\n\n此外，要区别以下划线开始或结尾的特殊形式（可以和其它的规则结合起来）：\n\n_single_leading_underscore: 以单个下划线开头是”内部使用”的弱标志。 比如， from M import *不会import下划线开头的对象。\n\nsingle_trailing_underscore_: 以单个下划线结尾用来避免和Python关键词产生冲突，例如:\n            \n        Tkinter.Toplevel(master, class_='ClassName')\n\n__double_leading_underscore: 以双下划线开头的风格命名类属性表示触发命名修饰（在FooBar类中，__boo命名会被修饰成_FooBar__boo;）。\n\n### 7.3 规范：命名约定(Prescriptive: Naming Conventions)\n\n#### 7.3.1 需要避免的命名(Names To Avoid)\n\n不要使用字符’l’（L的小写的字母），’O’（o大写的字母），或者’I’（i的大写的字母）来作为单个字符的变量名。\n\n在一些字体中，这些字符和数字1和0无法区别开来。比如，当想使用’l’时，使用’L’代替。\n\n#### 7.3.2 ASCII兼容性(ASCII Compatibility)\n\n标准库中使用的标识符必须与ASCII兼容(参见PEP 3131中的[policy](https://www.python.org/dev/peps/pep-3131/#policy-specification)这一节) 。\n\n#### 7.3.3 包和模块命名(Package And Module Names)\n\n模块命名应短小，且为全小写。若下划线能提高可读性，也可以在模块名中使用。Python包命名也应该短小，且为全小写，但不应使用下划线。\n\n当使用C或C++写的扩展模块有相应的Python模块提供更高级的接口时（比如，更加面向对象），C/C++模块名以下划线开头（例如，_sociket）\n\n#### 7.3.4 类命名(Class Names)\n\n类命名应该使用驼峰（CapWords）的命名约定。\n\n当接口已有文档说明且主要是被用作调用时，也可以使用函数的命名约定。\n\n注意对于内建命名(builtin names)有一个特殊的约定：大部分内建名都是一个单词（或者两个一起使用的单词），驼峰(CapWords)的约定只对异常命名和内建常量使用。\n\n#### 7.3.5 类型变量命名(Type variable names)\n\nPEP 484中引入的类型变量名称通常应使用简短的驼峰命名: T，AnyStr，Num。 建议将后缀_co或_contra添加到用于声明相应的协变(covariant)和逆变(contravariant)的行为。例如：\n\n    from typing import TypeVar\n    \n    VT_co = TypeVar('VT_co', covariant=True)\n    KT_contra = TypeVar('KT_contra', contravariant=True)\n\n#### 7.3.6 异常命名(Exception Names)\n\n由于异常实际上也是类，因此类命名约定也适用与异常。不同的是，如果异常实际上是抛出错误的话，异常名前应该加上”Error”的前缀。\n\n#### 7.3.7 全局变量命名(Global Variable Names)\n\n（在此之前，我们先假定这些变量都仅在同一个模块内使用。）这些约定同样也适用于函数命名。\n\n对于引用方式设计为from M import *的模块，应该使用__all__机制来避免import全局变量，或者采用下划线前缀的旧约定来命名全局变量，从而表明这些变量是“模块非公开的”。\n\n#### 7.3.8 函数命名(Function Names)\n\n函数命名应该都是小写，必要时使用下划线来提高可读性。\n\n只有当已有代码风格已经是混合大小写时（比如threading.py），为了保留向后兼容性才使用混合大小写。\n\n#### 7.3.9 函数和方法参数(Function And Method Arguments)\n\n实例方法的第一参数永远都是self。\n\n类方法的第一个参数永远都是cls。\n\n在函数参数名和保留关键字冲突时，相对于使用缩写或拼写简化，使用以下划线结尾的命名一般更好。比如，class_比clss更好。（或许使用同义词避免这样的冲突是更好的方式。）\n\n#### 7.3.10 方法命名和实例变量(Method Names And Instance Variables)\n\n使用函数命名的规则：小写单词，必要时使用下划线分开以提高可读性。\n\n仅对于非公开方法和变量命名在开头使用一个下划线。\n\n避免和子类的命名冲突，使用两个下划线开头来触发Python的命名修饰机制。\n\nPython类名的命名修饰规则：如果类Foo有一个属性叫__a，不能使用Foo.__a的方式访问该变量。（有用户可能仍然坚持使用Foo._Foo__a的方法访问。）一般来说，两个下划线开头的命名方法仅用于避免与设计为子类的类中的属性名冲突。\n\n#### 7.3.11 常量(Constants)\n\n常量通常是在模块级别定义的，使用全部大写并用下划线将单词分开。如：MAX_OVERFLOW和TOTAL 。\n\n#### 7.3.12 继承的设计(Designing For Inheritance)\n\n记得永远区别类的方法和实例变量（属性）应该是公开的还是非公开的。如果有疑虑的话，请选择非公开的；因为之后将非公开属性变为公开属性要容易些。\n\n公开属性是那些你希望和你定义的类无关的客户来使用的，并且确保不会出现向后不兼容的问题。非公开属性是那些不希望被第三方使用的部分，你可以不用保证非公开属性不会变化或被移除。\n\n我们在这里没有使用“私有（private）”这个词，因为在Python里没有什么属性是真正私有的（这样设计省略了大量不必要的工作）。\n\n另一类属性属于子类API的一部分（在其他语言中经常被称为”protected”）。一些类是为继承设计的，要么扩展要么修改类的部分行为。当设计这样的类时，需要谨慎明确地决定哪些属性是公开的，哪些属于子类API，哪些真的只会被你的基类调用。\n\n请记住以上几点，下面是Python风格的指南：\n\n- 公开属性不应该有开头下划线。\n- 如果公开属性的名字和保留关键字有冲突，在你的属性名尾部加上一个下划线。这比采用缩写和简写更好。（然而，和这条规则冲突的是，‘cls’对任何变量和参数来说都是一个更好地拼写，因为大家都知道这表示class，特别是在类方法的第一个参数里。）\n- 对于简单的公共数据属性，最后仅公开属性名字，不要公开复杂的调用或设值方法。请记住，如果你发现一个简单的数据属性需要增加功能行为时，Python为功能增强提供了一个简单的途径。这种情况下，使用Properties注解将功能实现隐藏在简单数据属性访问语法之后。注意 1：Properties注解仅仅对新风格类有用。\n注意 2：尽量保证功能行为没有副作用，尽管缓存这种副作用看上去并没有什么大问题。\n注意 3: 对计算量大的运算避免试用properties；属性的注解会让调用者相信访问的运算量是相对较小的。\n- 如果你的类将被子类继承的话，你有一些属性并不想让子类访问，考虑将他们命名为两个下划线开头并且结尾处没有下划线。这样会触发Python命名修饰算法，类名会被修饰添加到属性名中。这样可以避免属性命名冲突，以免子类会不经意间包含相同的命名。注意 1：注意命名修饰仅仅是简单地将类名加入到修饰名中，所以如果子类有相同的类名合属性名，你可能仍然会遇到命名冲突问题。\n注意 2：命名修饰可以有特定用途，比如在调试时，\\_\\_getattr\\_\\_()比较不方便。然而命名修饰算法的可以很好地记录，并且容意手动执行。\n注意 3：不是所有人都喜欢命名修饰。需要试着去平衡避免偶然命名冲突的需求和高级调用者使用的潜在可能性。\n\n### 7.4 公开和内部接口(Public And Internal Interfaces)\n\n任何向后兼容性保证仅对公开接口适用。相应地，用户能够清楚分辨公开接口和内部接口是很重要的。\n\n文档化的接口被认为是公开的，除非文档中明确申明了它们是临时的或者内部接口，不保证向后兼容性。所有文档中未提到的接口应该被认为是内部的。\n\n为了更好审视公开接口和内部接口，模块应该在__all属性中明确申明公开API是哪些。将__all__设为空list表示该模块中没有公开API。\n\n即使正确设置了__all属性，内部接口（包，模块，类，函数，属性或其他命名）也应该以一个下划线开头。\n\n如果接口的任一一个命名空间（包，模块或类）是内部的，那么该接口也应该是内部的\n\n引用的命名应该永远被认为是实现细节。其他模块不应当依赖这些非直接访问的引用命名，除非它们在文档中明确地被写为模块的API，例如os.path或者包的__init__模块，那些从子模块展现的功能。\n\n## 8 编程建议(Programming Recommendations)\n\n1 代码应该以不影响其他Python实现（PyPy，Jython，IronPython，Cython，Psyco等）的方式编写。\n\n例如，不要依赖于 CPython 在字符串拼接时的优化实现，像这种语句形式a += b和a = a + b。即使是 CPython（仅对某些类型起作用） 这种优化也是脆弱的，不是在所有的实现中都不使用引用计数。在库中性能敏感的部分，用''.join形式来代替。这会确保在所有不同的实现中字符串拼接是线性时间的。\n\n2 与单例作比较，像None应该用is或is not，从不使用==操作符。\n\n同样的，当心if x is not None这样的写法，你是不知真的要判断x不是None。例如，测试一个默认值为None的变量或参数是否设置成了其它值，其它值有可能是某种特殊类型（如容器），这种特殊类型在逻辑运算时其值会被当作Flase来看待。\n\n用is not操作符而不是not ... is。虽然这两个表达式是功能相同的，前一个是更可读的，是首选。\n\n推荐的写法:\n\n    if foo is not None:\n    \n不推荐的写法:\n\n    if not foo is None:\n\n3 用富比较实现排序操作的时候，最好实现所有六个比较操作符（ \\_\\_eq__ 、 \\_\\_ne__ 、 \\_\\_lt__ , \\_\\_le__ , \\_\\_gt__ , \\_\\_ge__），而不是依靠其他代码来进行特定比较。\n\n为了最大限度的减少工作量，functools.total_ordering()装饰器提供了一个工具去生成缺少的比较方法。\n\nPEP 207 说明了 Python 假定的所有反射规则。因此，解释器可能使用y > x替换x < y，使用y >= x替换x <= y，也可能交换x == y和x != y的操作数。sort()和min()操作肯定会使用<操作符，max()函数肯定会使用>操作符。当然，最好是六个操作符都实现，以便在其他情况下不会出现混淆。\n\n4 始终使用def语句来代替直接绑定了一个lambda表达式的赋值语句。\n\n推荐的写法:\n\n    def f(x): return 2*x\n\n不推荐的写法:\n\n    f = lambda x: 2*x\n\n第一个表单意味着生成的函数对象的名称是'f'而不是通用的'<lambda>'。通常这对异常追踪和字符串表述是更有用的。使用赋值语句消除了使用lambda表达式可以提供，而一个显式的def语句不能提供的唯一好处，如，lambda能镶嵌在一个很长的表达式里。\n\n5 异常类应派生自Exception而不是BaseException。直接继承BaseException是为Exception保留的，从BaseException继承并捕获异常这种做法几乎总是错的。\n\n设计异常的层次结构，应基于那些可能出现异常的代码，而不是引发异常的位置。编码的时候，以回答“出了什么问题？”为目标，而不是仅仅指出“这里出现了问题”（见 PEP 3151 一个内建异常结构层次的例子）。\n\n类的命名约定适用于异常，如果异常类是一个错误，你应该给异常类加一个后缀Error。用于非本地流程控制或者其他形式的信号的非错误异常不需要一个特殊的后缀。\n\n6 适当的使用异常链。在 Python 3 里，应该使用raise X from Y来指示显式替换，而不会丢失原始的追溯。\n\n当有意替换一个内部的异常时（在 Python 2 用raise X，Python 3.3+ 用raise X from None），请确保将相关详细信息转移到新异常中（例如，将KeyError转换为AttributeError时保留属性名称，或将原始异常的文本嵌入到新的异常消息中）。\n\n7 在 Python 2 里抛出异常时，用raise ValueError('message')代替旧式的raise ValueError, 'message'。\n\n在 Python 3 之后的语法里，旧式的异常抛出方式是非法的。\n\n使用括号形式的异常意味着，当你传给异常的参数过长或者包含字符串格式化时，你就不需要使用续行符了，这要感谢括号！\n\n8 捕获异常时，尽可能使用明确的异常，而不是用一个空的except:语句。\n\n例如，用：\n\n    try:\n        import platform_specific_module\n    except ImportError:\n        platform_specific_module = None\n\n一个空的except:语句将会捕获到SystemExit和KeyboardInterrupt异常，很难区分程序的中断到底是Ctrl+C还是其他问题引起的。如果你想捕获程序的所有错误，使用except Exception:(空except:等同于except BaseException)。\n\n一个好的经验是限制使用空except语句，除了这两种情况：\n\n- 如果异常处理程序会打印出或者记录回溯信息；至少用户意识到错误的存在。\n- 如果代码需要做一些清理工作，但后面用raise向上抛出异常。try .. finally是处理这种情况更好的方式。\n\n9 绑定异常给一个名字时，最好使用 Python 2.6 里添加的明确的名字绑定语法：\n\n    try:\n        process_data()\n    except Exception as exc:\n        raise DataProcessingFailedError(str(exc))\n\nPython 3 只支持这种语法，避免与基于逗号的旧式语法产生二义性。\n\n10 捕获操作系统错误时，最好使用 Python 3.3 里引进的明确的异常结构层次，而不是内省的errno值。\n\n11 另外，对于所有try / except子句，将try子句限制为必需的绝对最小代码量。同样，这样可以避免屏蔽错误。\n\n推荐的写法：\n\n    try:\n        value = collection[key]\n    except KeyError:\n        return key_not_found(key)\n    else:\n        return handle_value(value)\n        \n不推荐的写法：\n\n    try:\n        # Too broad!\n        return handle_value(collection[key])\n    except KeyError:\n        # Will also catch KeyError raised by handle_value()\n        return key_not_found(key)\n\n12 当某个资源仅被特定代码段使用，用with语句确保其在使用后被立即干净的清除了，try/finally也是也接受的。\n\n13 当它们做一些除了获取和释放资源之外的事的时候，上下文管理器应该通过单独的函数或方法调用。例如：\n\n推荐的写法:\n\n    with conn.begin_transaction():\n        do_stuff_in_transaction(conn)\n\n不推荐的写法：\n\n    with conn:\n        do_stuff_in_transaction(conn)\n\n第二个例子没有提供任何信息来表明__enter__和__exit__方法在完成一个事务后做了一些除了关闭连接以外的其它事。在这种情况下明确是很重要的。\n\n14 坚持使用return语句。函数内的return语句都应该返回一个表达式，或者None。如果一个return语句返回一个表达式，另一个没有返回值的应该用return None清晰的说明，并且在一个函数的结尾应该明确使用一个return语句（如果有返回值的话）。\n\n推荐的写法：\n\n    def foo(x):\n        if x >= 0:\n            return math.sqrt(x)\n        else:\n            return None\n    \n    def bar(x):\n        if x < 0:\n            return None\n        return math.sqrt(x)\n        \n不推荐的写法：\n\n    def foo(x):\n        if x >= 0:\n            return math.sqrt(x)\n    \n    def bar(x):\n        if x < 0:\n            return\n        return math.sqrt(x)\n\n15 用字符串方法代替字符串模块。\n\n字符串方法总是快得多，并且与unicode字符串共享相同的API。如果需要与2.0以下的Python的向后兼容，则覆盖此规则。\n\n16 用''.startswith()和''.endswith()代替字符串切片来检查前缀和后缀。\n\nstartswith()和endswith()是更简洁的，不容易出错的。例如：\n\n    #推荐的写法：\n    if foo.startswith('bar'):\n    \n    #不推荐的写法：\n    if foo[:3] == 'bar':\n\n17 对象类型的比较应该始终使用isinstance()而不是直接比较。\n\n    #推荐的写法：\n    if isinstance(obj, int):\n    \n    #不推荐的写法：\n    if type(obj) is type(1):\n\n当比较一个对象是不是字符串时，记住它有可能也是一个 unicode 字符串！在 Python 2 里面，str和unicode有一个公共的基类叫basestring，因此你可以这样做：\n\n    if isinstance(obj, basestring):\n\n注意，在 Python 3 里面，unicode和basestring已经不存在了（只有str），byte对象不再是字符串的一种（被一个整数序列替代）。\n\n18 对于序列（字符串、列表、元组）来说，空的序列为False：\n\n正确的写法：\n\n    if not seq:\n    if seq:\n\n错误的写法：\n\n    if len(seq):\n    if not len(seq):\n    \n19 不要让字符串对尾随的空格有依赖。这样的尾随空格是视觉上无法区分的，一些编辑器（或者，reindent.py）会将其裁剪掉。\n\n20 不要用==比较True和False。\n\n    #推荐的写法：\n    if greeting:\n    \n    #不推荐的写法：\n    if greeting == True:\n    \n    #更加不推荐的写法：\n    if greeting is True:\n    ","slug":"pep8","published":1,"updated":"2022-03-13T11:49:16.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0zde0b8008a9jx3d7vs2zqd","content":"<h2 id=\"1-介绍-Introduction\"><a href=\"#1-介绍-Introduction\" class=\"headerlink\" title=\"1 介绍(Introduction)\"></a>1 介绍(Introduction)</h2><p>本文档给出了包含主要Python发行版中的标准库的Python代码的编码约定。<br>随着时间的推移，随着更多的约定被识别，过去的约定被语言本身的变化所淘汰，这种风格指南也在不断发展。</p><a id=\"more\"></a><h2 id=\"2-代码布局-Code-Lay-Out\"><a href=\"#2-代码布局-Code-Lay-Out\" class=\"headerlink\" title=\"2 代码布局(Code Lay-Out)\"></a>2 代码布局(Code Lay-Out)</h2><h3 id=\"2-1-缩进-Indentation\"><a href=\"#2-1-缩进-Indentation\" class=\"headerlink\" title=\"2.1 缩进(Indentation)\"></a>2.1 缩进(Indentation)</h3><p>每个缩进需要使用4个空格。</p><p>连续行所包装的元素应该要么采用Python隐式续行，即垂直对齐于圆括号、方括号和花括号，要么采用悬挂缩进。采用悬挂缩进时需考虑以下两点：第一行不应该包括参数，并且在续行中需要再缩进一级以便清楚表示。</p><p>正确的写法</p><pre><code># 同开始分界符(左括号)对齐\nfoo = long_function_name(var_one, var_two,\n                         var_three, var_four)\n\n# 续行多缩进一级以同其他代码区别\ndef long_function_name(\n        var_one, var_two, var_three,\n        var_four):\n    print(var_one)\n\n# 悬挂缩进需要多缩进一级\nfoo = long_function_name(\n    var_one, var_two,\n    var_three, var_four)</code></pre><p>错误的写法</p><pre><code># 采用悬挂缩进时第一行不应该有参数\nfoo = long_function_name(var_one, var_two,\n    var_three, var_four)\n\n# 续行并没有被区分开，因此需要再缩进一级\ndef long_function_name(\n    var_one, var_two, var_three,\n    var_four):\n    print(var_one)</code></pre><p>对于延续行，4个空格的规则是可选使用的。</p><p>同样可行的例子:</p><pre><code># 悬挂缩进可以不采用4空格的缩进方法。\nfoo = long_function_name(\n  var_one, var_two,\n  var_three, var_four)</code></pre><p>如果if语句太长，需要用多行书写，2个字符(例如,if)加上一个空格和一个左括号刚好是4空格的缩进，但这对多行条件语句的续行是没用的。因为这会和if语句中嵌套的其他的缩进的语句产生视觉上的冲突。这份PEP中并没有做出明确的说明应该怎样来区分条件语句和if语句中所嵌套的语句。以下几种方法都是可行的，但不仅仅只限于这几种方法：</p><pre><code># 不采用额外缩进\nif (this_is_one_thing and\n    that_is_another_thing):\n    do_something()\n\n# 增加一行注释，在编辑器中显示时能有所区分\n# supporting syntax highlighting.\nif (this_is_one_thing and\n    that_is_another_thing):\n    # Since both conditions are true, we can frobnicate.\n    do_something()\n\n# 在条件语句的续行增加一级缩进\nif (this_is_one_thing\n        and that_is_another_thing):\n    do_something()</code></pre><p>多行结束右圆/方/花括号可以单独一行书写，和上一行的缩进对齐：</p><pre><code>my_list = [\n    1, 2, 3,\n    4, 5, 6,\n    ]\nresult = some_function_that_takes_arguments(\n    &apos;a&apos;, &apos;b&apos;, &apos;c&apos;,\n    &apos;d&apos;, &apos;e&apos;, &apos;f&apos;,\n    )</code></pre><p>也可以和多行开始的第一行的第一个字符对齐：</p><pre><code>my_list = [\n    1, 2, 3,\n    4, 5, 6,\n]\nresult = some_function_that_takes_arguments(\n    &apos;a&apos;, &apos;b&apos;, &apos;c&apos;,\n    &apos;d&apos;, &apos;e&apos;, &apos;f&apos;,\n)</code></pre><p>Tab还是空格？(Tab Or Space?)</p><p>推荐使用空格来进行缩进。</p><p>Tab应该只在现有代码已经使用tab进行缩进的情况下使用，以便和现有代码保持一致。</p><p>Python 3不允许tab和空格混合使用。</p><p>Python 2的代码若有tab和空格混合使用的情况，应该把tab全部转换为只有空格。</p><h3 id=\"2-2-每行最大长度-Maximum-Line-Length\"><a href=\"#2-2-每行最大长度-Maximum-Line-Length\" class=\"headerlink\" title=\"2.2 每行最大长度(Maximum Line Length)\"></a>2.2 每行最大长度(Maximum Line Length)</h3><p>将所有行都限制在79个字符长度以内。</p><p>对于连续大段的文字（比如文档字符串(docstring)或注释），其结构上的限制更少，这些行应该被限制在72个字符长度内。</p><p>限制编辑器的窗口宽度能让好几个文件同时打开在屏幕上显示，在使用代码评审(code review)工具时在两个相邻窗口显示两个版本的代码效果很好。</p><p>很多工具的默认自动换行会破坏代码的结构，使代码更难以理解。在窗口大小设置为80个字符的编辑器中，即使在换行时编辑器可能会在最后一列放置一个记号，为避免自动换行也需要限制每行字符长度。一些基于web的工具可能根本没有自动换行的功能。</p><p>一些团队会强烈希望行长度比79个字符更长。当代码仅仅只由一个团队维护时，可以达成一致让行长度增加到80到100字符(实际上最大行长是99字符)，注释和文档字符串仍然是以72字符换行。</p><p>Python标准库比较传统，将行长限制在79个字符以内（文档字符串/注释为72个字符）。</p><p>一种推荐的换行方式是利用Python圆括号、方括号和花括号中的隐式续行。长行可以通过在括号内换行来分成多行。应该最好加上反斜杠来区别续行。</p><p>隐式续行</p><pre><code>a = (&apos;sdfaf&apos; \n    &apos;test&apos;)</code></pre><p>有时续行只能使用反斜杠。例如，较长的多个with语句不能采用隐式续行，只能接受反斜杠表示换行：</p><pre><code>with open(&apos;/path/to/some/file/you/want/to/read&apos;) as file_1, \\\n     open(&apos;/path/to/some/file/being/written&apos;, &apos;w&apos;) as file_2:\n    file_2.write(file_1.read())</code></pre><h3 id=\"2-3-二元运算符之前还是之后换行？-Should-a-line-break-before-or-after-a-binary-operator\"><a href=\"#2-3-二元运算符之前还是之后换行？-Should-a-line-break-before-or-after-a-binary-operator\" class=\"headerlink\" title=\"2.3 二元运算符之前还是之后换行？(Should a line break before or after a binary operator?)\"></a>2.3 二元运算符之前还是之后换行？(Should a line break before or after a binary operator?)</h3><p>长期以来一直推荐的风格是在二元运算符之后换行。但是这样会影响代码可读性，包括两个方面：一是运算符会分散在屏幕上的不同列上，二是每个运算符会留在前一行并远离操作数。所以，阅读代码的时候眼睛必须做更多的工作来确定哪些操作数被加，哪些操作数被减：</p><pre><code># 错误的例子：运算符远离操作数\nincome = (gross_wages +\n          taxable_interest +\n          (dividends - qualified_dividends) -\n          ira_deduction -\n          student_loan_interest)</code></pre><p>为了解决这个可读性问题，数学家及其出版商遵循相反的规定。Donald Knuth在他的“电脑和排版”系列中解释了传统的规则：“尽管在段落中的公式总是在二元运算符之后换行，但显示公式时总是在二元运算符之前换行”。</p><pre><code># 正确的例子：更容易匹配运算符与操作数\nincome = (gross_wages\n          + taxable_interest\n          + (dividends - qualified_dividends)\n          - ira_deduction\n          - student_loan_interest)</code></pre><p>在Python代码中，只要在统一项目中约定一致，就可以在二元运算符之前或之后换行。对于新编写的代码，建议使用Knuth的风格。</p><h3 id=\"2-4-空行-Blank-Line\"><a href=\"#2-4-空行-Blank-Line\" class=\"headerlink\" title=\"2.4 空行(Blank Line)\"></a>2.4 空行(Blank Line)</h3><p>使用2个空行来分隔最外层的函数(function)和类(class)定义。</p><p>使用1个空行来分隔类中的方法(method)定义。</p><p>可以使用额外的空行（尽量少）来分隔一组相关的函数。在一系列相关的仅占一行的函数之间，空行也可以被省略（比如一组虚函数定义）。</p><p>在函数内使用空行（尽量少）使代码逻辑更清晰。</p><p>例子：</p><pre><code>def func():\n\n\n    class A(object):\n        pass\n\n    def func1():\n        a = A()\n\n    def func2():\n        print(&apos;aaa&apos;)\n        print(&apos;bbb&apos;)</code></pre><p>Python支持control-L（如:^L）换页符作为空格；许多工具将这些符号作为分页符，因此你可以使用这些符号来分页或者区分文件中的相关区域。注意，一些编辑器和基于web的代码预览器可能不会将control-L识别为分页符，而是显示成其他符号。</p><h3 id=\"2-5-源文件编码-Source-File-Encoding\"><a href=\"#2-5-源文件编码-Source-File-Encoding\" class=\"headerlink\" title=\"2.5 源文件编码(Source File Encoding)\"></a>2.5 源文件编码(Source File Encoding)</h3><p>Python核心发行版中的代码应该一直使用UTF-8（Python 2中使用ASCII）。</p><p>使用ASCII（Python 2）或者UTF-8（Python 3）的文件不应该添加编码声明。</p><p>在标准库中，只有用作测试目的，或者注释或文档字符串需要提及作者名字而不得不使用非ASCII字符时，才能使用非默认的编码。否则，在字符串文字中包括非ASCII数据时，推荐使用\\x, \\u, \\U或\\N等转义符。</p><p>对于Python 3.0及其以后的版本中，标准库遵循以下原则（参见PEP 3131）：Python标准库中的所有标识符都必须只采用ASCII编码的标识符，在可行的条件下也应当使用英文词（很多情况下，使用的缩写和技术术语词都不是英文）。此外，字符串文字和注释应该只包括ASCII编码。只有两种例外：</p><p>(a) 测试情况下为了测试非ASCII编码的特性</p><p>(b) 作者名字。作者名字不是由拉丁字母组成的也必须提供一个拉丁音译名。</p><p>鼓励具有全球受众的开放源码项目采用类似的原则。</p><h3 id=\"2-6-模块引用-Imports\"><a href=\"#2-6-模块引用-Imports\" class=\"headerlink\" title=\"2.6 模块引用(Imports)\"></a>2.6 模块引用(Imports)</h3><p>Imports应该分行写，而不是都写在一行，例如：</p><pre><code># 分开写\nimport os\nimport sys\n\n# 不要像下面一样写在一行\nimport sys, os</code></pre><p>这样写也是可以的：</p><pre><code>from subprocess import Popen, PIPE</code></pre><p>Imports应该写在代码文件的开头，位于模块(module)注释和文档字符串(docstring)之后，模块全局变量(globals)和常量(constants)声明之前。</p><p>Imports应该按照下面的顺序分组来写：</p><ol><li>标准库imports</li><li>相关第三方imports</li><li>本地应用/库的特定imports</li></ol><p>如：</p><pre><code>import re\nfrom lxml import etree\nfrom ak_spider.common.mongo_models import *\nfrom ak_spider.settings import CAPTCHA_SERVER, AK_PROXY_SERVER, logger</code></pre><p>不同组的imports之前用空格隔开。</p><p>推荐使用绝对(absolute)imports，因为这样通常更易读，在import系统没有正确配置（比如中的路径以sys.path结束）的情况下，也会有更好的表现（或者至少会给出错误信息）：</p><pre><code>import mypkg.sibling\nfrom mypkg import sibling\nfrom mypkg.sibling import example</code></pre><p>然而，除了绝对imports，显式的相对imports也是一种可以接受的替代方式。特别是当处理复杂的包布局(package layouts)时，采用绝对imports会显得啰嗦。</p><pre><code>from . import sibling\nfrom .sibling import example</code></pre><p>标准库代码应当一直使用绝对imports，避免复杂的包布局。</p><p>隐式的相对imports应该永不使用，并且Python 3中已经被去掉了</p><p>当从一个包括类的模块中import一个类时，通常可以这样写：</p><pre><code>from myclass import MyClass\nfrom foo.bar.yourclass import YourClass</code></pre><p>如果和本地命名的拼写产生了冲突，应当直接import模块：</p><pre><code>import myclass\nimport foo.bar.yourclass</code></pre><p>然后使用”myclass.MyClass”和”foo.bar.yourclass.YourClass”。</p><p>避免使用通配符imports(from<module>import *)，因为会造成在当前命名空间出现的命名含义不清晰，给读者和许多自动化工具造成困扰。有一个可以正当使用通配符import的情形，即将一个内部接口重新发布成公共API的一部分（比如，使用备选的加速模块中的定义去覆盖纯Python实现的接口，预先无法知晓具体哪些定义将被覆盖）。</module></p><p>当使用这种方式重新发布命名时，指南后面关于公共和内部接口的部分仍然适用。</p><h3 id=\"2-7-模块级的双下划线命名-Module-level-dunder-names\"><a href=\"#2-7-模块级的双下划线命名-Module-level-dunder-names\" class=\"headerlink\" title=\"2.7 模块级的双下划线命名(Module level dunder names)\"></a>2.7 模块级的双下划线命名(Module level dunder names)</h3><p>模块中的“双下滑线”（变量名以两个下划线开头，两个下划线结尾）变量，比如<strong>all</strong>，<strong>author，</strong>version__等，应该写在文档字符串(docstring)之后，除了form <strong>future</strong>引用(imports)的任何其它类型的引用语句之前。Python要求模块中<strong>future</strong>的导入必须出现在除文档字符串(docstring)之外的任何其他代码之前。</p><p>例如：</p><pre><code>&quot;&quot;&quot;This is the example module.\n\nThis module does stuff.\n&quot;&quot;&quot;\n\nfrom __future__ import barry_as_FLUFL\n\n__all__ = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]\n__version__ = &apos;0.1&apos;\n__author__ = &apos;Cardinal Biggles&apos;\n\nimport os\nimport sys</code></pre><h2 id=\"3-字符串引用-String-Quotes\"><a href=\"#3-字符串引用-String-Quotes\" class=\"headerlink\" title=\"3 字符串引用(String Quotes)\"></a>3 字符串引用(String Quotes)</h2><p>在Python中表示字符串时，不管用单引号还是双引号都是一样的。但是不推荐将这两种方式看作一样并且混用。最好选择一种规则并坚持使用。当字符串中包含单引号时，采用双引号来表示字符串，反之也是一样，这样可以避免使用反斜杠，代码也更易读。</p><p>对于三引号表示的字符串，使用双引号字符来表示(即用”””而不是’’’)。</p><h2 id=\"4-表达式和语句中的空格-Whitespace-In-Expressions-And-Statements\"><a href=\"#4-表达式和语句中的空格-Whitespace-In-Expressions-And-Statements\" class=\"headerlink\" title=\"4 表达式和语句中的空格(Whitespace In Expressions And Statements)\"></a>4 表达式和语句中的空格(Whitespace In Expressions And Statements)</h2><h3 id=\"4-1-一些痛点-Pet-Peeves\"><a href=\"#4-1-一些痛点-Pet-Peeves\" class=\"headerlink\" title=\"4.1 一些痛点(Pet Peeves)\"></a>4.1 一些痛点(Pet Peeves)</h3><p>在下列情形中避免使用过多的空白：</p><p>方括号，圆括号和花括号之后：</p><pre><code>#正确的例子:\nspam(ham[1], {eggs: 2})\n\n#错误的例子：\nspam( ham[ 1 ], { eggs: 2 } )</code></pre><p>逗号，分号或冒号之前：</p><pre><code>#正确的例子:\nif x == 4: print x, y; x, y = y, x\n\n#错误的例子:\nif x == 4 : print x , y ; x , y = y , x</code></pre><p>不过，在切片操作时，冒号和二元运算符是一样的，应该在其左右两边保留相同数量的空格（就像对待优先级最低的运算符一样）。在扩展切片操作中，所有冒号的左右两边空格数都应该相等。不过也有例外，当切片操作中的参数被省略时，应该也忽略空格。</p><pre><code>#正确的例子:\nham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\nham[lower:upper], ham[lower:upper:], ham[lower::step]\nham[lower+offset : upper+offset]\nham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\nham[lower + offset : upper + offset]\n\n#错误的例子:\nham[lower + offset:upper + offset]\nham[1: 9], ham[1 :9], ham[1:9 :3]\nham[lower : : upper]\nham[ : upper]</code></pre><p>在调用函数时传递参数list的括号之前：</p><pre><code>#正确的例子:\nspam(1)\n\n#错误的例子:\npam (1)</code></pre><p>在索引和切片操作的左括号之前：</p><pre><code>#正确的例子:\ndct[&apos;key&apos;] = lst[index]\n\n#错误的例子:\ndct [&apos;key&apos;] = lst [index]</code></pre><p>赋值(或其他)运算符周围使用多个空格来和其他语句对齐：</p><pre><code>#正确的例子:\nx = 1\ny = 2\nlong_variable = 3\n\n#错误的例子:\nx             = 1\ny             = 2\nlong_variable = 3</code></pre><h3 id=\"4-2-其他建议-Other-Recommendations\"><a href=\"#4-2-其他建议-Other-Recommendations\" class=\"headerlink\" title=\"4.2 其他建议(Other Recommendations)\"></a>4.2 其他建议(Other Recommendations)</h3><p>避免任何行末的空格。因为它通常是不可见的，它可能会令人困惑：例如反斜杠后跟空格和换行符不会作为续行标记。一些编辑器会自动去除行末空格，许多项目（如CPython本身）都有提交前的预处理钩子来自动去除行末空格。</p><p>在二元运算符的两边都使用一个空格：赋值运算符(=)，增量赋值运算符(+=, -= etc.)，比较运算符(==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not)，布尔运算符(and, or, not)。</p><p>如果使用了优先级不同的运算符，则在优先级较低的操作符周围增加空白。请你自行判断，不过永远不要用超过1个空格，永远保持二元运算符两侧的空白数量一样。</p><pre><code>#正确的例子:\ni = i + 1\nsubmitted += 1\nx = x*2 - 1\nhypot2 = x*x + y*y\nc = (a+b) * (a-b)\n\n#错误的例子:\ni=i+1\nsubmitted +=1\nx = x * 2 - 1\nhypot2 = x * x + y * y\nc = (a + b) * (a - b)    </code></pre><p>使用=符号来表示关键字参数或参数默认值时，不要在其周围使用空格。</p><pre><code>#正确的例子:\ndef complex(real, imag=0.0):\nreturn magic(r=real, i=imag)\n\n#错误的例子:\ndef complex(real, imag = 0.0):\nreturn magic(r = real, i = imag)</code></pre><p>函数注解中的:也遵循一般的:加空格的规则，在-&gt;两侧各使用一个空格。</p><pre><code>#正确的例子:\ndef munge(input: AnyStr): ...\ndef munge() -&gt; AnyStr: ...\n\n#错误的例子:\ndef munge(input:AnyStr): ...\ndef munge()-&gt;PosInt: ...</code></pre><p>在组合使用函数注解和参数默认值时，需要在=两侧各使用一个空格（只有当这个参数既有函数注解，又有默认值的时候）。</p><pre><code>#正确的例子:\ndef munge(sep: AnyStr = None): ...\ndef munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...\n\n#错误的例子:\ndef munge(input: AnyStr=None): ...\ndef munge(input: AnyStr, limit = 1000): ...</code></pre><p>复合语句（即将多行语句写在一行）一般是不鼓励使用的。</p><pre><code>#正确的例子:\nif foo == &apos;blah&apos;:\ndo_blah_thing()\ndo_one()\ndo_two()\ndo_three()\n\n#最好不要这样:\nif foo == &apos;blah&apos;: do_blah_thing()\ndo_one(); do_two(); do_three()</code></pre><p>有时也可以将短小的if/for/while中的语句写在一行，但对于有多个分句的语句永远不要这样做。也要避免将多行都写在一起。</p><pre><code>#最好不要这样：\nif foo == &apos;blah&apos;: do_blah_thing()\nfor x in lst: total += x\nwhile t &lt; 10: t = delay()\n\n#绝对不要这样：\nif foo == &apos;blah&apos;: do_blah_thing()\nelse: do_non_blah_thing()\n\ntry: something()\nfinally: cleanup()\n\ndo_one(); do_two(); do_three(long, argument,\nlist, like, this)\n\nif foo == &apos;blah&apos;: one(); two(); three()</code></pre><h2 id=\"5-何时在末尾加逗号-When-to-use-trailing-commas\"><a href=\"#5-何时在末尾加逗号-When-to-use-trailing-commas\" class=\"headerlink\" title=\"5 何时在末尾加逗号(When to use trailing commas)\"></a>5 何时在末尾加逗号(When to use trailing commas)</h2><p>末尾逗号通常是可选的，除非在定义单元素元组(tuple)时是必需的（而且在Python 2中，它们具有print语句的语义）。为了清楚起见，建议使用括号（技术上来说是冗余的）括起来。</p><pre><code>#正确的例子:\nFILES = (&apos;setup.cfg&apos;,)\n\n#也正确，但令人困惑:\nFILES = &apos;setup.cfg&apos;,</code></pre><p>当使用版本控制系统时，在将来有可能扩展的列表末尾添加冗余的逗号是有好处的。具体的做法是将每一个元素写在单独的一行，并在行尾添加逗号，右括号单独占一行。但是，与有括号在同一行的末尾元素后面加逗号是没有意义的（上述的单元素元组除外）。</p><pre><code>#正确的例子:\nFILES = [\n    &apos;setup.cfg&apos;,\n    &apos;tox.ini&apos;,\n    ]\ninitialize(FILES,\n           error=True,\n           )\n\n#错误的例子:\nFILES = [&apos;setup.cfg&apos;, &apos;tox.ini&apos;,]\ninitialize(FILES, error=True,)</code></pre><h2 id=\"6-注释-Comments\"><a href=\"#6-注释-Comments\" class=\"headerlink\" title=\"6 注释(Comments)\"></a>6 注释(Comments)</h2><p>和代码矛盾的注释还不如没有。当代码有改动时，一定要优先更改注释使其保持最新。</p><p>注释应该是完整的多个句子。如果注释是一个短语或一个句子，其首字母应该大写，除非开头是一个以小写字母开头的标识符（永远不要更改标识符的大小写）。</p><p>如果注释很短，结束的句号可以被忽略。块注释通常由一段或几段完整的句子组成，每个句子都应该以句号结束。</p><p>你应该在句尾的句号后再加上2个空格。</p><p>使用英文写作，参考Strunk和White的《The Elements of Style》</p><p>来自非英语国家的Python程序员们，请使用英文来写注释，除非你120%确定你的代码永远不会被不懂你所用语言的人阅读到。</p><h3 id=\"6-1-块注释（Block-Comments）\"><a href=\"#6-1-块注释（Block-Comments）\" class=\"headerlink\" title=\"6.1 块注释（Block Comments）\"></a>6.1 块注释（Block Comments）</h3><p>块注释一般写在对应代码之前，并且和对应代码有同样的缩进级别。块注释的每一行都应该以#和一个空格开头（除非该文本是在注释内缩进对齐的）。</p><p>块注释中的段落应该用只含有单个#的一行隔开。</p><h3 id=\"6-2-行内注释（Inline-Comments）\"><a href=\"#6-2-行内注释（Inline-Comments）\" class=\"headerlink\" title=\"6.2 行内注释（Inline Comments）\"></a>6.2 行内注释（Inline Comments）</h3><p>尽量少用行内注释。</p><p>行内注释是和代码语句写在一行内的注释。行内注释应该至少和代码语句之间有两个空格的间隔，并且以#和一个空格开始。</p><p>行内注释通常不是必要的，在代码含义很明显时甚至会让人分心。请不要这样做：</p><pre><code>x = x + 1                 # x自加</code></pre><p>但这样做是有用的：</p><pre><code>x = x + 1                 # 边界补偿</code></pre><h3 id=\"6-3-文档字符串-Documentation-Strings\"><a href=\"#6-3-文档字符串-Documentation-Strings\" class=\"headerlink\" title=\"6.3 文档字符串(Documentation Strings)\"></a>6.3 文档字符串(Documentation Strings)</h3><p>要知道如何写出好的文档字符串（docstring），请参考PEP 257</p><p>所有的公共模块，函数，类和方法都应该有文档字符串。对于非公共方法，文档字符串不是必要的，但你应该留有注释说明该方法的功能，该注释应当出现在def的下一行。</p><p>PEP 257描述了好的文档字符应该遵循的规则。其中最重要的是，多行文档字符串以单行”””结尾，不能有其他字符，例如：</p><pre><code>&quot;&quot;&quot;Return a foobang\n\nOptional plotz says to frobnicate the bizbaz first.\n&quot;&quot;&quot;</code></pre><p>对于仅有一行的文档字符串，结尾处的”””应该也写在这一行。</p><h2 id=\"7-命名约定（Naming-Conventions）\"><a href=\"#7-命名约定（Naming-Conventions）\" class=\"headerlink\" title=\"7 命名约定（Naming Conventions）\"></a>7 命名约定（Naming Conventions）</h2><p>Python标准库的命名约定有一些混乱，因此我们永远都无法保持一致。但如今仍然存在一些推荐的命名标准。新的模块和包（包括第三方框架）应该采用这些标准，但若是已经存在的包有另一套风格的话，还是应当与原有的风格保持内部一致。</p><h3 id=\"7-1-首要原则（Overriding-Principle）\"><a href=\"#7-1-首要原则（Overriding-Principle）\" class=\"headerlink\" title=\"7.1 首要原则（Overriding Principle）\"></a>7.1 首要原则（Overriding Principle）</h3><p>对于用户可见的公共部分API，其命名应当表达出功能用途而不是其具体的实现细节。</p><h3 id=\"7-2-描述：命名风格（Descriptive-Naming-Styles）\"><a href=\"#7-2-描述：命名风格（Descriptive-Naming-Styles）\" class=\"headerlink\" title=\"7.2 描述：命名风格（Descriptive: Naming Styles）\"></a>7.2 描述：命名风格（Descriptive: Naming Styles）</h3><p>存在很多不同的命名风格，最好能够独立地从命名对象的用途认出采用了哪种命名风格。</p><p>通常区分以下命名样式：</p><ul><li>b (单个小写字母)</li><li>B (单个大写字母)</li><li>lowercase(小写)</li><li>lower_case_with_underscores(带下划线小写)</li><li>UPPERCASE(大写)</li><li>UPPER_CASE_WITH_UNDERSCORES(带下划线大写)</li><li>CapitalizedWords (也叫做CapWords或者CamelCase – 因为单词首字母大写看起来很像驼峰)。也被称作StudlyCaps。注意：当CapWords里包含缩写时，将缩写部分的字母都大写。HTTPServerError比HttpServerError要好。</li><li>mixedCase (注意：和CapitalizedWords不同在于其首字母小写！)</li><li>Capitalized_Words_With_Underscores (这种风格超丑！)</li></ul><p>也有风格使用简短唯一的前缀来表示一组相关的命名。这在Python中并不常见，但为了完整起见这里也捎带提一下。比如，os.stat()函数返回一个tuple，其中的元素名原本为st_mode,st-size,st_mtime等等。（这样做是为了强调和POSIX系统调用结构之间的关系，可以让程序员更熟悉。）</p><p>X11库中的公共函数名都以X开头。在Python中这样的风格一般被认为是不必要的，因为属性和方法名之前已经有了对象名的前缀，而函数名前也有了模块名的前缀。</p><p>此外，要区别以下划线开始或结尾的特殊形式（可以和其它的规则结合起来）：</p><p>_single_leading_underscore: 以单个下划线开头是”内部使用”的弱标志。 比如， from M import *不会import下划线开头的对象。</p><p>single_trailing_underscore_: 以单个下划线结尾用来避免和Python关键词产生冲突，例如:</p><pre><code>Tkinter.Toplevel(master, class_=&apos;ClassName&apos;)</code></pre><p><strong>double_leading_underscore: 以双下划线开头的风格命名类属性表示触发命名修饰（在FooBar类中，</strong>boo命名会被修饰成_FooBar__boo;）。</p><h3 id=\"7-3-规范：命名约定-Prescriptive-Naming-Conventions\"><a href=\"#7-3-规范：命名约定-Prescriptive-Naming-Conventions\" class=\"headerlink\" title=\"7.3 规范：命名约定(Prescriptive: Naming Conventions)\"></a>7.3 规范：命名约定(Prescriptive: Naming Conventions)</h3><h4 id=\"7-3-1-需要避免的命名-Names-To-Avoid\"><a href=\"#7-3-1-需要避免的命名-Names-To-Avoid\" class=\"headerlink\" title=\"7.3.1 需要避免的命名(Names To Avoid)\"></a>7.3.1 需要避免的命名(Names To Avoid)</h4><p>不要使用字符’l’（L的小写的字母），’O’（o大写的字母），或者’I’（i的大写的字母）来作为单个字符的变量名。</p><p>在一些字体中，这些字符和数字1和0无法区别开来。比如，当想使用’l’时，使用’L’代替。</p><h4 id=\"7-3-2-ASCII兼容性-ASCII-Compatibility\"><a href=\"#7-3-2-ASCII兼容性-ASCII-Compatibility\" class=\"headerlink\" title=\"7.3.2 ASCII兼容性(ASCII Compatibility)\"></a>7.3.2 ASCII兼容性(ASCII Compatibility)</h4><p>标准库中使用的标识符必须与ASCII兼容(参见PEP 3131中的<a href=\"https://www.python.org/dev/peps/pep-3131/#policy-specification\" target=\"_blank\" rel=\"noopener\">policy</a>这一节) 。</p><h4 id=\"7-3-3-包和模块命名-Package-And-Module-Names\"><a href=\"#7-3-3-包和模块命名-Package-And-Module-Names\" class=\"headerlink\" title=\"7.3.3 包和模块命名(Package And Module Names)\"></a>7.3.3 包和模块命名(Package And Module Names)</h4><p>模块命名应短小，且为全小写。若下划线能提高可读性，也可以在模块名中使用。Python包命名也应该短小，且为全小写，但不应使用下划线。</p><p>当使用C或C++写的扩展模块有相应的Python模块提供更高级的接口时（比如，更加面向对象），C/C++模块名以下划线开头（例如，_sociket）</p><h4 id=\"7-3-4-类命名-Class-Names\"><a href=\"#7-3-4-类命名-Class-Names\" class=\"headerlink\" title=\"7.3.4 类命名(Class Names)\"></a>7.3.4 类命名(Class Names)</h4><p>类命名应该使用驼峰（CapWords）的命名约定。</p><p>当接口已有文档说明且主要是被用作调用时，也可以使用函数的命名约定。</p><p>注意对于内建命名(builtin names)有一个特殊的约定：大部分内建名都是一个单词（或者两个一起使用的单词），驼峰(CapWords)的约定只对异常命名和内建常量使用。</p><h4 id=\"7-3-5-类型变量命名-Type-variable-names\"><a href=\"#7-3-5-类型变量命名-Type-variable-names\" class=\"headerlink\" title=\"7.3.5 类型变量命名(Type variable names)\"></a>7.3.5 类型变量命名(Type variable names)</h4><p>PEP 484中引入的类型变量名称通常应使用简短的驼峰命名: T，AnyStr，Num。 建议将后缀_co或_contra添加到用于声明相应的协变(covariant)和逆变(contravariant)的行为。例如：</p><pre><code>from typing import TypeVar\n\nVT_co = TypeVar(&apos;VT_co&apos;, covariant=True)\nKT_contra = TypeVar(&apos;KT_contra&apos;, contravariant=True)</code></pre><h4 id=\"7-3-6-异常命名-Exception-Names\"><a href=\"#7-3-6-异常命名-Exception-Names\" class=\"headerlink\" title=\"7.3.6 异常命名(Exception Names)\"></a>7.3.6 异常命名(Exception Names)</h4><p>由于异常实际上也是类，因此类命名约定也适用与异常。不同的是，如果异常实际上是抛出错误的话，异常名前应该加上”Error”的前缀。</p><h4 id=\"7-3-7-全局变量命名-Global-Variable-Names\"><a href=\"#7-3-7-全局变量命名-Global-Variable-Names\" class=\"headerlink\" title=\"7.3.7 全局变量命名(Global Variable Names)\"></a>7.3.7 全局变量命名(Global Variable Names)</h4><p>（在此之前，我们先假定这些变量都仅在同一个模块内使用。）这些约定同样也适用于函数命名。</p><p>对于引用方式设计为from M import *的模块，应该使用<strong>all</strong>机制来避免import全局变量，或者采用下划线前缀的旧约定来命名全局变量，从而表明这些变量是“模块非公开的”。</p><h4 id=\"7-3-8-函数命名-Function-Names\"><a href=\"#7-3-8-函数命名-Function-Names\" class=\"headerlink\" title=\"7.3.8 函数命名(Function Names)\"></a>7.3.8 函数命名(Function Names)</h4><p>函数命名应该都是小写，必要时使用下划线来提高可读性。</p><p>只有当已有代码风格已经是混合大小写时（比如threading.py），为了保留向后兼容性才使用混合大小写。</p><h4 id=\"7-3-9-函数和方法参数-Function-And-Method-Arguments\"><a href=\"#7-3-9-函数和方法参数-Function-And-Method-Arguments\" class=\"headerlink\" title=\"7.3.9 函数和方法参数(Function And Method Arguments)\"></a>7.3.9 函数和方法参数(Function And Method Arguments)</h4><p>实例方法的第一参数永远都是self。</p><p>类方法的第一个参数永远都是cls。</p><p>在函数参数名和保留关键字冲突时，相对于使用缩写或拼写简化，使用以下划线结尾的命名一般更好。比如，class_比clss更好。（或许使用同义词避免这样的冲突是更好的方式。）</p><h4 id=\"7-3-10-方法命名和实例变量-Method-Names-And-Instance-Variables\"><a href=\"#7-3-10-方法命名和实例变量-Method-Names-And-Instance-Variables\" class=\"headerlink\" title=\"7.3.10 方法命名和实例变量(Method Names And Instance Variables)\"></a>7.3.10 方法命名和实例变量(Method Names And Instance Variables)</h4><p>使用函数命名的规则：小写单词，必要时使用下划线分开以提高可读性。</p><p>仅对于非公开方法和变量命名在开头使用一个下划线。</p><p>避免和子类的命名冲突，使用两个下划线开头来触发Python的命名修饰机制。</p><p>Python类名的命名修饰规则：如果类Foo有一个属性叫<strong>a，不能使用Foo.</strong>a的方式访问该变量。（有用户可能仍然坚持使用Foo._Foo__a的方法访问。）一般来说，两个下划线开头的命名方法仅用于避免与设计为子类的类中的属性名冲突。</p><h4 id=\"7-3-11-常量-Constants\"><a href=\"#7-3-11-常量-Constants\" class=\"headerlink\" title=\"7.3.11 常量(Constants)\"></a>7.3.11 常量(Constants)</h4><p>常量通常是在模块级别定义的，使用全部大写并用下划线将单词分开。如：MAX_OVERFLOW和TOTAL 。</p><h4 id=\"7-3-12-继承的设计-Designing-For-Inheritance\"><a href=\"#7-3-12-继承的设计-Designing-For-Inheritance\" class=\"headerlink\" title=\"7.3.12 继承的设计(Designing For Inheritance)\"></a>7.3.12 继承的设计(Designing For Inheritance)</h4><p>记得永远区别类的方法和实例变量（属性）应该是公开的还是非公开的。如果有疑虑的话，请选择非公开的；因为之后将非公开属性变为公开属性要容易些。</p><p>公开属性是那些你希望和你定义的类无关的客户来使用的，并且确保不会出现向后不兼容的问题。非公开属性是那些不希望被第三方使用的部分，你可以不用保证非公开属性不会变化或被移除。</p><p>我们在这里没有使用“私有（private）”这个词，因为在Python里没有什么属性是真正私有的（这样设计省略了大量不必要的工作）。</p><p>另一类属性属于子类API的一部分（在其他语言中经常被称为”protected”）。一些类是为继承设计的，要么扩展要么修改类的部分行为。当设计这样的类时，需要谨慎明确地决定哪些属性是公开的，哪些属于子类API，哪些真的只会被你的基类调用。</p><p>请记住以上几点，下面是Python风格的指南：</p><ul><li>公开属性不应该有开头下划线。</li><li>如果公开属性的名字和保留关键字有冲突，在你的属性名尾部加上一个下划线。这比采用缩写和简写更好。（然而，和这条规则冲突的是，‘cls’对任何变量和参数来说都是一个更好地拼写，因为大家都知道这表示class，特别是在类方法的第一个参数里。）</li><li>对于简单的公共数据属性，最后仅公开属性名字，不要公开复杂的调用或设值方法。请记住，如果你发现一个简单的数据属性需要增加功能行为时，Python为功能增强提供了一个简单的途径。这种情况下，使用Properties注解将功能实现隐藏在简单数据属性访问语法之后。注意 1：Properties注解仅仅对新风格类有用。<br>注意 2：尽量保证功能行为没有副作用，尽管缓存这种副作用看上去并没有什么大问题。<br>注意 3: 对计算量大的运算避免试用properties；属性的注解会让调用者相信访问的运算量是相对较小的。</li><li>如果你的类将被子类继承的话，你有一些属性并不想让子类访问，考虑将他们命名为两个下划线开头并且结尾处没有下划线。这样会触发Python命名修饰算法，类名会被修饰添加到属性名中。这样可以避免属性命名冲突，以免子类会不经意间包含相同的命名。注意 1：注意命名修饰仅仅是简单地将类名加入到修饰名中，所以如果子类有相同的类名合属性名，你可能仍然会遇到命名冲突问题。<br>注意 2：命名修饰可以有特定用途，比如在调试时，__getattr__()比较不方便。然而命名修饰算法的可以很好地记录，并且容意手动执行。<br>注意 3：不是所有人都喜欢命名修饰。需要试着去平衡避免偶然命名冲突的需求和高级调用者使用的潜在可能性。</li></ul><h3 id=\"7-4-公开和内部接口-Public-And-Internal-Interfaces\"><a href=\"#7-4-公开和内部接口-Public-And-Internal-Interfaces\" class=\"headerlink\" title=\"7.4 公开和内部接口(Public And Internal Interfaces)\"></a>7.4 公开和内部接口(Public And Internal Interfaces)</h3><p>任何向后兼容性保证仅对公开接口适用。相应地，用户能够清楚分辨公开接口和内部接口是很重要的。</p><p>文档化的接口被认为是公开的，除非文档中明确申明了它们是临时的或者内部接口，不保证向后兼容性。所有文档中未提到的接口应该被认为是内部的。</p><p>为了更好审视公开接口和内部接口，模块应该在<strong>all属性中明确申明公开API是哪些。将</strong>all__设为空list表示该模块中没有公开API。</p><p>即使正确设置了__all属性，内部接口（包，模块，类，函数，属性或其他命名）也应该以一个下划线开头。</p><p>如果接口的任一一个命名空间（包，模块或类）是内部的，那么该接口也应该是内部的</p><p>引用的命名应该永远被认为是实现细节。其他模块不应当依赖这些非直接访问的引用命名，除非它们在文档中明确地被写为模块的API，例如os.path或者包的<strong>init</strong>模块，那些从子模块展现的功能。</p><h2 id=\"8-编程建议-Programming-Recommendations\"><a href=\"#8-编程建议-Programming-Recommendations\" class=\"headerlink\" title=\"8 编程建议(Programming Recommendations)\"></a>8 编程建议(Programming Recommendations)</h2><p>1 代码应该以不影响其他Python实现（PyPy，Jython，IronPython，Cython，Psyco等）的方式编写。</p><p>例如，不要依赖于 CPython 在字符串拼接时的优化实现，像这种语句形式a += b和a = a + b。即使是 CPython（仅对某些类型起作用） 这种优化也是脆弱的，不是在所有的实现中都不使用引用计数。在库中性能敏感的部分，用’’.join形式来代替。这会确保在所有不同的实现中字符串拼接是线性时间的。</p><p>2 与单例作比较，像None应该用is或is not，从不使用==操作符。</p><p>同样的，当心if x is not None这样的写法，你是不知真的要判断x不是None。例如，测试一个默认值为None的变量或参数是否设置成了其它值，其它值有可能是某种特殊类型（如容器），这种特殊类型在逻辑运算时其值会被当作Flase来看待。</p><p>用is not操作符而不是not … is。虽然这两个表达式是功能相同的，前一个是更可读的，是首选。</p><p>推荐的写法:</p><pre><code>if foo is not None:</code></pre><p>不推荐的写法:</p><pre><code>if not foo is None:</code></pre><p>3 用富比较实现排序操作的时候，最好实现所有六个比较操作符（ __eq__ 、 __ne__ 、 __lt__ , __le__ , __gt__ , __ge__），而不是依靠其他代码来进行特定比较。</p><p>为了最大限度的减少工作量，functools.total_ordering()装饰器提供了一个工具去生成缺少的比较方法。</p><p>PEP 207 说明了 Python 假定的所有反射规则。因此，解释器可能使用y &gt; x替换x &lt; y，使用y &gt;= x替换x &lt;= y，也可能交换x == y和x != y的操作数。sort()和min()操作肯定会使用&lt;操作符，max()函数肯定会使用&gt;操作符。当然，最好是六个操作符都实现，以便在其他情况下不会出现混淆。</p><p>4 始终使用def语句来代替直接绑定了一个lambda表达式的赋值语句。</p><p>推荐的写法:</p><pre><code>def f(x): return 2*x</code></pre><p>不推荐的写法:</p><pre><code>f = lambda x: 2*x</code></pre><p>第一个表单意味着生成的函数对象的名称是’f’而不是通用的’<lambda>‘。通常这对异常追踪和字符串表述是更有用的。使用赋值语句消除了使用lambda表达式可以提供，而一个显式的def语句不能提供的唯一好处，如，lambda能镶嵌在一个很长的表达式里。</lambda></p><p>5 异常类应派生自Exception而不是BaseException。直接继承BaseException是为Exception保留的，从BaseException继承并捕获异常这种做法几乎总是错的。</p><p>设计异常的层次结构，应基于那些可能出现异常的代码，而不是引发异常的位置。编码的时候，以回答“出了什么问题？”为目标，而不是仅仅指出“这里出现了问题”（见 PEP 3151 一个内建异常结构层次的例子）。</p><p>类的命名约定适用于异常，如果异常类是一个错误，你应该给异常类加一个后缀Error。用于非本地流程控制或者其他形式的信号的非错误异常不需要一个特殊的后缀。</p><p>6 适当的使用异常链。在 Python 3 里，应该使用raise X from Y来指示显式替换，而不会丢失原始的追溯。</p><p>当有意替换一个内部的异常时（在 Python 2 用raise X，Python 3.3+ 用raise X from None），请确保将相关详细信息转移到新异常中（例如，将KeyError转换为AttributeError时保留属性名称，或将原始异常的文本嵌入到新的异常消息中）。</p><p>7 在 Python 2 里抛出异常时，用raise ValueError(‘message’)代替旧式的raise ValueError, ‘message’。</p><p>在 Python 3 之后的语法里，旧式的异常抛出方式是非法的。</p><p>使用括号形式的异常意味着，当你传给异常的参数过长或者包含字符串格式化时，你就不需要使用续行符了，这要感谢括号！</p><p>8 捕获异常时，尽可能使用明确的异常，而不是用一个空的except:语句。</p><p>例如，用：</p><pre><code>try:\n    import platform_specific_module\nexcept ImportError:\n    platform_specific_module = None</code></pre><p>一个空的except:语句将会捕获到SystemExit和KeyboardInterrupt异常，很难区分程序的中断到底是Ctrl+C还是其他问题引起的。如果你想捕获程序的所有错误，使用except Exception:(空except:等同于except BaseException)。</p><p>一个好的经验是限制使用空except语句，除了这两种情况：</p><ul><li>如果异常处理程序会打印出或者记录回溯信息；至少用户意识到错误的存在。</li><li>如果代码需要做一些清理工作，但后面用raise向上抛出异常。try .. finally是处理这种情况更好的方式。</li></ul><p>9 绑定异常给一个名字时，最好使用 Python 2.6 里添加的明确的名字绑定语法：</p><pre><code>try:\n    process_data()\nexcept Exception as exc:\n    raise DataProcessingFailedError(str(exc))</code></pre><p>Python 3 只支持这种语法，避免与基于逗号的旧式语法产生二义性。</p><p>10 捕获操作系统错误时，最好使用 Python 3.3 里引进的明确的异常结构层次，而不是内省的errno值。</p><p>11 另外，对于所有try / except子句，将try子句限制为必需的绝对最小代码量。同样，这样可以避免屏蔽错误。</p><p>推荐的写法：</p><pre><code>try:\n    value = collection[key]\nexcept KeyError:\n    return key_not_found(key)\nelse:\n    return handle_value(value)</code></pre><p>不推荐的写法：</p><pre><code>try:\n    # Too broad!\n    return handle_value(collection[key])\nexcept KeyError:\n    # Will also catch KeyError raised by handle_value()\n    return key_not_found(key)</code></pre><p>12 当某个资源仅被特定代码段使用，用with语句确保其在使用后被立即干净的清除了，try/finally也是也接受的。</p><p>13 当它们做一些除了获取和释放资源之外的事的时候，上下文管理器应该通过单独的函数或方法调用。例如：</p><p>推荐的写法:</p><pre><code>with conn.begin_transaction():\n    do_stuff_in_transaction(conn)</code></pre><p>不推荐的写法：</p><pre><code>with conn:\n    do_stuff_in_transaction(conn)</code></pre><p>第二个例子没有提供任何信息来表明<strong>enter</strong>和<strong>exit</strong>方法在完成一个事务后做了一些除了关闭连接以外的其它事。在这种情况下明确是很重要的。</p><p>14 坚持使用return语句。函数内的return语句都应该返回一个表达式，或者None。如果一个return语句返回一个表达式，另一个没有返回值的应该用return None清晰的说明，并且在一个函数的结尾应该明确使用一个return语句（如果有返回值的话）。</p><p>推荐的写法：</p><pre><code>def foo(x):\n    if x &gt;= 0:\n        return math.sqrt(x)\n    else:\n        return None\n\ndef bar(x):\n    if x &lt; 0:\n        return None\n    return math.sqrt(x)</code></pre><p>不推荐的写法：</p><pre><code>def foo(x):\n    if x &gt;= 0:\n        return math.sqrt(x)\n\ndef bar(x):\n    if x &lt; 0:\n        return\n    return math.sqrt(x)</code></pre><p>15 用字符串方法代替字符串模块。</p><p>字符串方法总是快得多，并且与unicode字符串共享相同的API。如果需要与2.0以下的Python的向后兼容，则覆盖此规则。</p><p>16 用’’.startswith()和’’.endswith()代替字符串切片来检查前缀和后缀。</p><p>startswith()和endswith()是更简洁的，不容易出错的。例如：</p><pre><code>#推荐的写法：\nif foo.startswith(&apos;bar&apos;):\n\n#不推荐的写法：\nif foo[:3] == &apos;bar&apos;:</code></pre><p>17 对象类型的比较应该始终使用isinstance()而不是直接比较。</p><pre><code>#推荐的写法：\nif isinstance(obj, int):\n\n#不推荐的写法：\nif type(obj) is type(1):</code></pre><p>当比较一个对象是不是字符串时，记住它有可能也是一个 unicode 字符串！在 Python 2 里面，str和unicode有一个公共的基类叫basestring，因此你可以这样做：</p><pre><code>if isinstance(obj, basestring):</code></pre><p>注意，在 Python 3 里面，unicode和basestring已经不存在了（只有str），byte对象不再是字符串的一种（被一个整数序列替代）。</p><p>18 对于序列（字符串、列表、元组）来说，空的序列为False：</p><p>正确的写法：</p><pre><code>if not seq:\nif seq:</code></pre><p>错误的写法：</p><pre><code>if len(seq):\nif not len(seq):</code></pre><p>19 不要让字符串对尾随的空格有依赖。这样的尾随空格是视觉上无法区分的，一些编辑器（或者，reindent.py）会将其裁剪掉。</p><p>20 不要用==比较True和False。</p><pre><code>#推荐的写法：\nif greeting:\n\n#不推荐的写法：\nif greeting == True:\n\n#更加不推荐的写法：\nif greeting is True:</code></pre>","site":{"data":{}},"excerpt":"<h2 id=\"1-介绍-Introduction\"><a href=\"#1-介绍-Introduction\" class=\"headerlink\" title=\"1 介绍(Introduction)\"></a>1 介绍(Introduction)</h2><p>本文档给出了包含主要Python发行版中的标准库的Python代码的编码约定。<br>随着时间的推移，随着更多的约定被识别，过去的约定被语言本身的变化所淘汰，这种风格指南也在不断发展。</p>","more":"<h2 id=\"2-代码布局-Code-Lay-Out\"><a href=\"#2-代码布局-Code-Lay-Out\" class=\"headerlink\" title=\"2 代码布局(Code Lay-Out)\"></a>2 代码布局(Code Lay-Out)</h2><h3 id=\"2-1-缩进-Indentation\"><a href=\"#2-1-缩进-Indentation\" class=\"headerlink\" title=\"2.1 缩进(Indentation)\"></a>2.1 缩进(Indentation)</h3><p>每个缩进需要使用4个空格。</p><p>连续行所包装的元素应该要么采用Python隐式续行，即垂直对齐于圆括号、方括号和花括号，要么采用悬挂缩进。采用悬挂缩进时需考虑以下两点：第一行不应该包括参数，并且在续行中需要再缩进一级以便清楚表示。</p><p>正确的写法</p><pre><code># 同开始分界符(左括号)对齐\nfoo = long_function_name(var_one, var_two,\n                         var_three, var_four)\n\n# 续行多缩进一级以同其他代码区别\ndef long_function_name(\n        var_one, var_two, var_three,\n        var_four):\n    print(var_one)\n\n# 悬挂缩进需要多缩进一级\nfoo = long_function_name(\n    var_one, var_two,\n    var_three, var_four)</code></pre><p>错误的写法</p><pre><code># 采用悬挂缩进时第一行不应该有参数\nfoo = long_function_name(var_one, var_two,\n    var_three, var_four)\n\n# 续行并没有被区分开，因此需要再缩进一级\ndef long_function_name(\n    var_one, var_two, var_three,\n    var_four):\n    print(var_one)</code></pre><p>对于延续行，4个空格的规则是可选使用的。</p><p>同样可行的例子:</p><pre><code># 悬挂缩进可以不采用4空格的缩进方法。\nfoo = long_function_name(\n  var_one, var_two,\n  var_three, var_four)</code></pre><p>如果if语句太长，需要用多行书写，2个字符(例如,if)加上一个空格和一个左括号刚好是4空格的缩进，但这对多行条件语句的续行是没用的。因为这会和if语句中嵌套的其他的缩进的语句产生视觉上的冲突。这份PEP中并没有做出明确的说明应该怎样来区分条件语句和if语句中所嵌套的语句。以下几种方法都是可行的，但不仅仅只限于这几种方法：</p><pre><code># 不采用额外缩进\nif (this_is_one_thing and\n    that_is_another_thing):\n    do_something()\n\n# 增加一行注释，在编辑器中显示时能有所区分\n# supporting syntax highlighting.\nif (this_is_one_thing and\n    that_is_another_thing):\n    # Since both conditions are true, we can frobnicate.\n    do_something()\n\n# 在条件语句的续行增加一级缩进\nif (this_is_one_thing\n        and that_is_another_thing):\n    do_something()</code></pre><p>多行结束右圆/方/花括号可以单独一行书写，和上一行的缩进对齐：</p><pre><code>my_list = [\n    1, 2, 3,\n    4, 5, 6,\n    ]\nresult = some_function_that_takes_arguments(\n    &apos;a&apos;, &apos;b&apos;, &apos;c&apos;,\n    &apos;d&apos;, &apos;e&apos;, &apos;f&apos;,\n    )</code></pre><p>也可以和多行开始的第一行的第一个字符对齐：</p><pre><code>my_list = [\n    1, 2, 3,\n    4, 5, 6,\n]\nresult = some_function_that_takes_arguments(\n    &apos;a&apos;, &apos;b&apos;, &apos;c&apos;,\n    &apos;d&apos;, &apos;e&apos;, &apos;f&apos;,\n)</code></pre><p>Tab还是空格？(Tab Or Space?)</p><p>推荐使用空格来进行缩进。</p><p>Tab应该只在现有代码已经使用tab进行缩进的情况下使用，以便和现有代码保持一致。</p><p>Python 3不允许tab和空格混合使用。</p><p>Python 2的代码若有tab和空格混合使用的情况，应该把tab全部转换为只有空格。</p><h3 id=\"2-2-每行最大长度-Maximum-Line-Length\"><a href=\"#2-2-每行最大长度-Maximum-Line-Length\" class=\"headerlink\" title=\"2.2 每行最大长度(Maximum Line Length)\"></a>2.2 每行最大长度(Maximum Line Length)</h3><p>将所有行都限制在79个字符长度以内。</p><p>对于连续大段的文字（比如文档字符串(docstring)或注释），其结构上的限制更少，这些行应该被限制在72个字符长度内。</p><p>限制编辑器的窗口宽度能让好几个文件同时打开在屏幕上显示，在使用代码评审(code review)工具时在两个相邻窗口显示两个版本的代码效果很好。</p><p>很多工具的默认自动换行会破坏代码的结构，使代码更难以理解。在窗口大小设置为80个字符的编辑器中，即使在换行时编辑器可能会在最后一列放置一个记号，为避免自动换行也需要限制每行字符长度。一些基于web的工具可能根本没有自动换行的功能。</p><p>一些团队会强烈希望行长度比79个字符更长。当代码仅仅只由一个团队维护时，可以达成一致让行长度增加到80到100字符(实际上最大行长是99字符)，注释和文档字符串仍然是以72字符换行。</p><p>Python标准库比较传统，将行长限制在79个字符以内（文档字符串/注释为72个字符）。</p><p>一种推荐的换行方式是利用Python圆括号、方括号和花括号中的隐式续行。长行可以通过在括号内换行来分成多行。应该最好加上反斜杠来区别续行。</p><p>隐式续行</p><pre><code>a = (&apos;sdfaf&apos; \n    &apos;test&apos;)</code></pre><p>有时续行只能使用反斜杠。例如，较长的多个with语句不能采用隐式续行，只能接受反斜杠表示换行：</p><pre><code>with open(&apos;/path/to/some/file/you/want/to/read&apos;) as file_1, \\\n     open(&apos;/path/to/some/file/being/written&apos;, &apos;w&apos;) as file_2:\n    file_2.write(file_1.read())</code></pre><h3 id=\"2-3-二元运算符之前还是之后换行？-Should-a-line-break-before-or-after-a-binary-operator\"><a href=\"#2-3-二元运算符之前还是之后换行？-Should-a-line-break-before-or-after-a-binary-operator\" class=\"headerlink\" title=\"2.3 二元运算符之前还是之后换行？(Should a line break before or after a binary operator?)\"></a>2.3 二元运算符之前还是之后换行？(Should a line break before or after a binary operator?)</h3><p>长期以来一直推荐的风格是在二元运算符之后换行。但是这样会影响代码可读性，包括两个方面：一是运算符会分散在屏幕上的不同列上，二是每个运算符会留在前一行并远离操作数。所以，阅读代码的时候眼睛必须做更多的工作来确定哪些操作数被加，哪些操作数被减：</p><pre><code># 错误的例子：运算符远离操作数\nincome = (gross_wages +\n          taxable_interest +\n          (dividends - qualified_dividends) -\n          ira_deduction -\n          student_loan_interest)</code></pre><p>为了解决这个可读性问题，数学家及其出版商遵循相反的规定。Donald Knuth在他的“电脑和排版”系列中解释了传统的规则：“尽管在段落中的公式总是在二元运算符之后换行，但显示公式时总是在二元运算符之前换行”。</p><pre><code># 正确的例子：更容易匹配运算符与操作数\nincome = (gross_wages\n          + taxable_interest\n          + (dividends - qualified_dividends)\n          - ira_deduction\n          - student_loan_interest)</code></pre><p>在Python代码中，只要在统一项目中约定一致，就可以在二元运算符之前或之后换行。对于新编写的代码，建议使用Knuth的风格。</p><h3 id=\"2-4-空行-Blank-Line\"><a href=\"#2-4-空行-Blank-Line\" class=\"headerlink\" title=\"2.4 空行(Blank Line)\"></a>2.4 空行(Blank Line)</h3><p>使用2个空行来分隔最外层的函数(function)和类(class)定义。</p><p>使用1个空行来分隔类中的方法(method)定义。</p><p>可以使用额外的空行（尽量少）来分隔一组相关的函数。在一系列相关的仅占一行的函数之间，空行也可以被省略（比如一组虚函数定义）。</p><p>在函数内使用空行（尽量少）使代码逻辑更清晰。</p><p>例子：</p><pre><code>def func():\n\n\n    class A(object):\n        pass\n\n    def func1():\n        a = A()\n\n    def func2():\n        print(&apos;aaa&apos;)\n        print(&apos;bbb&apos;)</code></pre><p>Python支持control-L（如:^L）换页符作为空格；许多工具将这些符号作为分页符，因此你可以使用这些符号来分页或者区分文件中的相关区域。注意，一些编辑器和基于web的代码预览器可能不会将control-L识别为分页符，而是显示成其他符号。</p><h3 id=\"2-5-源文件编码-Source-File-Encoding\"><a href=\"#2-5-源文件编码-Source-File-Encoding\" class=\"headerlink\" title=\"2.5 源文件编码(Source File Encoding)\"></a>2.5 源文件编码(Source File Encoding)</h3><p>Python核心发行版中的代码应该一直使用UTF-8（Python 2中使用ASCII）。</p><p>使用ASCII（Python 2）或者UTF-8（Python 3）的文件不应该添加编码声明。</p><p>在标准库中，只有用作测试目的，或者注释或文档字符串需要提及作者名字而不得不使用非ASCII字符时，才能使用非默认的编码。否则，在字符串文字中包括非ASCII数据时，推荐使用\\x, \\u, \\U或\\N等转义符。</p><p>对于Python 3.0及其以后的版本中，标准库遵循以下原则（参见PEP 3131）：Python标准库中的所有标识符都必须只采用ASCII编码的标识符，在可行的条件下也应当使用英文词（很多情况下，使用的缩写和技术术语词都不是英文）。此外，字符串文字和注释应该只包括ASCII编码。只有两种例外：</p><p>(a) 测试情况下为了测试非ASCII编码的特性</p><p>(b) 作者名字。作者名字不是由拉丁字母组成的也必须提供一个拉丁音译名。</p><p>鼓励具有全球受众的开放源码项目采用类似的原则。</p><h3 id=\"2-6-模块引用-Imports\"><a href=\"#2-6-模块引用-Imports\" class=\"headerlink\" title=\"2.6 模块引用(Imports)\"></a>2.6 模块引用(Imports)</h3><p>Imports应该分行写，而不是都写在一行，例如：</p><pre><code># 分开写\nimport os\nimport sys\n\n# 不要像下面一样写在一行\nimport sys, os</code></pre><p>这样写也是可以的：</p><pre><code>from subprocess import Popen, PIPE</code></pre><p>Imports应该写在代码文件的开头，位于模块(module)注释和文档字符串(docstring)之后，模块全局变量(globals)和常量(constants)声明之前。</p><p>Imports应该按照下面的顺序分组来写：</p><ol><li>标准库imports</li><li>相关第三方imports</li><li>本地应用/库的特定imports</li></ol><p>如：</p><pre><code>import re\nfrom lxml import etree\nfrom ak_spider.common.mongo_models import *\nfrom ak_spider.settings import CAPTCHA_SERVER, AK_PROXY_SERVER, logger</code></pre><p>不同组的imports之前用空格隔开。</p><p>推荐使用绝对(absolute)imports，因为这样通常更易读，在import系统没有正确配置（比如中的路径以sys.path结束）的情况下，也会有更好的表现（或者至少会给出错误信息）：</p><pre><code>import mypkg.sibling\nfrom mypkg import sibling\nfrom mypkg.sibling import example</code></pre><p>然而，除了绝对imports，显式的相对imports也是一种可以接受的替代方式。特别是当处理复杂的包布局(package layouts)时，采用绝对imports会显得啰嗦。</p><pre><code>from . import sibling\nfrom .sibling import example</code></pre><p>标准库代码应当一直使用绝对imports，避免复杂的包布局。</p><p>隐式的相对imports应该永不使用，并且Python 3中已经被去掉了</p><p>当从一个包括类的模块中import一个类时，通常可以这样写：</p><pre><code>from myclass import MyClass\nfrom foo.bar.yourclass import YourClass</code></pre><p>如果和本地命名的拼写产生了冲突，应当直接import模块：</p><pre><code>import myclass\nimport foo.bar.yourclass</code></pre><p>然后使用”myclass.MyClass”和”foo.bar.yourclass.YourClass”。</p><p>避免使用通配符imports(from<module>import *)，因为会造成在当前命名空间出现的命名含义不清晰，给读者和许多自动化工具造成困扰。有一个可以正当使用通配符import的情形，即将一个内部接口重新发布成公共API的一部分（比如，使用备选的加速模块中的定义去覆盖纯Python实现的接口，预先无法知晓具体哪些定义将被覆盖）。</module></p><p>当使用这种方式重新发布命名时，指南后面关于公共和内部接口的部分仍然适用。</p><h3 id=\"2-7-模块级的双下划线命名-Module-level-dunder-names\"><a href=\"#2-7-模块级的双下划线命名-Module-level-dunder-names\" class=\"headerlink\" title=\"2.7 模块级的双下划线命名(Module level dunder names)\"></a>2.7 模块级的双下划线命名(Module level dunder names)</h3><p>模块中的“双下滑线”（变量名以两个下划线开头，两个下划线结尾）变量，比如<strong>all</strong>，<strong>author，</strong>version__等，应该写在文档字符串(docstring)之后，除了form <strong>future</strong>引用(imports)的任何其它类型的引用语句之前。Python要求模块中<strong>future</strong>的导入必须出现在除文档字符串(docstring)之外的任何其他代码之前。</p><p>例如：</p><pre><code>&quot;&quot;&quot;This is the example module.\n\nThis module does stuff.\n&quot;&quot;&quot;\n\nfrom __future__ import barry_as_FLUFL\n\n__all__ = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]\n__version__ = &apos;0.1&apos;\n__author__ = &apos;Cardinal Biggles&apos;\n\nimport os\nimport sys</code></pre><h2 id=\"3-字符串引用-String-Quotes\"><a href=\"#3-字符串引用-String-Quotes\" class=\"headerlink\" title=\"3 字符串引用(String Quotes)\"></a>3 字符串引用(String Quotes)</h2><p>在Python中表示字符串时，不管用单引号还是双引号都是一样的。但是不推荐将这两种方式看作一样并且混用。最好选择一种规则并坚持使用。当字符串中包含单引号时，采用双引号来表示字符串，反之也是一样，这样可以避免使用反斜杠，代码也更易读。</p><p>对于三引号表示的字符串，使用双引号字符来表示(即用”””而不是’’’)。</p><h2 id=\"4-表达式和语句中的空格-Whitespace-In-Expressions-And-Statements\"><a href=\"#4-表达式和语句中的空格-Whitespace-In-Expressions-And-Statements\" class=\"headerlink\" title=\"4 表达式和语句中的空格(Whitespace In Expressions And Statements)\"></a>4 表达式和语句中的空格(Whitespace In Expressions And Statements)</h2><h3 id=\"4-1-一些痛点-Pet-Peeves\"><a href=\"#4-1-一些痛点-Pet-Peeves\" class=\"headerlink\" title=\"4.1 一些痛点(Pet Peeves)\"></a>4.1 一些痛点(Pet Peeves)</h3><p>在下列情形中避免使用过多的空白：</p><p>方括号，圆括号和花括号之后：</p><pre><code>#正确的例子:\nspam(ham[1], {eggs: 2})\n\n#错误的例子：\nspam( ham[ 1 ], { eggs: 2 } )</code></pre><p>逗号，分号或冒号之前：</p><pre><code>#正确的例子:\nif x == 4: print x, y; x, y = y, x\n\n#错误的例子:\nif x == 4 : print x , y ; x , y = y , x</code></pre><p>不过，在切片操作时，冒号和二元运算符是一样的，应该在其左右两边保留相同数量的空格（就像对待优先级最低的运算符一样）。在扩展切片操作中，所有冒号的左右两边空格数都应该相等。不过也有例外，当切片操作中的参数被省略时，应该也忽略空格。</p><pre><code>#正确的例子:\nham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\nham[lower:upper], ham[lower:upper:], ham[lower::step]\nham[lower+offset : upper+offset]\nham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\nham[lower + offset : upper + offset]\n\n#错误的例子:\nham[lower + offset:upper + offset]\nham[1: 9], ham[1 :9], ham[1:9 :3]\nham[lower : : upper]\nham[ : upper]</code></pre><p>在调用函数时传递参数list的括号之前：</p><pre><code>#正确的例子:\nspam(1)\n\n#错误的例子:\npam (1)</code></pre><p>在索引和切片操作的左括号之前：</p><pre><code>#正确的例子:\ndct[&apos;key&apos;] = lst[index]\n\n#错误的例子:\ndct [&apos;key&apos;] = lst [index]</code></pre><p>赋值(或其他)运算符周围使用多个空格来和其他语句对齐：</p><pre><code>#正确的例子:\nx = 1\ny = 2\nlong_variable = 3\n\n#错误的例子:\nx             = 1\ny             = 2\nlong_variable = 3</code></pre><h3 id=\"4-2-其他建议-Other-Recommendations\"><a href=\"#4-2-其他建议-Other-Recommendations\" class=\"headerlink\" title=\"4.2 其他建议(Other Recommendations)\"></a>4.2 其他建议(Other Recommendations)</h3><p>避免任何行末的空格。因为它通常是不可见的，它可能会令人困惑：例如反斜杠后跟空格和换行符不会作为续行标记。一些编辑器会自动去除行末空格，许多项目（如CPython本身）都有提交前的预处理钩子来自动去除行末空格。</p><p>在二元运算符的两边都使用一个空格：赋值运算符(=)，增量赋值运算符(+=, -= etc.)，比较运算符(==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not)，布尔运算符(and, or, not)。</p><p>如果使用了优先级不同的运算符，则在优先级较低的操作符周围增加空白。请你自行判断，不过永远不要用超过1个空格，永远保持二元运算符两侧的空白数量一样。</p><pre><code>#正确的例子:\ni = i + 1\nsubmitted += 1\nx = x*2 - 1\nhypot2 = x*x + y*y\nc = (a+b) * (a-b)\n\n#错误的例子:\ni=i+1\nsubmitted +=1\nx = x * 2 - 1\nhypot2 = x * x + y * y\nc = (a + b) * (a - b)    </code></pre><p>使用=符号来表示关键字参数或参数默认值时，不要在其周围使用空格。</p><pre><code>#正确的例子:\ndef complex(real, imag=0.0):\nreturn magic(r=real, i=imag)\n\n#错误的例子:\ndef complex(real, imag = 0.0):\nreturn magic(r = real, i = imag)</code></pre><p>函数注解中的:也遵循一般的:加空格的规则，在-&gt;两侧各使用一个空格。</p><pre><code>#正确的例子:\ndef munge(input: AnyStr): ...\ndef munge() -&gt; AnyStr: ...\n\n#错误的例子:\ndef munge(input:AnyStr): ...\ndef munge()-&gt;PosInt: ...</code></pre><p>在组合使用函数注解和参数默认值时，需要在=两侧各使用一个空格（只有当这个参数既有函数注解，又有默认值的时候）。</p><pre><code>#正确的例子:\ndef munge(sep: AnyStr = None): ...\ndef munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...\n\n#错误的例子:\ndef munge(input: AnyStr=None): ...\ndef munge(input: AnyStr, limit = 1000): ...</code></pre><p>复合语句（即将多行语句写在一行）一般是不鼓励使用的。</p><pre><code>#正确的例子:\nif foo == &apos;blah&apos;:\ndo_blah_thing()\ndo_one()\ndo_two()\ndo_three()\n\n#最好不要这样:\nif foo == &apos;blah&apos;: do_blah_thing()\ndo_one(); do_two(); do_three()</code></pre><p>有时也可以将短小的if/for/while中的语句写在一行，但对于有多个分句的语句永远不要这样做。也要避免将多行都写在一起。</p><pre><code>#最好不要这样：\nif foo == &apos;blah&apos;: do_blah_thing()\nfor x in lst: total += x\nwhile t &lt; 10: t = delay()\n\n#绝对不要这样：\nif foo == &apos;blah&apos;: do_blah_thing()\nelse: do_non_blah_thing()\n\ntry: something()\nfinally: cleanup()\n\ndo_one(); do_two(); do_three(long, argument,\nlist, like, this)\n\nif foo == &apos;blah&apos;: one(); two(); three()</code></pre><h2 id=\"5-何时在末尾加逗号-When-to-use-trailing-commas\"><a href=\"#5-何时在末尾加逗号-When-to-use-trailing-commas\" class=\"headerlink\" title=\"5 何时在末尾加逗号(When to use trailing commas)\"></a>5 何时在末尾加逗号(When to use trailing commas)</h2><p>末尾逗号通常是可选的，除非在定义单元素元组(tuple)时是必需的（而且在Python 2中，它们具有print语句的语义）。为了清楚起见，建议使用括号（技术上来说是冗余的）括起来。</p><pre><code>#正确的例子:\nFILES = (&apos;setup.cfg&apos;,)\n\n#也正确，但令人困惑:\nFILES = &apos;setup.cfg&apos;,</code></pre><p>当使用版本控制系统时，在将来有可能扩展的列表末尾添加冗余的逗号是有好处的。具体的做法是将每一个元素写在单独的一行，并在行尾添加逗号，右括号单独占一行。但是，与有括号在同一行的末尾元素后面加逗号是没有意义的（上述的单元素元组除外）。</p><pre><code>#正确的例子:\nFILES = [\n    &apos;setup.cfg&apos;,\n    &apos;tox.ini&apos;,\n    ]\ninitialize(FILES,\n           error=True,\n           )\n\n#错误的例子:\nFILES = [&apos;setup.cfg&apos;, &apos;tox.ini&apos;,]\ninitialize(FILES, error=True,)</code></pre><h2 id=\"6-注释-Comments\"><a href=\"#6-注释-Comments\" class=\"headerlink\" title=\"6 注释(Comments)\"></a>6 注释(Comments)</h2><p>和代码矛盾的注释还不如没有。当代码有改动时，一定要优先更改注释使其保持最新。</p><p>注释应该是完整的多个句子。如果注释是一个短语或一个句子，其首字母应该大写，除非开头是一个以小写字母开头的标识符（永远不要更改标识符的大小写）。</p><p>如果注释很短，结束的句号可以被忽略。块注释通常由一段或几段完整的句子组成，每个句子都应该以句号结束。</p><p>你应该在句尾的句号后再加上2个空格。</p><p>使用英文写作，参考Strunk和White的《The Elements of Style》</p><p>来自非英语国家的Python程序员们，请使用英文来写注释，除非你120%确定你的代码永远不会被不懂你所用语言的人阅读到。</p><h3 id=\"6-1-块注释（Block-Comments）\"><a href=\"#6-1-块注释（Block-Comments）\" class=\"headerlink\" title=\"6.1 块注释（Block Comments）\"></a>6.1 块注释（Block Comments）</h3><p>块注释一般写在对应代码之前，并且和对应代码有同样的缩进级别。块注释的每一行都应该以#和一个空格开头（除非该文本是在注释内缩进对齐的）。</p><p>块注释中的段落应该用只含有单个#的一行隔开。</p><h3 id=\"6-2-行内注释（Inline-Comments）\"><a href=\"#6-2-行内注释（Inline-Comments）\" class=\"headerlink\" title=\"6.2 行内注释（Inline Comments）\"></a>6.2 行内注释（Inline Comments）</h3><p>尽量少用行内注释。</p><p>行内注释是和代码语句写在一行内的注释。行内注释应该至少和代码语句之间有两个空格的间隔，并且以#和一个空格开始。</p><p>行内注释通常不是必要的，在代码含义很明显时甚至会让人分心。请不要这样做：</p><pre><code>x = x + 1                 # x自加</code></pre><p>但这样做是有用的：</p><pre><code>x = x + 1                 # 边界补偿</code></pre><h3 id=\"6-3-文档字符串-Documentation-Strings\"><a href=\"#6-3-文档字符串-Documentation-Strings\" class=\"headerlink\" title=\"6.3 文档字符串(Documentation Strings)\"></a>6.3 文档字符串(Documentation Strings)</h3><p>要知道如何写出好的文档字符串（docstring），请参考PEP 257</p><p>所有的公共模块，函数，类和方法都应该有文档字符串。对于非公共方法，文档字符串不是必要的，但你应该留有注释说明该方法的功能，该注释应当出现在def的下一行。</p><p>PEP 257描述了好的文档字符应该遵循的规则。其中最重要的是，多行文档字符串以单行”””结尾，不能有其他字符，例如：</p><pre><code>&quot;&quot;&quot;Return a foobang\n\nOptional plotz says to frobnicate the bizbaz first.\n&quot;&quot;&quot;</code></pre><p>对于仅有一行的文档字符串，结尾处的”””应该也写在这一行。</p><h2 id=\"7-命名约定（Naming-Conventions）\"><a href=\"#7-命名约定（Naming-Conventions）\" class=\"headerlink\" title=\"7 命名约定（Naming Conventions）\"></a>7 命名约定（Naming Conventions）</h2><p>Python标准库的命名约定有一些混乱，因此我们永远都无法保持一致。但如今仍然存在一些推荐的命名标准。新的模块和包（包括第三方框架）应该采用这些标准，但若是已经存在的包有另一套风格的话，还是应当与原有的风格保持内部一致。</p><h3 id=\"7-1-首要原则（Overriding-Principle）\"><a href=\"#7-1-首要原则（Overriding-Principle）\" class=\"headerlink\" title=\"7.1 首要原则（Overriding Principle）\"></a>7.1 首要原则（Overriding Principle）</h3><p>对于用户可见的公共部分API，其命名应当表达出功能用途而不是其具体的实现细节。</p><h3 id=\"7-2-描述：命名风格（Descriptive-Naming-Styles）\"><a href=\"#7-2-描述：命名风格（Descriptive-Naming-Styles）\" class=\"headerlink\" title=\"7.2 描述：命名风格（Descriptive: Naming Styles）\"></a>7.2 描述：命名风格（Descriptive: Naming Styles）</h3><p>存在很多不同的命名风格，最好能够独立地从命名对象的用途认出采用了哪种命名风格。</p><p>通常区分以下命名样式：</p><ul><li>b (单个小写字母)</li><li>B (单个大写字母)</li><li>lowercase(小写)</li><li>lower_case_with_underscores(带下划线小写)</li><li>UPPERCASE(大写)</li><li>UPPER_CASE_WITH_UNDERSCORES(带下划线大写)</li><li>CapitalizedWords (也叫做CapWords或者CamelCase – 因为单词首字母大写看起来很像驼峰)。也被称作StudlyCaps。注意：当CapWords里包含缩写时，将缩写部分的字母都大写。HTTPServerError比HttpServerError要好。</li><li>mixedCase (注意：和CapitalizedWords不同在于其首字母小写！)</li><li>Capitalized_Words_With_Underscores (这种风格超丑！)</li></ul><p>也有风格使用简短唯一的前缀来表示一组相关的命名。这在Python中并不常见，但为了完整起见这里也捎带提一下。比如，os.stat()函数返回一个tuple，其中的元素名原本为st_mode,st-size,st_mtime等等。（这样做是为了强调和POSIX系统调用结构之间的关系，可以让程序员更熟悉。）</p><p>X11库中的公共函数名都以X开头。在Python中这样的风格一般被认为是不必要的，因为属性和方法名之前已经有了对象名的前缀，而函数名前也有了模块名的前缀。</p><p>此外，要区别以下划线开始或结尾的特殊形式（可以和其它的规则结合起来）：</p><p>_single_leading_underscore: 以单个下划线开头是”内部使用”的弱标志。 比如， from M import *不会import下划线开头的对象。</p><p>single_trailing_underscore_: 以单个下划线结尾用来避免和Python关键词产生冲突，例如:</p><pre><code>Tkinter.Toplevel(master, class_=&apos;ClassName&apos;)</code></pre><p><strong>double_leading_underscore: 以双下划线开头的风格命名类属性表示触发命名修饰（在FooBar类中，</strong>boo命名会被修饰成_FooBar__boo;）。</p><h3 id=\"7-3-规范：命名约定-Prescriptive-Naming-Conventions\"><a href=\"#7-3-规范：命名约定-Prescriptive-Naming-Conventions\" class=\"headerlink\" title=\"7.3 规范：命名约定(Prescriptive: Naming Conventions)\"></a>7.3 规范：命名约定(Prescriptive: Naming Conventions)</h3><h4 id=\"7-3-1-需要避免的命名-Names-To-Avoid\"><a href=\"#7-3-1-需要避免的命名-Names-To-Avoid\" class=\"headerlink\" title=\"7.3.1 需要避免的命名(Names To Avoid)\"></a>7.3.1 需要避免的命名(Names To Avoid)</h4><p>不要使用字符’l’（L的小写的字母），’O’（o大写的字母），或者’I’（i的大写的字母）来作为单个字符的变量名。</p><p>在一些字体中，这些字符和数字1和0无法区别开来。比如，当想使用’l’时，使用’L’代替。</p><h4 id=\"7-3-2-ASCII兼容性-ASCII-Compatibility\"><a href=\"#7-3-2-ASCII兼容性-ASCII-Compatibility\" class=\"headerlink\" title=\"7.3.2 ASCII兼容性(ASCII Compatibility)\"></a>7.3.2 ASCII兼容性(ASCII Compatibility)</h4><p>标准库中使用的标识符必须与ASCII兼容(参见PEP 3131中的<a href=\"https://www.python.org/dev/peps/pep-3131/#policy-specification\" target=\"_blank\" rel=\"noopener\">policy</a>这一节) 。</p><h4 id=\"7-3-3-包和模块命名-Package-And-Module-Names\"><a href=\"#7-3-3-包和模块命名-Package-And-Module-Names\" class=\"headerlink\" title=\"7.3.3 包和模块命名(Package And Module Names)\"></a>7.3.3 包和模块命名(Package And Module Names)</h4><p>模块命名应短小，且为全小写。若下划线能提高可读性，也可以在模块名中使用。Python包命名也应该短小，且为全小写，但不应使用下划线。</p><p>当使用C或C++写的扩展模块有相应的Python模块提供更高级的接口时（比如，更加面向对象），C/C++模块名以下划线开头（例如，_sociket）</p><h4 id=\"7-3-4-类命名-Class-Names\"><a href=\"#7-3-4-类命名-Class-Names\" class=\"headerlink\" title=\"7.3.4 类命名(Class Names)\"></a>7.3.4 类命名(Class Names)</h4><p>类命名应该使用驼峰（CapWords）的命名约定。</p><p>当接口已有文档说明且主要是被用作调用时，也可以使用函数的命名约定。</p><p>注意对于内建命名(builtin names)有一个特殊的约定：大部分内建名都是一个单词（或者两个一起使用的单词），驼峰(CapWords)的约定只对异常命名和内建常量使用。</p><h4 id=\"7-3-5-类型变量命名-Type-variable-names\"><a href=\"#7-3-5-类型变量命名-Type-variable-names\" class=\"headerlink\" title=\"7.3.5 类型变量命名(Type variable names)\"></a>7.3.5 类型变量命名(Type variable names)</h4><p>PEP 484中引入的类型变量名称通常应使用简短的驼峰命名: T，AnyStr，Num。 建议将后缀_co或_contra添加到用于声明相应的协变(covariant)和逆变(contravariant)的行为。例如：</p><pre><code>from typing import TypeVar\n\nVT_co = TypeVar(&apos;VT_co&apos;, covariant=True)\nKT_contra = TypeVar(&apos;KT_contra&apos;, contravariant=True)</code></pre><h4 id=\"7-3-6-异常命名-Exception-Names\"><a href=\"#7-3-6-异常命名-Exception-Names\" class=\"headerlink\" title=\"7.3.6 异常命名(Exception Names)\"></a>7.3.6 异常命名(Exception Names)</h4><p>由于异常实际上也是类，因此类命名约定也适用与异常。不同的是，如果异常实际上是抛出错误的话，异常名前应该加上”Error”的前缀。</p><h4 id=\"7-3-7-全局变量命名-Global-Variable-Names\"><a href=\"#7-3-7-全局变量命名-Global-Variable-Names\" class=\"headerlink\" title=\"7.3.7 全局变量命名(Global Variable Names)\"></a>7.3.7 全局变量命名(Global Variable Names)</h4><p>（在此之前，我们先假定这些变量都仅在同一个模块内使用。）这些约定同样也适用于函数命名。</p><p>对于引用方式设计为from M import *的模块，应该使用<strong>all</strong>机制来避免import全局变量，或者采用下划线前缀的旧约定来命名全局变量，从而表明这些变量是“模块非公开的”。</p><h4 id=\"7-3-8-函数命名-Function-Names\"><a href=\"#7-3-8-函数命名-Function-Names\" class=\"headerlink\" title=\"7.3.8 函数命名(Function Names)\"></a>7.3.8 函数命名(Function Names)</h4><p>函数命名应该都是小写，必要时使用下划线来提高可读性。</p><p>只有当已有代码风格已经是混合大小写时（比如threading.py），为了保留向后兼容性才使用混合大小写。</p><h4 id=\"7-3-9-函数和方法参数-Function-And-Method-Arguments\"><a href=\"#7-3-9-函数和方法参数-Function-And-Method-Arguments\" class=\"headerlink\" title=\"7.3.9 函数和方法参数(Function And Method Arguments)\"></a>7.3.9 函数和方法参数(Function And Method Arguments)</h4><p>实例方法的第一参数永远都是self。</p><p>类方法的第一个参数永远都是cls。</p><p>在函数参数名和保留关键字冲突时，相对于使用缩写或拼写简化，使用以下划线结尾的命名一般更好。比如，class_比clss更好。（或许使用同义词避免这样的冲突是更好的方式。）</p><h4 id=\"7-3-10-方法命名和实例变量-Method-Names-And-Instance-Variables\"><a href=\"#7-3-10-方法命名和实例变量-Method-Names-And-Instance-Variables\" class=\"headerlink\" title=\"7.3.10 方法命名和实例变量(Method Names And Instance Variables)\"></a>7.3.10 方法命名和实例变量(Method Names And Instance Variables)</h4><p>使用函数命名的规则：小写单词，必要时使用下划线分开以提高可读性。</p><p>仅对于非公开方法和变量命名在开头使用一个下划线。</p><p>避免和子类的命名冲突，使用两个下划线开头来触发Python的命名修饰机制。</p><p>Python类名的命名修饰规则：如果类Foo有一个属性叫<strong>a，不能使用Foo.</strong>a的方式访问该变量。（有用户可能仍然坚持使用Foo._Foo__a的方法访问。）一般来说，两个下划线开头的命名方法仅用于避免与设计为子类的类中的属性名冲突。</p><h4 id=\"7-3-11-常量-Constants\"><a href=\"#7-3-11-常量-Constants\" class=\"headerlink\" title=\"7.3.11 常量(Constants)\"></a>7.3.11 常量(Constants)</h4><p>常量通常是在模块级别定义的，使用全部大写并用下划线将单词分开。如：MAX_OVERFLOW和TOTAL 。</p><h4 id=\"7-3-12-继承的设计-Designing-For-Inheritance\"><a href=\"#7-3-12-继承的设计-Designing-For-Inheritance\" class=\"headerlink\" title=\"7.3.12 继承的设计(Designing For Inheritance)\"></a>7.3.12 继承的设计(Designing For Inheritance)</h4><p>记得永远区别类的方法和实例变量（属性）应该是公开的还是非公开的。如果有疑虑的话，请选择非公开的；因为之后将非公开属性变为公开属性要容易些。</p><p>公开属性是那些你希望和你定义的类无关的客户来使用的，并且确保不会出现向后不兼容的问题。非公开属性是那些不希望被第三方使用的部分，你可以不用保证非公开属性不会变化或被移除。</p><p>我们在这里没有使用“私有（private）”这个词，因为在Python里没有什么属性是真正私有的（这样设计省略了大量不必要的工作）。</p><p>另一类属性属于子类API的一部分（在其他语言中经常被称为”protected”）。一些类是为继承设计的，要么扩展要么修改类的部分行为。当设计这样的类时，需要谨慎明确地决定哪些属性是公开的，哪些属于子类API，哪些真的只会被你的基类调用。</p><p>请记住以上几点，下面是Python风格的指南：</p><ul><li>公开属性不应该有开头下划线。</li><li>如果公开属性的名字和保留关键字有冲突，在你的属性名尾部加上一个下划线。这比采用缩写和简写更好。（然而，和这条规则冲突的是，‘cls’对任何变量和参数来说都是一个更好地拼写，因为大家都知道这表示class，特别是在类方法的第一个参数里。）</li><li>对于简单的公共数据属性，最后仅公开属性名字，不要公开复杂的调用或设值方法。请记住，如果你发现一个简单的数据属性需要增加功能行为时，Python为功能增强提供了一个简单的途径。这种情况下，使用Properties注解将功能实现隐藏在简单数据属性访问语法之后。注意 1：Properties注解仅仅对新风格类有用。<br>注意 2：尽量保证功能行为没有副作用，尽管缓存这种副作用看上去并没有什么大问题。<br>注意 3: 对计算量大的运算避免试用properties；属性的注解会让调用者相信访问的运算量是相对较小的。</li><li>如果你的类将被子类继承的话，你有一些属性并不想让子类访问，考虑将他们命名为两个下划线开头并且结尾处没有下划线。这样会触发Python命名修饰算法，类名会被修饰添加到属性名中。这样可以避免属性命名冲突，以免子类会不经意间包含相同的命名。注意 1：注意命名修饰仅仅是简单地将类名加入到修饰名中，所以如果子类有相同的类名合属性名，你可能仍然会遇到命名冲突问题。<br>注意 2：命名修饰可以有特定用途，比如在调试时，__getattr__()比较不方便。然而命名修饰算法的可以很好地记录，并且容意手动执行。<br>注意 3：不是所有人都喜欢命名修饰。需要试着去平衡避免偶然命名冲突的需求和高级调用者使用的潜在可能性。</li></ul><h3 id=\"7-4-公开和内部接口-Public-And-Internal-Interfaces\"><a href=\"#7-4-公开和内部接口-Public-And-Internal-Interfaces\" class=\"headerlink\" title=\"7.4 公开和内部接口(Public And Internal Interfaces)\"></a>7.4 公开和内部接口(Public And Internal Interfaces)</h3><p>任何向后兼容性保证仅对公开接口适用。相应地，用户能够清楚分辨公开接口和内部接口是很重要的。</p><p>文档化的接口被认为是公开的，除非文档中明确申明了它们是临时的或者内部接口，不保证向后兼容性。所有文档中未提到的接口应该被认为是内部的。</p><p>为了更好审视公开接口和内部接口，模块应该在<strong>all属性中明确申明公开API是哪些。将</strong>all__设为空list表示该模块中没有公开API。</p><p>即使正确设置了__all属性，内部接口（包，模块，类，函数，属性或其他命名）也应该以一个下划线开头。</p><p>如果接口的任一一个命名空间（包，模块或类）是内部的，那么该接口也应该是内部的</p><p>引用的命名应该永远被认为是实现细节。其他模块不应当依赖这些非直接访问的引用命名，除非它们在文档中明确地被写为模块的API，例如os.path或者包的<strong>init</strong>模块，那些从子模块展现的功能。</p><h2 id=\"8-编程建议-Programming-Recommendations\"><a href=\"#8-编程建议-Programming-Recommendations\" class=\"headerlink\" title=\"8 编程建议(Programming Recommendations)\"></a>8 编程建议(Programming Recommendations)</h2><p>1 代码应该以不影响其他Python实现（PyPy，Jython，IronPython，Cython，Psyco等）的方式编写。</p><p>例如，不要依赖于 CPython 在字符串拼接时的优化实现，像这种语句形式a += b和a = a + b。即使是 CPython（仅对某些类型起作用） 这种优化也是脆弱的，不是在所有的实现中都不使用引用计数。在库中性能敏感的部分，用’’.join形式来代替。这会确保在所有不同的实现中字符串拼接是线性时间的。</p><p>2 与单例作比较，像None应该用is或is not，从不使用==操作符。</p><p>同样的，当心if x is not None这样的写法，你是不知真的要判断x不是None。例如，测试一个默认值为None的变量或参数是否设置成了其它值，其它值有可能是某种特殊类型（如容器），这种特殊类型在逻辑运算时其值会被当作Flase来看待。</p><p>用is not操作符而不是not … is。虽然这两个表达式是功能相同的，前一个是更可读的，是首选。</p><p>推荐的写法:</p><pre><code>if foo is not None:</code></pre><p>不推荐的写法:</p><pre><code>if not foo is None:</code></pre><p>3 用富比较实现排序操作的时候，最好实现所有六个比较操作符（ __eq__ 、 __ne__ 、 __lt__ , __le__ , __gt__ , __ge__），而不是依靠其他代码来进行特定比较。</p><p>为了最大限度的减少工作量，functools.total_ordering()装饰器提供了一个工具去生成缺少的比较方法。</p><p>PEP 207 说明了 Python 假定的所有反射规则。因此，解释器可能使用y &gt; x替换x &lt; y，使用y &gt;= x替换x &lt;= y，也可能交换x == y和x != y的操作数。sort()和min()操作肯定会使用&lt;操作符，max()函数肯定会使用&gt;操作符。当然，最好是六个操作符都实现，以便在其他情况下不会出现混淆。</p><p>4 始终使用def语句来代替直接绑定了一个lambda表达式的赋值语句。</p><p>推荐的写法:</p><pre><code>def f(x): return 2*x</code></pre><p>不推荐的写法:</p><pre><code>f = lambda x: 2*x</code></pre><p>第一个表单意味着生成的函数对象的名称是’f’而不是通用的’<lambda>‘。通常这对异常追踪和字符串表述是更有用的。使用赋值语句消除了使用lambda表达式可以提供，而一个显式的def语句不能提供的唯一好处，如，lambda能镶嵌在一个很长的表达式里。</lambda></p><p>5 异常类应派生自Exception而不是BaseException。直接继承BaseException是为Exception保留的，从BaseException继承并捕获异常这种做法几乎总是错的。</p><p>设计异常的层次结构，应基于那些可能出现异常的代码，而不是引发异常的位置。编码的时候，以回答“出了什么问题？”为目标，而不是仅仅指出“这里出现了问题”（见 PEP 3151 一个内建异常结构层次的例子）。</p><p>类的命名约定适用于异常，如果异常类是一个错误，你应该给异常类加一个后缀Error。用于非本地流程控制或者其他形式的信号的非错误异常不需要一个特殊的后缀。</p><p>6 适当的使用异常链。在 Python 3 里，应该使用raise X from Y来指示显式替换，而不会丢失原始的追溯。</p><p>当有意替换一个内部的异常时（在 Python 2 用raise X，Python 3.3+ 用raise X from None），请确保将相关详细信息转移到新异常中（例如，将KeyError转换为AttributeError时保留属性名称，或将原始异常的文本嵌入到新的异常消息中）。</p><p>7 在 Python 2 里抛出异常时，用raise ValueError(‘message’)代替旧式的raise ValueError, ‘message’。</p><p>在 Python 3 之后的语法里，旧式的异常抛出方式是非法的。</p><p>使用括号形式的异常意味着，当你传给异常的参数过长或者包含字符串格式化时，你就不需要使用续行符了，这要感谢括号！</p><p>8 捕获异常时，尽可能使用明确的异常，而不是用一个空的except:语句。</p><p>例如，用：</p><pre><code>try:\n    import platform_specific_module\nexcept ImportError:\n    platform_specific_module = None</code></pre><p>一个空的except:语句将会捕获到SystemExit和KeyboardInterrupt异常，很难区分程序的中断到底是Ctrl+C还是其他问题引起的。如果你想捕获程序的所有错误，使用except Exception:(空except:等同于except BaseException)。</p><p>一个好的经验是限制使用空except语句，除了这两种情况：</p><ul><li>如果异常处理程序会打印出或者记录回溯信息；至少用户意识到错误的存在。</li><li>如果代码需要做一些清理工作，但后面用raise向上抛出异常。try .. finally是处理这种情况更好的方式。</li></ul><p>9 绑定异常给一个名字时，最好使用 Python 2.6 里添加的明确的名字绑定语法：</p><pre><code>try:\n    process_data()\nexcept Exception as exc:\n    raise DataProcessingFailedError(str(exc))</code></pre><p>Python 3 只支持这种语法，避免与基于逗号的旧式语法产生二义性。</p><p>10 捕获操作系统错误时，最好使用 Python 3.3 里引进的明确的异常结构层次，而不是内省的errno值。</p><p>11 另外，对于所有try / except子句，将try子句限制为必需的绝对最小代码量。同样，这样可以避免屏蔽错误。</p><p>推荐的写法：</p><pre><code>try:\n    value = collection[key]\nexcept KeyError:\n    return key_not_found(key)\nelse:\n    return handle_value(value)</code></pre><p>不推荐的写法：</p><pre><code>try:\n    # Too broad!\n    return handle_value(collection[key])\nexcept KeyError:\n    # Will also catch KeyError raised by handle_value()\n    return key_not_found(key)</code></pre><p>12 当某个资源仅被特定代码段使用，用with语句确保其在使用后被立即干净的清除了，try/finally也是也接受的。</p><p>13 当它们做一些除了获取和释放资源之外的事的时候，上下文管理器应该通过单独的函数或方法调用。例如：</p><p>推荐的写法:</p><pre><code>with conn.begin_transaction():\n    do_stuff_in_transaction(conn)</code></pre><p>不推荐的写法：</p><pre><code>with conn:\n    do_stuff_in_transaction(conn)</code></pre><p>第二个例子没有提供任何信息来表明<strong>enter</strong>和<strong>exit</strong>方法在完成一个事务后做了一些除了关闭连接以外的其它事。在这种情况下明确是很重要的。</p><p>14 坚持使用return语句。函数内的return语句都应该返回一个表达式，或者None。如果一个return语句返回一个表达式，另一个没有返回值的应该用return None清晰的说明，并且在一个函数的结尾应该明确使用一个return语句（如果有返回值的话）。</p><p>推荐的写法：</p><pre><code>def foo(x):\n    if x &gt;= 0:\n        return math.sqrt(x)\n    else:\n        return None\n\ndef bar(x):\n    if x &lt; 0:\n        return None\n    return math.sqrt(x)</code></pre><p>不推荐的写法：</p><pre><code>def foo(x):\n    if x &gt;= 0:\n        return math.sqrt(x)\n\ndef bar(x):\n    if x &lt; 0:\n        return\n    return math.sqrt(x)</code></pre><p>15 用字符串方法代替字符串模块。</p><p>字符串方法总是快得多，并且与unicode字符串共享相同的API。如果需要与2.0以下的Python的向后兼容，则覆盖此规则。</p><p>16 用’’.startswith()和’’.endswith()代替字符串切片来检查前缀和后缀。</p><p>startswith()和endswith()是更简洁的，不容易出错的。例如：</p><pre><code>#推荐的写法：\nif foo.startswith(&apos;bar&apos;):\n\n#不推荐的写法：\nif foo[:3] == &apos;bar&apos;:</code></pre><p>17 对象类型的比较应该始终使用isinstance()而不是直接比较。</p><pre><code>#推荐的写法：\nif isinstance(obj, int):\n\n#不推荐的写法：\nif type(obj) is type(1):</code></pre><p>当比较一个对象是不是字符串时，记住它有可能也是一个 unicode 字符串！在 Python 2 里面，str和unicode有一个公共的基类叫basestring，因此你可以这样做：</p><pre><code>if isinstance(obj, basestring):</code></pre><p>注意，在 Python 3 里面，unicode和basestring已经不存在了（只有str），byte对象不再是字符串的一种（被一个整数序列替代）。</p><p>18 对于序列（字符串、列表、元组）来说，空的序列为False：</p><p>正确的写法：</p><pre><code>if not seq:\nif seq:</code></pre><p>错误的写法：</p><pre><code>if len(seq):\nif not len(seq):</code></pre><p>19 不要让字符串对尾随的空格有依赖。这样的尾随空格是视觉上无法区分的，一些编辑器（或者，reindent.py）会将其裁剪掉。</p><p>20 不要用==比较True和False。</p><pre><code>#推荐的写法：\nif greeting:\n\n#不推荐的写法：\nif greeting == True:\n\n#更加不推荐的写法：\nif greeting is True:</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl0zde06g00019jx35q7bcyv1","category_id":"cl0zde06n00049jx386nb2e83","_id":"cl0zde077000i9jx32adq41zr"},{"post_id":"cl0zde075000g9jx3c1b28jcn","category_id":"cl0zde06n00049jx386nb2e83","_id":"cl0zde07b000p9jx36b632g6q"},{"post_id":"cl0zde070000b9jx33rmt9l44","category_id":"cl0zde07f000u9jx3daaceons","_id":"cl0zde07k00149jx3cen5bugy"},{"post_id":"cl0zde06l00039jx38sw51cn5","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde07m001b9jx38jgnaauw"},{"post_id":"cl0zde06l00039jx38sw51cn5","category_id":"cl0zde07h00109jx33lcf5yig","_id":"cl0zde07p001g9jx3fv5z6502"},{"post_id":"cl0zde07l00189jx3dv556nv2","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde07q001k9jx3ar0l62d6"},{"post_id":"cl0zde07l00189jx3dv556nv2","category_id":"cl0zde07k00169jx35hh4byhu","_id":"cl0zde07s001p9jx3gr7ja3yl"},{"post_id":"cl0zde076000h9jx3e58vbwrg","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde07t001s9jx31evmgkp6"},{"post_id":"cl0zde076000h9jx3e58vbwrg","category_id":"cl0zde07k00169jx35hh4byhu","_id":"cl0zde07u001x9jx37sv43zoq"},{"post_id":"cl0zde07m001a9jx341a1gdtl","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde07v00209jx3a10jbqhr"},{"post_id":"cl0zde07m001a9jx341a1gdtl","category_id":"cl0zde07k00169jx35hh4byhu","_id":"cl0zde07x00259jx38r1qhad8"},{"post_id":"cl0zde07o001f9jx3go9kh1e1","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde07z00289jx37cj45jd0"},{"post_id":"cl0zde07o001f9jx3go9kh1e1","category_id":"cl0zde07k00169jx35hh4byhu","_id":"cl0zde081002d9jx36r4g394k"},{"post_id":"cl0zde07p001i9jx3guvb0fs8","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde082002g9jx399s73jk1"},{"post_id":"cl0zde07p001i9jx3guvb0fs8","category_id":"cl0zde07k00169jx35hh4byhu","_id":"cl0zde084002l9jx38js4ge21"},{"post_id":"cl0zde07r001n9jx35mbwcpp9","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde085002o9jx3fu1b4u4i"},{"post_id":"cl0zde07r001n9jx35mbwcpp9","category_id":"cl0zde07k00169jx35hh4byhu","_id":"cl0zde087002t9jx36ocl6drp"},{"post_id":"cl0zde06r00079jx302xybrq2","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde088002w9jx3c7y4dfvb"},{"post_id":"cl0zde06r00079jx302xybrq2","category_id":"cl0zde07k00169jx35hh4byhu","_id":"cl0zde08900319jx3f5ykbrne"},{"post_id":"cl0zde07s001q9jx33aled1lm","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde08a00349jx36zyg4ld6"},{"post_id":"cl0zde07u001v9jx3c7cqd211","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde08c00399jx38c3x2d23"},{"post_id":"cl0zde07u001v9jx3c7cqd211","category_id":"cl0zde07k00169jx35hh4byhu","_id":"cl0zde08d003c9jx35yya33xh"},{"post_id":"cl0zde07w00239jx32ewsexpy","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde08e003h9jx3fhon2esu"},{"post_id":"cl0zde07c000s9jx39pt23ign","category_id":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde08f003k9jx3acnofv6u"},{"post_id":"cl0zde07c000s9jx39pt23ign","category_id":"cl0zde07v00219jx30wjhayq3","_id":"cl0zde08h003p9jx39agdfuul"},{"post_id":"cl0zde07x00269jx30k537o39","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde08i003s9jx319ozarnw"},{"post_id":"cl0zde07x00269jx30k537o39","category_id":"cl0zde07k00169jx35hh4byhu","_id":"cl0zde08s003x9jx318l2eopi"},{"post_id":"cl0zde06t00099jx35oh58ryd","category_id":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde08t00409jx39gvs0gie"},{"post_id":"cl0zde06t00099jx35oh58ryd","category_id":"cl0zde07z00299jx3dg16f3o2","_id":"cl0zde08u00459jx3hdih9ykr"},{"post_id":"cl0zde082002j9jx3147p6hk0","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde08v00479jx3cnpp0z3c"},{"post_id":"cl0zde082002j9jx3147p6hk0","category_id":"cl0zde07k00169jx35hh4byhu","_id":"cl0zde08v004b9jx38zf2bm1d"},{"post_id":"cl0zde07d000t9jx33tx86j3j","category_id":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde08v004d9jx3fk0z80n3"},{"post_id":"cl0zde07d000t9jx33tx86j3j","category_id":"cl0zde07v00219jx30wjhayq3","_id":"cl0zde08w004g9jx388q217bc"},{"post_id":"cl0zde07g000w9jx335rg20zd","category_id":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde08w004j9jx39sc1hngg"},{"post_id":"cl0zde07g000w9jx335rg20zd","category_id":"cl0zde07v00219jx30wjhayq3","_id":"cl0zde08x004m9jx3cltzc7qm"},{"post_id":"cl0zde07h000y9jx3f6qkfx3l","category_id":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde08x004p9jx32p4pahh0"},{"post_id":"cl0zde07h000y9jx3f6qkfx3l","category_id":"cl0zde07v00219jx30wjhayq3","_id":"cl0zde08x004r9jx37bvo7aia"},{"post_id":"cl0zde07i00119jx32p6vft34","category_id":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde08y004v9jx3am5b7ymf"},{"post_id":"cl0zde07i00119jx32p6vft34","category_id":"cl0zde07v00219jx30wjhayq3","_id":"cl0zde08y004x9jx36jy3c3eb"},{"post_id":"cl0zde07j00139jx3ff1s8tzy","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde08z00519jx39vwqbfri"},{"post_id":"cl0zde07j00139jx3ff1s8tzy","category_id":"cl0zde08d003d9jx3ggeh6hik","_id":"cl0zde08z00539jx3b2p3hyd5"},{"post_id":"cl0zde08f003m9jx3gy0z8dyp","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde09000579jx3816hd6e8"},{"post_id":"cl0zde08f003m9jx3gy0z8dyp","category_id":"cl0zde08d003d9jx3ggeh6hik","_id":"cl0zde09000599jx33uxw8myd"},{"post_id":"cl0zde08h003q9jx3g6fqd7yq","category_id":"cl0zde07f000u9jx3daaceons","_id":"cl0zde090005d9jx3hk8ihd7y"},{"post_id":"cl0zde07k00159jx3ck823nyu","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde091005f9jx30kt6145w"},{"post_id":"cl0zde07k00159jx3ck823nyu","category_id":"cl0zde07k00169jx35hh4byhu","_id":"cl0zde091005j9jx39aq62sek"},{"post_id":"cl0zde08q003u9jx39vdi5zzw","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde092005l9jx335246rtg"},{"post_id":"cl0zde08q003u9jx39vdi5zzw","category_id":"cl0zde08d003d9jx3ggeh6hik","_id":"cl0zde092005p9jx32juh9pkp"},{"post_id":"cl0zde079000m9jx36u6k7rkj","category_id":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde092005r9jx3f94e9vlt"},{"post_id":"cl0zde079000m9jx36u6k7rkj","category_id":"cl0zde07v00219jx30wjhayq3","_id":"cl0zde093005v9jx34th71tma"},{"post_id":"cl0zde07b000o9jx3g1vk1t2j","category_id":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde093005x9jx3hqyw71si"},{"post_id":"cl0zde07b000o9jx3g1vk1t2j","category_id":"cl0zde07v00219jx30wjhayq3","_id":"cl0zde09400619jx32ikx2wvb"},{"post_id":"cl0zde07u001y9jx32hot8d7x","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde09500639jx3bodke3df"},{"post_id":"cl0zde07u001y9jx32hot8d7x","category_id":"cl0zde08v00499jx34ghx38t0","_id":"cl0zde09600669jx34876ea3t"},{"post_id":"cl0zde080002b9jx3bj4pful1","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde09600699jx33b636ugf"},{"post_id":"cl0zde080002b9jx3bj4pful1","category_id":"cl0zde08w004h9jx3hcjq3jrc","_id":"cl0zde097006c9jx35zi86ag6"},{"post_id":"cl0zde081002e9jx3ec207n2o","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde097006f9jx3g01kfzj8"},{"post_id":"cl0zde081002e9jx3ec207n2o","category_id":"cl0zde08w004h9jx3hcjq3jrc","_id":"cl0zde098006h9jx36u3l4zi0"},{"post_id":"cl0zde084002m9jx3ehllc0zn","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde098006l9jx3chej21hs"},{"post_id":"cl0zde084002m9jx3ehllc0zn","category_id":"cl0zde08w004h9jx3hcjq3jrc","_id":"cl0zde098006n9jx35ahx36dw"},{"post_id":"cl0zde086002r9jx3273bfi3h","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde099006q9jx37ugz0bqh"},{"post_id":"cl0zde086002r9jx3273bfi3h","category_id":"cl0zde08v00499jx34ghx38t0","_id":"cl0zde099006s9jx31f74bks5"},{"post_id":"cl0zde087002u9jx33azv8xed","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde099006v9jx3hr752fcs"},{"post_id":"cl0zde087002u9jx33azv8xed","category_id":"cl0zde08z00549jx3bimpcc8x","_id":"cl0zde099006x9jx33j2o1oo0"},{"post_id":"cl0zde089002z9jx35of72x02","category_id":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde09a00709jx341kxfmfg"},{"post_id":"cl0zde089002z9jx35of72x02","category_id":"cl0zde090005b9jx38ibaaozs","_id":"cl0zde09a00729jx37kx740l6"},{"post_id":"cl0zde08a00329jx35npc38gv","category_id":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde09a00759jx3h4fy1u53"},{"post_id":"cl0zde08a00329jx35npc38gv","category_id":"cl0zde090005b9jx38ibaaozs","_id":"cl0zde09a00779jx3390e1lmn"},{"post_id":"cl0zde08b00379jx357vm87jk","category_id":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde09b007a9jx30is8cpsx"},{"post_id":"cl0zde08b00379jx357vm87jk","category_id":"cl0zde090005b9jx38ibaaozs","_id":"cl0zde09b007c9jx35iox0w4e"},{"post_id":"cl0zde08c003a9jx38c918qjn","category_id":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde09b007f9jx32b9p3dbq"},{"post_id":"cl0zde08c003a9jx38c918qjn","category_id":"cl0zde090005b9jx38ibaaozs","_id":"cl0zde09b007h9jx3de7agg6h"},{"post_id":"cl0zde08d003f9jx346hi1tx9","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde09b007j9jx35tc3cr3y"},{"post_id":"cl0zde08d003f9jx346hi1tx9","category_id":"cl0zde093005y9jx3alq77xtr","_id":"cl0zde09c007m9jx3ao7n8vr7"},{"post_id":"cl0zde08e003i9jx38fsee8p5","category_id":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde09c007o9jx31lsp0s2d"},{"post_id":"cl0zde08e003i9jx38fsee8p5","category_id":"cl0zde090005b9jx38ibaaozs","_id":"cl0zde09c007p9jx31mjtdyjt"},{"post_id":"cl0zde08s003y9jx30518hvs3","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde09c007r9jx34rmn952x"},{"post_id":"cl0zde08s003y9jx30518hvs3","category_id":"cl0zde093005y9jx3alq77xtr","_id":"cl0zde09c007t9jx392a18ce4"},{"post_id":"cl0zde08t00429jx38vsuf23l","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde09c007u9jx3e0wpap9y"},{"post_id":"cl0zde08t00429jx38vsuf23l","category_id":"cl0zde098006i9jx3ej5hcaja","_id":"cl0zde09c007v9jx36l8ja09i"},{"post_id":"cl0zde09k007w9jx3gr3h96yj","category_id":"cl0zde07b000q9jx3bv6u9eli","_id":"cl0zde09n00819jx3h2mgg91y"},{"post_id":"cl0zde09k007w9jx3gr3h96yj","category_id":"cl0zde07v00219jx30wjhayq3","_id":"cl0zde09n00839jx37jvm6jae"},{"post_id":"cl0zde09l007x9jx3g7hzg1ru","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde09o00859jx322hxfwa2"},{"post_id":"cl0zde09l007x9jx3g7hzg1ru","category_id":"cl0zde08z00549jx3bimpcc8x","_id":"cl0zde09p00879jx3cjjuf1b4"},{"post_id":"cl0zde09m007z9jx36c77c3bw","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde09p00889jx375te930j"},{"post_id":"cl0zde09m007z9jx36c77c3bw","category_id":"cl0zde07k00169jx35hh4byhu","_id":"cl0zde09q00899jx3dedd723i"},{"post_id":"cl0zde0b8008a9jx3d7vs2zqd","category_id":"cl0zde073000c9jx35txobufw","_id":"cl0zde0ba008c9jx326vdb39y"}],"PostTag":[{"post_id":"cl0zde06g00019jx35q7bcyv1","tag_id":"cl0zde06o00059jx3hhmi93nr","_id":"cl0zde074000e9jx3brd80k54"},{"post_id":"cl0zde075000g9jx3c1b28jcn","tag_id":"cl0zde06o00059jx3hhmi93nr","_id":"cl0zde079000l9jx30vbk8aa4"},{"post_id":"cl0zde06l00039jx38sw51cn5","tag_id":"cl0zde073000d9jx3gurb2wed","_id":"cl0zde07b000n9jx3ejvc9ikb"},{"post_id":"cl0zde06r00079jx302xybrq2","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde07h000x9jx3ad7m500v"},{"post_id":"cl0zde06r00079jx302xybrq2","tag_id":"cl0zde07c000r9jx39qq6cekj","_id":"cl0zde07h000z9jx3h77y2ara"},{"post_id":"cl0zde06t00099jx35oh58ryd","tag_id":"cl0zde07g000v9jx37nmo9ic6","_id":"cl0zde07l00199jx3hx04gpip"},{"post_id":"cl0zde06t00099jx35oh58ryd","tag_id":"cl0zde07i00129jx33qyjgb7a","_id":"cl0zde07m001c9jx3h39vdzmd"},{"post_id":"cl0zde07k00159jx3ck823nyu","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde07p001h9jx35ja251bs"},{"post_id":"cl0zde07k00159jx3ck823nyu","tag_id":"cl0zde07c000r9jx39qq6cekj","_id":"cl0zde07q001j9jx3ajbtbuwn"},{"post_id":"cl0zde07l00189jx3dv556nv2","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde07s001o9jx3bn899xwd"},{"post_id":"cl0zde07l00189jx3dv556nv2","tag_id":"cl0zde07c000r9jx39qq6cekj","_id":"cl0zde07t001r9jx35fa9apzb"},{"post_id":"cl0zde070000b9jx33rmt9l44","tag_id":"cl0zde07l00179jx396jo1amp","_id":"cl0zde07u001w9jx3gismd2au"},{"post_id":"cl0zde07m001a9jx341a1gdtl","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde07v001z9jx396uy07l9"},{"post_id":"cl0zde07m001a9jx341a1gdtl","tag_id":"cl0zde07c000r9jx39qq6cekj","_id":"cl0zde07x00249jx3an0s89wc"},{"post_id":"cl0zde07o001f9jx3go9kh1e1","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde07y00279jx31n32969r"},{"post_id":"cl0zde07o001f9jx3go9kh1e1","tag_id":"cl0zde07c000r9jx39qq6cekj","_id":"cl0zde081002c9jx3983d2hdj"},{"post_id":"cl0zde07p001i9jx3guvb0fs8","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde081002f9jx3ff54hxj7"},{"post_id":"cl0zde07p001i9jx3guvb0fs8","tag_id":"cl0zde07c000r9jx39qq6cekj","_id":"cl0zde084002k9jx3gvyz16rq"},{"post_id":"cl0zde07r001n9jx35mbwcpp9","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde085002n9jx33i9qg66b"},{"post_id":"cl0zde07r001n9jx35mbwcpp9","tag_id":"cl0zde07c000r9jx39qq6cekj","_id":"cl0zde086002s9jx3gxxz2yfo"},{"post_id":"cl0zde076000h9jx3e58vbwrg","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde088002v9jx30wvohjdo"},{"post_id":"cl0zde076000h9jx3e58vbwrg","tag_id":"cl0zde07c000r9jx39qq6cekj","_id":"cl0zde08900309jx3farz98aw"},{"post_id":"cl0zde07s001q9jx33aled1lm","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde08a00339jx3327jb6fw"},{"post_id":"cl0zde07u001v9jx3c7cqd211","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde08c00389jx32v681zkf"},{"post_id":"cl0zde07u001v9jx3c7cqd211","tag_id":"cl0zde07c000r9jx39qq6cekj","_id":"cl0zde08d003b9jx3c5xt8046"},{"post_id":"cl0zde07w00239jx32ewsexpy","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde08e003g9jx33fvr5ddo"},{"post_id":"cl0zde079000m9jx36u6k7rkj","tag_id":"cl0zde07g000v9jx37nmo9ic6","_id":"cl0zde08f003j9jx39cp053am"},{"post_id":"cl0zde079000m9jx36u6k7rkj","tag_id":"cl0zde07w00229jx3dmm55pm7","_id":"cl0zde08h003o9jx3cn8v38x8"},{"post_id":"cl0zde07x00269jx30k537o39","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde08i003r9jx36t6gdsg8"},{"post_id":"cl0zde07x00269jx30k537o39","tag_id":"cl0zde07c000r9jx39qq6cekj","_id":"cl0zde08s003w9jx39mk44nek"},{"post_id":"cl0zde082002j9jx3147p6hk0","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde08t003z9jx3dgfl2p78"},{"post_id":"cl0zde082002j9jx3147p6hk0","tag_id":"cl0zde07c000r9jx39qq6cekj","_id":"cl0zde08u00449jx3hy008wrb"},{"post_id":"cl0zde07b000o9jx3g1vk1t2j","tag_id":"cl0zde07g000v9jx37nmo9ic6","_id":"cl0zde08u00469jx3axxa9gpk"},{"post_id":"cl0zde07b000o9jx3g1vk1t2j","tag_id":"cl0zde07w00229jx3dmm55pm7","_id":"cl0zde08v004a9jx3bu3obrao"},{"post_id":"cl0zde07c000s9jx39pt23ign","tag_id":"cl0zde07g000v9jx37nmo9ic6","_id":"cl0zde08v004c9jx3fjg2h9xt"},{"post_id":"cl0zde07c000s9jx39pt23ign","tag_id":"cl0zde07w00229jx3dmm55pm7","_id":"cl0zde08w004f9jx39tpa3rv5"},{"post_id":"cl0zde07d000t9jx33tx86j3j","tag_id":"cl0zde07g000v9jx37nmo9ic6","_id":"cl0zde08w004i9jx35vx30kkt"},{"post_id":"cl0zde07d000t9jx33tx86j3j","tag_id":"cl0zde07w00229jx3dmm55pm7","_id":"cl0zde08x004l9jx3695h9vs9"},{"post_id":"cl0zde08h003q9jx3g6fqd7yq","tag_id":"cl0zde07l00179jx396jo1amp","_id":"cl0zde08x004o9jx3dcbo7i3r"},{"post_id":"cl0zde07g000w9jx335rg20zd","tag_id":"cl0zde07g000v9jx37nmo9ic6","_id":"cl0zde08x004q9jx399vnc7is"},{"post_id":"cl0zde07g000w9jx335rg20zd","tag_id":"cl0zde07w00229jx3dmm55pm7","_id":"cl0zde08y004u9jx30ln20w6n"},{"post_id":"cl0zde07h000y9jx3f6qkfx3l","tag_id":"cl0zde07g000v9jx37nmo9ic6","_id":"cl0zde08y004w9jx34pcjb6ur"},{"post_id":"cl0zde07h000y9jx3f6qkfx3l","tag_id":"cl0zde07w00229jx3dmm55pm7","_id":"cl0zde08z00509jx3gzbmeonm"},{"post_id":"cl0zde07i00119jx32p6vft34","tag_id":"cl0zde07g000v9jx37nmo9ic6","_id":"cl0zde08z00529jx37i0e9fey"},{"post_id":"cl0zde07i00119jx32p6vft34","tag_id":"cl0zde07w00229jx3dmm55pm7","_id":"cl0zde09000569jx393hm0paf"},{"post_id":"cl0zde07j00139jx3ff1s8tzy","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde09000589jx32bxc32te"},{"post_id":"cl0zde07j00139jx3ff1s8tzy","tag_id":"cl0zde08w004e9jx3ewmu4tdz","_id":"cl0zde090005c9jx38hwd5uvb"},{"post_id":"cl0zde07u001y9jx32hot8d7x","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde091005e9jx354bt72lf"},{"post_id":"cl0zde07u001y9jx32hot8d7x","tag_id":"cl0zde08w004k9jx36ipwbigc","_id":"cl0zde091005i9jx346aqfbf3"},{"post_id":"cl0zde080002b9jx3bj4pful1","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde091005k9jx368ydhufq"},{"post_id":"cl0zde080002b9jx3bj4pful1","tag_id":"cl0zde08x004s9jx3cmb8a8db","_id":"cl0zde092005o9jx3hrjxg5ur"},{"post_id":"cl0zde081002e9jx3ec207n2o","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde092005q9jx31hdz87wd"},{"post_id":"cl0zde081002e9jx3ec207n2o","tag_id":"cl0zde08x004s9jx3cmb8a8db","_id":"cl0zde093005u9jx383fi8v5c"},{"post_id":"cl0zde084002m9jx3ehllc0zn","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde093005w9jx34xbs024a"},{"post_id":"cl0zde084002m9jx3ehllc0zn","tag_id":"cl0zde08x004s9jx3cmb8a8db","_id":"cl0zde09400609jx36pws0344"},{"post_id":"cl0zde086002r9jx3273bfi3h","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde09500629jx3479s3fzh"},{"post_id":"cl0zde086002r9jx3273bfi3h","tag_id":"cl0zde08w004k9jx36ipwbigc","_id":"cl0zde09600659jx355k1g0f8"},{"post_id":"cl0zde087002u9jx33azv8xed","tag_id":"cl0zde091005g9jx3exvy1si6","_id":"cl0zde09600689jx3gyza0o77"},{"post_id":"cl0zde087002u9jx33azv8xed","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde097006b9jx30lrl8o9t"},{"post_id":"cl0zde089002z9jx35of72x02","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde097006e9jx36w9c3mji"},{"post_id":"cl0zde089002z9jx35of72x02","tag_id":"cl0zde092005m9jx39mh3dwwg","_id":"cl0zde097006g9jx3g3116ieu"},{"post_id":"cl0zde08a00329jx35npc38gv","tag_id":"cl0zde07g000v9jx37nmo9ic6","_id":"cl0zde098006k9jx398sth7gf"},{"post_id":"cl0zde08a00329jx35npc38gv","tag_id":"cl0zde092005m9jx39mh3dwwg","_id":"cl0zde098006m9jx3gs3l2iv7"},{"post_id":"cl0zde08b00379jx357vm87jk","tag_id":"cl0zde07g000v9jx37nmo9ic6","_id":"cl0zde099006p9jx3gsp94x6e"},{"post_id":"cl0zde08b00379jx357vm87jk","tag_id":"cl0zde092005m9jx39mh3dwwg","_id":"cl0zde099006r9jx31tunf0gf"},{"post_id":"cl0zde08c003a9jx38c918qjn","tag_id":"cl0zde07g000v9jx37nmo9ic6","_id":"cl0zde099006u9jx3bh3s65uz"},{"post_id":"cl0zde08c003a9jx38c918qjn","tag_id":"cl0zde092005m9jx39mh3dwwg","_id":"cl0zde099006w9jx3fgk5ecug"},{"post_id":"cl0zde08d003f9jx346hi1tx9","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde09a006z9jx3d5wb695l"},{"post_id":"cl0zde08d003f9jx346hi1tx9","tag_id":"cl0zde097006a9jx3d1hv6upt","_id":"cl0zde09a00719jx33jmueskb"},{"post_id":"cl0zde08d003f9jx346hi1tx9","tag_id":"cl0zde098006j9jx3gq4n3qem","_id":"cl0zde09a00749jx37xl57s7o"},{"post_id":"cl0zde08e003i9jx38fsee8p5","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde09a00769jx3esi83ons"},{"post_id":"cl0zde08e003i9jx38fsee8p5","tag_id":"cl0zde092005m9jx39mh3dwwg","_id":"cl0zde09b00799jx3edvif7ym"},{"post_id":"cl0zde08f003m9jx3gy0z8dyp","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde09b007b9jx36rlm1bft"},{"post_id":"cl0zde08f003m9jx3gy0z8dyp","tag_id":"cl0zde08w004e9jx3ewmu4tdz","_id":"cl0zde09b007e9jx3arvobef0"},{"post_id":"cl0zde08q003u9jx39vdi5zzw","tag_id":"cl0zde08w004k9jx36ipwbigc","_id":"cl0zde09b007g9jx304wpdckh"},{"post_id":"cl0zde08q003u9jx39vdi5zzw","tag_id":"cl0zde09a00739jx35xz3effc","_id":"cl0zde09b007i9jx3970aa2ch"},{"post_id":"cl0zde08q003u9jx39vdi5zzw","tag_id":"cl0zde09a00789jx39q9q8fd9","_id":"cl0zde09c007l9jx3huy6hdnc"},{"post_id":"cl0zde08s003y9jx30518hvs3","tag_id":"cl0zde09b007d9jx31umq92lz","_id":"cl0zde09c007n9jx3csjo3m7b"},{"post_id":"cl0zde08t00429jx38vsuf23l","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde09c007q9jx3a7s7dbx4"},{"post_id":"cl0zde08t00429jx38vsuf23l","tag_id":"cl0zde09b007k9jx3f7ctdoye","_id":"cl0zde09c007s9jx39p6s0b7b"},{"post_id":"cl0zde09k007w9jx3gr3h96yj","tag_id":"cl0zde07g000v9jx37nmo9ic6","_id":"cl0zde09m007y9jx3536g6u0a"},{"post_id":"cl0zde09k007w9jx3gr3h96yj","tag_id":"cl0zde07w00229jx3dmm55pm7","_id":"cl0zde09n00809jx3hwpxff3s"},{"post_id":"cl0zde09l007x9jx3g7hzg1ru","tag_id":"cl0zde091005g9jx3exvy1si6","_id":"cl0zde09n00829jx3eec5g7ug"},{"post_id":"cl0zde09l007x9jx3g7hzg1ru","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde09o00849jx39tes5l46"},{"post_id":"cl0zde09m007z9jx36c77c3bw","tag_id":"cl0zde078000k9jx3099rcewj","_id":"cl0zde09p00869jx3gvtsak7f"},{"post_id":"cl0zde0b8008a9jx3d7vs2zqd","tag_id":"cl0zde0ba008b9jx34lhad03d","_id":"cl0zde0ba008d9jx38cnsdlin"}],"Tag":[{"name":"docker","_id":"cl0zde06o00059jx3hhmi93nr"},{"name":"jupyter","_id":"cl0zde073000d9jx3gurb2wed"},{"name":"python","_id":"cl0zde078000k9jx3099rcewj"},{"name":"基础","_id":"cl0zde07c000r9jx39qq6cekj"},{"name":"数据库","_id":"cl0zde07g000v9jx37nmo9ic6"},{"name":"mongo","_id":"cl0zde07i00129jx33qyjgb7a"},{"name":"k8s","_id":"cl0zde07l00179jx396jo1amp"},{"name":"mysql","_id":"cl0zde07w00229jx3dmm55pm7"},{"name":"爬虫","_id":"cl0zde08w004e9jx3ewmu4tdz"},{"name":"项目","_id":"cl0zde08w004k9jx36ipwbigc"},{"name":"设计模式","_id":"cl0zde08x004s9jx3cmb8a8db"},{"name":"数据分析","_id":"cl0zde091005g9jx3exvy1si6"},{"name":"redis","_id":"cl0zde092005m9jx39mh3dwwg"},{"name":"tcp","_id":"cl0zde097006a9jx3d1hv6upt"},{"name":"socket","_id":"cl0zde098006j9jx3gq4n3qem"},{"name":"requests","_id":"cl0zde09a00739jx35xz3effc"},{"name":"jsdom","_id":"cl0zde09a00789jx39q9q8fd9"},{"name":"-python - tcp&udp","_id":"cl0zde09b007d9jx31umq92lz"},{"name":"排序","_id":"cl0zde09b007k9jx3f7ctdoye"},{"name":"编码规范","_id":"cl0zde0ba008b9jx34lhad03d"}]}}