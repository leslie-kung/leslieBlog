{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/image/person.png","path":"image/person.png","modified":1,"renderable":0},{"_id":"source/image/code/code.png","path":"image/code/code.png","modified":1,"renderable":0},{"_id":"source/image/code/code2.jpg","path":"image/code/code2.jpg","modified":1,"renderable":0},{"_id":"source/image/code/code1.jpg","path":"image/code/code1.jpg","modified":1,"renderable":0},{"_id":"source/image/code/code4.jpg","path":"image/code/code4.jpg","modified":1,"renderable":0},{"_id":"source/image/code/code3.jpg","path":"image/code/code3.jpg","modified":1,"renderable":0},{"_id":"source/image/code/test1.png","path":"image/code/test1.png","modified":1,"renderable":0},{"_id":"source/image/crawl/leslie.png","path":"image/crawl/leslie.png","modified":1,"renderable":0},{"_id":"source/image/code/test2.png","path":"image/code/test2.png","modified":1,"renderable":0},{"_id":"source/image/crawl/red_heart.jpg","path":"image/crawl/red_heart.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/bitbug.ico","path":"images/bitbug.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/person.png","path":"images/person.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/clipboard/clipboard.js","path":"lib/clipboard/clipboard.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/clipboard/clipboard-action.js","path":"lib/clipboard/clipboard-action.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bai.js","path":"js/src/bai.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/clicklove.js","path":"js/src/clicklove.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/crash_cheat.js","path":"js/src/crash_cheat.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/custom.js","path":"js/src/custom.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/bg1.jpg","path":"images/bg1.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/bg4.jpg","path":"images/bg4.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/images/bg2.jpg","path":"images/bg2.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/bg.jpg","path":"images/bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"56ba8a08e9aae00595b8bf9d74deba4e0f5c062d","modified":1645796475256},{"_id":"themes/next/.DS_Store","hash":"4fd42816442950ed028d8ba347bc0ebfc93b181a","modified":1646041718602},{"_id":"source/robots.txt","hash":"3cdc633ca8bbbee1a0be98e022346bd9320996b2","modified":1646058680613},{"_id":"source/README.md","hash":"e079a1bb9f5f24a0f86f34c508c56c1fd4157517","modified":1645778229086},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1645778229098},{"_id":"themes/next/.gitignore","hash":"ed6da46febdee17e1b2d889d0a922ed07f97d80a","modified":1645778229099},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1645778229098},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1645778229100},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1645778229100},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1645778229098},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1645778229100},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1645778229100},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1645778229101},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1645778229100},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1645778229101},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1645778229101},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1645778229102},{"_id":"themes/next/_config.yml","hash":"e0aca2e0471dfde97fce0ece0ec7be8a284ec7f4","modified":1646058755883},{"_id":"themes/next/package.json","hash":"b5df2993cc2326ba3cf039bce2c86a2c6dd3a8d7","modified":1645778229127},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1645778229102},{"_id":"source/404/404.md","hash":"dfdb8c29f80314dc5ed01fe2cdd72df2b0d67a55","modified":1645778229086},{"_id":"source/_posts/docker容器.md","hash":"91fb09f257c313044c4cfdc26c401f4345d6fa6b","modified":1645778229086},{"_id":"source/_posts/jupyter搭建.md","hash":"8d513b9a5a283cf5dc9d8cf3d98cea0625b6094d","modified":1645778229087},{"_id":"source/_posts/docker镜像.md","hash":"dcc884d09522df44b53ff922dc1e1d3a1e7f5d0f","modified":1645778229087},{"_id":"source/_posts/lambda函数.md","hash":"ac120a00249c00e066b0b064da78b522aebd6ae2","modified":1645778229087},{"_id":"source/_posts/mysql导入导出数据.md","hash":"c198a20bf09a879daee028acf785927230adf57d","modified":1645970852069},{"_id":"source/_posts/mongo去重.md","hash":"faf01dad963009eca89052943dee7fc637fb4c1f","modified":1645778229087},{"_id":"source/_posts/mysql用户创建授权.md","hash":"a345970f6e0c27ae0aec0f471545e5f946dfb068","modified":1645969732222},{"_id":"source/_posts/mysql生成sql语句.md","hash":"95d26e7e229a78d83754c207b39151a0c83a7edc","modified":1645968853711},{"_id":"source/_posts/numpy学习.md","hash":"45996940c0adbc33dd1b67d50f2c791c47fdbba0","modified":1645778229088},{"_id":"source/_posts/mysql连接池.md","hash":"58ae01c89a03d00f2dfb71aac9ebfef21b6664c5","modified":1645967737563},{"_id":"source/_posts/mysql重置root密码.md","hash":"cdf64d879e03e136cf83c06469c8346e8e89df71","modified":1645969443167},{"_id":"source/_posts/pep8.md","hash":"3238208ffa77ec58c82447dde9d3d25a5514559d","modified":1645778229088},{"_id":"source/_posts/python3中Unicode字符转中文.md","hash":"105c2884d4c940fc37e31183d8065ae42bb7ec19","modified":1645778229088},{"_id":"source/_posts/python中arrow库的使用.md","hash":"ebcec28ee3d75a42145f92e5f49b1616363195a3","modified":1645778229089},{"_id":"source/_posts/python中random库使用.md","hash":"ffe629fc8b804bea9d7c0c86de3efec62218b66a","modified":1645778229089},{"_id":"source/_posts/python中闭包和装饰器.md","hash":"ac2d78a1d573742dd24bc78bfb7256ed75d7b7de","modified":1645778229089},{"_id":"source/_posts/python中元素替换.md","hash":"bb9efcf25a11762ce9ed7ebd0455403ac8b0e4cf","modified":1645778229089},{"_id":"source/_posts/python之copy.md","hash":"022fb6395f7b8308850effda2e029ac00bf9c61d","modified":1645778229090},{"_id":"source/_posts/python处理简单验证码.md","hash":"6c77d968c0525ec5e36fd25741cbd7af7dcd8671","modified":1645778229090},{"_id":"source/_posts/python图片转字符串.md","hash":"9550714ca30bc74300da45e9fa5ede5c8ec2c299","modified":1645778229090},{"_id":"source/_posts/python字典多次嵌套.md","hash":"e54767a5b2782a7a7d9324150142975a58df0521","modified":1645778229090},{"_id":"source/_posts/python版布隆过滤器.md","hash":"f6e90036d37db28a1e855eca6d2089c0ba6c9937","modified":1645778229091},{"_id":"source/_posts/排序.md","hash":"c176f457f2ef78e1382da45b867b71872ad0f970","modified":1646116760335},{"_id":"source/_posts/python返回每个月最大天数.md","hash":"348b5dffc0aadf3c7831a1a06da9ec65c0cebd75","modified":1645778229091},{"_id":"source/_posts/百度贴吧图片抓取.md","hash":"9a8cad297687bb4b22d3d946b85ac42e2b0391b2","modified":1645778229091},{"_id":"source/_posts/python进行excel转json.md","hash":"e6e82b87148b7bea4eabc39724ff07a4730fe157","modified":1645778229091},{"_id":"source/_posts/解决api变化问题.md","hash":"2b48f2552094f21a06de20273aa3257635d4aada","modified":1645778229092},{"_id":"source/about/index.md","hash":"0ef1e8c20a5aa8a99bc3a99c4d197df6d7c1229f","modified":1645778229092},{"_id":"source/_posts/tcp-socket.md","hash":"c7aeb5fba8424c887e8c68078a9dff18f46e50ef","modified":1646117797630},{"_id":"source/categories/index.md","hash":"49d62dd8d2ddaa01ee08fa1ea8129fc768914310","modified":1646116392384},{"_id":"source/tags/index.md","hash":"d2ced0bef02cbe54ef03cf0dfc71d351f856cc66","modified":1645778229097},{"_id":"source/archives/index.md","hash":"c96216bc1dba0162cf576ca8ae1aaee563a73501","modified":1646116363034},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1645778229098},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1645778229099},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1645778229099},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1645778229099},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1645778229127},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1645778229128},{"_id":"themes/next/source/.DS_Store","hash":"1fa1807b98d54e121359c60130319544b3a2e786","modified":1646040756433},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1645778229219},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1645778229220},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1645778229220},{"_id":"themes/next/layout/_layout.swig","hash":"1babb18a4b8976bf906857da3a146c74c0ac1cbb","modified":1646039130106},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1645778229125},{"_id":"themes/next/layout/index.swig","hash":"2b509072e309dd377862601980d2b7826bfa5e21","modified":1646058080143},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1645778229126},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1645778229126},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1645778229127},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1645778229126},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1645778229126},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1645778229103},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1645778229103},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1645778229103},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1645778229104},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1645778229103},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1645778229104},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1645778229104},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1645778229105},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1645778229104},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1645778229105},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1645778229105},{"_id":"themes/next/languages/zh-Hans.yml","hash":"1b5a4694e203456621d65d72c4b6f1bc228705a3","modified":1645778229106},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1645778229106},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1645778229106},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1645778229106},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1645778229106},{"_id":"source/image/person.png","hash":"7c7337c6087ad318301704701b7f75c8c6b7f8c3","modified":1645778229097},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229158},{"_id":"source/image/code/code.png","hash":"e32688196e5b2c805ed464502dc0765e93ab7d25","modified":1645778229093},{"_id":"source/image/code/code2.jpg","hash":"dcfed35715be15603262103e7ee8bd586cee68a1","modified":1645778229093},{"_id":"source/image/code/code1.jpg","hash":"552eba9de819bd0d5c9c955b19903dd9a3a926dd","modified":1645778229093},{"_id":"source/image/code/code4.jpg","hash":"9fd7c541554a6959ae539e5315fdb066fb3ee582","modified":1645778229094},{"_id":"source/image/code/code3.jpg","hash":"26e585ecde73ce911c232d631fa320db664771c9","modified":1645778229094},{"_id":"source/image/code/test1.png","hash":"ce1d2dda5d25916e958c8f242585ff5f84538d72","modified":1645778229095},{"_id":"source/image/crawl/leslie.png","hash":"76fe398b6630fb79980c1b3319a287619a6cff52","modified":1645778229096},{"_id":"source/image/code/test2.png","hash":"4edcf30135a40b9261253882c2e78945325cc255","modified":1645778229095},{"_id":"source/image/crawl/red_heart.jpg","hash":"4a43ecd11b0e50fcb3711dc4aed41c779eed8a97","modified":1645778229096},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1645778229128},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1645778229128},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1645778229129},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1645778229129},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1645778229129},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1645778229129},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1645778229130},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1645778229130},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1645778229130},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1645778229158},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1645778229158},{"_id":"themes/next/source/images/.DS_Store","hash":"a8cc3dd444e5994b1e7ef73fd13c6196025c85b7","modified":1646040756435},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1645778229160},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1645778229160},{"_id":"themes/next/source/images/bitbug.ico","hash":"eacf4fafffb3bd22c0a4a35d00f953f328237374","modified":1645778229167},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1645778229167},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1645778229168},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1645778229168},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1645778229168},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1645778229168},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1645778229169},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1645778229169},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1645778229169},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1645778229169},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1645778229170},{"_id":"themes/next/source/images/favicon.ico","hash":"d08ec0c0e6b1d9559eeba084a7057c7a56c13978","modified":1646036597496},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1645778229169},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1645778229170},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1645778229171},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1645778229171},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1645778229171},{"_id":"themes/next/layout/_custom/custom.swig","hash":"b212694dd305b510870074761703a00668611d80","modified":1645778229107},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1645778229107},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1645778229107},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"515cc06bc714e0de8cf164debb01eaf735eedd89","modified":1645778229108},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1645778229108},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1645778229108},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6fe3eef747ae4d4a52fe5d95d3ef77ca8b021b34","modified":1646039831388},{"_id":"themes/next/layout/_macro/post.swig","hash":"4f35cc6d333ac86769e53b1e53d5c1ce79b2972b","modified":1645778229108},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1645778229109},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1645778229109},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1645778229115},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1645778229115},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1645778229117},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1645778229122},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1645778229122},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1645778229122},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1645778229123},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1645778229123},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1645778229110},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1645778229123},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1645778229123},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1645778229112},{"_id":"themes/next/layout/_partials/footer-bak.swig.bak","hash":"7ecf13c7e96a2c8aa73fc5b435c950c8de1d430d","modified":1645778229110},{"_id":"themes/next/layout/_partials/footer.swig","hash":"383ab44dd08eb19ac50725ebe9ee74373a0738b5","modified":1645778229110},{"_id":"themes/next/layout/_partials/head.swig","hash":"18503e6fecca68ccc4af5a0b2ffe6cb6ccbf26e2","modified":1645778229111},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1645778229113},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"fe514aed6cc31770c224ee998cf2ffa5d5dea9e7","modified":1645778229113},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1645778229113},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229157},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229157},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229149},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229149},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229150},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229116},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645778229116},{"_id":"themes/next/source/images/person.png","hash":"7c7337c6087ad318301704701b7f75c8c6b7f8c3","modified":1645778229170},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1645778229156},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1645778229156},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1645778229157},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1645778229157},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"293dcd718bbed67ddfd5729eedcbf080cc8f0614","modified":1645784900056},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1645778229149},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1645778229150},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1645778229150},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1645778229184},{"_id":"themes/next/source/lib/clipboard/clipboard.js","hash":"58de9e9688c6d4bd796d1eb88b6df3b7eb3d0182","modified":1645778229187},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1645778229180},{"_id":"themes/next/source/lib/clipboard/clipboard-action.js","hash":"8129a822aec2c10d043f423a9350998c8e35eb35","modified":1645778229187},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1645778229183},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1645778229205},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1645778229192},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1645778229193},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1645778229193},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1645778229193},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1645778229206},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1645778229206},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1645778229206},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1645778229207},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1645778229194},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1645778229207},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1645778229207},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1645778229195},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1645778229194},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1645778229195},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1645778229195},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1645778229208},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1645778229208},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1645778229208},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1645778229212},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1645778229209},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1645778229212},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1645778229212},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1645778229209},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1645778229209},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1645778229209},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1645778229210},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1645778229210},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1645778229210},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1645778229210},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1645778229210},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1645778229211},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1645778229211},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1645778229211},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1645778229211},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1645778229211},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1645778229217},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1645778229216},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1645778229219},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1645778229218},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1645778229173},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1645778229219},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1645778229173},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1645778229173},{"_id":"themes/next/source/js/src/bai.js","hash":"41dd22b64eb15fe191983d9a0f26a968e7dee0e7","modified":1646059095912},{"_id":"themes/next/source/js/src/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1645778229173},{"_id":"themes/next/source/js/src/crash_cheat.js","hash":"38450bee383082cab5fe63002af5c8855327a157","modified":1645778229173},{"_id":"themes/next/source/js/src/custom.js","hash":"0231b7b49aca7adce98475fa0b754db4592a16e3","modified":1645778229174},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1645778229174},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1645778229174},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1645778229175},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1645778229175},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1645778229175},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1645778229176},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1645778229176},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1645778229176},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1645778229116},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1645778229116},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1645778229116},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1645778229117},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1645778229118},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1645778229117},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"eae81667a7e4dc2d7850f8c9c7c5f69856ac7454","modified":1645778229172},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1645778229118},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1645778229118},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1645778229118},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1645778229118},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1645778229119},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1645778229119},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1645778229119},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1645778229119},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1645778229120},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1645778229120},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1645778229124},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1645778229125},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1645778229120},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1645778229124},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1645778229120},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1645778229125},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1645778229121},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1645778229120},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1645778229121},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1645778229121},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1645778229121},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1645778229122},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1645778229122},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1645778229112},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1645778229112},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1645778229114},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1645778229114},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1645778229114},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1645778229113},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1645778229114},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1645778229115},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1645778229115},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1645778229206},{"_id":"themes/next/source/images/alipay.jpg","hash":"2cc8ff91bc8399d330e321cd8d548b6e6712220b","modified":1645778229160},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1645778229131},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1645778229131},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1645778229131},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1645778229132},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1645778229131},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1645778229136},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1645778229142},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1645778229147},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1645778229148},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1645778229147},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1645778229147},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1645778229148},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1645778229151},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1645778229148},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1645778229149},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1645778229151},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1645778229151},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1645778229151},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1645778229151},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1645778229152},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1645778229153},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1645778229152},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1645778229152},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1645778229153},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1645778229154},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1645778229154},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1645778229154},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1645778229155},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1645778229155},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"428157368e062b7c4c0de26dec1539e4f07903dc","modified":1645778229155},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1645778229155},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1645778229156},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1645778229156},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1645778229178},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1645778229180},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1645778229179},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1645778229188},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1645778229188},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1645778229189},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1645778229189},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1645778229189},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1645778229189},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1645778229191},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1645778229192},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1645778229194},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1645778229192},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1645778229194},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1645778229196},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1645778229195},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1645778229196},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1645778229216},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1645778229216},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1645778229175},{"_id":"themes/next/source/images/bg1.jpg","hash":"8d91b7a4b25ea165f234228c65105ad195d12d44","modified":1645778229163},{"_id":"themes/next/source/images/bg4.jpg","hash":"f0c1de81d8cc9a663d8dc97270e29e9fea509a89","modified":1646038219475},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1645778229124},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1645778229124},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1645778229179},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1645778229204},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1645778229204},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1645778229218},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1645778229134},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1645778229134},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1645778229134},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1645778229132},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1645778229135},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1645778229135},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1645778229135},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1645778229135},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1645778229135},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1645778229132},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1645778229133},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1645778229133},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1645778229133},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1645778229133},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1645778229145},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1645778229145},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1645778229145},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1645778229145},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1645778229146},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1645778229146},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1645778229146},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1645778229146},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1645778229146},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1645778229147},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1645778229143},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1645778229143},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1645778229143},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1645778229143},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1645778229144},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1645778229144},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1645778229144},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1645778229140},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1645778229144},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1645778229144},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1645778229140},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1645778229140},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"fe4a9392160e57d20bb06b61861ee1ba5c4deb28","modified":1645778229140},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1645778229141},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1645778229141},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1645778229141},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1645778229141},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1645778229142},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1645778229142},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"fe2a87f0daabccb44740d9b28e378a07d5f30090","modified":1645778229136},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1645778229136},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1645778229137},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1645778229137},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1645778229137},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1645778229137},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1645778229137},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1645778229138},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1645778229138},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"9ff94d0df95e53afeb4333c9c94083435b547c6a","modified":1645778229138},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1645778229138},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1645778229139},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1645778229139},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1645778229139},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1645778229139},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1645778229152},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"36a72cc1d45a13e8ddbe29e5e1f2d893c6eac253","modified":1645778229140},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1645778229153},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1645778229155},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1645778229177},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1645778229177},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1645778229177},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1645778229178},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1645778229178},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1645778229190},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1645778229190},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1645778229190},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1645778229190},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1645778229191},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1645778229191},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1645778229198},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1645778229203},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1645778229199},{"_id":"themes/next/source/images/bg2.jpg","hash":"cfa4a0ebeb8f87dd659d96811818d79a9c386578","modified":1645778229164},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1645778229183},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1645778229202},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1645778229215},{"_id":"themes/next/source/images/bg.jpg","hash":"5eccb3427a93723ab0a95ed9bf1a6f056cac80de","modified":1646038229681},{"_id":"public/baidusitemap.xml","hash":"2380192bb9e7ee0ab817636998e64d26a3a2fdfa","modified":1646118074803},{"_id":"public/sitemap.xml","hash":"9aeba2f487d84eece65ff0112196c04bbb38d539","modified":1646118074803},{"_id":"public/search.xml","hash":"9ca18116b3b7b3d4730822fdadbde91c36cd76ea","modified":1646118074803},{"_id":"public/404.html","hash":"14fced39e20063a392262448106bf56f38159556","modified":1646118074803},{"_id":"public/categories/index.html","hash":"978903ff9f195494f41f3e952f433df1481ee91a","modified":1646118074803},{"_id":"public/about/index.html","hash":"6397cff552d99a25b76f418030c82e21bfec4ba0","modified":1646118074803},{"_id":"public/tags/index.html","hash":"eed5e9aece48369088bf997512743ce3daad92d6","modified":1646118074803},{"_id":"public/archives/index.html","hash":"79cc5dfe30aec0c649d3413daaa6654856691ff1","modified":1646118074803},{"_id":"public/python/排序/排序/index.html","hash":"156e034d5fbcf145155d637789232de3272efac3","modified":1646118074803},{"_id":"public/python/tcp/socket/tcp-socket/index.html","hash":"3cecae945a282f91abc4b085e70bb108fe6bac8f","modified":1646118074803},{"_id":"public/数据库/mysql/mysql导入导出数据/index.html","hash":"f407548c3ef15b21d54b6bc71ad89b23003c6cd1","modified":1646118074803},{"_id":"public/数据库/mysql/mysql用户创建授权/index.html","hash":"456624fcf905c3a2a5e698647d23f41bc929285d","modified":1646118074803},{"_id":"public/数据库/mysql/mysql重置root密码/index.html","hash":"33d6629191c50b1e26bd3ca7656383b5838213bd","modified":1646118074803},{"_id":"public/数据库/mysql/mysql生成sql语句/index.html","hash":"f11290cb210596ab4307060869ad26ddc2185038","modified":1646118074803},{"_id":"public/数据库/mysql/mysql连接池/index.html","hash":"b54e955ebef96ef3eb8aadd8e4f9940aa603186e","modified":1646118074803},{"_id":"public/docker/docker容器/index.html","hash":"355b1e96384e5ed8bbce1181c8c85b5ef5f277ca","modified":1646118074803},{"_id":"public/docker/docker镜像/index.html","hash":"01989f4d67dd156bc08e24050c9ae0894ce76684","modified":1646118074803},{"_id":"public/python/数据分析/numpy学习/index.html","hash":"4f3249cd6454d232f8e9c8d0b395462916292346","modified":1646118074803},{"_id":"public/python/python图片转字符串/index.html","hash":"bffd6f3384a4f706d0ce22af8e7e89324194b5e6","modified":1646118074803},{"_id":"public/python/jupyter/jupyter搭建/index.html","hash":"234da8c68a198f8bd57db316f1ccd3daf6fed563","modified":1646118074803},{"_id":"public/数据库/mongo/mongo去重/index.html","hash":"7ae64425216f2f15d73883358cbb6745c2d19e85","modified":1646118074803},{"_id":"public/python/爬虫/解决api变化问题/index.html","hash":"e6a50c94127f0edc9f71ec8436f60d7deadd3980","modified":1646118074803},{"_id":"public/lambda/lambda函数/index.html","hash":"e0d238c103719f01611783a7fceff41def5e6652","modified":1646118074803},{"_id":"public/python/爬虫/百度贴吧图片抓取/index.html","hash":"22e4a1f2640d7ac2d99a907370814f2466771ce3","modified":1646118074803},{"_id":"public/python/python返回每个月最大天数/index.html","hash":"4e455bc2aae9b14ad314f072f8faa271dea07cfd","modified":1646118074803},{"_id":"public/python/爬虫/python3中Unicode字符转中文/index.html","hash":"f8e04cade2ec980e1badf4272a0977bc9dceb904","modified":1646118074803},{"_id":"public/python/python中元素替换/index.html","hash":"96dd5a136f5c04a02c018d47364bc0e3e17241cb","modified":1646118074803},{"_id":"public/python/python中arrow库的使用/index.html","hash":"ede8fb5d55639964e9c2ca8bd2a0344c49ce41c1","modified":1646118074803},{"_id":"public/python/python中random库使用/index.html","hash":"5ae43b0b0bcdb4abd9a0ab401138c8a2defd16e0","modified":1646118074803},{"_id":"public/python/python处理简单验证码/index.html","hash":"8e87494e055b03fa23b5679e97dffa53c4056621","modified":1646118074803},{"_id":"public/python/数据分析/python进行excel转json/index.html","hash":"fea7d9716972ce239d852592a6f2969b3f839910","modified":1646118074803},{"_id":"public/python/python字典多次嵌套/index.html","hash":"f599928d5d65f7dec79aac58673b77611ae85633","modified":1646118074803},{"_id":"public/python/python中闭包和装饰器/index.html","hash":"33950fc11ec0143010c76892335dbc904d22b33b","modified":1646118074803},{"_id":"public/python/python之copy/index.html","hash":"9aec94a46dd6e5fb8aa4383c21f2e6b2f858c060","modified":1646118074803},{"_id":"public/python/python版布隆过滤器/index.html","hash":"103ad4e8ab86883039caa68c8b84b17be586624e","modified":1646118074803},{"_id":"public/python/pep8/index.html","hash":"e279585d28f83b0603fd13bb90a98049c74aabd7","modified":1646118074803},{"_id":"public/categories/docker/index.html","hash":"2bb00da86a6886b2530347f0e44ff65ed50cb13b","modified":1646118074803},{"_id":"public/categories/python/index.html","hash":"4b168c47ade7d203c03d7e426adfd430ef938bff","modified":1646118074803},{"_id":"public/categories/python/page/2/index.html","hash":"2cd5ee862391fec9744a31718e1b89c7775024ed","modified":1646118074803},{"_id":"public/categories/lambda/index.html","hash":"5172405a16769c921d6ca663097b9a00fb50976f","modified":1646118074803},{"_id":"public/categories/数据库/index.html","hash":"b47acd8cb75039ec301f5318b56c27df0d1259be","modified":1646118074803},{"_id":"public/categories/python/jupyter/index.html","hash":"c8fbe4c9a927bfefcc3f4e32dd948ed50a9bf189","modified":1646118074803},{"_id":"public/categories/python/爬虫/index.html","hash":"87b28d9916a86c0207327cde89307a7eb2cf3417","modified":1646118074803},{"_id":"public/categories/数据库/mongo/index.html","hash":"7580e3138a334683e8e95c33e1ecca8d5933cb7f","modified":1646118074803},{"_id":"public/categories/数据库/mysql/index.html","hash":"92053b89b4f81000330e3331e6cf32a6a0404068","modified":1646118074803},{"_id":"public/categories/python/排序/index.html","hash":"3fdeb94fd5f67975eaeddba1c491da346a7ca7a5","modified":1646118074803},{"_id":"public/categories/python/数据分析/index.html","hash":"82b9cd7f87608f8b4755bbb6080fd52d34024050","modified":1646118074803},{"_id":"public/categories/python/tcp/index.html","hash":"1fab9316c55004dd2be41df6e5cb585d8b770ec8","modified":1646118074803},{"_id":"public/categories/python/tcp/socket/index.html","hash":"b0c97a7dc7b815153b0b6ce70fdedda9355feccf","modified":1646118074803},{"_id":"public/index.html","hash":"f34c43ab73679224c15f8f0b9066c609e2825be5","modified":1646118074803},{"_id":"public/page/2/index.html","hash":"066adf0a4783b04a2c2d1fcfc252c4211d12414a","modified":1646118074803},{"_id":"public/page/3/index.html","hash":"c58905d8a6406d6c4112b35de4ba577b5849ea55","modified":1646118074803},{"_id":"public/archives/page/2/index.html","hash":"9756e7c39992f8dffd747b066b2233fc12ec94ce","modified":1646118074803},{"_id":"public/archives/page/3/index.html","hash":"3e841b55bd5495a6b4439579f3fc5881427d407e","modified":1646118074803},{"_id":"public/archives/2019/index.html","hash":"f1941eea92135d15179067a1f94eac76d04298a1","modified":1646118074803},{"_id":"public/archives/2019/12/index.html","hash":"a75a474afe0ee774a6e235a12b45f9ce799070e2","modified":1646118074803},{"_id":"public/archives/2020/index.html","hash":"3414d3d5a51c2f4844fe0da3e2a907bb651d488a","modified":1646118074803},{"_id":"public/archives/2020/page/2/index.html","hash":"e6f88c91f84337dbf94a2964b4f362733ba59eec","modified":1646118074803},{"_id":"public/archives/2020/01/index.html","hash":"d71d9e61aea47165a6ecf0bbc9ea9efdedccd0e4","modified":1646118074803},{"_id":"public/archives/2020/01/page/2/index.html","hash":"3daf5bd68c3078663436a08288f78e8a70e0e8d7","modified":1646118074803},{"_id":"public/archives/2022/index.html","hash":"f9749dd0561ea24e4436041bc99a5af7e0b246d2","modified":1646118074803},{"_id":"public/archives/2022/02/index.html","hash":"df8ae9ddf2811834c074e7618d1418d3ea879e22","modified":1646118074803},{"_id":"public/archives/2022/03/index.html","hash":"00600ace196d977d1e3b5d7ea1693d638cc45bf8","modified":1646118074803},{"_id":"public/tags/docker/index.html","hash":"e095b5b64bf5011580426a5805ad651af836a9fd","modified":1646118074803},{"_id":"public/tags/jupyter/index.html","hash":"9ccf3161d3778c6fdf6c2621576c17f802ecf244","modified":1646118074803},{"_id":"public/tags/项目/index.html","hash":"e106011b3d78e282e072e15117b2b5c9f78c73a3","modified":1646118074803},{"_id":"public/tags/lambda/index.html","hash":"f7c4a3baa109fbe7a710f66edfb8b78dcaa23812","modified":1646118074803},{"_id":"public/tags/数据库/index.html","hash":"503433558753c71950c7f8bed42aed09bc469220","modified":1646118074803},{"_id":"public/tags/mysql/index.html","hash":"c01094a09b407bb53a4f987a12385ed495c6301a","modified":1646118074803},{"_id":"public/tags/mongo/index.html","hash":"4143a2341e21ec4d263706fb2579a56c8cbabd97","modified":1646118074803},{"_id":"public/tags/python/index.html","hash":"815e329a22bb9fb24b6a85d7cd1883f1ca0b5d9e","modified":1646118074803},{"_id":"public/tags/python/page/2/index.html","hash":"4c99ebb23a39d219a5fefc7a471ec190a78e1a4f","modified":1646118074803},{"_id":"public/tags/爬虫/index.html","hash":"9423e417d47f70510adb796c6f7b1ee81d64961a","modified":1646118074803},{"_id":"public/tags/排序/index.html","hash":"20cf19c4612c37461aacdb19404381849c73ac2b","modified":1646118074803},{"_id":"public/tags/数据分析/index.html","hash":"846df5bd5728a34df5f453392388503882b46da3","modified":1646118074803},{"_id":"public/tags/requests/index.html","hash":"fe29980a87e90d4b58444c6971ae1c8dc3d50691","modified":1646118074803},{"_id":"public/tags/jsdom/index.html","hash":"cd0976dbdb032bcd41a01367e6be2b40cfd94b1c","modified":1646118074803},{"_id":"public/tags/tcp/index.html","hash":"14728b0f81e1b7243a4eeed5a4da540769a3af02","modified":1646118074803},{"_id":"public/tags/socket/index.html","hash":"a5ded6114c2a477385d769dcd4c692b23803b1b7","modified":1646118074803},{"_id":"public/tags/编码规范/index.html","hash":"807f6bb00a0146e481aa6c28ad2770fa17868838","modified":1646118074803},{"_id":"public/CNAME","hash":"56ba8a08e9aae00595b8bf9d74deba4e0f5c062d","modified":1646118074803},{"_id":"public/README.md","hash":"e079a1bb9f5f24a0f86f34c508c56c1fd4157517","modified":1646118074803},{"_id":"public/robots.txt","hash":"3cdc633ca8bbbee1a0be98e022346bd9320996b2","modified":1646118074803},{"_id":"public/image/code/code.png","hash":"e32688196e5b2c805ed464502dc0765e93ab7d25","modified":1646118074803},{"_id":"public/image/code/code2.jpg","hash":"dcfed35715be15603262103e7ee8bd586cee68a1","modified":1646118074803},{"_id":"public/image/code/code1.jpg","hash":"552eba9de819bd0d5c9c955b19903dd9a3a926dd","modified":1646118074803},{"_id":"public/image/code/code4.jpg","hash":"9fd7c541554a6959ae539e5315fdb066fb3ee582","modified":1646118074803},{"_id":"public/image/code/code3.jpg","hash":"26e585ecde73ce911c232d631fa320db664771c9","modified":1646118074803},{"_id":"public/image/crawl/leslie.png","hash":"76fe398b6630fb79980c1b3319a287619a6cff52","modified":1646118074803},{"_id":"public/image/crawl/red_heart.jpg","hash":"4a43ecd11b0e50fcb3711dc4aed41c779eed8a97","modified":1646118074803},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1646118074803},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1646118074803},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1646118074803},{"_id":"public/images/bitbug.ico","hash":"eacf4fafffb3bd22c0a4a35d00f953f328237374","modified":1646118074803},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1646118074803},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1646118074803},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1646118074803},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1646118074803},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1646118074803},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1646118074803},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1646118074803},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1646118074803},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1646118074803},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1646118074803},{"_id":"public/images/favicon.ico","hash":"d08ec0c0e6b1d9559eeba084a7057c7a56c13978","modified":1646118074803},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1646118074803},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1646118074803},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1646118074803},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1646118074803},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1646118074803},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1646118074803},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1646118074803},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1646118074803},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1646118074803},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1646118074803},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1646118074803},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1646118074803},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1646118074803},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1646118074803},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1646118074803},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1646118074803},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1646118074803},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1646118074803},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1646118074803},{"_id":"public/live2dw/assets/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1646118074803},{"_id":"public/live2dw/assets/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1646118074803},{"_id":"public/live2dw/assets/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1646118074803},{"_id":"public/live2dw/assets/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/idle_00.mtn","hash":"f9fa4acb170959ed665690d18790fc618cea6bd2","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/idle_01.mtn","hash":"fe824e9209bda79277f4785a637c38bf3b8e1cad","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/idle_02.mtn","hash":"58b87745d9c2b2b5667549a52a781b6bfea44927","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1646118074803},{"_id":"public/live2dw/assets/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1646118074803},{"_id":"public/live2dw/assets/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1646118074803},{"_id":"public/live2dw/assets/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1646118074803},{"_id":"public/live2dw/assets/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1646118074803},{"_id":"public/live2dw/assets/package.json","hash":"ab3e843484492ab7f5d4522132fbd3eecc4a40eb","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1646118074803},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1646118074803},{"_id":"public/image/person.png","hash":"7c7337c6087ad318301704701b7f75c8c6b7f8c3","modified":1646118074803},{"_id":"public/image/code/test1.png","hash":"ce1d2dda5d25916e958c8f242585ff5f84538d72","modified":1646118074803},{"_id":"public/image/code/test2.png","hash":"4edcf30135a40b9261253882c2e78945325cc255","modified":1646118074803},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1646118074803},{"_id":"public/images/person.png","hash":"7c7337c6087ad318301704701b7f75c8c6b7f8c3","modified":1646118074803},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1646118074803},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1646118074803},{"_id":"public/live2dw/assets/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1646118074803},{"_id":"public/live2dw/assets/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1646118074803},{"_id":"public/live2dw/assets/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1646118074803},{"_id":"public/live2dw/assets/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1646118074803},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1646118074803},{"_id":"public/lib/clipboard/clipboard.js","hash":"58de9e9688c6d4bd796d1eb88b6df3b7eb3d0182","modified":1646118074803},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1646118074803},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1646118074803},{"_id":"public/lib/clipboard/clipboard-action.js","hash":"8129a822aec2c10d043f423a9350998c8e35eb35","modified":1646118074803},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1646118074803},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1646118074803},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1646118074803},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1646118074803},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1646118074803},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1646118074803},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1646118074803},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1646118074803},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1646118074803},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1646118074803},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1646118074803},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1646118074803},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1646118074803},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1646118074803},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1646118074803},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1646118074803},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1646118074803},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1646118074803},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1646118074803},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1646118074803},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1646118074803},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1646118074803},{"_id":"public/js/src/bai.js","hash":"41dd22b64eb15fe191983d9a0f26a968e7dee0e7","modified":1646118074803},{"_id":"public/js/src/crash_cheat.js","hash":"38450bee383082cab5fe63002af5c8855327a157","modified":1646118074803},{"_id":"public/js/src/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1646118074803},{"_id":"public/js/src/custom.js","hash":"0231b7b49aca7adce98475fa0b754db4592a16e3","modified":1646118074803},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1646118074803},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1646118074803},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1646118074803},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1646118074803},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1646118074803},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1646118074803},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1646118074803},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1646118074803},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1646118074803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1646118074803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1646118074803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1646118074803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1646118074803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1646118074803},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1646118074803},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1646118074803},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1646118074803},{"_id":"public/css/main.css","hash":"fc5b1414a902b59211017ff05f8064a15edc5888","modified":1646118074803},{"_id":"public/images/wechatpay.jpg","hash":"eae81667a7e4dc2d7850f8c9c7c5f69856ac7454","modified":1646118074803},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1646118074803},{"_id":"public/live2dw/assets/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1646118074803},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1646118074803},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1646118074803},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1646118074803},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1646118074803},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1646118074803},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1646118074803},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1646118074803},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1646118074803},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1646118074803},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1646118074803},{"_id":"public/live2dw/assets/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1646118074803},{"_id":"public/live2dw/assets/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1646118074803},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1646118074803},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1646118074803},{"_id":"public/images/alipay.jpg","hash":"2cc8ff91bc8399d330e321cd8d548b6e6712220b","modified":1646118074803},{"_id":"public/images/bg1.jpg","hash":"8d91b7a4b25ea165f234228c65105ad195d12d44","modified":1646118074803},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1646118074803},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1646118074803},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1646118074803},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1646118074803},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1646118074803},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1646118074803},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1646118074803},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1646118074803},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1646118074803},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1646118074803},{"_id":"public/images/bg4.jpg","hash":"f0c1de81d8cc9a663d8dc97270e29e9fea509a89","modified":1646118074803},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1646118074803},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1646118074803},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1646118074803},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1646118074803},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1646118074803},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1646118074803},{"_id":"public/images/bg2.jpg","hash":"cfa4a0ebeb8f87dd659d96811818d79a9c386578","modified":1646118074803},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1646118074803},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1646118074803},{"_id":"public/live2dw/assets/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1646118074803},{"_id":"public/images/bg.jpg","hash":"5eccb3427a93723ab0a95ed9bf1a6f056cac80de","modified":1646118074803},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1646118074803},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1646118074803},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1646118074803}],"Category":[{"name":"docker","_id":"cl07s77xk0004hvx3be45bijk"},{"name":"python","_id":"cl07s77xs000chvx3h8gra8ko"},{"name":"lambda","_id":"cl07s77y0000nhvx38af088d1"},{"name":"数据库","_id":"cl07s77y3000thvx37hby85le"},{"name":"jupyter","parent":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77yb0015hvx35tvf3nnv"},{"name":"爬虫","parent":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77yv0025hvx37hyh1aww"},{"name":"mysql","parent":"cl07s77y3000thvx37hby85le","_id":"cl07s77yw0028hvx3165t5zvk"},{"name":"mongo","parent":"cl07s77y3000thvx37hby85le","_id":"cl07s77yw002chvx39uazbrkl"},{"name":"排序","parent":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77yz002shvx3h511f8q8"},{"name":"数据分析","parent":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77z20035hvx377nkhe2u"},{"name":"tcp","parent":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77z5003mhvx3c4j113gj"},{"name":"socket","parent":"cl07s77z5003mhvx3c4j113gj","_id":"cl07s77z6003uhvx34bc90fog"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <!-- <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script> -->\n  <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"返回\"></script>\n</body>\n</html>","source":"404/404.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <!-- <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script> -->\n  <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"返回\"></script>\n</body>\n</html>","date":"2022-02-25T08:37:09.086Z","updated":"2022-02-25T08:37:09.086Z","path":"/404.html","layout":"page","_id":"cl07s77x90000hvx39k3na5nf","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n<meta name=\"generator\" content=\"Hexo 4.2.0\"></head>\n<body>\n  <!-- <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script> -->\n  <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"返回\"></script>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/assets/shizuku.model.json\"},\"display\":{\"position\":\"right\",\"width\":250,\"height\":450},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n<meta name=\"generator\" content=\"Hexo 4.2.0\"></head>\n<body>\n  <!-- <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script> -->\n  <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"返回\"></script>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/assets/shizuku.model.json\"},\"display\":{\"position\":\"right\",\"width\":250,\"height\":450},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n</html>"},{"title":"about","date":"2019-12-30T07:41:09.000Z","type":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-12-30 15:41:09\ntype: \"about\"\ncomments: false\n---\n","updated":"2022-02-25T08:37:09.092Z","path":"about/index.html","layout":"page","_id":"cl07s77xh0002hvx33ruae5ny","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2019-12-30T07:40:18.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-12-30 15:40:18\ntype: \"categories\"\ncomments: false\n---\n","updated":"2022-03-01T06:33:12.384Z","path":"categories/index.html","layout":"page","_id":"cl07s77xm0006hvx34plr8cy6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-12-30T07:38:02.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-12-30 15:38:02\ntype: \"tags\"\ncomments: false\n---\n","updated":"2022-02-25T08:37:09.097Z","path":"tags/index.html","layout":"page","_id":"cl07s77xo0008hvx32msv0avi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"archives","date":"2022-03-01T06:31:14.000Z","type":"archives","comments":0,"_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2022-03-01 14:31:14\ntype: archives\ncomments: false\n---\n","updated":"2022-03-01T06:32:43.034Z","path":"archives/index.html","layout":"page","_id":"cl07s77xq000ahvx30r5cfxja","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"docker容器","type":"categories","copyright":true,"date":"2020-01-02T09:02:31.000Z","_content":"\n## docker容器\n### 容器介绍\n&emsp;&emsp;容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统和跑在上面的应用。\n\n### 新建启动容器\n&emsp;&emsp;启动容器的主要命令是docker run，下面的命令输出一个“hello world”，之后终止容器\n<!--more-->\n\n```sh\n$ sudo docker run ubuntu:14.04 /bin/echo 'Hello world'\nHello world\n```\n&emsp;&emsp;下面命令启动一个bash终端，允许用户进行交互\n```sh\n$ sudo docker run -t -i ubuntu:14.04 /bin/bash\nroot@af8bae53bdd3:/#\n```\n&emsp;&emsp;命令中的-t 表示让docker分配一个伪终端并绑定到容器的标准输入上，-i 则表示让容器的标准输入持续打开\n\n&emsp;&emsp;利用docker run 来创建容器时，docker 在后台运行的标准操作包括：\n\n* 检查本地是否存在指定的镜像，不存在从公有仓库进行下载；\n* 利用镜像创建并启动一个容器；\n* 分配一个文件系统，并在只读的镜像层外面挂载一个可读写层；\n* 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中；\n* 从地址池配置一个IP地址给容器；\n* 执行用户指定的应用程序；\n* 执行完毕后容器被终止\n\n### 启动已经终止的容器\n可以使用docker start 命令，启动一个已经终止的容器\n```sh\n$ docker start 容器ID \n```\n\n### 后台运行容器\n如果需要让docker 后台运行，可以通过添加-d 参数来启动容器\n```sh\n$ sudo docker run -d ubuntu:14.04 /bin/sh -c \"while true; do ech\no hello world; sleep 1; done\"\n```\n&emsp;&emsp;-d参数启动后会返回一个唯一的id，可以通过docker ps 查看容器信息；要获取容器输入信息，可以通过docker logs命令进行查看\n\n### 终止容器\n\n&emsp;&emsp;可以使用docker stop命令来终止一个已经运行的容器，此外，当docker 容器中指定的应用结束时，容器也自动终止。当docker 启动终端时，可以通过exit或ctrl+d来退出终端，容器立刻终止；\n\n终止后的容器可以通过docker ps -a 进行查看；\n\ndocker restart命令会将一个运行态的容器终止，然后重新启动它；\n```sh\n# 终止容器\n$ docker stop 容器ID\n# 查看容器\n$ docker ps -a\n```\n\n### 进入容器\nattach 命令\n\n&emsp;&emsp;docker attach命令是docker自带的命令，命令后面接容器，可以进入到该容器，打开终端；但是使用 attach 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。\n\nnsenter命令\n\n&emsp;&emsp;nsenter 工具在 util-linux 包2.23版本后包含。 如果系统中 util-linux 包没有该命令，可以按照下面的方法从源码安装。\n```sh\n$ cd /tmp; curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-; cd util-linux-2.24;\n$ ./configure --without-ncurses\n$ make nsenter && sudo cp nsenter /usr/local/bin\n```\n为了连接到容器，需要找到容器的第一个进程的pid,可以通过下面命令获取；\n```sh\nPID=$(docker inspect --format \"{{ .State.Pid }}\" <container>)\n```\n通过这个pid可以连接到这个容器\n```sh\n$ nsenter --target $PID --mount --uts --ipc --net --pid\n```\n#### 完整的demo\n```sh\n$ sudo docker run -idt ubuntu\n# 返回的容器id\n243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550\n$ sudo docker ps\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\n243c32535da7 ubuntu:latest \"/bin/bash\" 18 seconds ago Up 17 seconds nostalgic_hypatia\n$ PID=$(docker-pid 243c32535da7)\n10981\n$ sudo nsenter --target 10981 --mount --uts --ipc --net --pid\nroot@243c32535da7:/#\n```\n### 导出容器\n如果要导出本地某个容器，可以使用docker export 命令\n```sh\n$ sudo docker ps -a\nCONTAINER ID IMAGE COMMAND CREA\nTED STATUS PORTS NA\nMES\n7691a814370e ubuntu:14.04 \"/bin/bash\" 36 h\nours ago Exited (0) 21 hours ago te\nst\n$ sudo docker export 7691a814370e > ubuntu.tar\n```\n\n### 导入容器快照\n可以使用docker import 命令从容器快照文件中再导入为镜像\n```sh\n$ cat ubuntu.tar | sudo docker import - test/ubuntu:v1.0\n$ sudo docker images\nREPOSITORY TAG IMAGE ID CREA\nTED VIRTUAL SIZE\ntest/ubuntu v1.0 9d37a6082e97 Abou\nt a minute ago 171.3 MB\n```\n也可以通过指定的url或目录来导入\n```sh\n$ sudo docker import http://example.com/exampleimage.tgz example/imagerepo\n```\n\n&emsp;&emsp;用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容\n器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状\n态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入\n时可以重新指定标签等元数据信息。\n\n### 删除容器\n可以使用docker rm 来删除一个处于终止状态的容器\n```sh\n$ sudo docker rm trusting_newton\ntrusting_newton\n```\n如果要删除一个正在运行的容器，可以添加 -f 参数，docker 会发送SIGKILL信号给容器。\n\n### 清理所有处于终止状态的容器\n使用命令 \n```\ndocker rm $(docker ps -a -q)\n```\n","source":"_posts/docker容器.md","raw":"---\ntitle: docker容器\ntype: categories\ncopyright: true\ndate: 2020-01-02 17:02:31\ntags:\n    - docker\ncategories: docker\n---\n\n## docker容器\n### 容器介绍\n&emsp;&emsp;容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统和跑在上面的应用。\n\n### 新建启动容器\n&emsp;&emsp;启动容器的主要命令是docker run，下面的命令输出一个“hello world”，之后终止容器\n<!--more-->\n\n```sh\n$ sudo docker run ubuntu:14.04 /bin/echo 'Hello world'\nHello world\n```\n&emsp;&emsp;下面命令启动一个bash终端，允许用户进行交互\n```sh\n$ sudo docker run -t -i ubuntu:14.04 /bin/bash\nroot@af8bae53bdd3:/#\n```\n&emsp;&emsp;命令中的-t 表示让docker分配一个伪终端并绑定到容器的标准输入上，-i 则表示让容器的标准输入持续打开\n\n&emsp;&emsp;利用docker run 来创建容器时，docker 在后台运行的标准操作包括：\n\n* 检查本地是否存在指定的镜像，不存在从公有仓库进行下载；\n* 利用镜像创建并启动一个容器；\n* 分配一个文件系统，并在只读的镜像层外面挂载一个可读写层；\n* 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中；\n* 从地址池配置一个IP地址给容器；\n* 执行用户指定的应用程序；\n* 执行完毕后容器被终止\n\n### 启动已经终止的容器\n可以使用docker start 命令，启动一个已经终止的容器\n```sh\n$ docker start 容器ID \n```\n\n### 后台运行容器\n如果需要让docker 后台运行，可以通过添加-d 参数来启动容器\n```sh\n$ sudo docker run -d ubuntu:14.04 /bin/sh -c \"while true; do ech\no hello world; sleep 1; done\"\n```\n&emsp;&emsp;-d参数启动后会返回一个唯一的id，可以通过docker ps 查看容器信息；要获取容器输入信息，可以通过docker logs命令进行查看\n\n### 终止容器\n\n&emsp;&emsp;可以使用docker stop命令来终止一个已经运行的容器，此外，当docker 容器中指定的应用结束时，容器也自动终止。当docker 启动终端时，可以通过exit或ctrl+d来退出终端，容器立刻终止；\n\n终止后的容器可以通过docker ps -a 进行查看；\n\ndocker restart命令会将一个运行态的容器终止，然后重新启动它；\n```sh\n# 终止容器\n$ docker stop 容器ID\n# 查看容器\n$ docker ps -a\n```\n\n### 进入容器\nattach 命令\n\n&emsp;&emsp;docker attach命令是docker自带的命令，命令后面接容器，可以进入到该容器，打开终端；但是使用 attach 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。\n\nnsenter命令\n\n&emsp;&emsp;nsenter 工具在 util-linux 包2.23版本后包含。 如果系统中 util-linux 包没有该命令，可以按照下面的方法从源码安装。\n```sh\n$ cd /tmp; curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-; cd util-linux-2.24;\n$ ./configure --without-ncurses\n$ make nsenter && sudo cp nsenter /usr/local/bin\n```\n为了连接到容器，需要找到容器的第一个进程的pid,可以通过下面命令获取；\n```sh\nPID=$(docker inspect --format \"{{ .State.Pid }}\" <container>)\n```\n通过这个pid可以连接到这个容器\n```sh\n$ nsenter --target $PID --mount --uts --ipc --net --pid\n```\n#### 完整的demo\n```sh\n$ sudo docker run -idt ubuntu\n# 返回的容器id\n243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550\n$ sudo docker ps\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\n243c32535da7 ubuntu:latest \"/bin/bash\" 18 seconds ago Up 17 seconds nostalgic_hypatia\n$ PID=$(docker-pid 243c32535da7)\n10981\n$ sudo nsenter --target 10981 --mount --uts --ipc --net --pid\nroot@243c32535da7:/#\n```\n### 导出容器\n如果要导出本地某个容器，可以使用docker export 命令\n```sh\n$ sudo docker ps -a\nCONTAINER ID IMAGE COMMAND CREA\nTED STATUS PORTS NA\nMES\n7691a814370e ubuntu:14.04 \"/bin/bash\" 36 h\nours ago Exited (0) 21 hours ago te\nst\n$ sudo docker export 7691a814370e > ubuntu.tar\n```\n\n### 导入容器快照\n可以使用docker import 命令从容器快照文件中再导入为镜像\n```sh\n$ cat ubuntu.tar | sudo docker import - test/ubuntu:v1.0\n$ sudo docker images\nREPOSITORY TAG IMAGE ID CREA\nTED VIRTUAL SIZE\ntest/ubuntu v1.0 9d37a6082e97 Abou\nt a minute ago 171.3 MB\n```\n也可以通过指定的url或目录来导入\n```sh\n$ sudo docker import http://example.com/exampleimage.tgz example/imagerepo\n```\n\n&emsp;&emsp;用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容\n器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状\n态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入\n时可以重新指定标签等元数据信息。\n\n### 删除容器\n可以使用docker rm 来删除一个处于终止状态的容器\n```sh\n$ sudo docker rm trusting_newton\ntrusting_newton\n```\n如果要删除一个正在运行的容器，可以添加 -f 参数，docker 会发送SIGKILL信号给容器。\n\n### 清理所有处于终止状态的容器\n使用命令 \n```\ndocker rm $(docker ps -a -q)\n```\n","slug":"docker容器","published":1,"updated":"2022-02-25T08:37:09.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77xe0001hvx36g8x6hzy","content":"<h2 id=\"docker容器\"><a href=\"#docker容器\" class=\"headerlink\" title=\"docker容器\"></a>docker容器</h2><h3 id=\"容器介绍\"><a href=\"#容器介绍\" class=\"headerlink\" title=\"容器介绍\"></a>容器介绍</h3><p>&emsp;&emsp;容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统和跑在上面的应用。</p>\n<h3 id=\"新建启动容器\"><a href=\"#新建启动容器\" class=\"headerlink\" title=\"新建启动容器\"></a>新建启动容器</h3><p>&emsp;&emsp;启动容器的主要命令是docker run，下面的命令输出一个“hello world”，之后终止容器</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run ubuntu:14.04 /bin/<span class=\"built_in\">echo</span> <span class=\"string\">'Hello world'</span></span><br><span class=\"line\">Hello world</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;下面命令启动一个bash终端，允许用户进行交互</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -t -i ubuntu:14.04 /bin/bash</span><br><span class=\"line\">root@af8bae53bdd3:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;命令中的-t 表示让docker分配一个伪终端并绑定到容器的标准输入上，-i 则表示让容器的标准输入持续打开</p>\n<p>&emsp;&emsp;利用docker run 来创建容器时，docker 在后台运行的标准操作包括：</p>\n<ul>\n<li>检查本地是否存在指定的镜像，不存在从公有仓库进行下载；</li>\n<li>利用镜像创建并启动一个容器；</li>\n<li>分配一个文件系统，并在只读的镜像层外面挂载一个可读写层；</li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中；</li>\n<li>从地址池配置一个IP地址给容器；</li>\n<li>执行用户指定的应用程序；</li>\n<li>执行完毕后容器被终止</li>\n</ul>\n<h3 id=\"启动已经终止的容器\"><a href=\"#启动已经终止的容器\" class=\"headerlink\" title=\"启动已经终止的容器\"></a>启动已经终止的容器</h3><p>可以使用docker start 命令，启动一个已经终止的容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start 容器ID</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后台运行容器\"><a href=\"#后台运行容器\" class=\"headerlink\" title=\"后台运行容器\"></a>后台运行容器</h3><p>如果需要让docker 后台运行，可以通过添加-d 参数来启动容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -d ubuntu:14.04 /bin/sh -c <span class=\"string\">\"while true; do ech</span></span><br><span class=\"line\"><span class=\"string\">o hello world; sleep 1; done\"</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;-d参数启动后会返回一个唯一的id，可以通过docker ps 查看容器信息；要获取容器输入信息，可以通过docker logs命令进行查看</p>\n<h3 id=\"终止容器\"><a href=\"#终止容器\" class=\"headerlink\" title=\"终止容器\"></a>终止容器</h3><p>&emsp;&emsp;可以使用docker stop命令来终止一个已经运行的容器，此外，当docker 容器中指定的应用结束时，容器也自动终止。当docker 启动终端时，可以通过exit或ctrl+d来退出终端，容器立刻终止；</p>\n<p>终止后的容器可以通过docker ps -a 进行查看；</p>\n<p>docker restart命令会将一个运行态的容器终止，然后重新启动它；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 终止容器</span></span><br><span class=\"line\">$ docker stop 容器ID</span><br><span class=\"line\"><span class=\"comment\"># 查看容器</span></span><br><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h3><p>attach 命令</p>\n<p>&emsp;&emsp;docker attach命令是docker自带的命令，命令后面接容器，可以进入到该容器，打开终端；但是使用 attach 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。</p>\n<p>nsenter命令</p>\n<p>&emsp;&emsp;nsenter 工具在 util-linux 包2.23版本后包含。 如果系统中 util-linux 包没有该命令，可以按照下面的方法从源码安装。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /tmp; curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-; <span class=\"built_in\">cd</span> util-linux-2.24;</span><br><span class=\"line\">$ ./configure --without-ncurses</span><br><span class=\"line\">$ make nsenter &amp;&amp; sudo cp nsenter /usr/<span class=\"built_in\">local</span>/bin</span><br></pre></td></tr></table></figure>\n<p>为了连接到容器，需要找到容器的第一个进程的pid,可以通过下面命令获取；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID=$(docker inspect --format <span class=\"string\">\"&#123;&#123; .State.Pid &#125;&#125;\"</span> &lt;container&gt;)</span><br></pre></td></tr></table></figure>\n<p>通过这个pid可以连接到这个容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nsenter --target <span class=\"variable\">$PID</span> --mount --uts --ipc --net --pid</span><br></pre></td></tr></table></figure>\n<h4 id=\"完整的demo\"><a href=\"#完整的demo\" class=\"headerlink\" title=\"完整的demo\"></a>完整的demo</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -idt ubuntu</span><br><span class=\"line\"><span class=\"comment\"># 返回的容器id</span></span><br><span class=\"line\">243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550</span><br><span class=\"line\">$ sudo docker ps</span><br><span class=\"line\">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class=\"line\">243c32535da7 ubuntu:latest <span class=\"string\">\"/bin/bash\"</span> 18 seconds ago Up 17 seconds nostalgic_hypatia</span><br><span class=\"line\">$ PID=$(docker-pid 243c32535da7)</span><br><span class=\"line\">10981</span><br><span class=\"line\">$ sudo nsenter --target 10981 --mount --uts --ipc --net --pid</span><br><span class=\"line\">root@243c32535da7:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"导出容器\"><a href=\"#导出容器\" class=\"headerlink\" title=\"导出容器\"></a>导出容器</h3><p>如果要导出本地某个容器，可以使用docker export 命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker ps -a</span><br><span class=\"line\">CONTAINER ID IMAGE COMMAND CREA</span><br><span class=\"line\">TED STATUS PORTS NA</span><br><span class=\"line\">MES</span><br><span class=\"line\">7691a814370e ubuntu:14.04 <span class=\"string\">\"/bin/bash\"</span> 36 h</span><br><span class=\"line\">ours ago Exited (0) 21 hours ago te</span><br><span class=\"line\">st</span><br><span class=\"line\">$ sudo docker <span class=\"built_in\">export</span> 7691a814370e &gt; ubuntu.tar</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入容器快照\"><a href=\"#导入容器快照\" class=\"headerlink\" title=\"导入容器快照\"></a>导入容器快照</h3><p>可以使用docker import 命令从容器快照文件中再导入为镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ubuntu.tar | sudo docker import - <span class=\"built_in\">test</span>/ubuntu:v1.0</span><br><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY TAG IMAGE ID CREA</span><br><span class=\"line\">TED VIRTUAL SIZE</span><br><span class=\"line\"><span class=\"built_in\">test</span>/ubuntu v1.0 9d37a6082e97 Abou</span><br><span class=\"line\">t a minute ago 171.3 MB</span><br></pre></td></tr></table></figure>\n<p>也可以通过指定的url或目录来导入</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容<br>器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状<br>态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入<br>时可以重新指定标签等元数据信息。</p>\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><p>可以使用docker rm 来删除一个处于终止状态的容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker rm trusting_newton</span><br><span class=\"line\">trusting_newton</span><br></pre></td></tr></table></figure>\n<p>如果要删除一个正在运行的容器，可以添加 -f 参数，docker 会发送SIGKILL信号给容器。</p>\n<h3 id=\"清理所有处于终止状态的容器\"><a href=\"#清理所有处于终止状态的容器\" class=\"headerlink\" title=\"清理所有处于终止状态的容器\"></a>清理所有处于终止状态的容器</h3><p>使用命令 </p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm <span class=\"constructor\">$(<span class=\"params\">docker</span> <span class=\"params\">ps</span> -<span class=\"params\">a</span> -<span class=\"params\">q</span>)</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"docker容器\"><a href=\"#docker容器\" class=\"headerlink\" title=\"docker容器\"></a>docker容器</h2><h3 id=\"容器介绍\"><a href=\"#容器介绍\" class=\"headerlink\" title=\"容器介绍\"></a>容器介绍</h3><p>&emsp;&emsp;容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统和跑在上面的应用。</p>\n<h3 id=\"新建启动容器\"><a href=\"#新建启动容器\" class=\"headerlink\" title=\"新建启动容器\"></a>新建启动容器</h3><p>&emsp;&emsp;启动容器的主要命令是docker run，下面的命令输出一个“hello world”，之后终止容器</p>","more":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run ubuntu:14.04 /bin/<span class=\"built_in\">echo</span> <span class=\"string\">'Hello world'</span></span><br><span class=\"line\">Hello world</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;下面命令启动一个bash终端，允许用户进行交互</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -t -i ubuntu:14.04 /bin/bash</span><br><span class=\"line\">root@af8bae53bdd3:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;命令中的-t 表示让docker分配一个伪终端并绑定到容器的标准输入上，-i 则表示让容器的标准输入持续打开</p>\n<p>&emsp;&emsp;利用docker run 来创建容器时，docker 在后台运行的标准操作包括：</p>\n<ul>\n<li>检查本地是否存在指定的镜像，不存在从公有仓库进行下载；</li>\n<li>利用镜像创建并启动一个容器；</li>\n<li>分配一个文件系统，并在只读的镜像层外面挂载一个可读写层；</li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中；</li>\n<li>从地址池配置一个IP地址给容器；</li>\n<li>执行用户指定的应用程序；</li>\n<li>执行完毕后容器被终止</li>\n</ul>\n<h3 id=\"启动已经终止的容器\"><a href=\"#启动已经终止的容器\" class=\"headerlink\" title=\"启动已经终止的容器\"></a>启动已经终止的容器</h3><p>可以使用docker start 命令，启动一个已经终止的容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start 容器ID</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后台运行容器\"><a href=\"#后台运行容器\" class=\"headerlink\" title=\"后台运行容器\"></a>后台运行容器</h3><p>如果需要让docker 后台运行，可以通过添加-d 参数来启动容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -d ubuntu:14.04 /bin/sh -c <span class=\"string\">\"while true; do ech</span></span><br><span class=\"line\"><span class=\"string\">o hello world; sleep 1; done\"</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;-d参数启动后会返回一个唯一的id，可以通过docker ps 查看容器信息；要获取容器输入信息，可以通过docker logs命令进行查看</p>\n<h3 id=\"终止容器\"><a href=\"#终止容器\" class=\"headerlink\" title=\"终止容器\"></a>终止容器</h3><p>&emsp;&emsp;可以使用docker stop命令来终止一个已经运行的容器，此外，当docker 容器中指定的应用结束时，容器也自动终止。当docker 启动终端时，可以通过exit或ctrl+d来退出终端，容器立刻终止；</p>\n<p>终止后的容器可以通过docker ps -a 进行查看；</p>\n<p>docker restart命令会将一个运行态的容器终止，然后重新启动它；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 终止容器</span></span><br><span class=\"line\">$ docker stop 容器ID</span><br><span class=\"line\"><span class=\"comment\"># 查看容器</span></span><br><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h3><p>attach 命令</p>\n<p>&emsp;&emsp;docker attach命令是docker自带的命令，命令后面接容器，可以进入到该容器，打开终端；但是使用 attach 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。</p>\n<p>nsenter命令</p>\n<p>&emsp;&emsp;nsenter 工具在 util-linux 包2.23版本后包含。 如果系统中 util-linux 包没有该命令，可以按照下面的方法从源码安装。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /tmp; curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-; <span class=\"built_in\">cd</span> util-linux-2.24;</span><br><span class=\"line\">$ ./configure --without-ncurses</span><br><span class=\"line\">$ make nsenter &amp;&amp; sudo cp nsenter /usr/<span class=\"built_in\">local</span>/bin</span><br></pre></td></tr></table></figure>\n<p>为了连接到容器，需要找到容器的第一个进程的pid,可以通过下面命令获取；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID=$(docker inspect --format <span class=\"string\">\"&#123;&#123; .State.Pid &#125;&#125;\"</span> &lt;container&gt;)</span><br></pre></td></tr></table></figure>\n<p>通过这个pid可以连接到这个容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nsenter --target <span class=\"variable\">$PID</span> --mount --uts --ipc --net --pid</span><br></pre></td></tr></table></figure>\n<h4 id=\"完整的demo\"><a href=\"#完整的demo\" class=\"headerlink\" title=\"完整的demo\"></a>完整的demo</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -idt ubuntu</span><br><span class=\"line\"><span class=\"comment\"># 返回的容器id</span></span><br><span class=\"line\">243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550</span><br><span class=\"line\">$ sudo docker ps</span><br><span class=\"line\">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class=\"line\">243c32535da7 ubuntu:latest <span class=\"string\">\"/bin/bash\"</span> 18 seconds ago Up 17 seconds nostalgic_hypatia</span><br><span class=\"line\">$ PID=$(docker-pid 243c32535da7)</span><br><span class=\"line\">10981</span><br><span class=\"line\">$ sudo nsenter --target 10981 --mount --uts --ipc --net --pid</span><br><span class=\"line\">root@243c32535da7:/<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"导出容器\"><a href=\"#导出容器\" class=\"headerlink\" title=\"导出容器\"></a>导出容器</h3><p>如果要导出本地某个容器，可以使用docker export 命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker ps -a</span><br><span class=\"line\">CONTAINER ID IMAGE COMMAND CREA</span><br><span class=\"line\">TED STATUS PORTS NA</span><br><span class=\"line\">MES</span><br><span class=\"line\">7691a814370e ubuntu:14.04 <span class=\"string\">\"/bin/bash\"</span> 36 h</span><br><span class=\"line\">ours ago Exited (0) 21 hours ago te</span><br><span class=\"line\">st</span><br><span class=\"line\">$ sudo docker <span class=\"built_in\">export</span> 7691a814370e &gt; ubuntu.tar</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入容器快照\"><a href=\"#导入容器快照\" class=\"headerlink\" title=\"导入容器快照\"></a>导入容器快照</h3><p>可以使用docker import 命令从容器快照文件中再导入为镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ubuntu.tar | sudo docker import - <span class=\"built_in\">test</span>/ubuntu:v1.0</span><br><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY TAG IMAGE ID CREA</span><br><span class=\"line\">TED VIRTUAL SIZE</span><br><span class=\"line\"><span class=\"built_in\">test</span>/ubuntu v1.0 9d37a6082e97 Abou</span><br><span class=\"line\">t a minute ago 171.3 MB</span><br></pre></td></tr></table></figure>\n<p>也可以通过指定的url或目录来导入</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容<br>器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状<br>态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入<br>时可以重新指定标签等元数据信息。</p>\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><p>可以使用docker rm 来删除一个处于终止状态的容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker rm trusting_newton</span><br><span class=\"line\">trusting_newton</span><br></pre></td></tr></table></figure>\n<p>如果要删除一个正在运行的容器，可以添加 -f 参数，docker 会发送SIGKILL信号给容器。</p>\n<h3 id=\"清理所有处于终止状态的容器\"><a href=\"#清理所有处于终止状态的容器\" class=\"headerlink\" title=\"清理所有处于终止状态的容器\"></a>清理所有处于终止状态的容器</h3><p>使用命令 </p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm <span class=\"constructor\">$(<span class=\"params\">docker</span> <span class=\"params\">ps</span> -<span class=\"params\">a</span> -<span class=\"params\">q</span>)</span></span><br></pre></td></tr></table></figure>"},{"title":"jupyter搭建","type":"categories","copyright":true,"date":"2020-01-02T08:11:45.000Z","_content":"\n## 搭建jupyter服务器\n\n### 安装jupyter\n\n### 一、选择安装anaconda\n\n1. 根目录下创建一个文件夹用来放anaconda安装包\n\n2. 下载anaconda安装包（可以在官网上自行选择版本）\n    ```\n    wget https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh\n    ```\n<!--more-->\n3. 运行安装程序，安装anaconda\n    ```\n    Anaconda3-4.4.0-Linux-x86_64.sh\n    ```\n    **PS:** 该文件是一个可执行文件，如果下载的文件没有可执行权限，执行命令 chmod  641  Anaconda3-4.4.0-Linux-x86_64.sh 修改权限。\n4. 配置环境变量\n    ```\n    vim /etc/environment\n    ```\n    将anaconda的bin文件夹的路径添加到环境变量中去（一般安装目录为/root/anaconda3/bin）\n    ```python\n    source /etc/environment  # 使文件生效\n    ```\n\n### 二、配置jupyter notebook 的配置文件\n\n1. 生成jupyter notebook 的配置文件\n    ```python\n    # 该命令对于root用户\n    jupyter notebook  --allow-root  --generate-config\n    # 或者\n    # 对于一般用户\n    jupyter notebook  --generate-config \n    ```\n    执行完该命令后会在 .jupyter文件夹下生成一个jupyter_notebook_config.py的配置文件\n\n2. 修改配置\n    ```python\n    vim jupyter_notebook_config.py # 打开文件修改配置项\n    ```\n    ```python\n    #  星号为允许任意ip访问服务\n    c.NotebookApp.ip='*'\n    # 该处设置登录jupyter 的密码\n    c.NotebookApp.password = u'此处填写密码'\n    # 该项为启动服务默认打开浏览器，设置为False默认不打开\n    c.NotebookApp.open_browser = False\n    # 端口号\n    c.NotebookApp.port =8080\n    # 该项设置notebook 的工作目录\n    c.NotebookApp.notebook_dir = '/home/ubuntu/anaconda'\n    ```\n    **PS:** 对于密码的配置，我们不应该直接配置明文密码，因此需要对密码进行加密处理\n\n    #### 打开ipython\n    ```python\n    from notebook.auth import passwd\n    passwd()\n    ```\n    该命令会让你输入密码，确认密码，然后返回一串加密后的字符串，类似于：sha1:f97cc330b40c:fb618ac068bd66fb36563e15da4f7462131ad5ee\n\n    配置完成之后保存文件。\n\n## 三、启动jupyter notebook应用\n```python\n# 启动 notebook 服务\nnohup jupyter notebook &\n\n# 或者更加高级的用法\nnohup jupyter notebook > /dev/null 2>&1 &\n```\n&emsp;&emsp;其中 nohup 是让进程在ssh连接断开时正常运行，&是为了让进程在后台运行。如果想结束该进程，通过 ps aux|grep jupyter-notebook 查找到进程的pid，通过kill命令结束进程。\n\n&emsp;&emsp;/dev/null : 代表空设备文件，2：代表标准错误， 1：代表标准输出\n\n&emsp;&emsp;该命令是将标准输出重定向到文件/dev/null，标准错误输出重定向到标准输出，最终都重定向到/dev/null 文件中.\n\n&emsp;&emsp;服务启动后，我们就可以通过公网ip + 端口访问我们的服务了。\n\n&emsp;&emsp;ps：如果是普通用户启动jupyter notebook应用的话，可能会报错  Permission denied: '/run/user/0/jupyter'，这时可以打开文件~/.bashrc，添加一行export XDG_RUNTIME_DIR=\"\"，可以解决这个权限问题。\n\n&emsp;&emsp;如果在创建新的文件的时候出现 Permission denied: Untitled.ipynb的问题，找到你的jupyter的工作家目录，ls -al 查看你的文件的权限， chmod 777 yourdir/ 修改文件的权限。\n\n## 总结\n&emsp;&emsp; 该服务的搭建过程中，有些重要的对方没有做，没有进行nginx反向代理，没有添加ssl证书。\n\n","source":"_posts/jupyter搭建.md","raw":"---\ntitle: jupyter搭建\ntype: categories\ncopyright: true\ndate: 2020-01-02 16:11:45\ntags:\n    - jupyter\ncategories: [python, jupyter]\n---\n\n## 搭建jupyter服务器\n\n### 安装jupyter\n\n### 一、选择安装anaconda\n\n1. 根目录下创建一个文件夹用来放anaconda安装包\n\n2. 下载anaconda安装包（可以在官网上自行选择版本）\n    ```\n    wget https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh\n    ```\n<!--more-->\n3. 运行安装程序，安装anaconda\n    ```\n    Anaconda3-4.4.0-Linux-x86_64.sh\n    ```\n    **PS:** 该文件是一个可执行文件，如果下载的文件没有可执行权限，执行命令 chmod  641  Anaconda3-4.4.0-Linux-x86_64.sh 修改权限。\n4. 配置环境变量\n    ```\n    vim /etc/environment\n    ```\n    将anaconda的bin文件夹的路径添加到环境变量中去（一般安装目录为/root/anaconda3/bin）\n    ```python\n    source /etc/environment  # 使文件生效\n    ```\n\n### 二、配置jupyter notebook 的配置文件\n\n1. 生成jupyter notebook 的配置文件\n    ```python\n    # 该命令对于root用户\n    jupyter notebook  --allow-root  --generate-config\n    # 或者\n    # 对于一般用户\n    jupyter notebook  --generate-config \n    ```\n    执行完该命令后会在 .jupyter文件夹下生成一个jupyter_notebook_config.py的配置文件\n\n2. 修改配置\n    ```python\n    vim jupyter_notebook_config.py # 打开文件修改配置项\n    ```\n    ```python\n    #  星号为允许任意ip访问服务\n    c.NotebookApp.ip='*'\n    # 该处设置登录jupyter 的密码\n    c.NotebookApp.password = u'此处填写密码'\n    # 该项为启动服务默认打开浏览器，设置为False默认不打开\n    c.NotebookApp.open_browser = False\n    # 端口号\n    c.NotebookApp.port =8080\n    # 该项设置notebook 的工作目录\n    c.NotebookApp.notebook_dir = '/home/ubuntu/anaconda'\n    ```\n    **PS:** 对于密码的配置，我们不应该直接配置明文密码，因此需要对密码进行加密处理\n\n    #### 打开ipython\n    ```python\n    from notebook.auth import passwd\n    passwd()\n    ```\n    该命令会让你输入密码，确认密码，然后返回一串加密后的字符串，类似于：sha1:f97cc330b40c:fb618ac068bd66fb36563e15da4f7462131ad5ee\n\n    配置完成之后保存文件。\n\n## 三、启动jupyter notebook应用\n```python\n# 启动 notebook 服务\nnohup jupyter notebook &\n\n# 或者更加高级的用法\nnohup jupyter notebook > /dev/null 2>&1 &\n```\n&emsp;&emsp;其中 nohup 是让进程在ssh连接断开时正常运行，&是为了让进程在后台运行。如果想结束该进程，通过 ps aux|grep jupyter-notebook 查找到进程的pid，通过kill命令结束进程。\n\n&emsp;&emsp;/dev/null : 代表空设备文件，2：代表标准错误， 1：代表标准输出\n\n&emsp;&emsp;该命令是将标准输出重定向到文件/dev/null，标准错误输出重定向到标准输出，最终都重定向到/dev/null 文件中.\n\n&emsp;&emsp;服务启动后，我们就可以通过公网ip + 端口访问我们的服务了。\n\n&emsp;&emsp;ps：如果是普通用户启动jupyter notebook应用的话，可能会报错  Permission denied: '/run/user/0/jupyter'，这时可以打开文件~/.bashrc，添加一行export XDG_RUNTIME_DIR=\"\"，可以解决这个权限问题。\n\n&emsp;&emsp;如果在创建新的文件的时候出现 Permission denied: Untitled.ipynb的问题，找到你的jupyter的工作家目录，ls -al 查看你的文件的权限， chmod 777 yourdir/ 修改文件的权限。\n\n## 总结\n&emsp;&emsp; 该服务的搭建过程中，有些重要的对方没有做，没有进行nginx反向代理，没有添加ssl证书。\n\n","slug":"jupyter搭建","published":1,"updated":"2022-02-25T08:37:09.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77xi0003hvx3ergod6uj","content":"<h2 id=\"搭建jupyter服务器\"><a href=\"#搭建jupyter服务器\" class=\"headerlink\" title=\"搭建jupyter服务器\"></a>搭建jupyter服务器</h2><h3 id=\"安装jupyter\"><a href=\"#安装jupyter\" class=\"headerlink\" title=\"安装jupyter\"></a>安装jupyter</h3><h3 id=\"一、选择安装anaconda\"><a href=\"#一、选择安装anaconda\" class=\"headerlink\" title=\"一、选择安装anaconda\"></a>一、选择安装anaconda</h3><ol>\n<li><p>根目录下创建一个文件夹用来放anaconda安装包</p>\n</li>\n<li><p>下载anaconda安装包（可以在官网上自行选择版本）</p>\n <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:<span class=\"regexp\">//</span>repo.continuum.io<span class=\"regexp\">/archive/</span>Anaconda3-<span class=\"number\">4.4</span>.<span class=\"number\">0</span>-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a></li>\n<li><p>运行安装程序，安装anaconda</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">Anaconda3-4</span><span class=\"selector-class\">.4</span><span class=\"selector-class\">.0-Linux-x86_64</span><span class=\"selector-class\">.sh</span></span><br></pre></td></tr></table></figure>\n<p> <strong>PS:</strong> 该文件是一个可执行文件，如果下载的文件没有可执行权限，执行命令 chmod  641  Anaconda3-4.4.0-Linux-x86_64.sh 修改权限。</p>\n</li>\n<li><p>配置环境变量</p>\n <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>environment</span><br></pre></td></tr></table></figure>\n<p> 将anaconda的bin文件夹的路径添加到环境变量中去（一般安装目录为/root/anaconda3/bin）</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/environment  <span class=\"comment\"># 使文件生效</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"二、配置jupyter-notebook-的配置文件\"><a href=\"#二、配置jupyter-notebook-的配置文件\" class=\"headerlink\" title=\"二、配置jupyter notebook 的配置文件\"></a>二、配置jupyter notebook 的配置文件</h3><ol>\n<li><p>生成jupyter notebook 的配置文件</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该命令对于root用户</span></span><br><span class=\"line\">jupyter notebook  --allow-root  --generate-config</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"comment\"># 对于一般用户</span></span><br><span class=\"line\">jupyter notebook  --generate-config</span><br></pre></td></tr></table></figure>\n<p> 执行完该命令后会在 .jupyter文件夹下生成一个jupyter_notebook_config.py的配置文件</p>\n</li>\n<li><p>修改配置</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim jupyter_notebook_config.py <span class=\"comment\"># 打开文件修改配置项</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  星号为允许任意ip访问服务</span></span><br><span class=\"line\">c.NotebookApp.ip=<span class=\"string\">'*'</span></span><br><span class=\"line\"><span class=\"comment\"># 该处设置登录jupyter 的密码</span></span><br><span class=\"line\">c.NotebookApp.password = <span class=\"string\">u'此处填写密码'</span></span><br><span class=\"line\"><span class=\"comment\"># 该项为启动服务默认打开浏览器，设置为False默认不打开</span></span><br><span class=\"line\">c.NotebookApp.open_browser = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"comment\"># 端口号</span></span><br><span class=\"line\">c.NotebookApp.port =<span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"comment\"># 该项设置notebook 的工作目录</span></span><br><span class=\"line\">c.NotebookApp.notebook_dir = <span class=\"string\">'/home/ubuntu/anaconda'</span></span><br></pre></td></tr></table></figure>\n<p> <strong>PS:</strong> 对于密码的配置，我们不应该直接配置明文密码，因此需要对密码进行加密处理</p>\n<h4 id=\"打开ipython\"><a href=\"#打开ipython\" class=\"headerlink\" title=\"打开ipython\"></a>打开ipython</h4> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> notebook.auth <span class=\"keyword\">import</span> passwd</span><br><span class=\"line\">passwd()</span><br></pre></td></tr></table></figure>\n<p> 该命令会让你输入密码，确认密码，然后返回一串加密后的字符串，类似于：sha1:f97cc330b40c:fb618ac068bd66fb36563e15da4f7462131ad5ee</p>\n<p> 配置完成之后保存文件。</p>\n</li>\n</ol>\n<h2 id=\"三、启动jupyter-notebook应用\"><a href=\"#三、启动jupyter-notebook应用\" class=\"headerlink\" title=\"三、启动jupyter notebook应用\"></a>三、启动jupyter notebook应用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 notebook 服务</span></span><br><span class=\"line\">nohup jupyter notebook &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者更加高级的用法</span></span><br><span class=\"line\">nohup jupyter notebook &gt; /dev/null <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span> &amp;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;其中 nohup 是让进程在ssh连接断开时正常运行，&amp;是为了让进程在后台运行。如果想结束该进程，通过 ps aux|grep jupyter-notebook 查找到进程的pid，通过kill命令结束进程。</p>\n<p>&emsp;&emsp;/dev/null : 代表空设备文件，2：代表标准错误， 1：代表标准输出</p>\n<p>&emsp;&emsp;该命令是将标准输出重定向到文件/dev/null，标准错误输出重定向到标准输出，最终都重定向到/dev/null 文件中.</p>\n<p>&emsp;&emsp;服务启动后，我们就可以通过公网ip + 端口访问我们的服务了。</p>\n<p>&emsp;&emsp;ps：如果是普通用户启动jupyter notebook应用的话，可能会报错  Permission denied: ‘/run/user/0/jupyter’，这时可以打开文件~/.bashrc，添加一行export XDG_RUNTIME_DIR=””，可以解决这个权限问题。</p>\n<p>&emsp;&emsp;如果在创建新的文件的时候出现 Permission denied: Untitled.ipynb的问题，找到你的jupyter的工作家目录，ls -al 查看你的文件的权限， chmod 777 yourdir/ 修改文件的权限。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>&emsp;&emsp; 该服务的搭建过程中，有些重要的对方没有做，没有进行nginx反向代理，没有添加ssl证书。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"搭建jupyter服务器\"><a href=\"#搭建jupyter服务器\" class=\"headerlink\" title=\"搭建jupyter服务器\"></a>搭建jupyter服务器</h2><h3 id=\"安装jupyter\"><a href=\"#安装jupyter\" class=\"headerlink\" title=\"安装jupyter\"></a>安装jupyter</h3><h3 id=\"一、选择安装anaconda\"><a href=\"#一、选择安装anaconda\" class=\"headerlink\" title=\"一、选择安装anaconda\"></a>一、选择安装anaconda</h3><ol>\n<li><p>根目录下创建一个文件夹用来放anaconda安装包</p>\n</li>\n<li><p>下载anaconda安装包（可以在官网上自行选择版本）</p>\n <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:<span class=\"regexp\">//</span>repo.continuum.io<span class=\"regexp\">/archive/</span>Anaconda3-<span class=\"number\">4.4</span>.<span class=\"number\">0</span>-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>","more":"</li>\n<li><p>运行安装程序，安装anaconda</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">Anaconda3-4</span><span class=\"selector-class\">.4</span><span class=\"selector-class\">.0-Linux-x86_64</span><span class=\"selector-class\">.sh</span></span><br></pre></td></tr></table></figure>\n<p> <strong>PS:</strong> 该文件是一个可执行文件，如果下载的文件没有可执行权限，执行命令 chmod  641  Anaconda3-4.4.0-Linux-x86_64.sh 修改权限。</p>\n</li>\n<li><p>配置环境变量</p>\n <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>environment</span><br></pre></td></tr></table></figure>\n<p> 将anaconda的bin文件夹的路径添加到环境变量中去（一般安装目录为/root/anaconda3/bin）</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/environment  <span class=\"comment\"># 使文件生效</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"二、配置jupyter-notebook-的配置文件\"><a href=\"#二、配置jupyter-notebook-的配置文件\" class=\"headerlink\" title=\"二、配置jupyter notebook 的配置文件\"></a>二、配置jupyter notebook 的配置文件</h3><ol>\n<li><p>生成jupyter notebook 的配置文件</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该命令对于root用户</span></span><br><span class=\"line\">jupyter notebook  --allow-root  --generate-config</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\"><span class=\"comment\"># 对于一般用户</span></span><br><span class=\"line\">jupyter notebook  --generate-config</span><br></pre></td></tr></table></figure>\n<p> 执行完该命令后会在 .jupyter文件夹下生成一个jupyter_notebook_config.py的配置文件</p>\n</li>\n<li><p>修改配置</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim jupyter_notebook_config.py <span class=\"comment\"># 打开文件修改配置项</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  星号为允许任意ip访问服务</span></span><br><span class=\"line\">c.NotebookApp.ip=<span class=\"string\">'*'</span></span><br><span class=\"line\"><span class=\"comment\"># 该处设置登录jupyter 的密码</span></span><br><span class=\"line\">c.NotebookApp.password = <span class=\"string\">u'此处填写密码'</span></span><br><span class=\"line\"><span class=\"comment\"># 该项为启动服务默认打开浏览器，设置为False默认不打开</span></span><br><span class=\"line\">c.NotebookApp.open_browser = <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"comment\"># 端口号</span></span><br><span class=\"line\">c.NotebookApp.port =<span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"comment\"># 该项设置notebook 的工作目录</span></span><br><span class=\"line\">c.NotebookApp.notebook_dir = <span class=\"string\">'/home/ubuntu/anaconda'</span></span><br></pre></td></tr></table></figure>\n<p> <strong>PS:</strong> 对于密码的配置，我们不应该直接配置明文密码，因此需要对密码进行加密处理</p>\n<h4 id=\"打开ipython\"><a href=\"#打开ipython\" class=\"headerlink\" title=\"打开ipython\"></a>打开ipython</h4> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> notebook.auth <span class=\"keyword\">import</span> passwd</span><br><span class=\"line\">passwd()</span><br></pre></td></tr></table></figure>\n<p> 该命令会让你输入密码，确认密码，然后返回一串加密后的字符串，类似于：sha1:f97cc330b40c:fb618ac068bd66fb36563e15da4f7462131ad5ee</p>\n<p> 配置完成之后保存文件。</p>\n</li>\n</ol>\n<h2 id=\"三、启动jupyter-notebook应用\"><a href=\"#三、启动jupyter-notebook应用\" class=\"headerlink\" title=\"三、启动jupyter notebook应用\"></a>三、启动jupyter notebook应用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 notebook 服务</span></span><br><span class=\"line\">nohup jupyter notebook &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者更加高级的用法</span></span><br><span class=\"line\">nohup jupyter notebook &gt; /dev/null <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span> &amp;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;其中 nohup 是让进程在ssh连接断开时正常运行，&amp;是为了让进程在后台运行。如果想结束该进程，通过 ps aux|grep jupyter-notebook 查找到进程的pid，通过kill命令结束进程。</p>\n<p>&emsp;&emsp;/dev/null : 代表空设备文件，2：代表标准错误， 1：代表标准输出</p>\n<p>&emsp;&emsp;该命令是将标准输出重定向到文件/dev/null，标准错误输出重定向到标准输出，最终都重定向到/dev/null 文件中.</p>\n<p>&emsp;&emsp;服务启动后，我们就可以通过公网ip + 端口访问我们的服务了。</p>\n<p>&emsp;&emsp;ps：如果是普通用户启动jupyter notebook应用的话，可能会报错  Permission denied: ‘/run/user/0/jupyter’，这时可以打开文件~/.bashrc，添加一行export XDG_RUNTIME_DIR=””，可以解决这个权限问题。</p>\n<p>&emsp;&emsp;如果在创建新的文件的时候出现 Permission denied: Untitled.ipynb的问题，找到你的jupyter的工作家目录，ls -al 查看你的文件的权限， chmod 777 yourdir/ 修改文件的权限。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>&emsp;&emsp; 该服务的搭建过程中，有些重要的对方没有做，没有进行nginx反向代理，没有添加ssl证书。</p>"},{"title":"docker镜像","type":"categories","copyright":true,"date":"2020-01-02T08:49:05.000Z","_content":"\n## docker 镜像\n### 获取镜像\n\n&emsp;&emsp;镜像是docker的三大组件之一，docker运行容器需要本地存在对应的镜像，如果镜像不存在，docker会从镜像仓库下载，默认是从docker hub 公共注册服务器的仓库中下载。可以通过 docker pull 命令从仓库中获取需要的镜像；\n\n<!--more-->\n```sh\n# 拉取Ubuntu12.04镜像\n1 $ sudo docker pull ubuntu:12.04\n2 Pulling repository ubuntu\n3 ab8e2728644c: Pulling dependent layers\n4 511136ea3c5a: Download complete\n5 5f0ffaa9455e: Download complete\n6 a300658979be: Download complete\n7 904483ae0c30: Download complete\n8 ffdaafd1ca50: Download complete\n9 d047ae21eeaf: Download complete\n```\n下载过程中会输出获取每一层镜像的信息\n该命令相当于\n```sh\n$ sudo docker pull\nregistry.hub.docker.com/ubuntu:12.04 \n```\n&emsp;&emsp;如果官方注册服务器下载比较慢的时候，可以选择从其他仓库进行下载，从其他仓库下载需要指定完整的仓库注册服务器的地址；\n\n```sh\n1 $ sudo docker pull dl.dockerpool.com:5000/ubuntu:12.04\n2 Pulling dl.dockerpool.com:5000/ubuntu\n3 ab8e2728644c: Pulling dependent layers\n4 511136ea3c5a: Download complete\n5 5f0ffaa9455e: Download complete\n6 a300658979be: Download complete\n7 904483ae0c30: Download complete\n8 ffdaafd1ca50: Download complete\n9 d047ae21eeaf: Download complete\n```\n下载镜像完成后，就可以使用镜像了。\n\n### 使用 docker images 列出本地所有镜像\n```sh\n$ sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB\nubuntu              14.04               578c3e61a98c        3 weeks ago         223MB\nubuntu              latest              113a43faa138        3 weeks ago         81.2MB\nhello-world         latest              e38bc07ac18e        2 months ago        1.85kB\nubuntu              12.04               5b117edd0b76        14 months ago       104MB\n```\n可以看到本地已有镜像的信息，包括镜像名，镜像标记，镜像ID，镜像的创建时间和镜像的大小；\n\n利用创建的镜像来启动容器\n```sh\n$ sudo docker run -t -i ubuntu:16.04 /bin/bash\nroot@4af941efaebf:/# ls\n```\n\n### 可以用 docker tag 命令来修改镜像的标签\n```sh\n$ sudo docker tag 5e8b97a2a082 ubuntu16.04:my\n$ sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu16.04         latest              5e8b97a2a082        3 weeks ago         114MB\nubuntu16.04         my                  5e8b97a2a082        3 weeks ago         114MB\nubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB\nubuntu              14.04               578c3e61a98c        3 weeks ago         223MB\nubuntu              latest              113a43faa138        3 weeks ago         81.2MB\nhello-world         latest              e38bc07ac18e        2 months ago        1.85kB\nubuntu              12.04               5b117edd0b76        14 months ago       104MB\n```\n\n### 本地导入镜像\n先下载一个镜像，比如Ubuntu14.04，之后使用以下命令进行导入\n```sh\n$ sudo cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04\n```\n\n### 上传镜像\n&emsp;&emsp;用户可以通过docker push 命令来上传自己创建的镜像到仓库中进行共享。例如，用户在Docker Hub上注册后可以推送自己的镜像到仓库中\n```sh\n$ sudo docker push ouruser/sinatra\nThe push refers to a repository [ouruser/sinatra] (len: 1)\nSending image list\nPushing repository ouruser/sinatra (3 tags)\n```\n\n### 存储镜像\n可以使用docker save 命令，导出docker 镜像到本地文件中\n```sh\n$ sudo docker save -o ubuntu_14.04.tar ubuntu:14.04\n```\n\n### 载入镜像\n可以使用docker load 命令，将本地文件的镜像导入到本地镜像库\n```sh\n$ sudo docker load --input ubuntu_14.04.tar\n# 或者\n$ sudo docker load < ubuntu_14.04.tar\n```\n\n### 移除本地镜像\n可以使用docker rmi 命令移除本地镜像；移除镜像前需要先使用**docker rm**命令删除依赖该镜像的所有容器\n```sh\n$ sudo docker rmi Ubuntu16.04\n```\n\n### 清理所有未打过标签的本地镜像\n```sh\n$ sudo docker rmi $(docker images -q -f \"dangling=true\")\n# 或者\n$ sudo docker rmi $(docker images --quiet --filter \"dangling=true\")\n```\n","source":"_posts/docker镜像.md","raw":"---\ntitle: docker镜像\ntype: categories\ncopyright: true\ndate: 2020-01-02 16:49:05\ntags:\n    - docker\ncategories: docker\n---\n\n## docker 镜像\n### 获取镜像\n\n&emsp;&emsp;镜像是docker的三大组件之一，docker运行容器需要本地存在对应的镜像，如果镜像不存在，docker会从镜像仓库下载，默认是从docker hub 公共注册服务器的仓库中下载。可以通过 docker pull 命令从仓库中获取需要的镜像；\n\n<!--more-->\n```sh\n# 拉取Ubuntu12.04镜像\n1 $ sudo docker pull ubuntu:12.04\n2 Pulling repository ubuntu\n3 ab8e2728644c: Pulling dependent layers\n4 511136ea3c5a: Download complete\n5 5f0ffaa9455e: Download complete\n6 a300658979be: Download complete\n7 904483ae0c30: Download complete\n8 ffdaafd1ca50: Download complete\n9 d047ae21eeaf: Download complete\n```\n下载过程中会输出获取每一层镜像的信息\n该命令相当于\n```sh\n$ sudo docker pull\nregistry.hub.docker.com/ubuntu:12.04 \n```\n&emsp;&emsp;如果官方注册服务器下载比较慢的时候，可以选择从其他仓库进行下载，从其他仓库下载需要指定完整的仓库注册服务器的地址；\n\n```sh\n1 $ sudo docker pull dl.dockerpool.com:5000/ubuntu:12.04\n2 Pulling dl.dockerpool.com:5000/ubuntu\n3 ab8e2728644c: Pulling dependent layers\n4 511136ea3c5a: Download complete\n5 5f0ffaa9455e: Download complete\n6 a300658979be: Download complete\n7 904483ae0c30: Download complete\n8 ffdaafd1ca50: Download complete\n9 d047ae21eeaf: Download complete\n```\n下载镜像完成后，就可以使用镜像了。\n\n### 使用 docker images 列出本地所有镜像\n```sh\n$ sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB\nubuntu              14.04               578c3e61a98c        3 weeks ago         223MB\nubuntu              latest              113a43faa138        3 weeks ago         81.2MB\nhello-world         latest              e38bc07ac18e        2 months ago        1.85kB\nubuntu              12.04               5b117edd0b76        14 months ago       104MB\n```\n可以看到本地已有镜像的信息，包括镜像名，镜像标记，镜像ID，镜像的创建时间和镜像的大小；\n\n利用创建的镜像来启动容器\n```sh\n$ sudo docker run -t -i ubuntu:16.04 /bin/bash\nroot@4af941efaebf:/# ls\n```\n\n### 可以用 docker tag 命令来修改镜像的标签\n```sh\n$ sudo docker tag 5e8b97a2a082 ubuntu16.04:my\n$ sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu16.04         latest              5e8b97a2a082        3 weeks ago         114MB\nubuntu16.04         my                  5e8b97a2a082        3 weeks ago         114MB\nubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB\nubuntu              14.04               578c3e61a98c        3 weeks ago         223MB\nubuntu              latest              113a43faa138        3 weeks ago         81.2MB\nhello-world         latest              e38bc07ac18e        2 months ago        1.85kB\nubuntu              12.04               5b117edd0b76        14 months ago       104MB\n```\n\n### 本地导入镜像\n先下载一个镜像，比如Ubuntu14.04，之后使用以下命令进行导入\n```sh\n$ sudo cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04\n```\n\n### 上传镜像\n&emsp;&emsp;用户可以通过docker push 命令来上传自己创建的镜像到仓库中进行共享。例如，用户在Docker Hub上注册后可以推送自己的镜像到仓库中\n```sh\n$ sudo docker push ouruser/sinatra\nThe push refers to a repository [ouruser/sinatra] (len: 1)\nSending image list\nPushing repository ouruser/sinatra (3 tags)\n```\n\n### 存储镜像\n可以使用docker save 命令，导出docker 镜像到本地文件中\n```sh\n$ sudo docker save -o ubuntu_14.04.tar ubuntu:14.04\n```\n\n### 载入镜像\n可以使用docker load 命令，将本地文件的镜像导入到本地镜像库\n```sh\n$ sudo docker load --input ubuntu_14.04.tar\n# 或者\n$ sudo docker load < ubuntu_14.04.tar\n```\n\n### 移除本地镜像\n可以使用docker rmi 命令移除本地镜像；移除镜像前需要先使用**docker rm**命令删除依赖该镜像的所有容器\n```sh\n$ sudo docker rmi Ubuntu16.04\n```\n\n### 清理所有未打过标签的本地镜像\n```sh\n$ sudo docker rmi $(docker images -q -f \"dangling=true\")\n# 或者\n$ sudo docker rmi $(docker images --quiet --filter \"dangling=true\")\n```\n","slug":"docker镜像","published":1,"updated":"2022-02-25T08:37:09.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77xn0007hvx3c4ge9x42","content":"<h2 id=\"docker-镜像\"><a href=\"#docker-镜像\" class=\"headerlink\" title=\"docker 镜像\"></a>docker 镜像</h2><h3 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h3><p>&emsp;&emsp;镜像是docker的三大组件之一，docker运行容器需要本地存在对应的镜像，如果镜像不存在，docker会从镜像仓库下载，默认是从docker hub 公共注册服务器的仓库中下载。可以通过 docker pull 命令从仓库中获取需要的镜像；</p>\n<a id=\"more\"></a>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取Ubuntu12.04镜像</span></span><br><span class=\"line\">1 $ sudo docker pull ubuntu:12.04</span><br><span class=\"line\">2 Pulling repository ubuntu</span><br><span class=\"line\">3 ab8e2728644c: Pulling dependent layers</span><br><span class=\"line\">4 511136ea3c5a: Download complete</span><br><span class=\"line\">5 5f0ffaa9455e: Download complete</span><br><span class=\"line\">6 a300658979be: Download complete</span><br><span class=\"line\">7 904483ae0c30: Download complete</span><br><span class=\"line\">8 ffdaafd1ca50: Download complete</span><br><span class=\"line\">9 d047ae21eeaf: Download complete</span><br></pre></td></tr></table></figure>\n<p>下载过程中会输出获取每一层镜像的信息<br>该命令相当于</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker pull</span><br><span class=\"line\">registry.hub.docker.com/ubuntu:12.04</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;如果官方注册服务器下载比较慢的时候，可以选择从其他仓库进行下载，从其他仓库下载需要指定完整的仓库注册服务器的地址；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 $ sudo docker pull dl.dockerpool.com:5000/ubuntu:12.04</span><br><span class=\"line\">2 Pulling dl.dockerpool.com:5000/ubuntu</span><br><span class=\"line\">3 ab8e2728644c: Pulling dependent layers</span><br><span class=\"line\">4 511136ea3c5a: Download complete</span><br><span class=\"line\">5 5f0ffaa9455e: Download complete</span><br><span class=\"line\">6 a300658979be: Download complete</span><br><span class=\"line\">7 904483ae0c30: Download complete</span><br><span class=\"line\">8 ffdaafd1ca50: Download complete</span><br><span class=\"line\">9 d047ae21eeaf: Download complete</span><br></pre></td></tr></table></figure>\n<p>下载镜像完成后，就可以使用镜像了。</p>\n<h3 id=\"使用-docker-images-列出本地所有镜像\"><a href=\"#使用-docker-images-列出本地所有镜像\" class=\"headerlink\" title=\"使用 docker images 列出本地所有镜像\"></a>使用 docker images 列出本地所有镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu              14.04               578c3e61a98c        3 weeks ago         223MB</span><br><span class=\"line\">ubuntu              latest              113a43faa138        3 weeks ago         81.2MB</span><br><span class=\"line\">hello-world         latest              e38bc07ac18e        2 months ago        1.85kB</span><br><span class=\"line\">ubuntu              12.04               5b117edd0b76        14 months ago       104MB</span><br></pre></td></tr></table></figure>\n<p>可以看到本地已有镜像的信息，包括镜像名，镜像标记，镜像ID，镜像的创建时间和镜像的大小；</p>\n<p>利用创建的镜像来启动容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -t -i ubuntu:16.04 /bin/bash</span><br><span class=\"line\">root@4af941efaebf:/<span class=\"comment\"># ls</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可以用-docker-tag-命令来修改镜像的标签\"><a href=\"#可以用-docker-tag-命令来修改镜像的标签\" class=\"headerlink\" title=\"可以用 docker tag 命令来修改镜像的标签\"></a>可以用 docker tag 命令来修改镜像的标签</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker tag 5e8b97a2a082 ubuntu16.04:my</span><br><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu16.04         latest              5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu16.04         my                  5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu              14.04               578c3e61a98c        3 weeks ago         223MB</span><br><span class=\"line\">ubuntu              latest              113a43faa138        3 weeks ago         81.2MB</span><br><span class=\"line\">hello-world         latest              e38bc07ac18e        2 months ago        1.85kB</span><br><span class=\"line\">ubuntu              12.04               5b117edd0b76        14 months ago       104MB</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地导入镜像\"><a href=\"#本地导入镜像\" class=\"headerlink\" title=\"本地导入镜像\"></a>本地导入镜像</h3><p>先下载一个镜像，比如Ubuntu14.04，之后使用以下命令进行导入</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上传镜像\"><a href=\"#上传镜像\" class=\"headerlink\" title=\"上传镜像\"></a>上传镜像</h3><p>&emsp;&emsp;用户可以通过docker push 命令来上传自己创建的镜像到仓库中进行共享。例如，用户在Docker Hub上注册后可以推送自己的镜像到仓库中</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker push ouruser/sinatra</span><br><span class=\"line\">The push refers to a repository [ouruser/sinatra] (len: 1)</span><br><span class=\"line\">Sending image list</span><br><span class=\"line\">Pushing repository ouruser/sinatra (3 tags)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存储镜像\"><a href=\"#存储镜像\" class=\"headerlink\" title=\"存储镜像\"></a>存储镜像</h3><p>可以使用docker save 命令，导出docker 镜像到本地文件中</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker save -o ubuntu_14.04.tar ubuntu:14.04</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"载入镜像\"><a href=\"#载入镜像\" class=\"headerlink\" title=\"载入镜像\"></a>载入镜像</h3><p>可以使用docker load 命令，将本地文件的镜像导入到本地镜像库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker load --input ubuntu_14.04.tar</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ sudo docker load &lt; ubuntu_14.04.tar</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"移除本地镜像\"><a href=\"#移除本地镜像\" class=\"headerlink\" title=\"移除本地镜像\"></a>移除本地镜像</h3><p>可以使用docker rmi 命令移除本地镜像；移除镜像前需要先使用<strong>docker rm</strong>命令删除依赖该镜像的所有容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker rmi Ubuntu16.04</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"清理所有未打过标签的本地镜像\"><a href=\"#清理所有未打过标签的本地镜像\" class=\"headerlink\" title=\"清理所有未打过标签的本地镜像\"></a>清理所有未打过标签的本地镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker rmi $(docker images -q -f <span class=\"string\">\"dangling=true\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ sudo docker rmi $(docker images --quiet --filter <span class=\"string\">\"dangling=true\"</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"docker-镜像\"><a href=\"#docker-镜像\" class=\"headerlink\" title=\"docker 镜像\"></a>docker 镜像</h2><h3 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h3><p>&emsp;&emsp;镜像是docker的三大组件之一，docker运行容器需要本地存在对应的镜像，如果镜像不存在，docker会从镜像仓库下载，默认是从docker hub 公共注册服务器的仓库中下载。可以通过 docker pull 命令从仓库中获取需要的镜像；</p>","more":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取Ubuntu12.04镜像</span></span><br><span class=\"line\">1 $ sudo docker pull ubuntu:12.04</span><br><span class=\"line\">2 Pulling repository ubuntu</span><br><span class=\"line\">3 ab8e2728644c: Pulling dependent layers</span><br><span class=\"line\">4 511136ea3c5a: Download complete</span><br><span class=\"line\">5 5f0ffaa9455e: Download complete</span><br><span class=\"line\">6 a300658979be: Download complete</span><br><span class=\"line\">7 904483ae0c30: Download complete</span><br><span class=\"line\">8 ffdaafd1ca50: Download complete</span><br><span class=\"line\">9 d047ae21eeaf: Download complete</span><br></pre></td></tr></table></figure>\n<p>下载过程中会输出获取每一层镜像的信息<br>该命令相当于</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker pull</span><br><span class=\"line\">registry.hub.docker.com/ubuntu:12.04</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;如果官方注册服务器下载比较慢的时候，可以选择从其他仓库进行下载，从其他仓库下载需要指定完整的仓库注册服务器的地址；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 $ sudo docker pull dl.dockerpool.com:5000/ubuntu:12.04</span><br><span class=\"line\">2 Pulling dl.dockerpool.com:5000/ubuntu</span><br><span class=\"line\">3 ab8e2728644c: Pulling dependent layers</span><br><span class=\"line\">4 511136ea3c5a: Download complete</span><br><span class=\"line\">5 5f0ffaa9455e: Download complete</span><br><span class=\"line\">6 a300658979be: Download complete</span><br><span class=\"line\">7 904483ae0c30: Download complete</span><br><span class=\"line\">8 ffdaafd1ca50: Download complete</span><br><span class=\"line\">9 d047ae21eeaf: Download complete</span><br></pre></td></tr></table></figure>\n<p>下载镜像完成后，就可以使用镜像了。</p>\n<h3 id=\"使用-docker-images-列出本地所有镜像\"><a href=\"#使用-docker-images-列出本地所有镜像\" class=\"headerlink\" title=\"使用 docker images 列出本地所有镜像\"></a>使用 docker images 列出本地所有镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu              14.04               578c3e61a98c        3 weeks ago         223MB</span><br><span class=\"line\">ubuntu              latest              113a43faa138        3 weeks ago         81.2MB</span><br><span class=\"line\">hello-world         latest              e38bc07ac18e        2 months ago        1.85kB</span><br><span class=\"line\">ubuntu              12.04               5b117edd0b76        14 months ago       104MB</span><br></pre></td></tr></table></figure>\n<p>可以看到本地已有镜像的信息，包括镜像名，镜像标记，镜像ID，镜像的创建时间和镜像的大小；</p>\n<p>利用创建的镜像来启动容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -t -i ubuntu:16.04 /bin/bash</span><br><span class=\"line\">root@4af941efaebf:/<span class=\"comment\"># ls</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可以用-docker-tag-命令来修改镜像的标签\"><a href=\"#可以用-docker-tag-命令来修改镜像的标签\" class=\"headerlink\" title=\"可以用 docker tag 命令来修改镜像的标签\"></a>可以用 docker tag 命令来修改镜像的标签</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker tag 5e8b97a2a082 ubuntu16.04:my</span><br><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu16.04         latest              5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu16.04         my                  5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu              16.04               5e8b97a2a082        3 weeks ago         114MB</span><br><span class=\"line\">ubuntu              14.04               578c3e61a98c        3 weeks ago         223MB</span><br><span class=\"line\">ubuntu              latest              113a43faa138        3 weeks ago         81.2MB</span><br><span class=\"line\">hello-world         latest              e38bc07ac18e        2 months ago        1.85kB</span><br><span class=\"line\">ubuntu              12.04               5b117edd0b76        14 months ago       104MB</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地导入镜像\"><a href=\"#本地导入镜像\" class=\"headerlink\" title=\"本地导入镜像\"></a>本地导入镜像</h3><p>先下载一个镜像，比如Ubuntu14.04，之后使用以下命令进行导入</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上传镜像\"><a href=\"#上传镜像\" class=\"headerlink\" title=\"上传镜像\"></a>上传镜像</h3><p>&emsp;&emsp;用户可以通过docker push 命令来上传自己创建的镜像到仓库中进行共享。例如，用户在Docker Hub上注册后可以推送自己的镜像到仓库中</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker push ouruser/sinatra</span><br><span class=\"line\">The push refers to a repository [ouruser/sinatra] (len: 1)</span><br><span class=\"line\">Sending image list</span><br><span class=\"line\">Pushing repository ouruser/sinatra (3 tags)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存储镜像\"><a href=\"#存储镜像\" class=\"headerlink\" title=\"存储镜像\"></a>存储镜像</h3><p>可以使用docker save 命令，导出docker 镜像到本地文件中</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker save -o ubuntu_14.04.tar ubuntu:14.04</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"载入镜像\"><a href=\"#载入镜像\" class=\"headerlink\" title=\"载入镜像\"></a>载入镜像</h3><p>可以使用docker load 命令，将本地文件的镜像导入到本地镜像库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker load --input ubuntu_14.04.tar</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ sudo docker load &lt; ubuntu_14.04.tar</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"移除本地镜像\"><a href=\"#移除本地镜像\" class=\"headerlink\" title=\"移除本地镜像\"></a>移除本地镜像</h3><p>可以使用docker rmi 命令移除本地镜像；移除镜像前需要先使用<strong>docker rm</strong>命令删除依赖该镜像的所有容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker rmi Ubuntu16.04</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"清理所有未打过标签的本地镜像\"><a href=\"#清理所有未打过标签的本地镜像\" class=\"headerlink\" title=\"清理所有未打过标签的本地镜像\"></a>清理所有未打过标签的本地镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker rmi $(docker images -q -f <span class=\"string\">\"dangling=true\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ sudo docker rmi $(docker images --quiet --filter <span class=\"string\">\"dangling=true\"</span>)</span><br></pre></td></tr></table></figure>"},{"title":"lambda函数","type":"categories","copyright":true,"date":"2020-01-02T07:41:29.000Z","_content":"\n## 记一次项目中lambda函数的应用\n\nlambda函数也叫做匿名函数，它允许我们快速定义，并且让代码更简洁\n此次记录一下在项目中使用到lambda函数的场景\n\n<!--more-->\n\n### 代码\n```python\n\ndef get(self, url=None, headers=None, encode=False, login_info=None, proxy_ip=None, path=None,  verify=False, retry_times=3, decision=lambda x: True, **kwargs):\n    proxies = None\n    if proxy_ip:\n        proxies = {\"http\": proxy_ip, \"https\": proxy_ip}\n    res = None\n    data = kwargs['params'] if 'params' in kwargs else None\n    for i in range(retry_times):\n        try:\n            flag = True\n            res = self.session.get(url=url, headers=headers, proxies=proxies, verify=verify, **kwargs)\n            self.save_src(url=url, headers=headers, data=data, res=res, login_info=login_info, path=path, encode=encode)\n            flag = False\n            if res.status_code != 200:\n                logger.error('crawl_session get: internet error! url: %s' % url)\n            if res.status_code >= 500:\n                continue\n            elif res.status_code == 200 and not decision(res):\n                continue\n            else:\n                break\n        except:\n```\n\n这里封装了一下requests的get方法，加入了一个decision参数，该参数是一个匿名函数，retry_times是重试次数，通过匿名函数对res结果进行判断，对爬取结果进行预处理；\n\n```python\ndef decision(res):\n    if 'java.lang.NullPointerException' in res.text:\n        return False\n    return True\n```\n上面的函数是我们在爬虫中定义的一个判断函数，当我们如果知道爬取结果中必定会有某个特殊的返回值时，通过该函数我们可以判断爬取的结果是否是正确的；简单的例子，当有可能我们请求服务端json数据时，返回状态码是200，response的json确是一个空值，而我们确定该json一定不是空值，这是我们可以通过lambda函数预处理进行重爬。\n\n","source":"_posts/lambda函数.md","raw":"---\ntitle: lambda函数\ntype: categories\ncopyright: true\ndate: 2020-01-02 15:41:29\ntags:\n    - 项目\n    - lambda\ncategories: [lambda]\n---\n\n## 记一次项目中lambda函数的应用\n\nlambda函数也叫做匿名函数，它允许我们快速定义，并且让代码更简洁\n此次记录一下在项目中使用到lambda函数的场景\n\n<!--more-->\n\n### 代码\n```python\n\ndef get(self, url=None, headers=None, encode=False, login_info=None, proxy_ip=None, path=None,  verify=False, retry_times=3, decision=lambda x: True, **kwargs):\n    proxies = None\n    if proxy_ip:\n        proxies = {\"http\": proxy_ip, \"https\": proxy_ip}\n    res = None\n    data = kwargs['params'] if 'params' in kwargs else None\n    for i in range(retry_times):\n        try:\n            flag = True\n            res = self.session.get(url=url, headers=headers, proxies=proxies, verify=verify, **kwargs)\n            self.save_src(url=url, headers=headers, data=data, res=res, login_info=login_info, path=path, encode=encode)\n            flag = False\n            if res.status_code != 200:\n                logger.error('crawl_session get: internet error! url: %s' % url)\n            if res.status_code >= 500:\n                continue\n            elif res.status_code == 200 and not decision(res):\n                continue\n            else:\n                break\n        except:\n```\n\n这里封装了一下requests的get方法，加入了一个decision参数，该参数是一个匿名函数，retry_times是重试次数，通过匿名函数对res结果进行判断，对爬取结果进行预处理；\n\n```python\ndef decision(res):\n    if 'java.lang.NullPointerException' in res.text:\n        return False\n    return True\n```\n上面的函数是我们在爬虫中定义的一个判断函数，当我们如果知道爬取结果中必定会有某个特殊的返回值时，通过该函数我们可以判断爬取的结果是否是正确的；简单的例子，当有可能我们请求服务端json数据时，返回状态码是200，response的json确是一个空值，而我们确定该json一定不是空值，这是我们可以通过lambda函数预处理进行重爬。\n\n","slug":"lambda函数","published":1,"updated":"2022-02-25T08:37:09.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77xp0009hvx3aoanechv","content":"<h2 id=\"记一次项目中lambda函数的应用\"><a href=\"#记一次项目中lambda函数的应用\" class=\"headerlink\" title=\"记一次项目中lambda函数的应用\"></a>记一次项目中lambda函数的应用</h2><p>lambda函数也叫做匿名函数，它允许我们快速定义，并且让代码更简洁<br>此次记录一下在项目中使用到lambda函数的场景</p>\n<a id=\"more\"></a>\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, url=None, headers=None, encode=False, login_info=None, proxy_ip=None, path=None,  verify=False, retry_times=<span class=\"number\">3</span>, decision=lambda x: True, **kwargs)</span>:</span></span><br><span class=\"line\">    proxies = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> proxy_ip:</span><br><span class=\"line\">        proxies = &#123;<span class=\"string\">\"http\"</span>: proxy_ip, <span class=\"string\">\"https\"</span>: proxy_ip&#125;</span><br><span class=\"line\">    res = <span class=\"literal\">None</span></span><br><span class=\"line\">    data = kwargs[<span class=\"string\">'params'</span>] <span class=\"keyword\">if</span> <span class=\"string\">'params'</span> <span class=\"keyword\">in</span> kwargs <span class=\"keyword\">else</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(retry_times):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            flag = <span class=\"literal\">True</span></span><br><span class=\"line\">            res = self.session.get(url=url, headers=headers, proxies=proxies, verify=verify, **kwargs)</span><br><span class=\"line\">            self.save_src(url=url, headers=headers, data=data, res=res, login_info=login_info, path=path, encode=encode)</span><br><span class=\"line\">            flag = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> res.status_code != <span class=\"number\">200</span>:</span><br><span class=\"line\">                logger.error(<span class=\"string\">'crawl_session get: internet error! url: %s'</span> % url)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res.status_code &gt;= <span class=\"number\">500</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> res.status_code == <span class=\"number\">200</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> decision(res):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br></pre></td></tr></table></figure>\n\n<p>这里封装了一下requests的get方法，加入了一个decision参数，该参数是一个匿名函数，retry_times是重试次数，通过匿名函数对res结果进行判断，对爬取结果进行预处理；</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decision</span><span class=\"params\">(res)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'java.lang.NullPointerException'</span> <span class=\"keyword\">in</span> res.text:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<p>上面的函数是我们在爬虫中定义的一个判断函数，当我们如果知道爬取结果中必定会有某个特殊的返回值时，通过该函数我们可以判断爬取的结果是否是正确的；简单的例子，当有可能我们请求服务端json数据时，返回状态码是200，response的json确是一个空值，而我们确定该json一定不是空值，这是我们可以通过lambda函数预处理进行重爬。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"记一次项目中lambda函数的应用\"><a href=\"#记一次项目中lambda函数的应用\" class=\"headerlink\" title=\"记一次项目中lambda函数的应用\"></a>记一次项目中lambda函数的应用</h2><p>lambda函数也叫做匿名函数，它允许我们快速定义，并且让代码更简洁<br>此次记录一下在项目中使用到lambda函数的场景</p>","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, url=None, headers=None, encode=False, login_info=None, proxy_ip=None, path=None,  verify=False, retry_times=<span class=\"number\">3</span>, decision=lambda x: True, **kwargs)</span>:</span></span><br><span class=\"line\">    proxies = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> proxy_ip:</span><br><span class=\"line\">        proxies = &#123;<span class=\"string\">\"http\"</span>: proxy_ip, <span class=\"string\">\"https\"</span>: proxy_ip&#125;</span><br><span class=\"line\">    res = <span class=\"literal\">None</span></span><br><span class=\"line\">    data = kwargs[<span class=\"string\">'params'</span>] <span class=\"keyword\">if</span> <span class=\"string\">'params'</span> <span class=\"keyword\">in</span> kwargs <span class=\"keyword\">else</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(retry_times):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            flag = <span class=\"literal\">True</span></span><br><span class=\"line\">            res = self.session.get(url=url, headers=headers, proxies=proxies, verify=verify, **kwargs)</span><br><span class=\"line\">            self.save_src(url=url, headers=headers, data=data, res=res, login_info=login_info, path=path, encode=encode)</span><br><span class=\"line\">            flag = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> res.status_code != <span class=\"number\">200</span>:</span><br><span class=\"line\">                logger.error(<span class=\"string\">'crawl_session get: internet error! url: %s'</span> % url)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res.status_code &gt;= <span class=\"number\">500</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> res.status_code == <span class=\"number\">200</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> decision(res):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br></pre></td></tr></table></figure>\n\n<p>这里封装了一下requests的get方法，加入了一个decision参数，该参数是一个匿名函数，retry_times是重试次数，通过匿名函数对res结果进行判断，对爬取结果进行预处理；</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decision</span><span class=\"params\">(res)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'java.lang.NullPointerException'</span> <span class=\"keyword\">in</span> res.text:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<p>上面的函数是我们在爬虫中定义的一个判断函数，当我们如果知道爬取结果中必定会有某个特殊的返回值时，通过该函数我们可以判断爬取的结果是否是正确的；简单的例子，当有可能我们请求服务端json数据时，返回状态码是200，response的json确是一个空值，而我们确定该json一定不是空值，这是我们可以通过lambda函数预处理进行重爬。</p>"},{"title":"mysql导入导出数据","type":"categories","copyright":true,"date":"2022-02-27T13:50:13.000Z","_content":"\n## mysql导入导出数据\nmysql数据库导出数据的命令\n- mysqldump -u用戶名 -p密码 -d 数据库名 表名 > 脚本名;\n\n1、导出整个数据库结构和数据\n```\nmysqldump -h localhost -uroot -p123456 database > dump.sql\n```\n\n2、导出单个数据表结构和数据\n```\nmysqldump -h localhost -uroot -p123456  database table > dump.sql\n```\n<!-- more -->\n\n3、导出整个数据库结构（不包含数据）\n```\nmysqldump -h localhost -uroot -p123456  -d database > dump.sql\n```\n4、导出单个数据表结构（不包含数据）\n```\nmysqldump -h localhost -uroot -p123456  -d database table > dump.sql\n```\n\n### Linux 下：\n#### 一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\n\n1、导出数据和表结构：\n```\nmysqldump -u用户名 -p密码 数据库名 > 数据库名.sql\n#/usr/local/mysql/bin/   mysqldump -uroot -p abc > abc.sql\n```\n敲回车后会提示输入密码\n\n2、只导出表结构\n```\nmysqldump -u用户名 -p密码 -d 数据库名 > 数据库名.sql\n#/usr/local/mysql/bin/   mysqldump -uroot -p -d abc > abc.sql\n```\n注：/usr/local/mysql/bin/  --->  mysql的data目录\n\n#### 二、导入数据库\n\n1、首先建空数据库\n```\nmysql>create database abc;\n```\n2、导入数据库\n- 方法一：\n\n（1）选择数据库\n```\nmysql>use abc;\n```\n（2）设置数据库编码\n```\nmysql>set names utf8;\n```\n（3）导入数据（注意sql文件的路径）\n```\nmysql>source /home/abc/abc.sql;\n```\n- 方法二：\n```\nmysql -u用户名 -p密码 数据库名 < 数据库名.sql\n#mysql -uabc_f -p abc < abc.sql\n```\n\n***\n\n### windows下：\n1.导出整个数据库\n```\nmysqldump -u 用户名 -p 数据库名 > 导出的文件名\nmysqldump -u dbuser -p dbname > dbname.sql\n```\n\n2.导出一个表\n```\nmysqldump -u 用户名 -p 数据库名 表名> 导出的文件名\nmysqldump -u dbuser -p dbname users> dbname_users.sql\n```\n\n3.导出一个数据库结构\n```\nmysqldump -u dbuser -p -d --add-drop-table dbname >d:/dbname_db.sql\n```\n-d 没有数据 --add-drop-table 在每个create语句之前增加一个drop table\n\n4.导入数据库\n\n常用source 命令\n进入mysql数据库控制台，如\nmysql -u root -p\nmysql>use 数据库\n然后使用source命令，后面参数为脚本文件(如这里用到的.sql)\nmysql>source d:/dbname.sql","source":"_posts/mysql导入导出数据.md","raw":"---\ntitle: mysql导入导出数据\ntype: categories\ncopyright: true\ndate: 2022-02-27 21:50:13\ntags:\n    - 数据库\n    - mysql\ncategories: [数据库, mysql]\n---\n\n## mysql导入导出数据\nmysql数据库导出数据的命令\n- mysqldump -u用戶名 -p密码 -d 数据库名 表名 > 脚本名;\n\n1、导出整个数据库结构和数据\n```\nmysqldump -h localhost -uroot -p123456 database > dump.sql\n```\n\n2、导出单个数据表结构和数据\n```\nmysqldump -h localhost -uroot -p123456  database table > dump.sql\n```\n<!-- more -->\n\n3、导出整个数据库结构（不包含数据）\n```\nmysqldump -h localhost -uroot -p123456  -d database > dump.sql\n```\n4、导出单个数据表结构（不包含数据）\n```\nmysqldump -h localhost -uroot -p123456  -d database table > dump.sql\n```\n\n### Linux 下：\n#### 一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\n\n1、导出数据和表结构：\n```\nmysqldump -u用户名 -p密码 数据库名 > 数据库名.sql\n#/usr/local/mysql/bin/   mysqldump -uroot -p abc > abc.sql\n```\n敲回车后会提示输入密码\n\n2、只导出表结构\n```\nmysqldump -u用户名 -p密码 -d 数据库名 > 数据库名.sql\n#/usr/local/mysql/bin/   mysqldump -uroot -p -d abc > abc.sql\n```\n注：/usr/local/mysql/bin/  --->  mysql的data目录\n\n#### 二、导入数据库\n\n1、首先建空数据库\n```\nmysql>create database abc;\n```\n2、导入数据库\n- 方法一：\n\n（1）选择数据库\n```\nmysql>use abc;\n```\n（2）设置数据库编码\n```\nmysql>set names utf8;\n```\n（3）导入数据（注意sql文件的路径）\n```\nmysql>source /home/abc/abc.sql;\n```\n- 方法二：\n```\nmysql -u用户名 -p密码 数据库名 < 数据库名.sql\n#mysql -uabc_f -p abc < abc.sql\n```\n\n***\n\n### windows下：\n1.导出整个数据库\n```\nmysqldump -u 用户名 -p 数据库名 > 导出的文件名\nmysqldump -u dbuser -p dbname > dbname.sql\n```\n\n2.导出一个表\n```\nmysqldump -u 用户名 -p 数据库名 表名> 导出的文件名\nmysqldump -u dbuser -p dbname users> dbname_users.sql\n```\n\n3.导出一个数据库结构\n```\nmysqldump -u dbuser -p -d --add-drop-table dbname >d:/dbname_db.sql\n```\n-d 没有数据 --add-drop-table 在每个create语句之前增加一个drop table\n\n4.导入数据库\n\n常用source 命令\n进入mysql数据库控制台，如\nmysql -u root -p\nmysql>use 数据库\n然后使用source命令，后面参数为脚本文件(如这里用到的.sql)\nmysql>source d:/dbname.sql","slug":"mysql导入导出数据","published":1,"updated":"2022-02-27T14:07:32.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77xq000bhvx33l0e85k7","content":"<h2 id=\"mysql导入导出数据\"><a href=\"#mysql导入导出数据\" class=\"headerlink\" title=\"mysql导入导出数据\"></a>mysql导入导出数据</h2><p>mysql数据库导出数据的命令</p>\n<ul>\n<li>mysqldump -u用戶名 -p密码 -d 数据库名 表名 &gt; 脚本名;</li>\n</ul>\n<p>1、导出整个数据库结构和数据</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456 <span class=\"keyword\">database</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>\n\n<p>2、导出单个数据表结构和数据</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456  <span class=\"keyword\">database</span> <span class=\"keyword\">table</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<p>3、导出整个数据库结构（不包含数据）</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456  -d <span class=\"keyword\">database</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>\n<p>4、导出单个数据表结构（不包含数据）</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456  -d <span class=\"keyword\">database</span> <span class=\"keyword\">table</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Linux-下：\"><a href=\"#Linux-下：\" class=\"headerlink\" title=\"Linux 下：\"></a>Linux 下：</h3><h4 id=\"一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\"><a href=\"#一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\" class=\"headerlink\" title=\"一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\"></a>一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：</h4><p>1、导出数据和表结构：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 数据库名 &gt; 数据库名.<span class=\"keyword\">sql</span></span><br><span class=\"line\">#/usr/<span class=\"keyword\">local</span>/mysql/bin/   mysqldump -uroot -p abc &gt; abc.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>\n<p>敲回车后会提示输入密码</p>\n<p>2、只导出表结构</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.<span class=\"keyword\">sql</span></span><br><span class=\"line\">#/usr/<span class=\"keyword\">local</span>/mysql/bin/   mysqldump -uroot -p -d abc &gt; abc.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>\n<p>注：/usr/local/mysql/bin/  —&gt;  mysql的data目录</p>\n<h4 id=\"二、导入数据库\"><a href=\"#二、导入数据库\" class=\"headerlink\" title=\"二、导入数据库\"></a>二、导入数据库</h4><p>1、首先建空数据库</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">create</span> <span class=\"keyword\">database</span> abc;</span><br></pre></td></tr></table></figure>\n<p>2、导入数据库</p>\n<ul>\n<li>方法一：</li>\n</ul>\n<p>（1）选择数据库</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">use</span> <span class=\"title\">abc</span>;</span><br></pre></td></tr></table></figure>\n<p>（2）设置数据库编码</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">set</span> names <span class=\"comment\">utf8</span>;</span><br></pre></td></tr></table></figure>\n<p>（3）导入数据（注意sql文件的路径）</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">source</span> <span class=\"regexp\">/home/</span>abc<span class=\"regexp\">/abc.sql;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法二：<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mysql</span> <span class=\"selector-tag\">-u</span>用户名 <span class=\"selector-tag\">-p</span>密码 数据库名 &lt; 数据库名<span class=\"selector-class\">.sql</span></span><br><span class=\"line\"><span class=\"selector-id\">#mysql</span> <span class=\"selector-tag\">-uabc_f</span> <span class=\"selector-tag\">-p</span> <span class=\"selector-tag\">abc</span> &lt; <span class=\"selector-tag\">abc</span><span class=\"selector-class\">.sql</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<h3 id=\"windows下：\"><a href=\"#windows下：\" class=\"headerlink\" title=\"windows下：\"></a>windows下：</h3><p>1.导出整个数据库</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u 用户名 -p 数据库名 &gt; 导出的文件名</span></span><br><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u dbuser -p dbname &gt; dbname.sql</span></span><br></pre></td></tr></table></figure>\n\n<p>2.导出一个表</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u 用户名 -p 数据库名 表名&gt; 导出的文件名</span></span><br><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u dbuser -p dbname users&gt; dbname_users.sql</span></span><br></pre></td></tr></table></figure>\n\n<p>3.导出一个数据库结构</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u dbuser -p -d --<span class=\"meta\">add</span>-<span class=\"meta\">drop</span>-<span class=\"meta\">table</span> dbname &gt;d:/dbname_db.sql</span><br></pre></td></tr></table></figure>\n<p>-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table</p>\n<p>4.导入数据库</p>\n<p>常用source 命令<br>进入mysql数据库控制台，如<br>mysql -u root -p<br>mysql&gt;use 数据库<br>然后使用source命令，后面参数为脚本文件(如这里用到的.sql)<br>mysql&gt;source d:/dbname.sql</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"mysql导入导出数据\"><a href=\"#mysql导入导出数据\" class=\"headerlink\" title=\"mysql导入导出数据\"></a>mysql导入导出数据</h2><p>mysql数据库导出数据的命令</p>\n<ul>\n<li>mysqldump -u用戶名 -p密码 -d 数据库名 表名 &gt; 脚本名;</li>\n</ul>\n<p>1、导出整个数据库结构和数据</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456 <span class=\"keyword\">database</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>\n\n<p>2、导出单个数据表结构和数据</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456  <span class=\"keyword\">database</span> <span class=\"keyword\">table</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>","more":"<p>3、导出整个数据库结构（不包含数据）</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456  -d <span class=\"keyword\">database</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>\n<p>4、导出单个数据表结构（不包含数据）</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h localhost -uroot -p123456  -d <span class=\"keyword\">database</span> <span class=\"keyword\">table</span> &gt; dump.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Linux-下：\"><a href=\"#Linux-下：\" class=\"headerlink\" title=\"Linux 下：\"></a>Linux 下：</h3><h4 id=\"一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\"><a href=\"#一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\" class=\"headerlink\" title=\"一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：\"></a>一、导出数据库用mysqldump命令（注意mysql的安装路径，即此命令的路径）：</h4><p>1、导出数据和表结构：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 数据库名 &gt; 数据库名.<span class=\"keyword\">sql</span></span><br><span class=\"line\">#/usr/<span class=\"keyword\">local</span>/mysql/bin/   mysqldump -uroot -p abc &gt; abc.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>\n<p>敲回车后会提示输入密码</p>\n<p>2、只导出表结构</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u用户名 -p密码 -d 数据库名 &gt; 数据库名.<span class=\"keyword\">sql</span></span><br><span class=\"line\">#/usr/<span class=\"keyword\">local</span>/mysql/bin/   mysqldump -uroot -p -d abc &gt; abc.<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>\n<p>注：/usr/local/mysql/bin/  —&gt;  mysql的data目录</p>\n<h4 id=\"二、导入数据库\"><a href=\"#二、导入数据库\" class=\"headerlink\" title=\"二、导入数据库\"></a>二、导入数据库</h4><p>1、首先建空数据库</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">create</span> <span class=\"keyword\">database</span> abc;</span><br></pre></td></tr></table></figure>\n<p>2、导入数据库</p>\n<ul>\n<li>方法一：</li>\n</ul>\n<p>（1）选择数据库</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">use</span> <span class=\"title\">abc</span>;</span><br></pre></td></tr></table></figure>\n<p>（2）设置数据库编码</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">set</span> names <span class=\"comment\">utf8</span>;</span><br></pre></td></tr></table></figure>\n<p>（3）导入数据（注意sql文件的路径）</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;<span class=\"keyword\">source</span> <span class=\"regexp\">/home/</span>abc<span class=\"regexp\">/abc.sql;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法二：<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mysql</span> <span class=\"selector-tag\">-u</span>用户名 <span class=\"selector-tag\">-p</span>密码 数据库名 &lt; 数据库名<span class=\"selector-class\">.sql</span></span><br><span class=\"line\"><span class=\"selector-id\">#mysql</span> <span class=\"selector-tag\">-uabc_f</span> <span class=\"selector-tag\">-p</span> <span class=\"selector-tag\">abc</span> &lt; <span class=\"selector-tag\">abc</span><span class=\"selector-class\">.sql</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<h3 id=\"windows下：\"><a href=\"#windows下：\" class=\"headerlink\" title=\"windows下：\"></a>windows下：</h3><p>1.导出整个数据库</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u 用户名 -p 数据库名 &gt; 导出的文件名</span></span><br><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u dbuser -p dbname &gt; dbname.sql</span></span><br></pre></td></tr></table></figure>\n\n<p>2.导出一个表</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u 用户名 -p 数据库名 表名&gt; 导出的文件名</span></span><br><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u dbuser -p dbname users&gt; dbname_users.sql</span></span><br></pre></td></tr></table></figure>\n\n<p>3.导出一个数据库结构</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u dbuser -p -d --<span class=\"meta\">add</span>-<span class=\"meta\">drop</span>-<span class=\"meta\">table</span> dbname &gt;d:/dbname_db.sql</span><br></pre></td></tr></table></figure>\n<p>-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table</p>\n<p>4.导入数据库</p>\n<p>常用source 命令<br>进入mysql数据库控制台，如<br>mysql -u root -p<br>mysql&gt;use 数据库<br>然后使用source命令，后面参数为脚本文件(如这里用到的.sql)<br>mysql&gt;source d:/dbname.sql</p>"},{"title":"mongo去重","type":"categories","copyright":true,"date":"2020-01-02T08:06:51.000Z","_content":"\n## mongo 去重\n\n进入到Mongo的安装目录，进入到bin文件夹下\n\n导出数据：\n```\nmongoexport.exe -d database -c collection -o filename.json\n```\n导入数据：\n<!--more-->\n```\nmongoimport.exe -d database -c collection --file file\n```\n\n查询集合中存在重复的数据：\n```\ndb.collection.aggregate([{$group:{_id:{字段名:'$字段名'},count:{$sum:1}}},{$match:{count:{$gt:1}}}])\n```\n\n删除重复数据：\n```\ndb.collection.aggregate([\n{\n$group:{_id:{字段名:'$字段名'},count:{$sum:1},dups:{$addToSet:'$_id'}}\n},\n{\n$match:{count:{$gt:1}}\n}]).forEach(function(doc){\ndoc.dups.shift();\ndb.collection.remove({_id:{$in:doc.dups}});\n});\n```\n\n","source":"_posts/mongo去重.md","raw":"---\ntitle: mongo去重\ntype: categories\ncopyright: true\ndate: 2020-01-02 16:06:51\ntags:\n    - 数据库\n    - mongo\ncategories: [数据库, mongo]\n---\n\n## mongo 去重\n\n进入到Mongo的安装目录，进入到bin文件夹下\n\n导出数据：\n```\nmongoexport.exe -d database -c collection -o filename.json\n```\n导入数据：\n<!--more-->\n```\nmongoimport.exe -d database -c collection --file file\n```\n\n查询集合中存在重复的数据：\n```\ndb.collection.aggregate([{$group:{_id:{字段名:'$字段名'},count:{$sum:1}}},{$match:{count:{$gt:1}}}])\n```\n\n删除重复数据：\n```\ndb.collection.aggregate([\n{\n$group:{_id:{字段名:'$字段名'},count:{$sum:1},dups:{$addToSet:'$_id'}}\n},\n{\n$match:{count:{$gt:1}}\n}]).forEach(function(doc){\ndoc.dups.shift();\ndb.collection.remove({_id:{$in:doc.dups}});\n});\n```\n\n","slug":"mongo去重","published":1,"updated":"2022-02-25T08:37:09.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77xt000fhvx35kkcfmod","content":"<h2 id=\"mongo-去重\"><a href=\"#mongo-去重\" class=\"headerlink\" title=\"mongo 去重\"></a>mongo 去重</h2><p>进入到Mongo的安装目录，进入到bin文件夹下</p>\n<p>导出数据：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mongoexport</span><span class=\"selector-class\">.exe</span> <span class=\"selector-tag\">-d</span> <span class=\"selector-tag\">database</span> <span class=\"selector-tag\">-c</span> <span class=\"selector-tag\">collection</span> <span class=\"selector-tag\">-o</span> <span class=\"selector-tag\">filename</span><span class=\"selector-class\">.json</span></span><br></pre></td></tr></table></figure>\n<p>导入数据：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongoimport.<span class=\"keyword\">exe</span> -d database -<span class=\"keyword\">c</span> collection --<span class=\"keyword\">file</span> <span class=\"keyword\">file</span></span><br></pre></td></tr></table></figure>\n\n<p>查询集合中存在重复的数据：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.aggregate([&#123;<span class=\"string\">$group:</span>&#123;<span class=\"string\">_id:</span>&#123;字段名:<span class=\"string\">'$字段名'</span>&#125;,<span class=\"string\">count:</span>&#123;<span class=\"string\">$sum:</span><span class=\"number\">1</span>&#125;&#125;&#125;,&#123;<span class=\"string\">$match:</span>&#123;<span class=\"string\">count:</span>&#123;<span class=\"string\">$gt:</span><span class=\"number\">1</span>&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure>\n\n<p>删除重复数据：</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"built_in\">.collection</span>.aggregate([</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"variable\">$group:</span>&#123;_id:&#123;字段名:<span class=\"string\">'$字段名'</span>&#125;<span class=\"built_in\">,count</span>:&#123;<span class=\"variable\">$sum:1</span>&#125;,dups:&#123;<span class=\"variable\">$addToSet:</span><span class=\"string\">'$_id'</span>&#125;&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"variable\">$match:</span><span class=\"built_in\">&#123;count</span>:&#123;<span class=\"variable\">$gt:1</span>&#125;&#125;</span><br><span class=\"line\">&#125;]).forEach(<span class=\"keyword\">function</span><span class=\"built_in\">(doc</span>)&#123;</span><br><span class=\"line\">doc.dups.shift();</span><br><span class=\"line\">db<span class=\"built_in\">.collection</span><span class=\"built_in\">.remove</span>(&#123;_id:&#123;<span class=\"variable\">$in:doc</span>.dups&#125;&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"mongo-去重\"><a href=\"#mongo-去重\" class=\"headerlink\" title=\"mongo 去重\"></a>mongo 去重</h2><p>进入到Mongo的安装目录，进入到bin文件夹下</p>\n<p>导出数据：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mongoexport</span><span class=\"selector-class\">.exe</span> <span class=\"selector-tag\">-d</span> <span class=\"selector-tag\">database</span> <span class=\"selector-tag\">-c</span> <span class=\"selector-tag\">collection</span> <span class=\"selector-tag\">-o</span> <span class=\"selector-tag\">filename</span><span class=\"selector-class\">.json</span></span><br></pre></td></tr></table></figure>\n<p>导入数据：</p>","more":"<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongoimport.<span class=\"keyword\">exe</span> -d database -<span class=\"keyword\">c</span> collection --<span class=\"keyword\">file</span> <span class=\"keyword\">file</span></span><br></pre></td></tr></table></figure>\n\n<p>查询集合中存在重复的数据：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.collection.aggregate([&#123;<span class=\"string\">$group:</span>&#123;<span class=\"string\">_id:</span>&#123;字段名:<span class=\"string\">'$字段名'</span>&#125;,<span class=\"string\">count:</span>&#123;<span class=\"string\">$sum:</span><span class=\"number\">1</span>&#125;&#125;&#125;,&#123;<span class=\"string\">$match:</span>&#123;<span class=\"string\">count:</span>&#123;<span class=\"string\">$gt:</span><span class=\"number\">1</span>&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure>\n\n<p>删除重复数据：</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db<span class=\"built_in\">.collection</span>.aggregate([</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"variable\">$group:</span>&#123;_id:&#123;字段名:<span class=\"string\">'$字段名'</span>&#125;<span class=\"built_in\">,count</span>:&#123;<span class=\"variable\">$sum:1</span>&#125;,dups:&#123;<span class=\"variable\">$addToSet:</span><span class=\"string\">'$_id'</span>&#125;&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"variable\">$match:</span><span class=\"built_in\">&#123;count</span>:&#123;<span class=\"variable\">$gt:1</span>&#125;&#125;</span><br><span class=\"line\">&#125;]).forEach(<span class=\"keyword\">function</span><span class=\"built_in\">(doc</span>)&#123;</span><br><span class=\"line\">doc.dups.shift();</span><br><span class=\"line\">db<span class=\"built_in\">.collection</span><span class=\"built_in\">.remove</span>(&#123;_id:&#123;<span class=\"variable\">$in:doc</span>.dups&#125;&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"mysql用户创建授权","type":"categories","copyright":true,"date":"2022-02-27T13:45:55.000Z","_content":"\n## mysql创建用户并授权\n\n### 创建用户\n```\ncreate user 'username'@'host' identified by 'password'\n```\n### 授权\n```\ngrant all privileges on 数据库名.表名 to 'username'@'host'\n```\n### 用户创建并授权\n<!-- more -->\n```\ngrant all privileges on database.table to 'username'@'host' identified by 'password'\n```\n### 刷新权限\n```\nflush privileges\n```\n- localhost 表示只能在本地连，\"%\" 表示可以在任意一台机器连，\"host\" 指定ip 表示可以在指定机器上连\n- database: 指定数据库，如果是所有数据库可以用 * 代替\n- table: 指定表，如果是所有表可以用 * 代替\n- all privileges ： 赋予所有权限\n\n### 设置&修改用户密码\n```\nset password for 'username'@'host'=password('newpassowrd')\n```\n### 撤销用户权限\n```\nREVOKE privilege ON databasename.tablename FROM 'username'@'host'\n```\n- 假如你在给用户'dog'@'localhost'授权的时候是这样的(或类似的): GRANT SELECT ON test.user TO 'dog'@'localhost',则在使用REVOKE SELECT ON \\*.\\* FROM 'dog'@'localhost',命令并不能撤销该用户对test数据库中user表的SELECT 操作\n- 相反,如果授权使用的是GRANT SELECT ON \\*.\\* TO 'dog'@'localhost',则REVOKE SELECT ON test.user FROM 'dog'@'localhost'命令也不能撤销该用户对test数据库中user表的Select 权限\n\n### 查看用户权限\n```\nshow grants for 'username'@'host'\n```\n### 删除用户\n```\nDROP USER 'username'@'host'\n```","source":"_posts/mysql用户创建授权.md","raw":"---\ntitle: mysql用户创建授权\ntype: categories\ncopyright: true\ndate: 2022-02-27 21:45:55\ntags:\n    - 数据库\n    - mysql\ncategories: [数据库, mysql]\n---\n\n## mysql创建用户并授权\n\n### 创建用户\n```\ncreate user 'username'@'host' identified by 'password'\n```\n### 授权\n```\ngrant all privileges on 数据库名.表名 to 'username'@'host'\n```\n### 用户创建并授权\n<!-- more -->\n```\ngrant all privileges on database.table to 'username'@'host' identified by 'password'\n```\n### 刷新权限\n```\nflush privileges\n```\n- localhost 表示只能在本地连，\"%\" 表示可以在任意一台机器连，\"host\" 指定ip 表示可以在指定机器上连\n- database: 指定数据库，如果是所有数据库可以用 * 代替\n- table: 指定表，如果是所有表可以用 * 代替\n- all privileges ： 赋予所有权限\n\n### 设置&修改用户密码\n```\nset password for 'username'@'host'=password('newpassowrd')\n```\n### 撤销用户权限\n```\nREVOKE privilege ON databasename.tablename FROM 'username'@'host'\n```\n- 假如你在给用户'dog'@'localhost'授权的时候是这样的(或类似的): GRANT SELECT ON test.user TO 'dog'@'localhost',则在使用REVOKE SELECT ON \\*.\\* FROM 'dog'@'localhost',命令并不能撤销该用户对test数据库中user表的SELECT 操作\n- 相反,如果授权使用的是GRANT SELECT ON \\*.\\* TO 'dog'@'localhost',则REVOKE SELECT ON test.user FROM 'dog'@'localhost'命令也不能撤销该用户对test数据库中user表的Select 权限\n\n### 查看用户权限\n```\nshow grants for 'username'@'host'\n```\n### 删除用户\n```\nDROP USER 'username'@'host'\n```","slug":"mysql用户创建授权","published":1,"updated":"2022-02-27T13:48:52.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77xu000ghvx38roae8cg","content":"<h2 id=\"mysql创建用户并授权\"><a href=\"#mysql创建用户并授权\" class=\"headerlink\" title=\"mysql创建用户并授权\"></a>mysql创建用户并授权</h2><h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create<span class=\"built_in\"> user </span><span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> identified by <span class=\"string\">'password'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> 数据库名.表名 <span class=\"keyword\">to</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"用户创建并授权\"><a href=\"#用户创建并授权\" class=\"headerlink\" title=\"用户创建并授权\"></a>用户创建并授权</h3><a id=\"more\"></a>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> <span class=\"keyword\">database</span>.<span class=\"keyword\">table</span> <span class=\"keyword\">to</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> identified <span class=\"keyword\">by</span> <span class=\"string\">'password'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"刷新权限\"><a href=\"#刷新权限\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>localhost 表示只能在本地连，”%” 表示可以在任意一台机器连，”host” 指定ip 表示可以在指定机器上连</li>\n<li>database: 指定数据库，如果是所有数据库可以用 * 代替</li>\n<li>table: 指定表，如果是所有表可以用 * 代替</li>\n<li>all privileges ： 赋予所有权限</li>\n</ul>\n<h3 id=\"设置-amp-修改用户密码\"><a href=\"#设置-amp-修改用户密码\" class=\"headerlink\" title=\"设置&amp;修改用户密码\"></a>设置&amp;修改用户密码</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">password</span> <span class=\"keyword\">for</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span>=<span class=\"keyword\">password</span>(<span class=\"string\">'newpassowrd'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"撤销用户权限\"><a href=\"#撤销用户权限\" class=\"headerlink\" title=\"撤销用户权限\"></a>撤销用户权限</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span> privilege <span class=\"keyword\">ON</span> databasename.tablename <span class=\"keyword\">FROM</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>假如你在给用户‘dog’@’localhost’授权的时候是这样的(或类似的): GRANT SELECT ON test.user TO ‘dog’@’localhost’,则在使用REVOKE SELECT ON *.* FROM ‘dog’@’localhost’,命令并不能撤销该用户对test数据库中user表的SELECT 操作</li>\n<li>相反,如果授权使用的是GRANT SELECT ON *.* TO ‘dog’@’localhost’,则REVOKE SELECT ON test.user FROM ‘dog’@’localhost’命令也不能撤销该用户对test数据库中user表的Select 权限</li>\n</ul>\n<h3 id=\"查看用户权限\"><a href=\"#查看用户权限\" class=\"headerlink\" title=\"查看用户权限\"></a>查看用户权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grants</span> <span class=\"keyword\">for</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP<span class=\"built_in\"> USER </span><span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"mysql创建用户并授权\"><a href=\"#mysql创建用户并授权\" class=\"headerlink\" title=\"mysql创建用户并授权\"></a>mysql创建用户并授权</h2><h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create<span class=\"built_in\"> user </span><span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> identified by <span class=\"string\">'password'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> 数据库名.表名 <span class=\"keyword\">to</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"用户创建并授权\"><a href=\"#用户创建并授权\" class=\"headerlink\" title=\"用户创建并授权\"></a>用户创建并授权</h3>","more":"<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> <span class=\"keyword\">database</span>.<span class=\"keyword\">table</span> <span class=\"keyword\">to</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> identified <span class=\"keyword\">by</span> <span class=\"string\">'password'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"刷新权限\"><a href=\"#刷新权限\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>localhost 表示只能在本地连，”%” 表示可以在任意一台机器连，”host” 指定ip 表示可以在指定机器上连</li>\n<li>database: 指定数据库，如果是所有数据库可以用 * 代替</li>\n<li>table: 指定表，如果是所有表可以用 * 代替</li>\n<li>all privileges ： 赋予所有权限</li>\n</ul>\n<h3 id=\"设置-amp-修改用户密码\"><a href=\"#设置-amp-修改用户密码\" class=\"headerlink\" title=\"设置&amp;修改用户密码\"></a>设置&amp;修改用户密码</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">password</span> <span class=\"keyword\">for</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span>=<span class=\"keyword\">password</span>(<span class=\"string\">'newpassowrd'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"撤销用户权限\"><a href=\"#撤销用户权限\" class=\"headerlink\" title=\"撤销用户权限\"></a>撤销用户权限</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span> privilege <span class=\"keyword\">ON</span> databasename.tablename <span class=\"keyword\">FROM</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>假如你在给用户‘dog’@’localhost’授权的时候是这样的(或类似的): GRANT SELECT ON test.user TO ‘dog’@’localhost’,则在使用REVOKE SELECT ON *.* FROM ‘dog’@’localhost’,命令并不能撤销该用户对test数据库中user表的SELECT 操作</li>\n<li>相反,如果授权使用的是GRANT SELECT ON *.* TO ‘dog’@’localhost’,则REVOKE SELECT ON test.user FROM ‘dog’@’localhost’命令也不能撤销该用户对test数据库中user表的Select 权限</li>\n</ul>\n<h3 id=\"查看用户权限\"><a href=\"#查看用户权限\" class=\"headerlink\" title=\"查看用户权限\"></a>查看用户权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grants</span> <span class=\"keyword\">for</span> <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP<span class=\"built_in\"> USER </span><span class=\"string\">'username'</span>@<span class=\"string\">'host'</span></span><br></pre></td></tr></table></figure>"},{"title":"mysql生成sql语句","type":"categories","copyright":true,"date":"2022-02-27T13:26:45.000Z","_content":"\n\n## 使用python自动生成mysql的sql语句\n\n平时我们在工作当中有的时候使用数据库没有用orm模型，这个时候就需要我们手写sql语句，因此写了一个脚本自动来生成sql语句\n\n<!-- more -->\n\n```python\ndef gen_sql(opt='select', data=None, condition=None, table=None):\n    \"\"\"\n    sql语句生成模块\n    :param opt: 操作符，默认是查询select\n    :param data: 数据\n    :param condition: 条件\n    :param table: 表名\n    :return:\n    \"\"\"\n    if not data or not isinstance(data, dict):\n        print(\"没有需要处理的数据或者数据格式不是字典类型\")\n        return\n    if not table:\n        print(\"缺少表名\")\n        return\n    where_str = None  # sql判断条件\n    if condition and isinstance(condition, dict):\n        where_str = ' and '.join([f\"{key}='{value}'\" if isinstance(value, str) else f\"{key}={value}\"\n                                  for key, value in condition.items()])\n    k_list, v_list = [], []\n    for k, v in data.items():\n        k_list.append(k)\n        v_list.append(v)\n    key_str = ','.join(k_list)\n\n    message = None  # 返回的信息\n    if opt.lower() == 'select':  # 查询\n        if not where_str:\n            sql = \"select {} from {}\".format(key_str, table)\n        else:\n            sql = \"select {} from {} where {}\".format(key_str, table, where_str)\n    elif opt.lower() == 'insert':  # 新增\n        sql = \"insert ignore into {}({}) values {}\".format(table, key_str, tuple(v_list))\n    elif opt.lower() == 'update':  # 更新\n        set_value = ' and '.join([f\"{key}='{value}'\" if isinstance(value, str) else f\"{key}={value}\"\n                                  for key, value in data.items()])\n        sql = \"update {} set {} where {}\".format(table, set_value, where_str)\n    else:\n        sql = None\n        message = \"未定义的操作符:{}\".format(opt)\n\n    return sql, message\n\n\ndef test():\n    data = {\n        \"name\": \"joe\",\n        \"age\": 18,\n        \"gender\": \"man\"\n    }\n    condition = {\n        \"id\": 100\n    }\n    table = \"student\"\n\n    sql, msg = gen_sql(opt=\"select\", data=data, condition=condition, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"update\", data=data, condition=condition, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"insert\", data=data, condition=condition, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"select\", data=data, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"delete\", data=data, condition=condition, table=table)\n    print(sql, msg)\n\n\nif __name__ == '__main__':\n    test()\n\n```","source":"_posts/mysql生成sql语句.md","raw":"---\ntitle: mysql生成sql语句\ntype: categories\ncopyright: true\ndate: 2022-02-27 21:26:45\ntags:\n    - 数据库\n    - mysql\ncategories: [数据库, mysql]\n---\n\n\n## 使用python自动生成mysql的sql语句\n\n平时我们在工作当中有的时候使用数据库没有用orm模型，这个时候就需要我们手写sql语句，因此写了一个脚本自动来生成sql语句\n\n<!-- more -->\n\n```python\ndef gen_sql(opt='select', data=None, condition=None, table=None):\n    \"\"\"\n    sql语句生成模块\n    :param opt: 操作符，默认是查询select\n    :param data: 数据\n    :param condition: 条件\n    :param table: 表名\n    :return:\n    \"\"\"\n    if not data or not isinstance(data, dict):\n        print(\"没有需要处理的数据或者数据格式不是字典类型\")\n        return\n    if not table:\n        print(\"缺少表名\")\n        return\n    where_str = None  # sql判断条件\n    if condition and isinstance(condition, dict):\n        where_str = ' and '.join([f\"{key}='{value}'\" if isinstance(value, str) else f\"{key}={value}\"\n                                  for key, value in condition.items()])\n    k_list, v_list = [], []\n    for k, v in data.items():\n        k_list.append(k)\n        v_list.append(v)\n    key_str = ','.join(k_list)\n\n    message = None  # 返回的信息\n    if opt.lower() == 'select':  # 查询\n        if not where_str:\n            sql = \"select {} from {}\".format(key_str, table)\n        else:\n            sql = \"select {} from {} where {}\".format(key_str, table, where_str)\n    elif opt.lower() == 'insert':  # 新增\n        sql = \"insert ignore into {}({}) values {}\".format(table, key_str, tuple(v_list))\n    elif opt.lower() == 'update':  # 更新\n        set_value = ' and '.join([f\"{key}='{value}'\" if isinstance(value, str) else f\"{key}={value}\"\n                                  for key, value in data.items()])\n        sql = \"update {} set {} where {}\".format(table, set_value, where_str)\n    else:\n        sql = None\n        message = \"未定义的操作符:{}\".format(opt)\n\n    return sql, message\n\n\ndef test():\n    data = {\n        \"name\": \"joe\",\n        \"age\": 18,\n        \"gender\": \"man\"\n    }\n    condition = {\n        \"id\": 100\n    }\n    table = \"student\"\n\n    sql, msg = gen_sql(opt=\"select\", data=data, condition=condition, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"update\", data=data, condition=condition, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"insert\", data=data, condition=condition, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"select\", data=data, table=table)\n    print(sql, msg)\n    sql, msg = gen_sql(opt=\"delete\", data=data, condition=condition, table=table)\n    print(sql, msg)\n\n\nif __name__ == '__main__':\n    test()\n\n```","slug":"mysql生成sql语句","published":1,"updated":"2022-02-27T13:34:13.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77xx000khvx31kcd75eh","content":"<h2 id=\"使用python自动生成mysql的sql语句\"><a href=\"#使用python自动生成mysql的sql语句\" class=\"headerlink\" title=\"使用python自动生成mysql的sql语句\"></a>使用python自动生成mysql的sql语句</h2><p>平时我们在工作当中有的时候使用数据库没有用orm模型，这个时候就需要我们手写sql语句，因此写了一个脚本自动来生成sql语句</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_sql</span><span class=\"params\">(opt=<span class=\"string\">'select'</span>, data=None, condition=None, table=None)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    sql语句生成模块</span></span><br><span class=\"line\"><span class=\"string\">    :param opt: 操作符，默认是查询select</span></span><br><span class=\"line\"><span class=\"string\">    :param data: 数据</span></span><br><span class=\"line\"><span class=\"string\">    :param condition: 条件</span></span><br><span class=\"line\"><span class=\"string\">    :param table: 表名</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> isinstance(data, dict):</span><br><span class=\"line\">        print(<span class=\"string\">\"没有需要处理的数据或者数据格式不是字典类型\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> table:</span><br><span class=\"line\">        print(<span class=\"string\">\"缺少表名\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    where_str = <span class=\"literal\">None</span>  <span class=\"comment\"># sql判断条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> condition <span class=\"keyword\">and</span> isinstance(condition, dict):</span><br><span class=\"line\">        where_str = <span class=\"string\">' and '</span>.join([<span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>='<span class=\"subst\">&#123;value&#125;</span>'\"</span> <span class=\"keyword\">if</span> isinstance(value, str) <span class=\"keyword\">else</span> <span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>=<span class=\"subst\">&#123;value&#125;</span>\"</span></span><br><span class=\"line\">                                  <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> condition.items()])</span><br><span class=\"line\">    k_list, v_list = [], []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> data.items():</span><br><span class=\"line\">        k_list.append(k)</span><br><span class=\"line\">        v_list.append(v)</span><br><span class=\"line\">    key_str = <span class=\"string\">','</span>.join(k_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    message = <span class=\"literal\">None</span>  <span class=\"comment\"># 返回的信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> opt.lower() == <span class=\"string\">'select'</span>:  <span class=\"comment\"># 查询</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> where_str:</span><br><span class=\"line\">            sql = <span class=\"string\">\"select &#123;&#125; from &#123;&#125;\"</span>.format(key_str, table)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            sql = <span class=\"string\">\"select &#123;&#125; from &#123;&#125; where &#123;&#125;\"</span>.format(key_str, table, where_str)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> opt.lower() == <span class=\"string\">'insert'</span>:  <span class=\"comment\"># 新增</span></span><br><span class=\"line\">        sql = <span class=\"string\">\"insert ignore into &#123;&#125;(&#123;&#125;) values &#123;&#125;\"</span>.format(table, key_str, tuple(v_list))</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> opt.lower() == <span class=\"string\">'update'</span>:  <span class=\"comment\"># 更新</span></span><br><span class=\"line\">        set_value = <span class=\"string\">' and '</span>.join([<span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>='<span class=\"subst\">&#123;value&#125;</span>'\"</span> <span class=\"keyword\">if</span> isinstance(value, str) <span class=\"keyword\">else</span> <span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>=<span class=\"subst\">&#123;value&#125;</span>\"</span></span><br><span class=\"line\">                                  <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> data.items()])</span><br><span class=\"line\">        sql = <span class=\"string\">\"update &#123;&#125; set &#123;&#125; where &#123;&#125;\"</span>.format(table, set_value, where_str)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        sql = <span class=\"literal\">None</span></span><br><span class=\"line\">        message = <span class=\"string\">\"未定义的操作符:&#123;&#125;\"</span>.format(opt)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sql, message</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"age\"</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">        <span class=\"string\">\"gender\"</span>: <span class=\"string\">\"man\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    condition = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table = <span class=\"string\">\"student\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"select\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"update\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"insert\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"select\"</span>, data=data, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"delete\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    test()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"使用python自动生成mysql的sql语句\"><a href=\"#使用python自动生成mysql的sql语句\" class=\"headerlink\" title=\"使用python自动生成mysql的sql语句\"></a>使用python自动生成mysql的sql语句</h2><p>平时我们在工作当中有的时候使用数据库没有用orm模型，这个时候就需要我们手写sql语句，因此写了一个脚本自动来生成sql语句</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_sql</span><span class=\"params\">(opt=<span class=\"string\">'select'</span>, data=None, condition=None, table=None)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    sql语句生成模块</span></span><br><span class=\"line\"><span class=\"string\">    :param opt: 操作符，默认是查询select</span></span><br><span class=\"line\"><span class=\"string\">    :param data: 数据</span></span><br><span class=\"line\"><span class=\"string\">    :param condition: 条件</span></span><br><span class=\"line\"><span class=\"string\">    :param table: 表名</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> isinstance(data, dict):</span><br><span class=\"line\">        print(<span class=\"string\">\"没有需要处理的数据或者数据格式不是字典类型\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> table:</span><br><span class=\"line\">        print(<span class=\"string\">\"缺少表名\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    where_str = <span class=\"literal\">None</span>  <span class=\"comment\"># sql判断条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> condition <span class=\"keyword\">and</span> isinstance(condition, dict):</span><br><span class=\"line\">        where_str = <span class=\"string\">' and '</span>.join([<span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>='<span class=\"subst\">&#123;value&#125;</span>'\"</span> <span class=\"keyword\">if</span> isinstance(value, str) <span class=\"keyword\">else</span> <span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>=<span class=\"subst\">&#123;value&#125;</span>\"</span></span><br><span class=\"line\">                                  <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> condition.items()])</span><br><span class=\"line\">    k_list, v_list = [], []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> data.items():</span><br><span class=\"line\">        k_list.append(k)</span><br><span class=\"line\">        v_list.append(v)</span><br><span class=\"line\">    key_str = <span class=\"string\">','</span>.join(k_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    message = <span class=\"literal\">None</span>  <span class=\"comment\"># 返回的信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> opt.lower() == <span class=\"string\">'select'</span>:  <span class=\"comment\"># 查询</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> where_str:</span><br><span class=\"line\">            sql = <span class=\"string\">\"select &#123;&#125; from &#123;&#125;\"</span>.format(key_str, table)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            sql = <span class=\"string\">\"select &#123;&#125; from &#123;&#125; where &#123;&#125;\"</span>.format(key_str, table, where_str)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> opt.lower() == <span class=\"string\">'insert'</span>:  <span class=\"comment\"># 新增</span></span><br><span class=\"line\">        sql = <span class=\"string\">\"insert ignore into &#123;&#125;(&#123;&#125;) values &#123;&#125;\"</span>.format(table, key_str, tuple(v_list))</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> opt.lower() == <span class=\"string\">'update'</span>:  <span class=\"comment\"># 更新</span></span><br><span class=\"line\">        set_value = <span class=\"string\">' and '</span>.join([<span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>='<span class=\"subst\">&#123;value&#125;</span>'\"</span> <span class=\"keyword\">if</span> isinstance(value, str) <span class=\"keyword\">else</span> <span class=\"string\">f\"<span class=\"subst\">&#123;key&#125;</span>=<span class=\"subst\">&#123;value&#125;</span>\"</span></span><br><span class=\"line\">                                  <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> data.items()])</span><br><span class=\"line\">        sql = <span class=\"string\">\"update &#123;&#125; set &#123;&#125; where &#123;&#125;\"</span>.format(table, set_value, where_str)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        sql = <span class=\"literal\">None</span></span><br><span class=\"line\">        message = <span class=\"string\">\"未定义的操作符:&#123;&#125;\"</span>.format(opt)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sql, message</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"age\"</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">        <span class=\"string\">\"gender\"</span>: <span class=\"string\">\"man\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    condition = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table = <span class=\"string\">\"student\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"select\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"update\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"insert\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"select\"</span>, data=data, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\">    sql, msg = gen_sql(opt=<span class=\"string\">\"delete\"</span>, data=data, condition=condition, table=table)</span><br><span class=\"line\">    print(sql, msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    test()</span><br></pre></td></tr></table></figure>"},{"title":"mysql重置root密码","type":"categories","copyright":true,"date":"2022-02-27T13:37:21.000Z","_content":"\n## mysql重置root密码\n\n#### 方法一：\n\n1）：编辑mysqld.cnf文件\n```sh\nsudo vi /etc/mysql/mysql.conf.d/mysqld.cnf\n```\n\n2）：在文件中的skip-external-locking一行的下面添加一行：\n\nskip-grant-tables\n\n3）：重启MySQL服务\n```sh\nsudo service mysql restart\n```\n<!-- more -->\n\n4）：终端输入mysql进入MySQL，输入USE mysql切换至mysql数据库\n```sh\nmysql\nuse mysql\n```\n\n5）：把root用户的密码修改为000000\n```sh\nUPDATE mysql.user SET authentication_string=password('000000') WHERE User='root' AND Host ='localhost';\n```\n\n6）：修改字段plugin\n```sh\nUPDATE user SET plugin=\"mysql_native_password\";\n```\n\n7）：刷新权限\n```sh\nflush privileges;\n```\n\n8）：退出\n```sh\nquit;\n```\n\n9）：注释掉/etc/mysql/mysql.conf.d/mysqld.cnf文件中添加的一行\n\n#### 方法二：\n\n利用mysql自带的用户debian-sys-maint进行重置密码，只有Debian或Ubuntu服务器才有，存在于/etc/mysql/debian.cnf文件中\n\n打开/etc/mysql/目录下的debian.cnf文件，里面包括用户名和密码\n```sh\nsudo vim /etc/mysql/debian.cnf\n```\n\n使用文件中提供的用户名和密码进入mysql\n```sh\nmysql -u debian-sys-maint -p\n\nuse mysql;\n\nupdate user set authentication_string=password('123456') where user='root';\n```\n\n","source":"_posts/mysql重置root密码.md","raw":"---\ntitle: mysql重置root密码\ntype: categories\ncopyright: true\ndate: 2022-02-27 21:37:21\ntags:\n    - 数据库\n    - mysql\ncategories: [数据库, mysql]\n---\n\n## mysql重置root密码\n\n#### 方法一：\n\n1）：编辑mysqld.cnf文件\n```sh\nsudo vi /etc/mysql/mysql.conf.d/mysqld.cnf\n```\n\n2）：在文件中的skip-external-locking一行的下面添加一行：\n\nskip-grant-tables\n\n3）：重启MySQL服务\n```sh\nsudo service mysql restart\n```\n<!-- more -->\n\n4）：终端输入mysql进入MySQL，输入USE mysql切换至mysql数据库\n```sh\nmysql\nuse mysql\n```\n\n5）：把root用户的密码修改为000000\n```sh\nUPDATE mysql.user SET authentication_string=password('000000') WHERE User='root' AND Host ='localhost';\n```\n\n6）：修改字段plugin\n```sh\nUPDATE user SET plugin=\"mysql_native_password\";\n```\n\n7）：刷新权限\n```sh\nflush privileges;\n```\n\n8）：退出\n```sh\nquit;\n```\n\n9）：注释掉/etc/mysql/mysql.conf.d/mysqld.cnf文件中添加的一行\n\n#### 方法二：\n\n利用mysql自带的用户debian-sys-maint进行重置密码，只有Debian或Ubuntu服务器才有，存在于/etc/mysql/debian.cnf文件中\n\n打开/etc/mysql/目录下的debian.cnf文件，里面包括用户名和密码\n```sh\nsudo vim /etc/mysql/debian.cnf\n```\n\n使用文件中提供的用户名和密码进入mysql\n```sh\nmysql -u debian-sys-maint -p\n\nuse mysql;\n\nupdate user set authentication_string=password('123456') where user='root';\n```\n\n","slug":"mysql重置root密码","published":1,"updated":"2022-02-27T13:44:03.167Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77xz000mhvx3evvl6amh","content":"<h2 id=\"mysql重置root密码\"><a href=\"#mysql重置root密码\" class=\"headerlink\" title=\"mysql重置root密码\"></a>mysql重置root密码</h2><h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><p>1）：编辑mysqld.cnf文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>\n\n<p>2）：在文件中的skip-external-locking一行的下面添加一行：</p>\n<p>skip-grant-tables</p>\n<p>3）：重启MySQL服务</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service mysql restart</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<p>4）：终端输入mysql进入MySQL，输入USE mysql切换至mysql数据库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql</span><br><span class=\"line\">use mysql</span><br></pre></td></tr></table></figure>\n\n<p>5）：把root用户的密码修改为000000</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE mysql.user SET authentication_string=password(<span class=\"string\">'000000'</span>) WHERE User=<span class=\"string\">'root'</span> AND Host =<span class=\"string\">'localhost'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>6）：修改字段plugin</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE user SET plugin=<span class=\"string\">\"mysql_native_password\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>7）：刷新权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<p>8）：退出</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quit;</span><br></pre></td></tr></table></figure>\n\n<p>9）：注释掉/etc/mysql/mysql.conf.d/mysqld.cnf文件中添加的一行</p>\n<h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><p>利用mysql自带的用户debian-sys-maint进行重置密码，只有Debian或Ubuntu服务器才有，存在于/etc/mysql/debian.cnf文件中</p>\n<p>打开/etc/mysql/目录下的debian.cnf文件，里面包括用户名和密码</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure>\n\n<p>使用文件中提供的用户名和密码进入mysql</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u debian-sys-maint -p</span><br><span class=\"line\"></span><br><span class=\"line\">use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\">update user <span class=\"built_in\">set</span> authentication_string=password(<span class=\"string\">'123456'</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">'root'</span>;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"mysql重置root密码\"><a href=\"#mysql重置root密码\" class=\"headerlink\" title=\"mysql重置root密码\"></a>mysql重置root密码</h2><h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><p>1）：编辑mysqld.cnf文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>\n\n<p>2）：在文件中的skip-external-locking一行的下面添加一行：</p>\n<p>skip-grant-tables</p>\n<p>3）：重启MySQL服务</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service mysql restart</span><br></pre></td></tr></table></figure>","more":"<p>4）：终端输入mysql进入MySQL，输入USE mysql切换至mysql数据库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql</span><br><span class=\"line\">use mysql</span><br></pre></td></tr></table></figure>\n\n<p>5）：把root用户的密码修改为000000</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE mysql.user SET authentication_string=password(<span class=\"string\">'000000'</span>) WHERE User=<span class=\"string\">'root'</span> AND Host =<span class=\"string\">'localhost'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>6）：修改字段plugin</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE user SET plugin=<span class=\"string\">\"mysql_native_password\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>7）：刷新权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<p>8）：退出</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quit;</span><br></pre></td></tr></table></figure>\n\n<p>9）：注释掉/etc/mysql/mysql.conf.d/mysqld.cnf文件中添加的一行</p>\n<h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><p>利用mysql自带的用户debian-sys-maint进行重置密码，只有Debian或Ubuntu服务器才有，存在于/etc/mysql/debian.cnf文件中</p>\n<p>打开/etc/mysql/目录下的debian.cnf文件，里面包括用户名和密码</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure>\n\n<p>使用文件中提供的用户名和密码进入mysql</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u debian-sys-maint -p</span><br><span class=\"line\"></span><br><span class=\"line\">use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\">update user <span class=\"built_in\">set</span> authentication_string=password(<span class=\"string\">'123456'</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">'root'</span>;</span><br></pre></td></tr></table></figure>"},{"title":"mysql连接池","type":"categories","copyright":true,"date":"2022-02-27T13:08:22.000Z","_content":"\n## mysql连接池\n\n1、执行带参数的ＳＱＬ时，请先用sql语句指定需要输入的条件列表，然后再用tuple/list进行条件批配\n\n２、在格式ＳＱＬ中不需要使用引号指定数据类型，系统会根据输入参数自动识别\n\n３、在输入的值中不需要使用转意函数，系统会自动处理\n<!--more-->\n\n\n```python\nimport pymysql\nfrom pymysql.cursors import DictCursor\nfrom DBUtils.PooledDB import PooledDB\n\n\nclass Mysql(object):\n    \"\"\"\n    MYSQL数据库对象，负责产生数据库连接 , 此类中的连接采用连接池实现获取连接对象：conn = Mysql.getConn()\n    释放连接对象;conn.close()或del conn\n    \"\"\"\n    # 连接池对象\n    __pool = None\n\n    def __init__(self, config):\n        # 数据库构造函数，从连接池中取出连接，并生成操作游标\n        self._conn = Mysql.__getConn(config)\n        self._cursor = self._conn.cursor()\n\n    @staticmethod\n    def __getConn(config):\n        \"\"\"\n        @summary: 静态方法，从连接池中取出连接\n        @return MySQLdb.connection\n        \"\"\"\n        host = config.get('host', 'localhost')\n        port = config.get('port', 3306)\n        user = config.get('username')\n        passwd = config.get('password')\n        db = config.get('database')\n        charset = config.get('charset', 'utf8mb4')\n        mincached = config.get('mincached', 1)\n        maxcached = config.get('maxcached', 20)\n        if Mysql.__pool is None:\n            __pool = PooledDB(creator=pymysql, mincached=mincached, maxcached=maxcached,\n                              host=host, port=port, user=user, passwd=passwd,\n                              db=db, use_unicode=False, charset=charset, cursorclass=DictCursor)\n        return __pool.connection()\n\n    def getAll(self, sql, param=None):\n        \"\"\"\n        @summary: 执行查询，并取出所有结果集\n        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来\n        @param param: 可选参数，条件列表值（元组/列表）\n        @return: result list(字典对象)/boolean 查询到的结果集\n        \"\"\"\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        if count > 0:\n            result = self._cursor.fetchall()\n        else:\n            result = False\n        return result\n\n    def getOne(self, sql, param=None):\n        \"\"\"\n        @summary: 执行查询，并取出第一条\n        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来\n        @param param: 可选参数，条件列表值（元组/列表）\n        @return: result list/boolean 查询到的结果集\n        \"\"\"\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        if count > 0:\n            result = self._cursor.fetchone()\n        else:\n            result = False\n        return result\n\n    def getMany(self, sql, num, param=None):\n        \"\"\"\n        @summary: 执行查询，并取出num条结果\n        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来\n        @param num:取得的结果条数\n        @param param: 可选参数，条件列表值（元组/列表）\n        @return: result list/boolean 查询到的结果集\n        \"\"\"\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        if count > 0:\n            result = self._cursor.fetchmany(num)\n        else:\n            result = False\n        return result\n\n    def insertOne(self, sql, value):\n        \"\"\"\n        @summary: 向数据表插入一条记录\n        @param sql:要插入的ＳＱＬ格式\n        @param value:要插入的记录数据tuple/list\n        @return: insertId 受影响的行数\n        \"\"\"\n        self._cursor.execute(sql, value)\n        return self.__getInsertId()\n\n    def insertMany(self, sql, values):\n        \"\"\"\n        @summary: 向数据表插入多条记录\n        @param sql:要插入的ＳＱＬ格式\n        @param values:要插入的记录数据tuple(tuple)/list[list]\n        @return: count 受影响的行数\n        \"\"\"\n        count = self._cursor.executemany(sql, values)\n        return count\n\n    def __getInsertId(self):\n        \"\"\"\n        获取当前连接最后一次插入操作生成的id,如果没有则为0\n        \"\"\"\n        self._cursor.execute(\"SELECT @@IDENTITY AS id\")\n        result = self._cursor.fetchall()\n        return result[0]['id']\n\n    def __query(self, sql, param=None):\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        return count\n\n    def update(self, sql, param=None):\n        \"\"\"\n        @summary: 更新数据表记录\n        @param sql: ＳＱＬ格式及条件，使用(%s,%s)\n        @param param: 要更新的  值 tuple/list\n        @return: count 受影响的行数\n        \"\"\"\n        return self.__query(sql, param)\n\n    def delete(self, sql, param=None):\n        \"\"\"\n        @summary: 删除数据表记录\n        @param sql: ＳＱＬ格式及条件，使用(%s,%s)\n        @param param: 要删除的条件 值 tuple/list\n        @return: count 受影响的行数\n        \"\"\"\n        return self.__query(sql, param)\n\n    def begin(self):\n        \"\"\"\n        @summary: 开启事务\n        \"\"\"\n        self._conn.autocommit(0)\n\n    def end(self, option='commit'):\n        \"\"\"\n        @summary: 结束事务\n        \"\"\"\n        if option == 'commit':\n            self._conn.commit()\n        else:\n            self._conn.rollback()\n\n    def dispose(self, is_end=1):\n        \"\"\"\n        @summary: 释放连接池资源\n        \"\"\"\n        if is_end == 1:\n            self.end('commit')\n        else:\n            self.end('rollback')\n        self._cursor.close()\n        self._conn.close()\n```\n\n\n\n","source":"_posts/mysql连接池.md","raw":"---\ntitle: mysql连接池\ntype: categories\ncopyright: true\ndate: 2022-02-27 21:08:22\ntags:\n    - 数据库\n    - mysql\ncategories: [数据库, mysql]\n---\n\n## mysql连接池\n\n1、执行带参数的ＳＱＬ时，请先用sql语句指定需要输入的条件列表，然后再用tuple/list进行条件批配\n\n２、在格式ＳＱＬ中不需要使用引号指定数据类型，系统会根据输入参数自动识别\n\n３、在输入的值中不需要使用转意函数，系统会自动处理\n<!--more-->\n\n\n```python\nimport pymysql\nfrom pymysql.cursors import DictCursor\nfrom DBUtils.PooledDB import PooledDB\n\n\nclass Mysql(object):\n    \"\"\"\n    MYSQL数据库对象，负责产生数据库连接 , 此类中的连接采用连接池实现获取连接对象：conn = Mysql.getConn()\n    释放连接对象;conn.close()或del conn\n    \"\"\"\n    # 连接池对象\n    __pool = None\n\n    def __init__(self, config):\n        # 数据库构造函数，从连接池中取出连接，并生成操作游标\n        self._conn = Mysql.__getConn(config)\n        self._cursor = self._conn.cursor()\n\n    @staticmethod\n    def __getConn(config):\n        \"\"\"\n        @summary: 静态方法，从连接池中取出连接\n        @return MySQLdb.connection\n        \"\"\"\n        host = config.get('host', 'localhost')\n        port = config.get('port', 3306)\n        user = config.get('username')\n        passwd = config.get('password')\n        db = config.get('database')\n        charset = config.get('charset', 'utf8mb4')\n        mincached = config.get('mincached', 1)\n        maxcached = config.get('maxcached', 20)\n        if Mysql.__pool is None:\n            __pool = PooledDB(creator=pymysql, mincached=mincached, maxcached=maxcached,\n                              host=host, port=port, user=user, passwd=passwd,\n                              db=db, use_unicode=False, charset=charset, cursorclass=DictCursor)\n        return __pool.connection()\n\n    def getAll(self, sql, param=None):\n        \"\"\"\n        @summary: 执行查询，并取出所有结果集\n        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来\n        @param param: 可选参数，条件列表值（元组/列表）\n        @return: result list(字典对象)/boolean 查询到的结果集\n        \"\"\"\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        if count > 0:\n            result = self._cursor.fetchall()\n        else:\n            result = False\n        return result\n\n    def getOne(self, sql, param=None):\n        \"\"\"\n        @summary: 执行查询，并取出第一条\n        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来\n        @param param: 可选参数，条件列表值（元组/列表）\n        @return: result list/boolean 查询到的结果集\n        \"\"\"\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        if count > 0:\n            result = self._cursor.fetchone()\n        else:\n            result = False\n        return result\n\n    def getMany(self, sql, num, param=None):\n        \"\"\"\n        @summary: 执行查询，并取出num条结果\n        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来\n        @param num:取得的结果条数\n        @param param: 可选参数，条件列表值（元组/列表）\n        @return: result list/boolean 查询到的结果集\n        \"\"\"\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        if count > 0:\n            result = self._cursor.fetchmany(num)\n        else:\n            result = False\n        return result\n\n    def insertOne(self, sql, value):\n        \"\"\"\n        @summary: 向数据表插入一条记录\n        @param sql:要插入的ＳＱＬ格式\n        @param value:要插入的记录数据tuple/list\n        @return: insertId 受影响的行数\n        \"\"\"\n        self._cursor.execute(sql, value)\n        return self.__getInsertId()\n\n    def insertMany(self, sql, values):\n        \"\"\"\n        @summary: 向数据表插入多条记录\n        @param sql:要插入的ＳＱＬ格式\n        @param values:要插入的记录数据tuple(tuple)/list[list]\n        @return: count 受影响的行数\n        \"\"\"\n        count = self._cursor.executemany(sql, values)\n        return count\n\n    def __getInsertId(self):\n        \"\"\"\n        获取当前连接最后一次插入操作生成的id,如果没有则为0\n        \"\"\"\n        self._cursor.execute(\"SELECT @@IDENTITY AS id\")\n        result = self._cursor.fetchall()\n        return result[0]['id']\n\n    def __query(self, sql, param=None):\n        if param is None:\n            count = self._cursor.execute(sql)\n        else:\n            count = self._cursor.execute(sql, param)\n        return count\n\n    def update(self, sql, param=None):\n        \"\"\"\n        @summary: 更新数据表记录\n        @param sql: ＳＱＬ格式及条件，使用(%s,%s)\n        @param param: 要更新的  值 tuple/list\n        @return: count 受影响的行数\n        \"\"\"\n        return self.__query(sql, param)\n\n    def delete(self, sql, param=None):\n        \"\"\"\n        @summary: 删除数据表记录\n        @param sql: ＳＱＬ格式及条件，使用(%s,%s)\n        @param param: 要删除的条件 值 tuple/list\n        @return: count 受影响的行数\n        \"\"\"\n        return self.__query(sql, param)\n\n    def begin(self):\n        \"\"\"\n        @summary: 开启事务\n        \"\"\"\n        self._conn.autocommit(0)\n\n    def end(self, option='commit'):\n        \"\"\"\n        @summary: 结束事务\n        \"\"\"\n        if option == 'commit':\n            self._conn.commit()\n        else:\n            self._conn.rollback()\n\n    def dispose(self, is_end=1):\n        \"\"\"\n        @summary: 释放连接池资源\n        \"\"\"\n        if is_end == 1:\n            self.end('commit')\n        else:\n            self.end('rollback')\n        self._cursor.close()\n        self._conn.close()\n```\n\n\n\n","slug":"mysql连接池","published":1,"updated":"2022-02-27T13:15:37.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77y1000phvx3hvpv5vry","content":"<h2 id=\"mysql连接池\"><a href=\"#mysql连接池\" class=\"headerlink\" title=\"mysql连接池\"></a>mysql连接池</h2><p>1、执行带参数的ＳＱＬ时，请先用sql语句指定需要输入的条件列表，然后再用tuple/list进行条件批配</p>\n<p>２、在格式ＳＱＬ中不需要使用引号指定数据类型，系统会根据输入参数自动识别</p>\n<p>３、在输入的值中不需要使用转意函数，系统会自动处理</p>\n<a id=\"more\"></a>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">from</span> pymysql.cursors <span class=\"keyword\">import</span> DictCursor</span><br><span class=\"line\"><span class=\"keyword\">from</span> DBUtils.PooledDB <span class=\"keyword\">import</span> PooledDB</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mysql</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    MYSQL数据库对象，负责产生数据库连接 , 此类中的连接采用连接池实现获取连接对象：conn = Mysql.getConn()</span></span><br><span class=\"line\"><span class=\"string\">    释放连接对象;conn.close()或del conn</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 连接池对象</span></span><br><span class=\"line\">    __pool = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, config)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 数据库构造函数，从连接池中取出连接，并生成操作游标</span></span><br><span class=\"line\">        self._conn = Mysql.__getConn(config)</span><br><span class=\"line\">        self._cursor = self._conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getConn</span><span class=\"params\">(config)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 静态方法，从连接池中取出连接</span></span><br><span class=\"line\"><span class=\"string\">        @return MySQLdb.connection</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        host = config.get(<span class=\"string\">'host'</span>, <span class=\"string\">'localhost'</span>)</span><br><span class=\"line\">        port = config.get(<span class=\"string\">'port'</span>, <span class=\"number\">3306</span>)</span><br><span class=\"line\">        user = config.get(<span class=\"string\">'username'</span>)</span><br><span class=\"line\">        passwd = config.get(<span class=\"string\">'password'</span>)</span><br><span class=\"line\">        db = config.get(<span class=\"string\">'database'</span>)</span><br><span class=\"line\">        charset = config.get(<span class=\"string\">'charset'</span>, <span class=\"string\">'utf8mb4'</span>)</span><br><span class=\"line\">        mincached = config.get(<span class=\"string\">'mincached'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        maxcached = config.get(<span class=\"string\">'maxcached'</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Mysql.__pool <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            __pool = PooledDB(creator=pymysql, mincached=mincached, maxcached=maxcached,</span><br><span class=\"line\">                              host=host, port=port, user=user, passwd=passwd,</span><br><span class=\"line\">                              db=db, use_unicode=<span class=\"literal\">False</span>, charset=charset, cursorclass=DictCursor)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> __pool.connection()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAll</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 执行查询，并取出所有结果集</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class=\"line\"><span class=\"string\">        @return: result list(字典对象)/boolean 查询到的结果集</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            result = self._cursor.fetchall()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getOne</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 执行查询，并取出第一条</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class=\"line\"><span class=\"string\">        @return: result list/boolean 查询到的结果集</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            result = self._cursor.fetchone()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMany</span><span class=\"params\">(self, sql, num, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 执行查询，并取出num条结果</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class=\"line\"><span class=\"string\">        @param num:取得的结果条数</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class=\"line\"><span class=\"string\">        @return: result list/boolean 查询到的结果集</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            result = self._cursor.fetchmany(num)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertOne</span><span class=\"params\">(self, sql, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 向数据表插入一条记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:要插入的ＳＱＬ格式</span></span><br><span class=\"line\"><span class=\"string\">        @param value:要插入的记录数据tuple/list</span></span><br><span class=\"line\"><span class=\"string\">        @return: insertId 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self._cursor.execute(sql, value)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__getInsertId()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertMany</span><span class=\"params\">(self, sql, values)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 向数据表插入多条记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:要插入的ＳＱＬ格式</span></span><br><span class=\"line\"><span class=\"string\">        @param values:要插入的记录数据tuple(tuple)/list[list]</span></span><br><span class=\"line\"><span class=\"string\">        @return: count 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        count = self._cursor.executemany(sql, values)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getInsertId</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        获取当前连接最后一次插入操作生成的id,如果没有则为0</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self._cursor.execute(<span class=\"string\">\"SELECT @@IDENTITY AS id\"</span>)</span><br><span class=\"line\">        result = self._cursor.fetchall()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result[<span class=\"number\">0</span>][<span class=\"string\">'id'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__query</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 更新数据表记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql: ＳＱＬ格式及条件，使用(%s,%s)</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 要更新的  值 tuple/list</span></span><br><span class=\"line\"><span class=\"string\">        @return: count 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__query(sql, param)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 删除数据表记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql: ＳＱＬ格式及条件，使用(%s,%s)</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 要删除的条件 值 tuple/list</span></span><br><span class=\"line\"><span class=\"string\">        @return: count 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__query(sql, param)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">begin</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 开启事务</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self._conn.autocommit(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">end</span><span class=\"params\">(self, option=<span class=\"string\">'commit'</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 结束事务</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> option == <span class=\"string\">'commit'</span>:</span><br><span class=\"line\">            self._conn.commit()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self._conn.rollback()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dispose</span><span class=\"params\">(self, is_end=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 释放连接池资源</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_end == <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.end(<span class=\"string\">'commit'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.end(<span class=\"string\">'rollback'</span>)</span><br><span class=\"line\">        self._cursor.close()</span><br><span class=\"line\">        self._conn.close()</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"mysql连接池\"><a href=\"#mysql连接池\" class=\"headerlink\" title=\"mysql连接池\"></a>mysql连接池</h2><p>1、执行带参数的ＳＱＬ时，请先用sql语句指定需要输入的条件列表，然后再用tuple/list进行条件批配</p>\n<p>２、在格式ＳＱＬ中不需要使用引号指定数据类型，系统会根据输入参数自动识别</p>\n<p>３、在输入的值中不需要使用转意函数，系统会自动处理</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">from</span> pymysql.cursors <span class=\"keyword\">import</span> DictCursor</span><br><span class=\"line\"><span class=\"keyword\">from</span> DBUtils.PooledDB <span class=\"keyword\">import</span> PooledDB</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mysql</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    MYSQL数据库对象，负责产生数据库连接 , 此类中的连接采用连接池实现获取连接对象：conn = Mysql.getConn()</span></span><br><span class=\"line\"><span class=\"string\">    释放连接对象;conn.close()或del conn</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 连接池对象</span></span><br><span class=\"line\">    __pool = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, config)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 数据库构造函数，从连接池中取出连接，并生成操作游标</span></span><br><span class=\"line\">        self._conn = Mysql.__getConn(config)</span><br><span class=\"line\">        self._cursor = self._conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getConn</span><span class=\"params\">(config)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 静态方法，从连接池中取出连接</span></span><br><span class=\"line\"><span class=\"string\">        @return MySQLdb.connection</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        host = config.get(<span class=\"string\">'host'</span>, <span class=\"string\">'localhost'</span>)</span><br><span class=\"line\">        port = config.get(<span class=\"string\">'port'</span>, <span class=\"number\">3306</span>)</span><br><span class=\"line\">        user = config.get(<span class=\"string\">'username'</span>)</span><br><span class=\"line\">        passwd = config.get(<span class=\"string\">'password'</span>)</span><br><span class=\"line\">        db = config.get(<span class=\"string\">'database'</span>)</span><br><span class=\"line\">        charset = config.get(<span class=\"string\">'charset'</span>, <span class=\"string\">'utf8mb4'</span>)</span><br><span class=\"line\">        mincached = config.get(<span class=\"string\">'mincached'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        maxcached = config.get(<span class=\"string\">'maxcached'</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Mysql.__pool <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            __pool = PooledDB(creator=pymysql, mincached=mincached, maxcached=maxcached,</span><br><span class=\"line\">                              host=host, port=port, user=user, passwd=passwd,</span><br><span class=\"line\">                              db=db, use_unicode=<span class=\"literal\">False</span>, charset=charset, cursorclass=DictCursor)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> __pool.connection()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAll</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 执行查询，并取出所有结果集</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class=\"line\"><span class=\"string\">        @return: result list(字典对象)/boolean 查询到的结果集</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            result = self._cursor.fetchall()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getOne</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 执行查询，并取出第一条</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class=\"line\"><span class=\"string\">        @return: result list/boolean 查询到的结果集</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            result = self._cursor.fetchone()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMany</span><span class=\"params\">(self, sql, num, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 执行查询，并取出num条结果</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来</span></span><br><span class=\"line\"><span class=\"string\">        @param num:取得的结果条数</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 可选参数，条件列表值（元组/列表）</span></span><br><span class=\"line\"><span class=\"string\">        @return: result list/boolean 查询到的结果集</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            result = self._cursor.fetchmany(num)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertOne</span><span class=\"params\">(self, sql, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 向数据表插入一条记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:要插入的ＳＱＬ格式</span></span><br><span class=\"line\"><span class=\"string\">        @param value:要插入的记录数据tuple/list</span></span><br><span class=\"line\"><span class=\"string\">        @return: insertId 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self._cursor.execute(sql, value)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__getInsertId()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertMany</span><span class=\"params\">(self, sql, values)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 向数据表插入多条记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql:要插入的ＳＱＬ格式</span></span><br><span class=\"line\"><span class=\"string\">        @param values:要插入的记录数据tuple(tuple)/list[list]</span></span><br><span class=\"line\"><span class=\"string\">        @return: count 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        count = self._cursor.executemany(sql, values)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getInsertId</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        获取当前连接最后一次插入操作生成的id,如果没有则为0</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self._cursor.execute(<span class=\"string\">\"SELECT @@IDENTITY AS id\"</span>)</span><br><span class=\"line\">        result = self._cursor.fetchall()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result[<span class=\"number\">0</span>][<span class=\"string\">'id'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__query</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> param <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            count = self._cursor.execute(sql, param)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 更新数据表记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql: ＳＱＬ格式及条件，使用(%s,%s)</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 要更新的  值 tuple/list</span></span><br><span class=\"line\"><span class=\"string\">        @return: count 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__query(sql, param)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 删除数据表记录</span></span><br><span class=\"line\"><span class=\"string\">        @param sql: ＳＱＬ格式及条件，使用(%s,%s)</span></span><br><span class=\"line\"><span class=\"string\">        @param param: 要删除的条件 值 tuple/list</span></span><br><span class=\"line\"><span class=\"string\">        @return: count 受影响的行数</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__query(sql, param)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">begin</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 开启事务</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self._conn.autocommit(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">end</span><span class=\"params\">(self, option=<span class=\"string\">'commit'</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 结束事务</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> option == <span class=\"string\">'commit'</span>:</span><br><span class=\"line\">            self._conn.commit()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self._conn.rollback()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dispose</span><span class=\"params\">(self, is_end=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        @summary: 释放连接池资源</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_end == <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.end(<span class=\"string\">'commit'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.end(<span class=\"string\">'rollback'</span>)</span><br><span class=\"line\">        self._cursor.close()</span><br><span class=\"line\">        self._conn.close()</span><br></pre></td></tr></table></figure>"},{"title":"python3中Unicode字符转中文","type":"categories","copyright":true,"date":"2020-01-02T06:51:14.000Z","_content":"\n## python3中将Unicode字符串转成中文\n\n用python爬虫爬取数据时，有时候会发现爬取的数据类似于\n```python\n\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\n```\n这样的Unicode字符串，在python的交互环境里可以直接打印输出查看内容；\n```python\nprint(\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\")\n\n# 【演唱会】2000-拉阔音乐会\n```\n<!--more-->\n\n但是有些时候，我们需要保存的是中文数据，而不是Unicode字符串，所以我们需要将Unicode转成中文，我们知道encode()方法是将Unicode码转成我们需要的编码格式，但是我们返回的本身就是str格式，所以我们需要将Unicode字符串转成Unicode码，网上查了资料，是将字符串进行decode(\"unicode_escape\")转换，但是在python3中，提示str没有decode的方法。\n\n因此解决的办法是先采用encode()进行编码，在用同样的编码格式进行decode解码；\n\n```python\ndata = \"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\".encode(\"utf-8\").decode(\"utf-8\")\nprint(type(data))  # <class 'str'>\nprint(data)  # 【演唱会】2000-拉阔音乐会\n```\n\n```python\ndata = \"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\".encode(\"GBK\").decode(\"GBK\")\nprint(type(data))  # <class 'str'>\nprint(data)  # 【演唱会】2000-拉阔音乐会\n```\n\n编码格式可以任意，只是解码的时候需要用相同的格式进行解码就行，这样我们就可以保存中文数据了。\n","source":"_posts/python3中Unicode字符转中文.md","raw":"---\ntitle: python3中Unicode字符转中文\ntype: categories\ncopyright: true\ndate: 2020-01-02 14:51:14\ntags:\n    - python\n    - 爬虫\ncategories: [python, 爬虫]\n---\n\n## python3中将Unicode字符串转成中文\n\n用python爬虫爬取数据时，有时候会发现爬取的数据类似于\n```python\n\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\n```\n这样的Unicode字符串，在python的交互环境里可以直接打印输出查看内容；\n```python\nprint(\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\")\n\n# 【演唱会】2000-拉阔音乐会\n```\n<!--more-->\n\n但是有些时候，我们需要保存的是中文数据，而不是Unicode字符串，所以我们需要将Unicode转成中文，我们知道encode()方法是将Unicode码转成我们需要的编码格式，但是我们返回的本身就是str格式，所以我们需要将Unicode字符串转成Unicode码，网上查了资料，是将字符串进行decode(\"unicode_escape\")转换，但是在python3中，提示str没有decode的方法。\n\n因此解决的办法是先采用encode()进行编码，在用同样的编码格式进行decode解码；\n\n```python\ndata = \"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\".encode(\"utf-8\").decode(\"utf-8\")\nprint(type(data))  # <class 'str'>\nprint(data)  # 【演唱会】2000-拉阔音乐会\n```\n\n```python\ndata = \"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\".encode(\"GBK\").decode(\"GBK\")\nprint(type(data))  # <class 'str'>\nprint(data)  # 【演唱会】2000-拉阔音乐会\n```\n\n编码格式可以任意，只是解码的时候需要用相同的格式进行解码就行，这样我们就可以保存中文数据了。\n","slug":"python3中Unicode字符转中文","published":1,"updated":"2022-02-25T08:37:09.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77y2000rhvx3heoah8d0","content":"<h2 id=\"python3中将Unicode字符串转成中文\"><a href=\"#python3中将Unicode字符串转成中文\" class=\"headerlink\" title=\"python3中将Unicode字符串转成中文\"></a>python3中将Unicode字符串转成中文</h2><p>用python爬虫爬取数据时，有时候会发现爬取的数据类似于</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a</span><br></pre></td></tr></table></figure>\n<p>这样的Unicode字符串，在python的交互环境里可以直接打印输出查看内容；</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 【演唱会】2000-拉阔音乐会</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<p>但是有些时候，我们需要保存的是中文数据，而不是Unicode字符串，所以我们需要将Unicode转成中文，我们知道encode()方法是将Unicode码转成我们需要的编码格式，但是我们返回的本身就是str格式，所以我们需要将Unicode字符串转成Unicode码，网上查了资料，是将字符串进行decode(“unicode_escape”)转换，但是在python3中，提示str没有decode的方法。</p>\n<p>因此解决的办法是先采用encode()进行编码，在用同样的编码格式进行decode解码；</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"string\">\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\"</span>.encode(<span class=\"string\">\"utf-8\"</span>).decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">print(type(data))  <span class=\"comment\"># &lt;class 'str'&gt;</span></span><br><span class=\"line\">print(data)  <span class=\"comment\"># 【演唱会】2000-拉阔音乐会</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"string\">\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\"</span>.encode(<span class=\"string\">\"GBK\"</span>).decode(<span class=\"string\">\"GBK\"</span>)</span><br><span class=\"line\">print(type(data))  <span class=\"comment\"># &lt;class 'str'&gt;</span></span><br><span class=\"line\">print(data)  <span class=\"comment\"># 【演唱会】2000-拉阔音乐会</span></span><br></pre></td></tr></table></figure>\n\n<p>编码格式可以任意，只是解码的时候需要用相同的格式进行解码就行，这样我们就可以保存中文数据了。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"python3中将Unicode字符串转成中文\"><a href=\"#python3中将Unicode字符串转成中文\" class=\"headerlink\" title=\"python3中将Unicode字符串转成中文\"></a>python3中将Unicode字符串转成中文</h2><p>用python爬虫爬取数据时，有时候会发现爬取的数据类似于</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a</span><br></pre></td></tr></table></figure>\n<p>这样的Unicode字符串，在python的交互环境里可以直接打印输出查看内容；</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 【演唱会】2000-拉阔音乐会</span></span><br></pre></td></tr></table></figure>","more":"<p>但是有些时候，我们需要保存的是中文数据，而不是Unicode字符串，所以我们需要将Unicode转成中文，我们知道encode()方法是将Unicode码转成我们需要的编码格式，但是我们返回的本身就是str格式，所以我们需要将Unicode字符串转成Unicode码，网上查了资料，是将字符串进行decode(“unicode_escape”)转换，但是在python3中，提示str没有decode的方法。</p>\n<p>因此解决的办法是先采用encode()进行编码，在用同样的编码格式进行decode解码；</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"string\">\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\"</span>.encode(<span class=\"string\">\"utf-8\"</span>).decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">print(type(data))  <span class=\"comment\"># &lt;class 'str'&gt;</span></span><br><span class=\"line\">print(data)  <span class=\"comment\"># 【演唱会】2000-拉阔音乐会</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"string\">\"\\u3010\\u6f14\\u5531\\u4f1a\\u30112000-\\u62c9\\u9614\\u97f3\\u4e50\\u4f1a\"</span>.encode(<span class=\"string\">\"GBK\"</span>).decode(<span class=\"string\">\"GBK\"</span>)</span><br><span class=\"line\">print(type(data))  <span class=\"comment\"># &lt;class 'str'&gt;</span></span><br><span class=\"line\">print(data)  <span class=\"comment\"># 【演唱会】2000-拉阔音乐会</span></span><br></pre></td></tr></table></figure>\n\n<p>编码格式可以任意，只是解码的时候需要用相同的格式进行解码就行，这样我们就可以保存中文数据了。</p>"},{"title":"python中arrow库的使用","type":"categories","copyright":true,"date":"2020-01-02T03:57:58.000Z","_content":"\n Arrow是一个Python库，为创建，操作，格式化和转换日期，时间和时间戳提供了一种明智的，人性化的方法。 它实现和更新日期时间类型，填补功能上的空白，并提供支持许多常见创建场景的智能模块API。 简而言之，它可以帮助您使用更少的进口和更少的代码来处理日期和时间。\n### 安装\n\n```\npip install arrow\n```\n\n<!--more-->\n\n### 简单开始\n\n```python\n>>> import arrow\n>>> utc = arrow.utcnow()  # 获取世界标准时间\n>>> utc\n<Arrow [2018-06-07T09:37:28.989983+00:00]>\n>>> utc = arrow.now()  # 获取本地时间\n>>> utc\n<Arrow [2018-06-07T17:40:19.019529+08:00]>\n>>> arrow.now('US/Pacific')  # 获取指定时区的时间\n<Arrow [2018-06-07T02:41:54.815029-07:00]>\n```\n\n```python\n>>> a = arrow.now()\n>>> a\n<Arrow [2018-06-07T17:44:43.519166+08:00]>\n>>> a.year  # 当前年\n2018\n>>> a.month  # 当前月份\n6\n>>> a.day  # 当前天\n7\n>>> a.hour  # 当前第几个小时\n17\n>>> a.minute  # 当前多少分钟\n44\n>>> a.second  # 当前多少秒\n43\n>>> a.timestamp  # 获取时间戳\n1528364683\n>>> a.float_timestamp  # 浮点数时间戳\n1528364683.519166\n```\n\n### 时间格式化\n\n```python\n>>> a = arrow.now()\n>>> a\n<Arrow [2018-06-07T17:59:36.917894+08:00]>\n>>> a.format()\n'2018-06-07 17:59:36+08:00'\n>>> a.format('YYYY-MM-DD HH:mm:ss ZZ')\n'2018-06-07 17:59:36 +08:00'\n>>> a.ctime()  # 返回日期和时间的ctime格式化表示。\n'Thu Jun  7 17:59:36 2018'  \n>>> a.weekday()  # 以整数形式返回星期几（0-6）\n3\n>>> a.isoweekday()  # 以整数形式返回一周中的ISO日（1-7）\n4\n>>> a.isocalendar()  # 返回3元组（ISO年，ISO周数，ISO工作日）\n(2018, 23, 4)\n>>> a.toordinal()  # 返回日期的格雷戈里序数\n736852\n```\n\n### 从string中解析时间对象\n\n```python\n>>> arrow.get('2018-06-07 18:52:45', 'YYYY-MM-DD HH:mm:ss')\n<Arrow [2018-06-07T18:52:45+00:00]>\n>>> str = 'June was born in May 1980'\n>>> arrow.get(str,'MMMM YYYY')\n<Arrow [1980-05-01T00:00:00+00:00]>\n```\n\n### 解析的格式化参考：http://arrow.readthedocs.io/en/latest/#tokens\n### 时间的替换和偏移\n\n```python\n>>> arw = arrow.now()\n>>> arw\n<Arrow [2018-06-07T19:04:50.245201+08:00]>\n>>> arw.replace(hour=20,minute=00)  # 替换时间\n<Arrow [2018-06-07T20:00:50.245201+08:00]>\n>>> arw.replace(tzinfo='US/Pacific')  # 替换时区\n<Arrow [2018-06-07T19:04:50.245201-07:00]>\n\n>>> arw.shift(days=+3)  # 往后偏移三天\n<Arrow [2018-06-10T19:04:50.245201+08:00]>\n>>> arw.shift(days=-3)  # 往前偏移三天\n<Arrow [2018-06-04T19:04:50.245201+08:00]>\n>>> \n```\n\n### 按名称或tzinfo转换为时区\n\n```python\n>>> arw = arrow.utcnow()\n>>> arw\n<Arrow [2018-06-07T11:16:51.695083+00:00]>\n>>> arw.to('US/Pacific')\n<Arrow [2018-06-07T04:16:51.695083-07:00]>\n\n```\n\n### 更人性化的设计\n\n```python\n>>> past = arrow.utcnow().shift(hours=-1)\n>>> past\n<Arrow [2018-06-07T10:24:19.968351+00:00]>\n>>> past.humanize()\n'an hour ago'\n>>> present = arrow.utcnow()\n>>> future = present.shift(hours=+2)\n>>> future\n<Arrow [2018-06-07T13:25:57.160630+00:00]>\n>>> future.humanize()\n'in 2 hours'\n>>> future.humanize(a,locale='ru')  # 支持更多的语言环境\n'через 3 часа'\n```\n\n### 获取任意时间单位的时间跨度\n\n```python\n>>> arrow.utcnow().span('hour')\n(<Arrow [2018-06-07T11:00:00+00:00]>, <Arrow [2018-06-07T11:59:59.999999+00:00]>)\n>>> arrow.utcnow().span('year')\n(<Arrow [2018-01-01T00:00:00+00:00]>, <Arrow [2018-12-31T23:59:59.999999+00:00]>)\n>>> arrow.utcnow().span('month')\n(<Arrow [2018-06-01T00:00:00+00:00]>, <Arrow [2018-06-30T23:59:59.999999+00:00]>)\n>>> arrow.utcnow().span('day')\n(<Arrow [2018-06-07T00:00:00+00:00]>, <Arrow [2018-06-07T23:59:59.999999+00:00]>)\n\n```\n\n### 只得到任意单位时间中的最大值或最小值\n\n```python\n>>> arrow.utcnow().floor('hour')  \n<Arrow [2018-06-07T11:00:00+00:00]>\n>>> arrow.utcnow().ceil('hour')  \n<Arrow [2018-06-07T11:59:59.999999+00:00]>\n>>> arrow.utcnow().floor('day')\n<Arrow [2018-06-07T00:00:00+00:00]>\n>>> arrow.utcnow().ceil('day')\n<Arrow [2018-06-07T23:59:59.999999+00:00]>\n>>> \n```\n\n### 表示特定于语言环境的数据和功能的类\n\n```python\narrow.locales.Locale\n```\n\n## arrow库的官方文档：http://arrow.readthedocs.io/en/latest/\n","source":"_posts/python中arrow库的使用.md","raw":"---\ntitle: python中arrow库的使用\ntype: categories\ncopyright: true\ndate: 2020-01-02 11:57:58\ntags:\n    - python\ncategories: python\n---\n\n Arrow是一个Python库，为创建，操作，格式化和转换日期，时间和时间戳提供了一种明智的，人性化的方法。 它实现和更新日期时间类型，填补功能上的空白，并提供支持许多常见创建场景的智能模块API。 简而言之，它可以帮助您使用更少的进口和更少的代码来处理日期和时间。\n### 安装\n\n```\npip install arrow\n```\n\n<!--more-->\n\n### 简单开始\n\n```python\n>>> import arrow\n>>> utc = arrow.utcnow()  # 获取世界标准时间\n>>> utc\n<Arrow [2018-06-07T09:37:28.989983+00:00]>\n>>> utc = arrow.now()  # 获取本地时间\n>>> utc\n<Arrow [2018-06-07T17:40:19.019529+08:00]>\n>>> arrow.now('US/Pacific')  # 获取指定时区的时间\n<Arrow [2018-06-07T02:41:54.815029-07:00]>\n```\n\n```python\n>>> a = arrow.now()\n>>> a\n<Arrow [2018-06-07T17:44:43.519166+08:00]>\n>>> a.year  # 当前年\n2018\n>>> a.month  # 当前月份\n6\n>>> a.day  # 当前天\n7\n>>> a.hour  # 当前第几个小时\n17\n>>> a.minute  # 当前多少分钟\n44\n>>> a.second  # 当前多少秒\n43\n>>> a.timestamp  # 获取时间戳\n1528364683\n>>> a.float_timestamp  # 浮点数时间戳\n1528364683.519166\n```\n\n### 时间格式化\n\n```python\n>>> a = arrow.now()\n>>> a\n<Arrow [2018-06-07T17:59:36.917894+08:00]>\n>>> a.format()\n'2018-06-07 17:59:36+08:00'\n>>> a.format('YYYY-MM-DD HH:mm:ss ZZ')\n'2018-06-07 17:59:36 +08:00'\n>>> a.ctime()  # 返回日期和时间的ctime格式化表示。\n'Thu Jun  7 17:59:36 2018'  \n>>> a.weekday()  # 以整数形式返回星期几（0-6）\n3\n>>> a.isoweekday()  # 以整数形式返回一周中的ISO日（1-7）\n4\n>>> a.isocalendar()  # 返回3元组（ISO年，ISO周数，ISO工作日）\n(2018, 23, 4)\n>>> a.toordinal()  # 返回日期的格雷戈里序数\n736852\n```\n\n### 从string中解析时间对象\n\n```python\n>>> arrow.get('2018-06-07 18:52:45', 'YYYY-MM-DD HH:mm:ss')\n<Arrow [2018-06-07T18:52:45+00:00]>\n>>> str = 'June was born in May 1980'\n>>> arrow.get(str,'MMMM YYYY')\n<Arrow [1980-05-01T00:00:00+00:00]>\n```\n\n### 解析的格式化参考：http://arrow.readthedocs.io/en/latest/#tokens\n### 时间的替换和偏移\n\n```python\n>>> arw = arrow.now()\n>>> arw\n<Arrow [2018-06-07T19:04:50.245201+08:00]>\n>>> arw.replace(hour=20,minute=00)  # 替换时间\n<Arrow [2018-06-07T20:00:50.245201+08:00]>\n>>> arw.replace(tzinfo='US/Pacific')  # 替换时区\n<Arrow [2018-06-07T19:04:50.245201-07:00]>\n\n>>> arw.shift(days=+3)  # 往后偏移三天\n<Arrow [2018-06-10T19:04:50.245201+08:00]>\n>>> arw.shift(days=-3)  # 往前偏移三天\n<Arrow [2018-06-04T19:04:50.245201+08:00]>\n>>> \n```\n\n### 按名称或tzinfo转换为时区\n\n```python\n>>> arw = arrow.utcnow()\n>>> arw\n<Arrow [2018-06-07T11:16:51.695083+00:00]>\n>>> arw.to('US/Pacific')\n<Arrow [2018-06-07T04:16:51.695083-07:00]>\n\n```\n\n### 更人性化的设计\n\n```python\n>>> past = arrow.utcnow().shift(hours=-1)\n>>> past\n<Arrow [2018-06-07T10:24:19.968351+00:00]>\n>>> past.humanize()\n'an hour ago'\n>>> present = arrow.utcnow()\n>>> future = present.shift(hours=+2)\n>>> future\n<Arrow [2018-06-07T13:25:57.160630+00:00]>\n>>> future.humanize()\n'in 2 hours'\n>>> future.humanize(a,locale='ru')  # 支持更多的语言环境\n'через 3 часа'\n```\n\n### 获取任意时间单位的时间跨度\n\n```python\n>>> arrow.utcnow().span('hour')\n(<Arrow [2018-06-07T11:00:00+00:00]>, <Arrow [2018-06-07T11:59:59.999999+00:00]>)\n>>> arrow.utcnow().span('year')\n(<Arrow [2018-01-01T00:00:00+00:00]>, <Arrow [2018-12-31T23:59:59.999999+00:00]>)\n>>> arrow.utcnow().span('month')\n(<Arrow [2018-06-01T00:00:00+00:00]>, <Arrow [2018-06-30T23:59:59.999999+00:00]>)\n>>> arrow.utcnow().span('day')\n(<Arrow [2018-06-07T00:00:00+00:00]>, <Arrow [2018-06-07T23:59:59.999999+00:00]>)\n\n```\n\n### 只得到任意单位时间中的最大值或最小值\n\n```python\n>>> arrow.utcnow().floor('hour')  \n<Arrow [2018-06-07T11:00:00+00:00]>\n>>> arrow.utcnow().ceil('hour')  \n<Arrow [2018-06-07T11:59:59.999999+00:00]>\n>>> arrow.utcnow().floor('day')\n<Arrow [2018-06-07T00:00:00+00:00]>\n>>> arrow.utcnow().ceil('day')\n<Arrow [2018-06-07T23:59:59.999999+00:00]>\n>>> \n```\n\n### 表示特定于语言环境的数据和功能的类\n\n```python\narrow.locales.Locale\n```\n\n## arrow库的官方文档：http://arrow.readthedocs.io/en/latest/\n","slug":"python中arrow库的使用","published":1,"updated":"2022-02-25T08:37:09.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77y6000vhvx3ax1z1fcc","content":"<p> Arrow是一个Python库，为创建，操作，格式化和转换日期，时间和时间戳提供了一种明智的，人性化的方法。 它实现和更新日期时间类型，填补功能上的空白，并提供支持许多常见创建场景的智能模块API。 简而言之，它可以帮助您使用更少的进口和更少的代码来处理日期和时间。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> arrow</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h3 id=\"简单开始\"><a href=\"#简单开始\" class=\"headerlink\" title=\"简单开始\"></a>简单开始</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> arrow</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc = arrow.utcnow()  <span class=\"comment\"># 获取世界标准时间</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T09:<span class=\"number\">37</span>:<span class=\"number\">28.989983</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc = arrow.now()  <span class=\"comment\"># 获取本地时间</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T17:<span class=\"number\">40</span>:<span class=\"number\">19.019529</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.now(<span class=\"string\">'US/Pacific'</span>)  <span class=\"comment\"># 获取指定时区的时间</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T02:<span class=\"number\">41</span>:<span class=\"number\">54.815029</span><span class=\"number\">-07</span>:<span class=\"number\">00</span>]&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = arrow.now()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T17:<span class=\"number\">44</span>:<span class=\"number\">43.519166</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.year  <span class=\"comment\"># 当前年</span></span><br><span class=\"line\"><span class=\"number\">2018</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.month  <span class=\"comment\"># 当前月份</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.day  <span class=\"comment\"># 当前天</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.hour  <span class=\"comment\"># 当前第几个小时</span></span><br><span class=\"line\"><span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.minute  <span class=\"comment\"># 当前多少分钟</span></span><br><span class=\"line\"><span class=\"number\">44</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.second  <span class=\"comment\"># 当前多少秒</span></span><br><span class=\"line\"><span class=\"number\">43</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.timestamp  <span class=\"comment\"># 获取时间戳</span></span><br><span class=\"line\"><span class=\"number\">1528364683</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.float_timestamp  <span class=\"comment\"># 浮点数时间戳</span></span><br><span class=\"line\"><span class=\"number\">1528364683.519166</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"时间格式化\"><a href=\"#时间格式化\" class=\"headerlink\" title=\"时间格式化\"></a>时间格式化</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = arrow.now()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T17:<span class=\"number\">59</span>:<span class=\"number\">36.917894</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.format()</span><br><span class=\"line\"><span class=\"string\">'2018-06-07 17:59:36+08:00'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss ZZ'</span>)</span><br><span class=\"line\"><span class=\"string\">'2018-06-07 17:59:36 +08:00'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.ctime()  <span class=\"comment\"># 返回日期和时间的ctime格式化表示。</span></span><br><span class=\"line\"><span class=\"string\">'Thu Jun  7 17:59:36 2018'</span>  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.weekday()  <span class=\"comment\"># 以整数形式返回星期几（0-6）</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.isoweekday()  <span class=\"comment\"># 以整数形式返回一周中的ISO日（1-7）</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.isocalendar()  <span class=\"comment\"># 返回3元组（ISO年，ISO周数，ISO工作日）</span></span><br><span class=\"line\">(<span class=\"number\">2018</span>, <span class=\"number\">23</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.toordinal()  <span class=\"comment\"># 返回日期的格雷戈里序数</span></span><br><span class=\"line\"><span class=\"number\">736852</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从string中解析时间对象\"><a href=\"#从string中解析时间对象\" class=\"headerlink\" title=\"从string中解析时间对象\"></a>从string中解析时间对象</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.get(<span class=\"string\">'2018-06-07 18:52:45'</span>, <span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T18:<span class=\"number\">52</span>:<span class=\"number\">45</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">'June was born in May 1980'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.get(str,<span class=\"string\">'MMMM YYYY'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">1980</span><span class=\"number\">-05</span><span class=\"number\">-01</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解析的格式化参考：http-arrow-readthedocs-io-en-latest-tokens\"><a href=\"#解析的格式化参考：http-arrow-readthedocs-io-en-latest-tokens\" class=\"headerlink\" title=\"解析的格式化参考：http://arrow.readthedocs.io/en/latest/#tokens\"></a>解析的格式化参考：<a href=\"http://arrow.readthedocs.io/en/latest/#tokens\" target=\"_blank\" rel=\"noopener\">http://arrow.readthedocs.io/en/latest/#tokens</a></h3><h3 id=\"时间的替换和偏移\"><a href=\"#时间的替换和偏移\" class=\"headerlink\" title=\"时间的替换和偏移\"></a>时间的替换和偏移</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw = arrow.now()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.replace(hour=<span class=\"number\">20</span>,minute=<span class=\"number\">00</span>)  <span class=\"comment\"># 替换时间</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T20:<span class=\"number\">00</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.replace(tzinfo=<span class=\"string\">'US/Pacific'</span>)  <span class=\"comment\"># 替换时区</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span><span class=\"number\">-07</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.shift(days=+<span class=\"number\">3</span>)  <span class=\"comment\"># 往后偏移三天</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-10</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.shift(days=<span class=\"number\">-3</span>)  <span class=\"comment\"># 往前偏移三天</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-04</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"按名称或tzinfo转换为时区\"><a href=\"#按名称或tzinfo转换为时区\" class=\"headerlink\" title=\"按名称或tzinfo转换为时区\"></a>按名称或tzinfo转换为时区</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw = arrow.utcnow()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">16</span>:<span class=\"number\">51.695083</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.to(<span class=\"string\">'US/Pacific'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T04:<span class=\"number\">16</span>:<span class=\"number\">51.695083</span><span class=\"number\">-07</span>:<span class=\"number\">00</span>]&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更人性化的设计\"><a href=\"#更人性化的设计\" class=\"headerlink\" title=\"更人性化的设计\"></a>更人性化的设计</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>past = arrow.utcnow().shift(hours=<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>past</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T10:<span class=\"number\">24</span>:<span class=\"number\">19.968351</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>past.humanize()</span><br><span class=\"line\"><span class=\"string\">'an hour ago'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>present = arrow.utcnow()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future = present.shift(hours=+<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T13:<span class=\"number\">25</span>:<span class=\"number\">57.160630</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future.humanize()</span><br><span class=\"line\"><span class=\"string\">'in 2 hours'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future.humanize(a,locale=<span class=\"string\">'ru'</span>)  <span class=\"comment\"># 支持更多的语言环境</span></span><br><span class=\"line\"><span class=\"string\">'через 3 часа'</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取任意时间单位的时间跨度\"><a href=\"#获取任意时间单位的时间跨度\" class=\"headerlink\" title=\"获取任意时间单位的时间跨度\"></a>获取任意时间单位的时间跨度</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'hour'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'year'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-01</span><span class=\"number\">-01</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-12</span><span class=\"number\">-31</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'month'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-01</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-30</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'day'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"只得到任意单位时间中的最大值或最小值\"><a href=\"#只得到任意单位时间中的最大值或最小值\" class=\"headerlink\" title=\"只得到任意单位时间中的最大值或最小值\"></a>只得到任意单位时间中的最大值或最小值</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().floor(<span class=\"string\">'hour'</span>)  </span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().ceil(<span class=\"string\">'hour'</span>)  </span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().floor(<span class=\"string\">'day'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().ceil(<span class=\"string\">'day'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表示特定于语言环境的数据和功能的类\"><a href=\"#表示特定于语言环境的数据和功能的类\" class=\"headerlink\" title=\"表示特定于语言环境的数据和功能的类\"></a>表示特定于语言环境的数据和功能的类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrow.locales.Locale</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"arrow库的官方文档：http-arrow-readthedocs-io-en-latest\"><a href=\"#arrow库的官方文档：http-arrow-readthedocs-io-en-latest\" class=\"headerlink\" title=\"arrow库的官方文档：http://arrow.readthedocs.io/en/latest/\"></a>arrow库的官方文档：<a href=\"http://arrow.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">http://arrow.readthedocs.io/en/latest/</a></h2>","site":{"data":{}},"excerpt":"<p> Arrow是一个Python库，为创建，操作，格式化和转换日期，时间和时间戳提供了一种明智的，人性化的方法。 它实现和更新日期时间类型，填补功能上的空白，并提供支持许多常见创建场景的智能模块API。 简而言之，它可以帮助您使用更少的进口和更少的代码来处理日期和时间。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> arrow</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"简单开始\"><a href=\"#简单开始\" class=\"headerlink\" title=\"简单开始\"></a>简单开始</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> arrow</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc = arrow.utcnow()  <span class=\"comment\"># 获取世界标准时间</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T09:<span class=\"number\">37</span>:<span class=\"number\">28.989983</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc = arrow.now()  <span class=\"comment\"># 获取本地时间</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>utc</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T17:<span class=\"number\">40</span>:<span class=\"number\">19.019529</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.now(<span class=\"string\">'US/Pacific'</span>)  <span class=\"comment\"># 获取指定时区的时间</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T02:<span class=\"number\">41</span>:<span class=\"number\">54.815029</span><span class=\"number\">-07</span>:<span class=\"number\">00</span>]&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = arrow.now()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T17:<span class=\"number\">44</span>:<span class=\"number\">43.519166</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.year  <span class=\"comment\"># 当前年</span></span><br><span class=\"line\"><span class=\"number\">2018</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.month  <span class=\"comment\"># 当前月份</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.day  <span class=\"comment\"># 当前天</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.hour  <span class=\"comment\"># 当前第几个小时</span></span><br><span class=\"line\"><span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.minute  <span class=\"comment\"># 当前多少分钟</span></span><br><span class=\"line\"><span class=\"number\">44</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.second  <span class=\"comment\"># 当前多少秒</span></span><br><span class=\"line\"><span class=\"number\">43</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.timestamp  <span class=\"comment\"># 获取时间戳</span></span><br><span class=\"line\"><span class=\"number\">1528364683</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.float_timestamp  <span class=\"comment\"># 浮点数时间戳</span></span><br><span class=\"line\"><span class=\"number\">1528364683.519166</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"时间格式化\"><a href=\"#时间格式化\" class=\"headerlink\" title=\"时间格式化\"></a>时间格式化</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = arrow.now()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T17:<span class=\"number\">59</span>:<span class=\"number\">36.917894</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.format()</span><br><span class=\"line\"><span class=\"string\">'2018-06-07 17:59:36+08:00'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss ZZ'</span>)</span><br><span class=\"line\"><span class=\"string\">'2018-06-07 17:59:36 +08:00'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.ctime()  <span class=\"comment\"># 返回日期和时间的ctime格式化表示。</span></span><br><span class=\"line\"><span class=\"string\">'Thu Jun  7 17:59:36 2018'</span>  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.weekday()  <span class=\"comment\"># 以整数形式返回星期几（0-6）</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.isoweekday()  <span class=\"comment\"># 以整数形式返回一周中的ISO日（1-7）</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.isocalendar()  <span class=\"comment\"># 返回3元组（ISO年，ISO周数，ISO工作日）</span></span><br><span class=\"line\">(<span class=\"number\">2018</span>, <span class=\"number\">23</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.toordinal()  <span class=\"comment\"># 返回日期的格雷戈里序数</span></span><br><span class=\"line\"><span class=\"number\">736852</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从string中解析时间对象\"><a href=\"#从string中解析时间对象\" class=\"headerlink\" title=\"从string中解析时间对象\"></a>从string中解析时间对象</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.get(<span class=\"string\">'2018-06-07 18:52:45'</span>, <span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T18:<span class=\"number\">52</span>:<span class=\"number\">45</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">'June was born in May 1980'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.get(str,<span class=\"string\">'MMMM YYYY'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">1980</span><span class=\"number\">-05</span><span class=\"number\">-01</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解析的格式化参考：http-arrow-readthedocs-io-en-latest-tokens\"><a href=\"#解析的格式化参考：http-arrow-readthedocs-io-en-latest-tokens\" class=\"headerlink\" title=\"解析的格式化参考：http://arrow.readthedocs.io/en/latest/#tokens\"></a>解析的格式化参考：<a href=\"http://arrow.readthedocs.io/en/latest/#tokens\" target=\"_blank\" rel=\"noopener\">http://arrow.readthedocs.io/en/latest/#tokens</a></h3><h3 id=\"时间的替换和偏移\"><a href=\"#时间的替换和偏移\" class=\"headerlink\" title=\"时间的替换和偏移\"></a>时间的替换和偏移</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw = arrow.now()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.replace(hour=<span class=\"number\">20</span>,minute=<span class=\"number\">00</span>)  <span class=\"comment\"># 替换时间</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T20:<span class=\"number\">00</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.replace(tzinfo=<span class=\"string\">'US/Pacific'</span>)  <span class=\"comment\"># 替换时区</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span><span class=\"number\">-07</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.shift(days=+<span class=\"number\">3</span>)  <span class=\"comment\"># 往后偏移三天</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-10</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.shift(days=<span class=\"number\">-3</span>)  <span class=\"comment\"># 往前偏移三天</span></span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-04</span>T19:<span class=\"number\">04</span>:<span class=\"number\">50.245201</span>+<span class=\"number\">08</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"按名称或tzinfo转换为时区\"><a href=\"#按名称或tzinfo转换为时区\" class=\"headerlink\" title=\"按名称或tzinfo转换为时区\"></a>按名称或tzinfo转换为时区</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw = arrow.utcnow()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">16</span>:<span class=\"number\">51.695083</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arw.to(<span class=\"string\">'US/Pacific'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T04:<span class=\"number\">16</span>:<span class=\"number\">51.695083</span><span class=\"number\">-07</span>:<span class=\"number\">00</span>]&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更人性化的设计\"><a href=\"#更人性化的设计\" class=\"headerlink\" title=\"更人性化的设计\"></a>更人性化的设计</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>past = arrow.utcnow().shift(hours=<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>past</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T10:<span class=\"number\">24</span>:<span class=\"number\">19.968351</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>past.humanize()</span><br><span class=\"line\"><span class=\"string\">'an hour ago'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>present = arrow.utcnow()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future = present.shift(hours=+<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T13:<span class=\"number\">25</span>:<span class=\"number\">57.160630</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future.humanize()</span><br><span class=\"line\"><span class=\"string\">'in 2 hours'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>future.humanize(a,locale=<span class=\"string\">'ru'</span>)  <span class=\"comment\"># 支持更多的语言环境</span></span><br><span class=\"line\"><span class=\"string\">'через 3 часа'</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取任意时间单位的时间跨度\"><a href=\"#获取任意时间单位的时间跨度\" class=\"headerlink\" title=\"获取任意时间单位的时间跨度\"></a>获取任意时间单位的时间跨度</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'hour'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'year'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-01</span><span class=\"number\">-01</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-12</span><span class=\"number\">-31</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'month'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-01</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-30</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class=\"string\">'day'</span>)</span><br><span class=\"line\">(&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;, &lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"只得到任意单位时间中的最大值或最小值\"><a href=\"#只得到任意单位时间中的最大值或最小值\" class=\"headerlink\" title=\"只得到任意单位时间中的最大值或最小值\"></a>只得到任意单位时间中的最大值或最小值</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().floor(<span class=\"string\">'hour'</span>)  </span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().ceil(<span class=\"string\">'hour'</span>)  </span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T11:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().floor(<span class=\"string\">'day'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T00:<span class=\"number\">00</span>:<span class=\"number\">00</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arrow.utcnow().ceil(<span class=\"string\">'day'</span>)</span><br><span class=\"line\">&lt;Arrow [<span class=\"number\">2018</span><span class=\"number\">-06</span><span class=\"number\">-07</span>T23:<span class=\"number\">59</span>:<span class=\"number\">59.999999</span>+<span class=\"number\">00</span>:<span class=\"number\">00</span>]&gt;</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表示特定于语言环境的数据和功能的类\"><a href=\"#表示特定于语言环境的数据和功能的类\" class=\"headerlink\" title=\"表示特定于语言环境的数据和功能的类\"></a>表示特定于语言环境的数据和功能的类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrow.locales.Locale</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"arrow库的官方文档：http-arrow-readthedocs-io-en-latest\"><a href=\"#arrow库的官方文档：http-arrow-readthedocs-io-en-latest\" class=\"headerlink\" title=\"arrow库的官方文档：http://arrow.readthedocs.io/en/latest/\"></a>arrow库的官方文档：<a href=\"http://arrow.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">http://arrow.readthedocs.io/en/latest/</a></h2>"},{"title":"python中random库使用","type":"categories","copyright":true,"date":"2020-01-02T03:55:30.000Z","_content":"\n### 1、random.random() 生成一个随机的浮点数，范围在0.0~0.1之间；\n\n```python\nnum = random.random()\nprint(num)  # num=0.4329135788510704\n```\n### 2、random.uniform() 函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\n\n<!--more-->\n\n```python\nnum = random.uniform(1, 2)\nprint(num)  # num=1.9499995621894857\n```\n### 3、random.randint() 随机生成一个整数int类型,可以指定这个整数的范围，同样有上限和下限\n\n```python\nnum = random.randint(1, 10)\nprint(num)  # num=2\n```\n### 4、random.choice() 可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\n\n```python\nlist = [i for i in range(10)]\nnum = random.choice(list)\nprint(num)  # num=5\n```\n### 5、random.shuffle() 随机打乱一个序列\n\n```python\nlist = [i for i in range(10)]\nprint(list)  # list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nrandom.shuffle(list)\nprint(list)  # list=[1, 5, 4, 2, 0, 6, 9, 8, 3, 7]\n```\n### 6、random.sample() 可以从指定的序列中，随机截取指定长度的片段，不做原地修改\n\n```python\nlist = [i for i in range(10)]\nnew_list = random.sample(list, 5)  # 第一个参数要截取的对象，第二个参数是截取的长度\nprint(new_list)  # [7, 9, 0, 8, 1]\n```","source":"_posts/python中random库使用.md","raw":"---\ntitle: python中random库使用\ntype: categories\ncopyright: true\ndate: 2020-01-02 11:55:30\ntags:\n    - python\ncategories: python\n---\n\n### 1、random.random() 生成一个随机的浮点数，范围在0.0~0.1之间；\n\n```python\nnum = random.random()\nprint(num)  # num=0.4329135788510704\n```\n### 2、random.uniform() 函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\n\n<!--more-->\n\n```python\nnum = random.uniform(1, 2)\nprint(num)  # num=1.9499995621894857\n```\n### 3、random.randint() 随机生成一个整数int类型,可以指定这个整数的范围，同样有上限和下限\n\n```python\nnum = random.randint(1, 10)\nprint(num)  # num=2\n```\n### 4、random.choice() 可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\n\n```python\nlist = [i for i in range(10)]\nnum = random.choice(list)\nprint(num)  # num=5\n```\n### 5、random.shuffle() 随机打乱一个序列\n\n```python\nlist = [i for i in range(10)]\nprint(list)  # list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nrandom.shuffle(list)\nprint(list)  # list=[1, 5, 4, 2, 0, 6, 9, 8, 3, 7]\n```\n### 6、random.sample() 可以从指定的序列中，随机截取指定长度的片段，不做原地修改\n\n```python\nlist = [i for i in range(10)]\nnew_list = random.sample(list, 5)  # 第一个参数要截取的对象，第二个参数是截取的长度\nprint(new_list)  # [7, 9, 0, 8, 1]\n```","slug":"python中random库使用","published":1,"updated":"2022-02-25T08:37:09.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77y7000whvx35p79dyz1","content":"<h3 id=\"1、random-random-生成一个随机的浮点数，范围在0-0-0-1之间；\"><a href=\"#1、random-random-生成一个随机的浮点数，范围在0-0-0-1之间；\" class=\"headerlink\" title=\"1、random.random() 生成一个随机的浮点数，范围在0.0~0.1之间；\"></a>1、random.random() 生成一个随机的浮点数，范围在0.0~0.1之间；</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = random.random()</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=0.4329135788510704</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、random-uniform-函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\"><a href=\"#2、random-uniform-函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\" class=\"headerlink\" title=\"2、random.uniform() 函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\"></a>2、random.uniform() 函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；</h3><a id=\"more\"></a>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = random.uniform(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=1.9499995621894857</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3、random-randint-随机生成一个整数int类型-可以指定这个整数的范围，同样有上限和下限\"><a href=\"#3、random-randint-随机生成一个整数int类型-可以指定这个整数的范围，同样有上限和下限\" class=\"headerlink\" title=\"3、random.randint() 随机生成一个整数int类型,可以指定这个整数的范围，同样有上限和下限\"></a>3、random.randint() 随机生成一个整数int类型,可以指定这个整数的范围，同样有上限和下限</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = random.randint(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4、random-choice-可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\"><a href=\"#4、random-choice-可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\" class=\"headerlink\" title=\"4、random.choice() 可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\"></a>4、random.choice() 可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">num = random.choice(list)</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5、random-shuffle-随机打乱一个序列\"><a href=\"#5、random-shuffle-随机打乱一个序列\" class=\"headerlink\" title=\"5、random.shuffle() 随机打乱一个序列\"></a>5、random.shuffle() 随机打乱一个序列</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">print(list)  <span class=\"comment\"># list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\">random.shuffle(list)</span><br><span class=\"line\">print(list)  <span class=\"comment\"># list=[1, 5, 4, 2, 0, 6, 9, 8, 3, 7]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6、random-sample-可以从指定的序列中，随机截取指定长度的片段，不做原地修改\"><a href=\"#6、random-sample-可以从指定的序列中，随机截取指定长度的片段，不做原地修改\" class=\"headerlink\" title=\"6、random.sample() 可以从指定的序列中，随机截取指定长度的片段，不做原地修改\"></a>6、random.sample() 可以从指定的序列中，随机截取指定长度的片段，不做原地修改</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">new_list = random.sample(list, <span class=\"number\">5</span>)  <span class=\"comment\"># 第一个参数要截取的对象，第二个参数是截取的长度</span></span><br><span class=\"line\">print(new_list)  <span class=\"comment\"># [7, 9, 0, 8, 1]</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"1、random-random-生成一个随机的浮点数，范围在0-0-0-1之间；\"><a href=\"#1、random-random-生成一个随机的浮点数，范围在0-0-0-1之间；\" class=\"headerlink\" title=\"1、random.random() 生成一个随机的浮点数，范围在0.0~0.1之间；\"></a>1、random.random() 生成一个随机的浮点数，范围在0.0~0.1之间；</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = random.random()</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=0.4329135788510704</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、random-uniform-函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\"><a href=\"#2、random-uniform-函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\" class=\"headerlink\" title=\"2、random.uniform() 函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；\"></a>2、random.uniform() 函数可以设定浮点数的范围，需要两个参数，一个上限，另一个下限；</h3>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = random.uniform(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=1.9499995621894857</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3、random-randint-随机生成一个整数int类型-可以指定这个整数的范围，同样有上限和下限\"><a href=\"#3、random-randint-随机生成一个整数int类型-可以指定这个整数的范围，同样有上限和下限\" class=\"headerlink\" title=\"3、random.randint() 随机生成一个整数int类型,可以指定这个整数的范围，同样有上限和下限\"></a>3、random.randint() 随机生成一个整数int类型,可以指定这个整数的范围，同样有上限和下限</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = random.randint(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4、random-choice-可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\"><a href=\"#4、random-choice-可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\" class=\"headerlink\" title=\"4、random.choice() 可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等\"></a>4、random.choice() 可以从任意序列，比如list列表中，选取一个随机的元素返回，可以用字符串、列表、元组等</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">num = random.choice(list)</span><br><span class=\"line\">print(num)  <span class=\"comment\"># num=5</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5、random-shuffle-随机打乱一个序列\"><a href=\"#5、random-shuffle-随机打乱一个序列\" class=\"headerlink\" title=\"5、random.shuffle() 随机打乱一个序列\"></a>5、random.shuffle() 随机打乱一个序列</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">print(list)  <span class=\"comment\"># list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\">random.shuffle(list)</span><br><span class=\"line\">print(list)  <span class=\"comment\"># list=[1, 5, 4, 2, 0, 6, 9, 8, 3, 7]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6、random-sample-可以从指定的序列中，随机截取指定长度的片段，不做原地修改\"><a href=\"#6、random-sample-可以从指定的序列中，随机截取指定长度的片段，不做原地修改\" class=\"headerlink\" title=\"6、random.sample() 可以从指定的序列中，随机截取指定长度的片段，不做原地修改\"></a>6、random.sample() 可以从指定的序列中，随机截取指定长度的片段，不做原地修改</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">new_list = random.sample(list, <span class=\"number\">5</span>)  <span class=\"comment\"># 第一个参数要截取的对象，第二个参数是截取的长度</span></span><br><span class=\"line\">print(new_list)  <span class=\"comment\"># [7, 9, 0, 8, 1]</span></span><br></pre></td></tr></table></figure>"},{"title":"python中闭包和装饰器","type":"categories","copyright":true,"date":"2020-01-02T03:09:20.000Z","_content":"## 1.闭包\n### 闭包的理解\n   *闭包* 是引用了变量的函数，这个被引用的自由变量将和这个函数一同存在，即使离开了创造这个变量的环境也不例外。所以，*闭包* 是由函数和与其相关的引用环境组合而成的实体。简单来说，*闭包* 就是数据和功能的结合。\n<!--more-->\n### 闭包的优缺点\n **优点：** 可以提高代码的可复用性\n **缺点：** 由于闭包是引用了外部函数的局部变量，导致外部函数的局部变量没有及时释放，消耗内存。\n\n \n## 2.装饰器\n### 什么是装饰器？\n装饰器本质上也还是一个python函数，它可以让其他函数在不需要的做任何代码变动的前提下，增加额外的功能，装饰器的返回值也是一个函数对象。装饰器的应用场景主要是一些有切面需求的场景，例如：插入日志，性能测试，事务处理，缓存，权限校验等。通过装饰器，我们可以抽离大量与函数功能本身无关的雷同代码并重复应用。\n### 装饰器的功能\n\n - 引入日志\n - 函数执行时间统计\n - 执行函数前的预备处理\n - 执行函数后的清理功能\n - 权限校验等场景\n - 缓存\n \n### 一个函数同时被多个装饰器装饰的执行顺序\n 一个函数如果同时被多个装饰器装饰，由紧靠函数的装饰器先对函数进行装饰，然后返回的结果在给外层的装饰器去执行装饰，依次类推直到所有装饰器都装饰完成，最后会得到一个函数，在执行这个函数的时候，会先执行最外层装饰器的内容，在执行里面装饰器的内容。这个过程有点像我们给一个精美的物品进行一层一层的包装，在包装的时候是从最里面一层层往往包装，拆开的时候又是从外面一层层的拆开。\n### 对比函数、闭包、对象在作为实参时的区别\n**函数作为实参**  如果没有()会作为一个功能传入到另一个函数，如果有()，则会传入这个函数的执行结果即返回值\n**闭包作为实参**  会传入较为复杂的功能和数据\n**对象作为实参**  会传入最为复杂的功能和数据，但是对象占用的空间比较大，传递的是很多的功能和数据\n### 通用的装饰器\n\n```python\ndef set_fun(fun):\n\tdef call_fun(*args, **kwargs):\n\t\tprint(\"----这是前面的功能---权限验证---\")\n\t\tret = fun(*args, **kwargs)\n\t\tprint(\"----这是后面的功能---log日志功能---\")\n\t\treturn ret\n\treturn call_fun\n```\n![这里写图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTgwMTI1MjI0NjA4NDQ2?x-oss-process=image/format,png)\n\n\n \n\n","source":"_posts/python中闭包和装饰器.md","raw":"---\ntitle: python中闭包和装饰器\ntype: categories\ncopyright: true\ndate: 2020-01-02 11:09:20\ntags:\n    - python\ncategories: python\n---\n## 1.闭包\n### 闭包的理解\n   *闭包* 是引用了变量的函数，这个被引用的自由变量将和这个函数一同存在，即使离开了创造这个变量的环境也不例外。所以，*闭包* 是由函数和与其相关的引用环境组合而成的实体。简单来说，*闭包* 就是数据和功能的结合。\n<!--more-->\n### 闭包的优缺点\n **优点：** 可以提高代码的可复用性\n **缺点：** 由于闭包是引用了外部函数的局部变量，导致外部函数的局部变量没有及时释放，消耗内存。\n\n \n## 2.装饰器\n### 什么是装饰器？\n装饰器本质上也还是一个python函数，它可以让其他函数在不需要的做任何代码变动的前提下，增加额外的功能，装饰器的返回值也是一个函数对象。装饰器的应用场景主要是一些有切面需求的场景，例如：插入日志，性能测试，事务处理，缓存，权限校验等。通过装饰器，我们可以抽离大量与函数功能本身无关的雷同代码并重复应用。\n### 装饰器的功能\n\n - 引入日志\n - 函数执行时间统计\n - 执行函数前的预备处理\n - 执行函数后的清理功能\n - 权限校验等场景\n - 缓存\n \n### 一个函数同时被多个装饰器装饰的执行顺序\n 一个函数如果同时被多个装饰器装饰，由紧靠函数的装饰器先对函数进行装饰，然后返回的结果在给外层的装饰器去执行装饰，依次类推直到所有装饰器都装饰完成，最后会得到一个函数，在执行这个函数的时候，会先执行最外层装饰器的内容，在执行里面装饰器的内容。这个过程有点像我们给一个精美的物品进行一层一层的包装，在包装的时候是从最里面一层层往往包装，拆开的时候又是从外面一层层的拆开。\n### 对比函数、闭包、对象在作为实参时的区别\n**函数作为实参**  如果没有()会作为一个功能传入到另一个函数，如果有()，则会传入这个函数的执行结果即返回值\n**闭包作为实参**  会传入较为复杂的功能和数据\n**对象作为实参**  会传入最为复杂的功能和数据，但是对象占用的空间比较大，传递的是很多的功能和数据\n### 通用的装饰器\n\n```python\ndef set_fun(fun):\n\tdef call_fun(*args, **kwargs):\n\t\tprint(\"----这是前面的功能---权限验证---\")\n\t\tret = fun(*args, **kwargs)\n\t\tprint(\"----这是后面的功能---log日志功能---\")\n\t\treturn ret\n\treturn call_fun\n```\n![这里写图片描述](https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTgwMTI1MjI0NjA4NDQ2?x-oss-process=image/format,png)\n\n\n \n\n","slug":"python中闭包和装饰器","published":1,"updated":"2022-02-25T08:37:09.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77y80010hvx38sn1ai3s","content":"<h2 id=\"1-闭包\"><a href=\"#1-闭包\" class=\"headerlink\" title=\"1.闭包\"></a>1.闭包</h2><h3 id=\"闭包的理解\"><a href=\"#闭包的理解\" class=\"headerlink\" title=\"闭包的理解\"></a>闭包的理解</h3><p>   <em>闭包</em> 是引用了变量的函数，这个被引用的自由变量将和这个函数一同存在，即使离开了创造这个变量的环境也不例外。所以，<em>闭包</em> 是由函数和与其相关的引用环境组合而成的实体。简单来说，<em>闭包</em> 就是数据和功能的结合。</p>\n<a id=\"more\"></a>\n<h3 id=\"闭包的优缺点\"><a href=\"#闭包的优缺点\" class=\"headerlink\" title=\"闭包的优缺点\"></a>闭包的优缺点</h3><p> <strong>优点：</strong> 可以提高代码的可复用性<br> <strong>缺点：</strong> 由于闭包是引用了外部函数的局部变量，导致外部函数的局部变量没有及时释放，消耗内存。</p>\n<h2 id=\"2-装饰器\"><a href=\"#2-装饰器\" class=\"headerlink\" title=\"2.装饰器\"></a>2.装饰器</h2><h3 id=\"什么是装饰器？\"><a href=\"#什么是装饰器？\" class=\"headerlink\" title=\"什么是装饰器？\"></a>什么是装饰器？</h3><p>装饰器本质上也还是一个python函数，它可以让其他函数在不需要的做任何代码变动的前提下，增加额外的功能，装饰器的返回值也是一个函数对象。装饰器的应用场景主要是一些有切面需求的场景，例如：插入日志，性能测试，事务处理，缓存，权限校验等。通过装饰器，我们可以抽离大量与函数功能本身无关的雷同代码并重复应用。</p>\n<h3 id=\"装饰器的功能\"><a href=\"#装饰器的功能\" class=\"headerlink\" title=\"装饰器的功能\"></a>装饰器的功能</h3><ul>\n<li>引入日志</li>\n<li>函数执行时间统计</li>\n<li>执行函数前的预备处理</li>\n<li>执行函数后的清理功能</li>\n<li>权限校验等场景</li>\n<li>缓存</li>\n</ul>\n<h3 id=\"一个函数同时被多个装饰器装饰的执行顺序\"><a href=\"#一个函数同时被多个装饰器装饰的执行顺序\" class=\"headerlink\" title=\"一个函数同时被多个装饰器装饰的执行顺序\"></a>一个函数同时被多个装饰器装饰的执行顺序</h3><p> 一个函数如果同时被多个装饰器装饰，由紧靠函数的装饰器先对函数进行装饰，然后返回的结果在给外层的装饰器去执行装饰，依次类推直到所有装饰器都装饰完成，最后会得到一个函数，在执行这个函数的时候，会先执行最外层装饰器的内容，在执行里面装饰器的内容。这个过程有点像我们给一个精美的物品进行一层一层的包装，在包装的时候是从最里面一层层往往包装，拆开的时候又是从外面一层层的拆开。</p>\n<h3 id=\"对比函数、闭包、对象在作为实参时的区别\"><a href=\"#对比函数、闭包、对象在作为实参时的区别\" class=\"headerlink\" title=\"对比函数、闭包、对象在作为实参时的区别\"></a>对比函数、闭包、对象在作为实参时的区别</h3><p><strong>函数作为实参</strong>  如果没有()会作为一个功能传入到另一个函数，如果有()，则会传入这个函数的执行结果即返回值<br><strong>闭包作为实参</strong>  会传入较为复杂的功能和数据<br><strong>对象作为实参</strong>  会传入最为复杂的功能和数据，但是对象占用的空间比较大，传递的是很多的功能和数据</p>\n<h3 id=\"通用的装饰器\"><a href=\"#通用的装饰器\" class=\"headerlink\" title=\"通用的装饰器\"></a>通用的装饰器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_fun</span><span class=\"params\">(fun)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call_fun</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">\"----这是前面的功能---权限验证---\"</span>)</span><br><span class=\"line\">\t\tret = fun(*args, **kwargs)</span><br><span class=\"line\">\t\tprint(<span class=\"string\">\"----这是后面的功能---log日志功能---\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> call_fun</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTgwMTI1MjI0NjA4NDQ2?x-oss-process=image/format,png\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-闭包\"><a href=\"#1-闭包\" class=\"headerlink\" title=\"1.闭包\"></a>1.闭包</h2><h3 id=\"闭包的理解\"><a href=\"#闭包的理解\" class=\"headerlink\" title=\"闭包的理解\"></a>闭包的理解</h3><p>   <em>闭包</em> 是引用了变量的函数，这个被引用的自由变量将和这个函数一同存在，即使离开了创造这个变量的环境也不例外。所以，<em>闭包</em> 是由函数和与其相关的引用环境组合而成的实体。简单来说，<em>闭包</em> 就是数据和功能的结合。</p>","more":"<h3 id=\"闭包的优缺点\"><a href=\"#闭包的优缺点\" class=\"headerlink\" title=\"闭包的优缺点\"></a>闭包的优缺点</h3><p> <strong>优点：</strong> 可以提高代码的可复用性<br> <strong>缺点：</strong> 由于闭包是引用了外部函数的局部变量，导致外部函数的局部变量没有及时释放，消耗内存。</p>\n<h2 id=\"2-装饰器\"><a href=\"#2-装饰器\" class=\"headerlink\" title=\"2.装饰器\"></a>2.装饰器</h2><h3 id=\"什么是装饰器？\"><a href=\"#什么是装饰器？\" class=\"headerlink\" title=\"什么是装饰器？\"></a>什么是装饰器？</h3><p>装饰器本质上也还是一个python函数，它可以让其他函数在不需要的做任何代码变动的前提下，增加额外的功能，装饰器的返回值也是一个函数对象。装饰器的应用场景主要是一些有切面需求的场景，例如：插入日志，性能测试，事务处理，缓存，权限校验等。通过装饰器，我们可以抽离大量与函数功能本身无关的雷同代码并重复应用。</p>\n<h3 id=\"装饰器的功能\"><a href=\"#装饰器的功能\" class=\"headerlink\" title=\"装饰器的功能\"></a>装饰器的功能</h3><ul>\n<li>引入日志</li>\n<li>函数执行时间统计</li>\n<li>执行函数前的预备处理</li>\n<li>执行函数后的清理功能</li>\n<li>权限校验等场景</li>\n<li>缓存</li>\n</ul>\n<h3 id=\"一个函数同时被多个装饰器装饰的执行顺序\"><a href=\"#一个函数同时被多个装饰器装饰的执行顺序\" class=\"headerlink\" title=\"一个函数同时被多个装饰器装饰的执行顺序\"></a>一个函数同时被多个装饰器装饰的执行顺序</h3><p> 一个函数如果同时被多个装饰器装饰，由紧靠函数的装饰器先对函数进行装饰，然后返回的结果在给外层的装饰器去执行装饰，依次类推直到所有装饰器都装饰完成，最后会得到一个函数，在执行这个函数的时候，会先执行最外层装饰器的内容，在执行里面装饰器的内容。这个过程有点像我们给一个精美的物品进行一层一层的包装，在包装的时候是从最里面一层层往往包装，拆开的时候又是从外面一层层的拆开。</p>\n<h3 id=\"对比函数、闭包、对象在作为实参时的区别\"><a href=\"#对比函数、闭包、对象在作为实参时的区别\" class=\"headerlink\" title=\"对比函数、闭包、对象在作为实参时的区别\"></a>对比函数、闭包、对象在作为实参时的区别</h3><p><strong>函数作为实参</strong>  如果没有()会作为一个功能传入到另一个函数，如果有()，则会传入这个函数的执行结果即返回值<br><strong>闭包作为实参</strong>  会传入较为复杂的功能和数据<br><strong>对象作为实参</strong>  会传入最为复杂的功能和数据，但是对象占用的空间比较大，传递的是很多的功能和数据</p>\n<h3 id=\"通用的装饰器\"><a href=\"#通用的装饰器\" class=\"headerlink\" title=\"通用的装饰器\"></a>通用的装饰器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_fun</span><span class=\"params\">(fun)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call_fun</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">\"----这是前面的功能---权限验证---\"</span>)</span><br><span class=\"line\">\t\tret = fun(*args, **kwargs)</span><br><span class=\"line\">\t\tprint(<span class=\"string\">\"----这是后面的功能---log日志功能---\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> call_fun</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTgwMTI1MjI0NjA4NDQ2?x-oss-process=image/format,png\" alt=\"这里写图片描述\"></p>"},{"title":"python中元素替换","type":"categories","copyright":true,"date":"2020-01-02T04:02:38.000Z","_content":"\n## python中元素进行替换有很多方法，下面是我学习中的一些总结\n\n### 1、字符串替换str.replace()方法\n\npython中的replace()方法是把字符串中的old字符串替换成new的字符串，如果指定替换次数max,则按照替换次数进行替换\n```python\nstr.replace(old,new,count=0)\n```\n<!--more-->\n\nold：字符串替换前的字符\nnew：字符串替换后的字符\ncount：替换的次数，默认为0，不填表示全局替换\n\n```python\n>>> str = \"hello world! I love python!\"\n>>> str.replace(\"l\",\"@\")  # 表示全局替换\n'he@@o wor@d! I @ove python!'\n>>> str.replace(\"l\",\"@\",2)  # 替换指定次数\n'he@@o world! I love python!'\n>>> str.replace(\"l\",\"@\",2).replace(\"o\",\"$\")  # 多个字符替换可以进行链式调用replace()方法\n'he@@$ w$rld! I l$ve pyth$n!'\n```\n\n### 2、正则表达式中的sub()和subn()方法\nsub(pattern, repl, string)\n其中pattern表示原字符串中的字符，repl表示需要替换成的字符，string表示需要替换的字符串；\nsubn()和sub()的区别在于subn()返回的一个包含新字符串和替换次数的二元组；\n\n```python\n>>> import re\n>>> str = \"hello world! I love python!\"\n>>> re.sub(\"hello\",\"nihao\",str)  \n'nihao world! I love python!'\n>>> re.subn(\"l\",\"*\",str)\n('he**o wor*d! I *ove python!', 4)\n>>> \n```\n### 3、如果同时处理多个字符串的替换，此时可以使用string的maketrans()和translate()方法\n\nmaketrans()方法用来生成字符映射表，而translate()方法则按映射表中定义的对应关系转换并替换其中的字符，用这两种方法可以同时处理多个不同的字符。\n\n```python\n>>> table = ''.maketrans(\"abcdefghij\",\"1234567890\")  # 创建映射表，注意字符串的长度要一致，达到一一对应的目的\n>>> str = \"hello world! i love python\"\n>>> str.translate(table)  # 按照关系表将sting中的字符逐个进行替换\n'85llo worl4! 9 lov5 pyt8on'\n>>> \n```\n### 4、对列表里的元素进行替换，可以使用列表解析的方法\n\n```python\n>>> list = [1,2,3,4]\n>>> rep = [5 if x==1 else x for x in list]\n>>> rep\n[5, 2, 3, 4]\n>>> \n\n```\n\n#### 4.1、批量进行替换\n\n```python\n>>> list = [1,2,3,4,5]\n>>> pattern = [2,4]\n>>> rep = [\"a\" if x in pattern else x for x in list]\n>>> rep\n[1, 'a', 3, 'a', 5]\n>>> \n\n```\n#### 4.2、根据字典的映射进行替换\n\n```python\n>>> list\n[1, 2, 3, 4, 5]\n>>> dict = {1:\"apple\", 3:\"banana\"}\n>>> rep = [dict[x] if x in dict else x for x in list]\n>>> rep\n['apple', 2, 'banana', 4, 5]\n>>> \n\n```\n\n### 5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io.StringIO对象。\n\n```python\n>>> from io import StringIO\n>>> str = \"hello world!\" \n>>> io_str = StringIO(str)\n>>> io_str\n<_io.StringIO object at 0x7fa1e61addc8>\n>>> io_str.tell()  # 返回当前的位置\n0\n>>> io_str.read()  # 从当前位置开始读取字符串\n'hello world!'\n>>> io_str.getvalue()  # 返回字符串的全部内容\n'hello world!'\n>>> io_str.seek(6)  # 定义开始修改的位置\n6\n>>> io_str.write(\"china\")  # 修改字符串\n5\n>>> io_str.read()\n'!'\n>>> io_str.getvalue()  # 获取修改后的字符串全部内容\n'hello china!'\n>>> io_str.tell() \n12\n>>> \n\n```\n","source":"_posts/python中元素替换.md","raw":"---\ntitle: python中元素替换\ntype: categories\ncopyright: true\ndate: 2020-01-02 12:02:38\ntags:\n    - python\ncategories: python\n---\n\n## python中元素进行替换有很多方法，下面是我学习中的一些总结\n\n### 1、字符串替换str.replace()方法\n\npython中的replace()方法是把字符串中的old字符串替换成new的字符串，如果指定替换次数max,则按照替换次数进行替换\n```python\nstr.replace(old,new,count=0)\n```\n<!--more-->\n\nold：字符串替换前的字符\nnew：字符串替换后的字符\ncount：替换的次数，默认为0，不填表示全局替换\n\n```python\n>>> str = \"hello world! I love python!\"\n>>> str.replace(\"l\",\"@\")  # 表示全局替换\n'he@@o wor@d! I @ove python!'\n>>> str.replace(\"l\",\"@\",2)  # 替换指定次数\n'he@@o world! I love python!'\n>>> str.replace(\"l\",\"@\",2).replace(\"o\",\"$\")  # 多个字符替换可以进行链式调用replace()方法\n'he@@$ w$rld! I l$ve pyth$n!'\n```\n\n### 2、正则表达式中的sub()和subn()方法\nsub(pattern, repl, string)\n其中pattern表示原字符串中的字符，repl表示需要替换成的字符，string表示需要替换的字符串；\nsubn()和sub()的区别在于subn()返回的一个包含新字符串和替换次数的二元组；\n\n```python\n>>> import re\n>>> str = \"hello world! I love python!\"\n>>> re.sub(\"hello\",\"nihao\",str)  \n'nihao world! I love python!'\n>>> re.subn(\"l\",\"*\",str)\n('he**o wor*d! I *ove python!', 4)\n>>> \n```\n### 3、如果同时处理多个字符串的替换，此时可以使用string的maketrans()和translate()方法\n\nmaketrans()方法用来生成字符映射表，而translate()方法则按映射表中定义的对应关系转换并替换其中的字符，用这两种方法可以同时处理多个不同的字符。\n\n```python\n>>> table = ''.maketrans(\"abcdefghij\",\"1234567890\")  # 创建映射表，注意字符串的长度要一致，达到一一对应的目的\n>>> str = \"hello world! i love python\"\n>>> str.translate(table)  # 按照关系表将sting中的字符逐个进行替换\n'85llo worl4! 9 lov5 pyt8on'\n>>> \n```\n### 4、对列表里的元素进行替换，可以使用列表解析的方法\n\n```python\n>>> list = [1,2,3,4]\n>>> rep = [5 if x==1 else x for x in list]\n>>> rep\n[5, 2, 3, 4]\n>>> \n\n```\n\n#### 4.1、批量进行替换\n\n```python\n>>> list = [1,2,3,4,5]\n>>> pattern = [2,4]\n>>> rep = [\"a\" if x in pattern else x for x in list]\n>>> rep\n[1, 'a', 3, 'a', 5]\n>>> \n\n```\n#### 4.2、根据字典的映射进行替换\n\n```python\n>>> list\n[1, 2, 3, 4, 5]\n>>> dict = {1:\"apple\", 3:\"banana\"}\n>>> rep = [dict[x] if x in dict else x for x in list]\n>>> rep\n['apple', 2, 'banana', 4, 5]\n>>> \n\n```\n\n### 5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io.StringIO对象。\n\n```python\n>>> from io import StringIO\n>>> str = \"hello world!\" \n>>> io_str = StringIO(str)\n>>> io_str\n<_io.StringIO object at 0x7fa1e61addc8>\n>>> io_str.tell()  # 返回当前的位置\n0\n>>> io_str.read()  # 从当前位置开始读取字符串\n'hello world!'\n>>> io_str.getvalue()  # 返回字符串的全部内容\n'hello world!'\n>>> io_str.seek(6)  # 定义开始修改的位置\n6\n>>> io_str.write(\"china\")  # 修改字符串\n5\n>>> io_str.read()\n'!'\n>>> io_str.getvalue()  # 获取修改后的字符串全部内容\n'hello china!'\n>>> io_str.tell() \n12\n>>> \n\n```\n","slug":"python中元素替换","published":1,"updated":"2022-02-25T08:37:09.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77y90012hvx3d7zwcbpr","content":"<h2 id=\"python中元素进行替换有很多方法，下面是我学习中的一些总结\"><a href=\"#python中元素进行替换有很多方法，下面是我学习中的一些总结\" class=\"headerlink\" title=\"python中元素进行替换有很多方法，下面是我学习中的一些总结\"></a>python中元素进行替换有很多方法，下面是我学习中的一些总结</h2><h3 id=\"1、字符串替换str-replace-方法\"><a href=\"#1、字符串替换str-replace-方法\" class=\"headerlink\" title=\"1、字符串替换str.replace()方法\"></a>1、字符串替换str.replace()方法</h3><p>python中的replace()方法是把字符串中的old字符串替换成new的字符串，如果指定替换次数max,则按照替换次数进行替换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.replace(old,new,count=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<p>old：字符串替换前的字符<br>new：字符串替换后的字符<br>count：替换的次数，默认为0，不填表示全局替换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world! I love python!\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.replace(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"@\"</span>)  <span class=\"comment\"># 表示全局替换</span></span><br><span class=\"line\"><span class=\"string\">'he@@o wor@d! I @ove python!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.replace(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"@\"</span>,<span class=\"number\">2</span>)  <span class=\"comment\"># 替换指定次数</span></span><br><span class=\"line\"><span class=\"string\">'he@@o world! I love python!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.replace(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"@\"</span>,<span class=\"number\">2</span>).replace(<span class=\"string\">\"o\"</span>,<span class=\"string\">\"$\"</span>)  <span class=\"comment\"># 多个字符替换可以进行链式调用replace()方法</span></span><br><span class=\"line\"><span class=\"string\">'he@@$ w$rld! I l$ve pyth$n!'</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、正则表达式中的sub-和subn-方法\"><a href=\"#2、正则表达式中的sub-和subn-方法\" class=\"headerlink\" title=\"2、正则表达式中的sub()和subn()方法\"></a>2、正则表达式中的sub()和subn()方法</h3><p>sub(pattern, repl, string)<br>其中pattern表示原字符串中的字符，repl表示需要替换成的字符，string表示需要替换的字符串；<br>subn()和sub()的区别在于subn()返回的一个包含新字符串和替换次数的二元组；</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world! I love python!\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.sub(<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"nihao\"</span>,str)  </span><br><span class=\"line\"><span class=\"string\">'nihao world! I love python!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.subn(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"*\"</span>,str)</span><br><span class=\"line\">(<span class=\"string\">'he**o wor*d! I *ove python!'</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、如果同时处理多个字符串的替换，此时可以使用string的maketrans-和translate-方法\"><a href=\"#3、如果同时处理多个字符串的替换，此时可以使用string的maketrans-和translate-方法\" class=\"headerlink\" title=\"3、如果同时处理多个字符串的替换，此时可以使用string的maketrans()和translate()方法\"></a>3、如果同时处理多个字符串的替换，此时可以使用string的maketrans()和translate()方法</h3><p>maketrans()方法用来生成字符映射表，而translate()方法则按映射表中定义的对应关系转换并替换其中的字符，用这两种方法可以同时处理多个不同的字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>table = <span class=\"string\">''</span>.maketrans(<span class=\"string\">\"abcdefghij\"</span>,<span class=\"string\">\"1234567890\"</span>)  <span class=\"comment\"># 创建映射表，注意字符串的长度要一致，达到一一对应的目的</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world! i love python\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.translate(table)  <span class=\"comment\"># 按照关系表将sting中的字符逐个进行替换</span></span><br><span class=\"line\"><span class=\"string\">'85llo worl4! 9 lov5 pyt8on'</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、对列表里的元素进行替换，可以使用列表解析的方法\"><a href=\"#4、对列表里的元素进行替换，可以使用列表解析的方法\" class=\"headerlink\" title=\"4、对列表里的元素进行替换，可以使用列表解析的方法\"></a>4、对列表里的元素进行替换，可以使用列表解析的方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep = [<span class=\"number\">5</span> <span class=\"keyword\">if</span> x==<span class=\"number\">1</span> <span class=\"keyword\">else</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep</span><br><span class=\"line\">[<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-1、批量进行替换\"><a href=\"#4-1、批量进行替换\" class=\"headerlink\" title=\"4.1、批量进行替换\"></a>4.1、批量进行替换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pattern = [<span class=\"number\">2</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep = [<span class=\"string\">\"a\"</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> pattern <span class=\"keyword\">else</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"number\">3</span>, <span class=\"string\">'a'</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2、根据字典的映射进行替换\"><a href=\"#4-2、根据字典的映射进行替换\" class=\"headerlink\" title=\"4.2、根据字典的映射进行替换\"></a>4.2、根据字典的映射进行替换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dict = &#123;<span class=\"number\">1</span>:<span class=\"string\">\"apple\"</span>, <span class=\"number\">3</span>:<span class=\"string\">\"banana\"</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep = [dict[x] <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> dict <span class=\"keyword\">else</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep</span><br><span class=\"line\">[<span class=\"string\">'apple'</span>, <span class=\"number\">2</span>, <span class=\"string\">'banana'</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io-StringIO对象。\"><a href=\"#5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io-StringIO对象。\" class=\"headerlink\" title=\"5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io.StringIO对象。\"></a>5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io.StringIO对象。</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world!\"</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str = StringIO(str)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str</span><br><span class=\"line\">&lt;_io.StringIO object at <span class=\"number\">0x7fa1e61addc8</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.tell()  <span class=\"comment\"># 返回当前的位置</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.read()  <span class=\"comment\"># 从当前位置开始读取字符串</span></span><br><span class=\"line\"><span class=\"string\">'hello world!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.getvalue()  <span class=\"comment\"># 返回字符串的全部内容</span></span><br><span class=\"line\"><span class=\"string\">'hello world!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.seek(<span class=\"number\">6</span>)  <span class=\"comment\"># 定义开始修改的位置</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.write(<span class=\"string\">\"china\"</span>)  <span class=\"comment\"># 修改字符串</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.read()</span><br><span class=\"line\"><span class=\"string\">'!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.getvalue()  <span class=\"comment\"># 获取修改后的字符串全部内容</span></span><br><span class=\"line\"><span class=\"string\">'hello china!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.tell() </span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"python中元素进行替换有很多方法，下面是我学习中的一些总结\"><a href=\"#python中元素进行替换有很多方法，下面是我学习中的一些总结\" class=\"headerlink\" title=\"python中元素进行替换有很多方法，下面是我学习中的一些总结\"></a>python中元素进行替换有很多方法，下面是我学习中的一些总结</h2><h3 id=\"1、字符串替换str-replace-方法\"><a href=\"#1、字符串替换str-replace-方法\" class=\"headerlink\" title=\"1、字符串替换str.replace()方法\"></a>1、字符串替换str.replace()方法</h3><p>python中的replace()方法是把字符串中的old字符串替换成new的字符串，如果指定替换次数max,则按照替换次数进行替换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.replace(old,new,count=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>","more":"<p>old：字符串替换前的字符<br>new：字符串替换后的字符<br>count：替换的次数，默认为0，不填表示全局替换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world! I love python!\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.replace(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"@\"</span>)  <span class=\"comment\"># 表示全局替换</span></span><br><span class=\"line\"><span class=\"string\">'he@@o wor@d! I @ove python!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.replace(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"@\"</span>,<span class=\"number\">2</span>)  <span class=\"comment\"># 替换指定次数</span></span><br><span class=\"line\"><span class=\"string\">'he@@o world! I love python!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.replace(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"@\"</span>,<span class=\"number\">2</span>).replace(<span class=\"string\">\"o\"</span>,<span class=\"string\">\"$\"</span>)  <span class=\"comment\"># 多个字符替换可以进行链式调用replace()方法</span></span><br><span class=\"line\"><span class=\"string\">'he@@$ w$rld! I l$ve pyth$n!'</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、正则表达式中的sub-和subn-方法\"><a href=\"#2、正则表达式中的sub-和subn-方法\" class=\"headerlink\" title=\"2、正则表达式中的sub()和subn()方法\"></a>2、正则表达式中的sub()和subn()方法</h3><p>sub(pattern, repl, string)<br>其中pattern表示原字符串中的字符，repl表示需要替换成的字符，string表示需要替换的字符串；<br>subn()和sub()的区别在于subn()返回的一个包含新字符串和替换次数的二元组；</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world! I love python!\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.sub(<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"nihao\"</span>,str)  </span><br><span class=\"line\"><span class=\"string\">'nihao world! I love python!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.subn(<span class=\"string\">\"l\"</span>,<span class=\"string\">\"*\"</span>,str)</span><br><span class=\"line\">(<span class=\"string\">'he**o wor*d! I *ove python!'</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、如果同时处理多个字符串的替换，此时可以使用string的maketrans-和translate-方法\"><a href=\"#3、如果同时处理多个字符串的替换，此时可以使用string的maketrans-和translate-方法\" class=\"headerlink\" title=\"3、如果同时处理多个字符串的替换，此时可以使用string的maketrans()和translate()方法\"></a>3、如果同时处理多个字符串的替换，此时可以使用string的maketrans()和translate()方法</h3><p>maketrans()方法用来生成字符映射表，而translate()方法则按映射表中定义的对应关系转换并替换其中的字符，用这两种方法可以同时处理多个不同的字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>table = <span class=\"string\">''</span>.maketrans(<span class=\"string\">\"abcdefghij\"</span>,<span class=\"string\">\"1234567890\"</span>)  <span class=\"comment\"># 创建映射表，注意字符串的长度要一致，达到一一对应的目的</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world! i love python\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.translate(table)  <span class=\"comment\"># 按照关系表将sting中的字符逐个进行替换</span></span><br><span class=\"line\"><span class=\"string\">'85llo worl4! 9 lov5 pyt8on'</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、对列表里的元素进行替换，可以使用列表解析的方法\"><a href=\"#4、对列表里的元素进行替换，可以使用列表解析的方法\" class=\"headerlink\" title=\"4、对列表里的元素进行替换，可以使用列表解析的方法\"></a>4、对列表里的元素进行替换，可以使用列表解析的方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep = [<span class=\"number\">5</span> <span class=\"keyword\">if</span> x==<span class=\"number\">1</span> <span class=\"keyword\">else</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep</span><br><span class=\"line\">[<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-1、批量进行替换\"><a href=\"#4-1、批量进行替换\" class=\"headerlink\" title=\"4.1、批量进行替换\"></a>4.1、批量进行替换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pattern = [<span class=\"number\">2</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep = [<span class=\"string\">\"a\"</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> pattern <span class=\"keyword\">else</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"string\">'a'</span>, <span class=\"number\">3</span>, <span class=\"string\">'a'</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2、根据字典的映射进行替换\"><a href=\"#4-2、根据字典的映射进行替换\" class=\"headerlink\" title=\"4.2、根据字典的映射进行替换\"></a>4.2、根据字典的映射进行替换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dict = &#123;<span class=\"number\">1</span>:<span class=\"string\">\"apple\"</span>, <span class=\"number\">3</span>:<span class=\"string\">\"banana\"</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep = [dict[x] <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> dict <span class=\"keyword\">else</span> x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> list]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rep</span><br><span class=\"line\">[<span class=\"string\">'apple'</span>, <span class=\"number\">2</span>, <span class=\"string\">'banana'</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io-StringIO对象。\"><a href=\"#5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io-StringIO对象。\" class=\"headerlink\" title=\"5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io.StringIO对象。\"></a>5、在Python中，字符串属于不可变对象，不支持原地修改，如果需要修改其中的值，只能重新创建一个新的字符串对象。但是如果一定要修改原字符串，可以使用io.StringIO对象。</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello world!\"</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str = StringIO(str)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str</span><br><span class=\"line\">&lt;_io.StringIO object at <span class=\"number\">0x7fa1e61addc8</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.tell()  <span class=\"comment\"># 返回当前的位置</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.read()  <span class=\"comment\"># 从当前位置开始读取字符串</span></span><br><span class=\"line\"><span class=\"string\">'hello world!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.getvalue()  <span class=\"comment\"># 返回字符串的全部内容</span></span><br><span class=\"line\"><span class=\"string\">'hello world!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.seek(<span class=\"number\">6</span>)  <span class=\"comment\"># 定义开始修改的位置</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.write(<span class=\"string\">\"china\"</span>)  <span class=\"comment\"># 修改字符串</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.read()</span><br><span class=\"line\"><span class=\"string\">'!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.getvalue()  <span class=\"comment\"># 获取修改后的字符串全部内容</span></span><br><span class=\"line\"><span class=\"string\">'hello china!'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>io_str.tell() </span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>"},{"title":"python之copy","type":"categories","copyright":true,"date":"2020-01-02T02:37:05.000Z","_content":"\n## Python中的引用、浅拷贝和深拷贝\n在python中，有一句话：*一切皆为对象，一切皆为对象的引用*，所以\n只要记住这句话就很容易清楚python中的引用、浅拷贝和深拷贝了。\n\n### 1、引用\npython中的引用是经常使用的，python的引用可以节省内存，加快速度，因为它不需要开辟内存空间。例如：\n<!--more-->\n```python\na = 1\nb = 1\n```\n这表示让 a 这个变量去指向一个地址，这个地址保存着数据为 1，让变量 b 也去指向这个地址，那么通过 b 我们一样可以找到数据 1，通过地址的指向来\n来查找到数据，这就是python中的引用；\n\n\n### 2、浅拷贝\n浅拷贝 copy.copy()\n浅拷贝保存的是数据的地址，不保存内容，浅拷贝是需要开辟单独的内存空间来存储地址的，它不能保证\n数据的独立性。例如：\n```python\na = [1, 2, 3]\nb = copy.copy(a)\n# a 的值[1, 2, 3]\n# b 的值[1, 2, 3]\nid(a)  # 1397274473\nid(b)  # 1397274545\n```\n可以看出 b 的数据和 a 的数据一样，但是 b 的地址和 a 的地址不相同，而且 b 的地址里保存的是列表里元素 1， 2， 3 的地址，b 通过保存的地址信息来获取数据1, 2, 3 可以通过下面的例子得出：\n```python\nid(a)  # 1397274473\nid(b)  # 1397274545\nid(a[0])  # 20705624\nid(b[0])  # 20705624\na[0] = 8\nid(a[0])  # 20705456\nid(b[0])  # 20705624\n```\n可以看出列表a 和列表 b 里面的元素 1 都指向着同一个地址，当列表 a 的第一个元素的值变为8时，即指向一个新的保存数据为 8 的地址时，列表b 的第一个元素仍然保存的是元素 1 的地址，此时可以看出，浅拷贝只是把数据的地址保存了，并没有保存数据本身，当列表中如果有元素为可变的列表或字典类时，因为拷贝的是列表或字典所对应的地址，如果列表或字典中有元素发生改变，则浅拷贝的列表也会跟着改变，不能保证数据的独立性：\n```python\nc = [1, 2, [3, 4]]\nd = copy.copy(c)\n# c=[1, 2, [3, 4]]\n# d=[1, 2, [3, 4]]\nid(c)  # 13972747060\nid(d)  # 13972745446\nid(c[2][0])  # 20705576\nid(d[2][0])  # 20705576\n\nc[2].append(5)\n# c=[1, 2, [3, 4, 5]]\nid(c)  # 13972747060\nd # d=[1, 2, [3, 4, 5]]\nid(d)  # 13972745446\n```\n```python\na = [1, 2]\nb = copy.copy(a)\na.append(3)\na # [1, 2, 3]\nb # [1, 2]\n```\n\n### 3、深拷贝\n深拷贝copy.deepcopy()\npython中，深拷贝在浅拷贝的基础上更进一步，深拷贝保存的是数据的本身，一旦进行深拷贝，则拷贝后的内容不仅和原本的内容完全一样，而且跟原来的没有任何联系，充分保证了数据的独立性。\n深拷贝相当于在内存中开辟了一片新的内存，不再用来保存数据的地址，而是用新的地址来保存相同的数据。\n```python\na = [1, 2, [3, 4]]\nb = copy.deepcopy(a)\n\na  # [1, 2, [3, 4]]\nb  # [1, 2, [3, 4]]\n\na[2].append(5)\na  # [1, 2, [3, 4, 5]]\nb  # [1, 2, [3, 4]]\n```\n可以看出深拷贝是把列表里的数据保存了，和浅拷贝不同，当列表 a 发生改变时，列表 b 并不会跟着改变，这样充分体现了深拷贝可以保证数据的独立性。\n","source":"_posts/python之copy.md","raw":"---\ntitle: python之copy\ntype: categories\ncopyright: true\ndate: 2020-01-02 10:37:05\ntags:\n    - python\ncategories: python\n---\n\n## Python中的引用、浅拷贝和深拷贝\n在python中，有一句话：*一切皆为对象，一切皆为对象的引用*，所以\n只要记住这句话就很容易清楚python中的引用、浅拷贝和深拷贝了。\n\n### 1、引用\npython中的引用是经常使用的，python的引用可以节省内存，加快速度，因为它不需要开辟内存空间。例如：\n<!--more-->\n```python\na = 1\nb = 1\n```\n这表示让 a 这个变量去指向一个地址，这个地址保存着数据为 1，让变量 b 也去指向这个地址，那么通过 b 我们一样可以找到数据 1，通过地址的指向来\n来查找到数据，这就是python中的引用；\n\n\n### 2、浅拷贝\n浅拷贝 copy.copy()\n浅拷贝保存的是数据的地址，不保存内容，浅拷贝是需要开辟单独的内存空间来存储地址的，它不能保证\n数据的独立性。例如：\n```python\na = [1, 2, 3]\nb = copy.copy(a)\n# a 的值[1, 2, 3]\n# b 的值[1, 2, 3]\nid(a)  # 1397274473\nid(b)  # 1397274545\n```\n可以看出 b 的数据和 a 的数据一样，但是 b 的地址和 a 的地址不相同，而且 b 的地址里保存的是列表里元素 1， 2， 3 的地址，b 通过保存的地址信息来获取数据1, 2, 3 可以通过下面的例子得出：\n```python\nid(a)  # 1397274473\nid(b)  # 1397274545\nid(a[0])  # 20705624\nid(b[0])  # 20705624\na[0] = 8\nid(a[0])  # 20705456\nid(b[0])  # 20705624\n```\n可以看出列表a 和列表 b 里面的元素 1 都指向着同一个地址，当列表 a 的第一个元素的值变为8时，即指向一个新的保存数据为 8 的地址时，列表b 的第一个元素仍然保存的是元素 1 的地址，此时可以看出，浅拷贝只是把数据的地址保存了，并没有保存数据本身，当列表中如果有元素为可变的列表或字典类时，因为拷贝的是列表或字典所对应的地址，如果列表或字典中有元素发生改变，则浅拷贝的列表也会跟着改变，不能保证数据的独立性：\n```python\nc = [1, 2, [3, 4]]\nd = copy.copy(c)\n# c=[1, 2, [3, 4]]\n# d=[1, 2, [3, 4]]\nid(c)  # 13972747060\nid(d)  # 13972745446\nid(c[2][0])  # 20705576\nid(d[2][0])  # 20705576\n\nc[2].append(5)\n# c=[1, 2, [3, 4, 5]]\nid(c)  # 13972747060\nd # d=[1, 2, [3, 4, 5]]\nid(d)  # 13972745446\n```\n```python\na = [1, 2]\nb = copy.copy(a)\na.append(3)\na # [1, 2, 3]\nb # [1, 2]\n```\n\n### 3、深拷贝\n深拷贝copy.deepcopy()\npython中，深拷贝在浅拷贝的基础上更进一步，深拷贝保存的是数据的本身，一旦进行深拷贝，则拷贝后的内容不仅和原本的内容完全一样，而且跟原来的没有任何联系，充分保证了数据的独立性。\n深拷贝相当于在内存中开辟了一片新的内存，不再用来保存数据的地址，而是用新的地址来保存相同的数据。\n```python\na = [1, 2, [3, 4]]\nb = copy.deepcopy(a)\n\na  # [1, 2, [3, 4]]\nb  # [1, 2, [3, 4]]\n\na[2].append(5)\na  # [1, 2, [3, 4, 5]]\nb  # [1, 2, [3, 4]]\n```\n可以看出深拷贝是把列表里的数据保存了，和浅拷贝不同，当列表 a 发生改变时，列表 b 并不会跟着改变，这样充分体现了深拷贝可以保证数据的独立性。\n","slug":"python之copy","published":1,"updated":"2022-02-25T08:37:09.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77yb0016hvx34ki76hcd","content":"<h2 id=\"Python中的引用、浅拷贝和深拷贝\"><a href=\"#Python中的引用、浅拷贝和深拷贝\" class=\"headerlink\" title=\"Python中的引用、浅拷贝和深拷贝\"></a>Python中的引用、浅拷贝和深拷贝</h2><p>在python中，有一句话：<em>一切皆为对象，一切皆为对象的引用</em>，所以<br>只要记住这句话就很容易清楚python中的引用、浅拷贝和深拷贝了。</p>\n<h3 id=\"1、引用\"><a href=\"#1、引用\" class=\"headerlink\" title=\"1、引用\"></a>1、引用</h3><p>python中的引用是经常使用的，python的引用可以节省内存，加快速度，因为它不需要开辟内存空间。例如：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>这表示让 a 这个变量去指向一个地址，这个地址保存着数据为 1，让变量 b 也去指向这个地址，那么通过 b 我们一样可以找到数据 1，通过地址的指向来<br>来查找到数据，这就是python中的引用；</p>\n<h3 id=\"2、浅拷贝\"><a href=\"#2、浅拷贝\" class=\"headerlink\" title=\"2、浅拷贝\"></a>2、浅拷贝</h3><p>浅拷贝 copy.copy()<br>浅拷贝保存的是数据的地址，不保存内容，浅拷贝是需要开辟单独的内存空间来存储地址的，它不能保证<br>数据的独立性。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\"><span class=\"comment\"># a 的值[1, 2, 3]</span></span><br><span class=\"line\"><span class=\"comment\"># b 的值[1, 2, 3]</span></span><br><span class=\"line\">id(a)  <span class=\"comment\"># 1397274473</span></span><br><span class=\"line\">id(b)  <span class=\"comment\"># 1397274545</span></span><br></pre></td></tr></table></figure>\n<p>可以看出 b 的数据和 a 的数据一样，但是 b 的地址和 a 的地址不相同，而且 b 的地址里保存的是列表里元素 1， 2， 3 的地址，b 通过保存的地址信息来获取数据1, 2, 3 可以通过下面的例子得出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id(a)  <span class=\"comment\"># 1397274473</span></span><br><span class=\"line\">id(b)  <span class=\"comment\"># 1397274545</span></span><br><span class=\"line\">id(a[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705624</span></span><br><span class=\"line\">id(b[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705624</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">8</span></span><br><span class=\"line\">id(a[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705456</span></span><br><span class=\"line\">id(b[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705624</span></span><br></pre></td></tr></table></figure>\n<p>可以看出列表a 和列表 b 里面的元素 1 都指向着同一个地址，当列表 a 的第一个元素的值变为8时，即指向一个新的保存数据为 8 的地址时，列表b 的第一个元素仍然保存的是元素 1 的地址，此时可以看出，浅拷贝只是把数据的地址保存了，并没有保存数据本身，当列表中如果有元素为可变的列表或字典类时，因为拷贝的是列表或字典所对应的地址，如果列表或字典中有元素发生改变，则浅拷贝的列表也会跟着改变，不能保证数据的独立性：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]</span><br><span class=\"line\">d = copy.copy(c)</span><br><span class=\"line\"><span class=\"comment\"># c=[1, 2, [3, 4]]</span></span><br><span class=\"line\"><span class=\"comment\"># d=[1, 2, [3, 4]]</span></span><br><span class=\"line\">id(c)  <span class=\"comment\"># 13972747060</span></span><br><span class=\"line\">id(d)  <span class=\"comment\"># 13972745446</span></span><br><span class=\"line\">id(c[<span class=\"number\">2</span>][<span class=\"number\">0</span>])  <span class=\"comment\"># 20705576</span></span><br><span class=\"line\">id(d[<span class=\"number\">2</span>][<span class=\"number\">0</span>])  <span class=\"comment\"># 20705576</span></span><br><span class=\"line\"></span><br><span class=\"line\">c[<span class=\"number\">2</span>].append(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># c=[1, 2, [3, 4, 5]]</span></span><br><span class=\"line\">id(c)  <span class=\"comment\"># 13972747060</span></span><br><span class=\"line\">d <span class=\"comment\"># d=[1, 2, [3, 4, 5]]</span></span><br><span class=\"line\">id(d)  <span class=\"comment\"># 13972745446</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\">a.append(<span class=\"number\">3</span>)</span><br><span class=\"line\">a <span class=\"comment\"># [1, 2, 3]</span></span><br><span class=\"line\">b <span class=\"comment\"># [1, 2]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、深拷贝\"><a href=\"#3、深拷贝\" class=\"headerlink\" title=\"3、深拷贝\"></a>3、深拷贝</h3><p>深拷贝copy.deepcopy()<br>python中，深拷贝在浅拷贝的基础上更进一步，深拷贝保存的是数据的本身，一旦进行深拷贝，则拷贝后的内容不仅和原本的内容完全一样，而且跟原来的没有任何联系，充分保证了数据的独立性。<br>深拷贝相当于在内存中开辟了一片新的内存，不再用来保存数据的地址，而是用新的地址来保存相同的数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]</span><br><span class=\"line\">b = copy.deepcopy(a)</span><br><span class=\"line\"></span><br><span class=\"line\">a  <span class=\"comment\"># [1, 2, [3, 4]]</span></span><br><span class=\"line\">b  <span class=\"comment\"># [1, 2, [3, 4]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a[<span class=\"number\">2</span>].append(<span class=\"number\">5</span>)</span><br><span class=\"line\">a  <span class=\"comment\"># [1, 2, [3, 4, 5]]</span></span><br><span class=\"line\">b  <span class=\"comment\"># [1, 2, [3, 4]]</span></span><br></pre></td></tr></table></figure>\n<p>可以看出深拷贝是把列表里的数据保存了，和浅拷贝不同，当列表 a 发生改变时，列表 b 并不会跟着改变，这样充分体现了深拷贝可以保证数据的独立性。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Python中的引用、浅拷贝和深拷贝\"><a href=\"#Python中的引用、浅拷贝和深拷贝\" class=\"headerlink\" title=\"Python中的引用、浅拷贝和深拷贝\"></a>Python中的引用、浅拷贝和深拷贝</h2><p>在python中，有一句话：<em>一切皆为对象，一切皆为对象的引用</em>，所以<br>只要记住这句话就很容易清楚python中的引用、浅拷贝和深拷贝了。</p>\n<h3 id=\"1、引用\"><a href=\"#1、引用\" class=\"headerlink\" title=\"1、引用\"></a>1、引用</h3><p>python中的引用是经常使用的，python的引用可以节省内存，加快速度，因为它不需要开辟内存空间。例如：</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>这表示让 a 这个变量去指向一个地址，这个地址保存着数据为 1，让变量 b 也去指向这个地址，那么通过 b 我们一样可以找到数据 1，通过地址的指向来<br>来查找到数据，这就是python中的引用；</p>\n<h3 id=\"2、浅拷贝\"><a href=\"#2、浅拷贝\" class=\"headerlink\" title=\"2、浅拷贝\"></a>2、浅拷贝</h3><p>浅拷贝 copy.copy()<br>浅拷贝保存的是数据的地址，不保存内容，浅拷贝是需要开辟单独的内存空间来存储地址的，它不能保证<br>数据的独立性。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\"><span class=\"comment\"># a 的值[1, 2, 3]</span></span><br><span class=\"line\"><span class=\"comment\"># b 的值[1, 2, 3]</span></span><br><span class=\"line\">id(a)  <span class=\"comment\"># 1397274473</span></span><br><span class=\"line\">id(b)  <span class=\"comment\"># 1397274545</span></span><br></pre></td></tr></table></figure>\n<p>可以看出 b 的数据和 a 的数据一样，但是 b 的地址和 a 的地址不相同，而且 b 的地址里保存的是列表里元素 1， 2， 3 的地址，b 通过保存的地址信息来获取数据1, 2, 3 可以通过下面的例子得出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id(a)  <span class=\"comment\"># 1397274473</span></span><br><span class=\"line\">id(b)  <span class=\"comment\"># 1397274545</span></span><br><span class=\"line\">id(a[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705624</span></span><br><span class=\"line\">id(b[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705624</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">8</span></span><br><span class=\"line\">id(a[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705456</span></span><br><span class=\"line\">id(b[<span class=\"number\">0</span>])  <span class=\"comment\"># 20705624</span></span><br></pre></td></tr></table></figure>\n<p>可以看出列表a 和列表 b 里面的元素 1 都指向着同一个地址，当列表 a 的第一个元素的值变为8时，即指向一个新的保存数据为 8 的地址时，列表b 的第一个元素仍然保存的是元素 1 的地址，此时可以看出，浅拷贝只是把数据的地址保存了，并没有保存数据本身，当列表中如果有元素为可变的列表或字典类时，因为拷贝的是列表或字典所对应的地址，如果列表或字典中有元素发生改变，则浅拷贝的列表也会跟着改变，不能保证数据的独立性：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]</span><br><span class=\"line\">d = copy.copy(c)</span><br><span class=\"line\"><span class=\"comment\"># c=[1, 2, [3, 4]]</span></span><br><span class=\"line\"><span class=\"comment\"># d=[1, 2, [3, 4]]</span></span><br><span class=\"line\">id(c)  <span class=\"comment\"># 13972747060</span></span><br><span class=\"line\">id(d)  <span class=\"comment\"># 13972745446</span></span><br><span class=\"line\">id(c[<span class=\"number\">2</span>][<span class=\"number\">0</span>])  <span class=\"comment\"># 20705576</span></span><br><span class=\"line\">id(d[<span class=\"number\">2</span>][<span class=\"number\">0</span>])  <span class=\"comment\"># 20705576</span></span><br><span class=\"line\"></span><br><span class=\"line\">c[<span class=\"number\">2</span>].append(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># c=[1, 2, [3, 4, 5]]</span></span><br><span class=\"line\">id(c)  <span class=\"comment\"># 13972747060</span></span><br><span class=\"line\">d <span class=\"comment\"># d=[1, 2, [3, 4, 5]]</span></span><br><span class=\"line\">id(d)  <span class=\"comment\"># 13972745446</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\">a.append(<span class=\"number\">3</span>)</span><br><span class=\"line\">a <span class=\"comment\"># [1, 2, 3]</span></span><br><span class=\"line\">b <span class=\"comment\"># [1, 2]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、深拷贝\"><a href=\"#3、深拷贝\" class=\"headerlink\" title=\"3、深拷贝\"></a>3、深拷贝</h3><p>深拷贝copy.deepcopy()<br>python中，深拷贝在浅拷贝的基础上更进一步，深拷贝保存的是数据的本身，一旦进行深拷贝，则拷贝后的内容不仅和原本的内容完全一样，而且跟原来的没有任何联系，充分保证了数据的独立性。<br>深拷贝相当于在内存中开辟了一片新的内存，不再用来保存数据的地址，而是用新的地址来保存相同的数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]</span><br><span class=\"line\">b = copy.deepcopy(a)</span><br><span class=\"line\"></span><br><span class=\"line\">a  <span class=\"comment\"># [1, 2, [3, 4]]</span></span><br><span class=\"line\">b  <span class=\"comment\"># [1, 2, [3, 4]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a[<span class=\"number\">2</span>].append(<span class=\"number\">5</span>)</span><br><span class=\"line\">a  <span class=\"comment\"># [1, 2, [3, 4, 5]]</span></span><br><span class=\"line\">b  <span class=\"comment\"># [1, 2, [3, 4]]</span></span><br></pre></td></tr></table></figure>\n<p>可以看出深拷贝是把列表里的数据保存了，和浅拷贝不同，当列表 a 发生改变时，列表 b 并不会跟着改变，这样充分体现了深拷贝可以保证数据的独立性。</p>"},{"title":"python处理简单验证码","type":"categories","copyright":true,"date":"2020-01-02T03:40:24.000Z","_content":"#### 利用python对简单的验证码进行处理\n验证码如下所示：\n![这里写图片描述](/image/code/code.png)\n首先导入我们需要的包文件\n\n```python\nimport os\nimport random\nfrom string import ascii_lowercase\nfrom PIL import Image\nimport numpy\n```\n将验证码进行切分，其中进行切分的坐标可以自行调整最佳；Image模块的convert()函数，用于不同模式图像之间的转换。\n\n<!--more-->\n\n```python\ndef div_im(im_name):\n    im = Image.open(im_name).convert('L')   # 转换为灰度图像返回\n\n    name = ''.join(random.sample(ascii_lowercase, 10))  # 随机序列化一个字符串\n    regions = [(8, 6, 20, 26), (20, 6, 32, 26), (32, 6, 44, 26), (44, 6, 56, 26)]   # 定义切分坐标\n    arr = list()\n    for i, region in enumerate(regions):\n        im2 = im.crop(region)   # 将验证码按坐标进行切分\n        f_name = '{}_{}.jpg'.format(name, i)\n        im2.save(f_name)\n        arr.append(f_name)\n\n    return arr\n```\n切分后返回的图片为：\n![这里写图片描述](/image/code/code1.jpg) ![这里写图片描述](/image/code/code2.jpg) ![这里写图片描述](/image/code/code3.jpg) ![这里写图片描述](/image/code/code4.jpg)\n\n将图片进行二值化处理\n\n```python\ndef convert_im_to_array(im_name):\n    im = Image.open(im_name).convert('L')\n    a = numpy.array(im)\n    a = numpy.array([[0 if j < 5 else 1 for j in i] for i in a])  # 数字5是自己调整的阈值\n    return a\n```\n样本集标注：采集100张验证码图片进行切分，人为进行标注0~9；\n![这里写图片描述](/image/code/test1.png)\n![这里写图片描述](/image/code/test2.png)\n\n最后就是进行测试\n\n```python\ndef rec(f_name):\n    a = convert_im_to_array(f_name)  # 测试图片的二值化数组\n    min_i = -1\n    min_v = 10000000  # 选择一个较大的数即可\n    for i in range(10):\n        p = 'sample_im/{}'.format(i)  # 样本集路径0~9\n        for im in os.listdir(p):\n            b = convert_im_to_array('{}/{}'.format(p, im))  # 样本集图片的二值化数组\n            tmp = sum(sum((a - b)**2))  \n            print(tmp)\n            if tmp < min_v:\n                min_v = tmp\n                min_i = i\n            print(\"min_v的值：\",min_v)\n        print(\"min_i的值：\",min_i)\n    return min_i  # 返回图片中的数字\n```\n最后可以进行多次测试比较识别的准确率。\n","source":"_posts/python处理简单验证码.md","raw":"---\ntitle: python处理简单验证码\ntype: categories\ncopyright: true\ndate: 2020-01-02 11:40:24\ntags:\n    - python\ncategories: python\n---\n#### 利用python对简单的验证码进行处理\n验证码如下所示：\n![这里写图片描述](/image/code/code.png)\n首先导入我们需要的包文件\n\n```python\nimport os\nimport random\nfrom string import ascii_lowercase\nfrom PIL import Image\nimport numpy\n```\n将验证码进行切分，其中进行切分的坐标可以自行调整最佳；Image模块的convert()函数，用于不同模式图像之间的转换。\n\n<!--more-->\n\n```python\ndef div_im(im_name):\n    im = Image.open(im_name).convert('L')   # 转换为灰度图像返回\n\n    name = ''.join(random.sample(ascii_lowercase, 10))  # 随机序列化一个字符串\n    regions = [(8, 6, 20, 26), (20, 6, 32, 26), (32, 6, 44, 26), (44, 6, 56, 26)]   # 定义切分坐标\n    arr = list()\n    for i, region in enumerate(regions):\n        im2 = im.crop(region)   # 将验证码按坐标进行切分\n        f_name = '{}_{}.jpg'.format(name, i)\n        im2.save(f_name)\n        arr.append(f_name)\n\n    return arr\n```\n切分后返回的图片为：\n![这里写图片描述](/image/code/code1.jpg) ![这里写图片描述](/image/code/code2.jpg) ![这里写图片描述](/image/code/code3.jpg) ![这里写图片描述](/image/code/code4.jpg)\n\n将图片进行二值化处理\n\n```python\ndef convert_im_to_array(im_name):\n    im = Image.open(im_name).convert('L')\n    a = numpy.array(im)\n    a = numpy.array([[0 if j < 5 else 1 for j in i] for i in a])  # 数字5是自己调整的阈值\n    return a\n```\n样本集标注：采集100张验证码图片进行切分，人为进行标注0~9；\n![这里写图片描述](/image/code/test1.png)\n![这里写图片描述](/image/code/test2.png)\n\n最后就是进行测试\n\n```python\ndef rec(f_name):\n    a = convert_im_to_array(f_name)  # 测试图片的二值化数组\n    min_i = -1\n    min_v = 10000000  # 选择一个较大的数即可\n    for i in range(10):\n        p = 'sample_im/{}'.format(i)  # 样本集路径0~9\n        for im in os.listdir(p):\n            b = convert_im_to_array('{}/{}'.format(p, im))  # 样本集图片的二值化数组\n            tmp = sum(sum((a - b)**2))  \n            print(tmp)\n            if tmp < min_v:\n                min_v = tmp\n                min_i = i\n            print(\"min_v的值：\",min_v)\n        print(\"min_i的值：\",min_i)\n    return min_i  # 返回图片中的数字\n```\n最后可以进行多次测试比较识别的准确率。\n","slug":"python处理简单验证码","published":1,"updated":"2022-02-25T08:37:09.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77yd0019hvx3axxbdcbr","content":"<h4 id=\"利用python对简单的验证码进行处理\"><a href=\"#利用python对简单的验证码进行处理\" class=\"headerlink\" title=\"利用python对简单的验证码进行处理\"></a>利用python对简单的验证码进行处理</h4><p>验证码如下所示：<br><img src=\"/image/code/code.png\" alt=\"这里写图片描述\"><br>首先导入我们需要的包文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> ascii_lowercase</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy</span><br></pre></td></tr></table></figure>\n<p>将验证码进行切分，其中进行切分的坐标可以自行调整最佳；Image模块的convert()函数，用于不同模式图像之间的转换。</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">div_im</span><span class=\"params\">(im_name)</span>:</span></span><br><span class=\"line\">    im = Image.open(im_name).convert(<span class=\"string\">'L'</span>)   <span class=\"comment\"># 转换为灰度图像返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">    name = <span class=\"string\">''</span>.join(random.sample(ascii_lowercase, <span class=\"number\">10</span>))  <span class=\"comment\"># 随机序列化一个字符串</span></span><br><span class=\"line\">    regions = [(<span class=\"number\">8</span>, <span class=\"number\">6</span>, <span class=\"number\">20</span>, <span class=\"number\">26</span>), (<span class=\"number\">20</span>, <span class=\"number\">6</span>, <span class=\"number\">32</span>, <span class=\"number\">26</span>), (<span class=\"number\">32</span>, <span class=\"number\">6</span>, <span class=\"number\">44</span>, <span class=\"number\">26</span>), (<span class=\"number\">44</span>, <span class=\"number\">6</span>, <span class=\"number\">56</span>, <span class=\"number\">26</span>)]   <span class=\"comment\"># 定义切分坐标</span></span><br><span class=\"line\">    arr = list()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, region <span class=\"keyword\">in</span> enumerate(regions):</span><br><span class=\"line\">        im2 = im.crop(region)   <span class=\"comment\"># 将验证码按坐标进行切分</span></span><br><span class=\"line\">        f_name = <span class=\"string\">'&#123;&#125;_&#123;&#125;.jpg'</span>.format(name, i)</span><br><span class=\"line\">        im2.save(f_name)</span><br><span class=\"line\">        arr.append(f_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br></pre></td></tr></table></figure>\n<p>切分后返回的图片为：<br><img src=\"/image/code/code1.jpg\" alt=\"这里写图片描述\"> <img src=\"/image/code/code2.jpg\" alt=\"这里写图片描述\"> <img src=\"/image/code/code3.jpg\" alt=\"这里写图片描述\"> <img src=\"/image/code/code4.jpg\" alt=\"这里写图片描述\"></p>\n<p>将图片进行二值化处理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convert_im_to_array</span><span class=\"params\">(im_name)</span>:</span></span><br><span class=\"line\">    im = Image.open(im_name).convert(<span class=\"string\">'L'</span>)</span><br><span class=\"line\">    a = numpy.array(im)</span><br><span class=\"line\">    a = numpy.array([[<span class=\"number\">0</span> <span class=\"keyword\">if</span> j &lt; <span class=\"number\">5</span> <span class=\"keyword\">else</span> <span class=\"number\">1</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> a])  <span class=\"comment\"># 数字5是自己调整的阈值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br></pre></td></tr></table></figure>\n<p>样本集标注：采集100张验证码图片进行切分，人为进行标注0~9；<br><img src=\"/image/code/test1.png\" alt=\"这里写图片描述\"><br><img src=\"/image/code/test2.png\" alt=\"这里写图片描述\"></p>\n<p>最后就是进行测试</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rec</span><span class=\"params\">(f_name)</span>:</span></span><br><span class=\"line\">    a = convert_im_to_array(f_name)  <span class=\"comment\"># 测试图片的二值化数组</span></span><br><span class=\"line\">    min_i = <span class=\"number\">-1</span></span><br><span class=\"line\">    min_v = <span class=\"number\">10000000</span>  <span class=\"comment\"># 选择一个较大的数即可</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        p = <span class=\"string\">'sample_im/&#123;&#125;'</span>.format(i)  <span class=\"comment\"># 样本集路径0~9</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> im <span class=\"keyword\">in</span> os.listdir(p):</span><br><span class=\"line\">            b = convert_im_to_array(<span class=\"string\">'&#123;&#125;/&#123;&#125;'</span>.format(p, im))  <span class=\"comment\"># 样本集图片的二值化数组</span></span><br><span class=\"line\">            tmp = sum(sum((a - b)**<span class=\"number\">2</span>))  </span><br><span class=\"line\">            print(tmp)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> tmp &lt; min_v:</span><br><span class=\"line\">                min_v = tmp</span><br><span class=\"line\">                min_i = i</span><br><span class=\"line\">            print(<span class=\"string\">\"min_v的值：\"</span>,min_v)</span><br><span class=\"line\">        print(<span class=\"string\">\"min_i的值：\"</span>,min_i)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min_i  <span class=\"comment\"># 返回图片中的数字</span></span><br></pre></td></tr></table></figure>\n<p>最后可以进行多次测试比较识别的准确率。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"利用python对简单的验证码进行处理\"><a href=\"#利用python对简单的验证码进行处理\" class=\"headerlink\" title=\"利用python对简单的验证码进行处理\"></a>利用python对简单的验证码进行处理</h4><p>验证码如下所示：<br><img src=\"/image/code/code.png\" alt=\"这里写图片描述\"><br>首先导入我们需要的包文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> ascii_lowercase</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy</span><br></pre></td></tr></table></figure>\n<p>将验证码进行切分，其中进行切分的坐标可以自行调整最佳；Image模块的convert()函数，用于不同模式图像之间的转换。</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">div_im</span><span class=\"params\">(im_name)</span>:</span></span><br><span class=\"line\">    im = Image.open(im_name).convert(<span class=\"string\">'L'</span>)   <span class=\"comment\"># 转换为灰度图像返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">    name = <span class=\"string\">''</span>.join(random.sample(ascii_lowercase, <span class=\"number\">10</span>))  <span class=\"comment\"># 随机序列化一个字符串</span></span><br><span class=\"line\">    regions = [(<span class=\"number\">8</span>, <span class=\"number\">6</span>, <span class=\"number\">20</span>, <span class=\"number\">26</span>), (<span class=\"number\">20</span>, <span class=\"number\">6</span>, <span class=\"number\">32</span>, <span class=\"number\">26</span>), (<span class=\"number\">32</span>, <span class=\"number\">6</span>, <span class=\"number\">44</span>, <span class=\"number\">26</span>), (<span class=\"number\">44</span>, <span class=\"number\">6</span>, <span class=\"number\">56</span>, <span class=\"number\">26</span>)]   <span class=\"comment\"># 定义切分坐标</span></span><br><span class=\"line\">    arr = list()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, region <span class=\"keyword\">in</span> enumerate(regions):</span><br><span class=\"line\">        im2 = im.crop(region)   <span class=\"comment\"># 将验证码按坐标进行切分</span></span><br><span class=\"line\">        f_name = <span class=\"string\">'&#123;&#125;_&#123;&#125;.jpg'</span>.format(name, i)</span><br><span class=\"line\">        im2.save(f_name)</span><br><span class=\"line\">        arr.append(f_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br></pre></td></tr></table></figure>\n<p>切分后返回的图片为：<br><img src=\"/image/code/code1.jpg\" alt=\"这里写图片描述\"> <img src=\"/image/code/code2.jpg\" alt=\"这里写图片描述\"> <img src=\"/image/code/code3.jpg\" alt=\"这里写图片描述\"> <img src=\"/image/code/code4.jpg\" alt=\"这里写图片描述\"></p>\n<p>将图片进行二值化处理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convert_im_to_array</span><span class=\"params\">(im_name)</span>:</span></span><br><span class=\"line\">    im = Image.open(im_name).convert(<span class=\"string\">'L'</span>)</span><br><span class=\"line\">    a = numpy.array(im)</span><br><span class=\"line\">    a = numpy.array([[<span class=\"number\">0</span> <span class=\"keyword\">if</span> j &lt; <span class=\"number\">5</span> <span class=\"keyword\">else</span> <span class=\"number\">1</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> a])  <span class=\"comment\"># 数字5是自己调整的阈值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br></pre></td></tr></table></figure>\n<p>样本集标注：采集100张验证码图片进行切分，人为进行标注0~9；<br><img src=\"/image/code/test1.png\" alt=\"这里写图片描述\"><br><img src=\"/image/code/test2.png\" alt=\"这里写图片描述\"></p>\n<p>最后就是进行测试</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rec</span><span class=\"params\">(f_name)</span>:</span></span><br><span class=\"line\">    a = convert_im_to_array(f_name)  <span class=\"comment\"># 测试图片的二值化数组</span></span><br><span class=\"line\">    min_i = <span class=\"number\">-1</span></span><br><span class=\"line\">    min_v = <span class=\"number\">10000000</span>  <span class=\"comment\"># 选择一个较大的数即可</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        p = <span class=\"string\">'sample_im/&#123;&#125;'</span>.format(i)  <span class=\"comment\"># 样本集路径0~9</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> im <span class=\"keyword\">in</span> os.listdir(p):</span><br><span class=\"line\">            b = convert_im_to_array(<span class=\"string\">'&#123;&#125;/&#123;&#125;'</span>.format(p, im))  <span class=\"comment\"># 样本集图片的二值化数组</span></span><br><span class=\"line\">            tmp = sum(sum((a - b)**<span class=\"number\">2</span>))  </span><br><span class=\"line\">            print(tmp)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> tmp &lt; min_v:</span><br><span class=\"line\">                min_v = tmp</span><br><span class=\"line\">                min_i = i</span><br><span class=\"line\">            print(<span class=\"string\">\"min_v的值：\"</span>,min_v)</span><br><span class=\"line\">        print(<span class=\"string\">\"min_i的值：\"</span>,min_i)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min_i  <span class=\"comment\"># 返回图片中的数字</span></span><br></pre></td></tr></table></figure>\n<p>最后可以进行多次测试比较识别的准确率。</p>"},{"title":"python图片转字符串","type":"categories","copyright":true,"date":"2020-01-02T08:26:32.000Z","_content":"\n## python 图片转成字符串\n\n<!--more-->\n\n### 下面是原始图片\n![红心](/image/crawl/red_heart.jpg)\n\n### 代码\n```python\nfrom PIL import Image\nascii_char = list(\"$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1{}[]?-_+~<>i!lI;:,\\\"^`'. \")\n\nWIDTH = 85 # 字符画的宽\nHEIGHT = 25 # 字符画的高\n\n\n# 将256灰度映射到70个字符上，也就是RGB值转字符的函数：\ndef get_char(r, g, b, alpha=256):  # alpha透明度\n   if alpha == 0:\n       return ' '\n   length = len(ascii_char)\n   gray = int(0.2126 * r + 0.7152 * g + 0.0722 * b)  # 计算灰度\n   unit = (256.0 + 1) / length\n   return ascii_char[int(gray / unit)]  # 不同的灰度对应着不同的字符\n   # 通过灰度来区分色块\n\n\nif __name__ == '__main__':\n   img = './15.jpg' # 图片所在位置\n   im = Image.open(img)\n   im = im.resize((WIDTH, HEIGHT), Image.NEAREST)\n   txt = \"\"\n   for i in range(HEIGHT):\n       for j in range(WIDTH):\n           txt += get_char(*im.getpixel((j, i))) # 获得相应的字符\n       txt += '\\n'\n   print(txt)  # 打印出字符画\n   # 将字符画 写入文件中\n   with open(\"15.txt\", 'w') as f:\n       f.write(txt)\n```\n\n### 转换后的效果\n\n```\n                                                                                \n           .uahZO000Okhhw^.                  ..'hhhhhhkqZwk`'.                  \n       'phkbddppJJJJmdppddbkb<             aZ0ZqQppppOOdppddbkhk.               \n     .hkbddpppmJCpppp0JJQppJCqbk`      'mZ0dpppppJCJJJppppppppddbk:.            \n   .mZbdpppppUJpppppppppJJpppLJCQO.   hbQCppppppLJOJJJJppppppppppdbk.           \n  .hkdpZppZJJJZpppppppppppppdJJJddbkIhbdpppppppdJJJJJCJJCJJJJJpppppbk,          \n  mbbppppppCJJJppppppppppppppppCppdddddpppppppppppJJJJJLppppppJJJ0q0L0.         \n.,OLLpppLJqCJCCJppppppppppppppppppppppppppppppppppCppppppppppOJdppppCQ0         \n.p0LJCCmppppqCJJwppppppppppZJJLppppppppppppppppppJJppppppppppJJJCqpppL0.        \n mkddppppppppppLJpppppqCJJpppJqpppppppppppJJJJCCJJJJJJJJJJJCqJJqCJJJJLQ         \n .kbdppppppppppJpppppppJmpppp0JdpppppppppwJCJpwJZpppppCJJJJdpppppJppdb[         \n  lkbdpppwOqQJJCppppppppppOJJJJJJppppppCJOJpJJCpppppppppJJJpppppppppdq.         \n   .kbdpppJwpdJLppppppppppCJCdppJJJppppppJJJppppJJJLppppJJJJJqpppdbk.           \n     .kpCJqpppdOZOCLJJJJJJJJJppdJJppppppppJqp0JJJLppppppppppppdCdQ.             \n       .\"dbdppppJJJpCdCwpppppppppJJpppppppppppppJZppppppppppdbd'.               \n            kkbLJppppwJJCppppppJJJJJppppppppppppJpppppppdbbm..                  \n               .rkbddpppJJJJJCJJJpCJ0ppZLJJJJJJJJdpddpb^                        \n                    .kbbpppppJJJqpppppppppppppppCQw'.                           \n                        ^kbddppJppppppppppppdbkt.                               \n                          .:hbdpppppppppppdb`.                                  \n                              .kbdpppppdba.                                     \n                                .kbbddb'                                        \n                                  .ah..                                         \n```\n\n","source":"_posts/python图片转字符串.md","raw":"---\ntitle: python图片转字符串\ntype: categories\ncopyright: true\ndate: 2020-01-02 16:26:32\ntags:\n    - python\ncategories: python\n---\n\n## python 图片转成字符串\n\n<!--more-->\n\n### 下面是原始图片\n![红心](/image/crawl/red_heart.jpg)\n\n### 代码\n```python\nfrom PIL import Image\nascii_char = list(\"$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1{}[]?-_+~<>i!lI;:,\\\"^`'. \")\n\nWIDTH = 85 # 字符画的宽\nHEIGHT = 25 # 字符画的高\n\n\n# 将256灰度映射到70个字符上，也就是RGB值转字符的函数：\ndef get_char(r, g, b, alpha=256):  # alpha透明度\n   if alpha == 0:\n       return ' '\n   length = len(ascii_char)\n   gray = int(0.2126 * r + 0.7152 * g + 0.0722 * b)  # 计算灰度\n   unit = (256.0 + 1) / length\n   return ascii_char[int(gray / unit)]  # 不同的灰度对应着不同的字符\n   # 通过灰度来区分色块\n\n\nif __name__ == '__main__':\n   img = './15.jpg' # 图片所在位置\n   im = Image.open(img)\n   im = im.resize((WIDTH, HEIGHT), Image.NEAREST)\n   txt = \"\"\n   for i in range(HEIGHT):\n       for j in range(WIDTH):\n           txt += get_char(*im.getpixel((j, i))) # 获得相应的字符\n       txt += '\\n'\n   print(txt)  # 打印出字符画\n   # 将字符画 写入文件中\n   with open(\"15.txt\", 'w') as f:\n       f.write(txt)\n```\n\n### 转换后的效果\n\n```\n                                                                                \n           .uahZO000Okhhw^.                  ..'hhhhhhkqZwk`'.                  \n       'phkbddppJJJJmdppddbkb<             aZ0ZqQppppOOdppddbkhk.               \n     .hkbddpppmJCpppp0JJQppJCqbk`      'mZ0dpppppJCJJJppppppppddbk:.            \n   .mZbdpppppUJpppppppppJJpppLJCQO.   hbQCppppppLJOJJJJppppppppppdbk.           \n  .hkdpZppZJJJZpppppppppppppdJJJddbkIhbdpppppppdJJJJJCJJCJJJJJpppppbk,          \n  mbbppppppCJJJppppppppppppppppCppdddddpppppppppppJJJJJLppppppJJJ0q0L0.         \n.,OLLpppLJqCJCCJppppppppppppppppppppppppppppppppppCppppppppppOJdppppCQ0         \n.p0LJCCmppppqCJJwppppppppppZJJLppppppppppppppppppJJppppppppppJJJCqpppL0.        \n mkddppppppppppLJpppppqCJJpppJqpppppppppppJJJJCCJJJJJJJJJJJCqJJqCJJJJLQ         \n .kbdppppppppppJpppppppJmpppp0JdpppppppppwJCJpwJZpppppCJJJJdpppppJppdb[         \n  lkbdpppwOqQJJCppppppppppOJJJJJJppppppCJOJpJJCpppppppppJJJpppppppppdq.         \n   .kbdpppJwpdJLppppppppppCJCdppJJJppppppJJJppppJJJLppppJJJJJqpppdbk.           \n     .kpCJqpppdOZOCLJJJJJJJJJppdJJppppppppJqp0JJJLppppppppppppdCdQ.             \n       .\"dbdppppJJJpCdCwpppppppppJJpppppppppppppJZppppppppppdbd'.               \n            kkbLJppppwJJCppppppJJJJJppppppppppppJpppppppdbbm..                  \n               .rkbddpppJJJJJCJJJpCJ0ppZLJJJJJJJJdpddpb^                        \n                    .kbbpppppJJJqpppppppppppppppCQw'.                           \n                        ^kbddppJppppppppppppdbkt.                               \n                          .:hbdpppppppppppdb`.                                  \n                              .kbdpppppdba.                                     \n                                .kbbddb'                                        \n                                  .ah..                                         \n```\n\n","slug":"python图片转字符串","published":1,"updated":"2022-02-25T08:37:09.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77ye001bhvx382jq6bom","content":"<h2 id=\"python-图片转成字符串\"><a href=\"#python-图片转成字符串\" class=\"headerlink\" title=\"python 图片转成字符串\"></a>python 图片转成字符串</h2><a id=\"more\"></a>\n\n<h3 id=\"下面是原始图片\"><a href=\"#下面是原始图片\" class=\"headerlink\" title=\"下面是原始图片\"></a>下面是原始图片</h3><p><img src=\"/image/crawl/red_heart.jpg\" alt=\"红心\"></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\">ascii_char = list(<span class=\"string\">\"$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\\\"^`'. \"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">WIDTH = <span class=\"number\">85</span> <span class=\"comment\"># 字符画的宽</span></span><br><span class=\"line\">HEIGHT = <span class=\"number\">25</span> <span class=\"comment\"># 字符画的高</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将256灰度映射到70个字符上，也就是RGB值转字符的函数：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_char</span><span class=\"params\">(r, g, b, alpha=<span class=\"number\">256</span>)</span>:</span>  <span class=\"comment\"># alpha透明度</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> alpha == <span class=\"number\">0</span>:</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">' '</span></span><br><span class=\"line\">   length = len(ascii_char)</span><br><span class=\"line\">   gray = int(<span class=\"number\">0.2126</span> * r + <span class=\"number\">0.7152</span> * g + <span class=\"number\">0.0722</span> * b)  <span class=\"comment\"># 计算灰度</span></span><br><span class=\"line\">   unit = (<span class=\"number\">256.0</span> + <span class=\"number\">1</span>) / length</span><br><span class=\"line\">   <span class=\"keyword\">return</span> ascii_char[int(gray / unit)]  <span class=\"comment\"># 不同的灰度对应着不同的字符</span></span><br><span class=\"line\">   <span class=\"comment\"># 通过灰度来区分色块</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">   img = <span class=\"string\">'./15.jpg'</span> <span class=\"comment\"># 图片所在位置</span></span><br><span class=\"line\">   im = Image.open(img)</span><br><span class=\"line\">   im = im.resize((WIDTH, HEIGHT), Image.NEAREST)</span><br><span class=\"line\">   txt = <span class=\"string\">\"\"</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(HEIGHT):</span><br><span class=\"line\">       <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(WIDTH):</span><br><span class=\"line\">           txt += get_char(*im.getpixel((j, i))) <span class=\"comment\"># 获得相应的字符</span></span><br><span class=\"line\">       txt += <span class=\"string\">'\\n'</span></span><br><span class=\"line\">   print(txt)  <span class=\"comment\"># 打印出字符画</span></span><br><span class=\"line\">   <span class=\"comment\"># 将字符画 写入文件中</span></span><br><span class=\"line\">   <span class=\"keyword\">with</span> open(<span class=\"string\">\"15.txt\"</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">       f.write(txt)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转换后的效果\"><a href=\"#转换后的效果\" class=\"headerlink\" title=\"转换后的效果\"></a>转换后的效果</h3><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                                                                </span><br><span class=\"line\">           .uahZO000Okhhw^.                  ..'hhhhhhkqZwk`'.                  </span><br><span class=\"line\">       'phkbddppJJJJmdppddbkb&lt;             aZ0ZqQppppOOdppddbkhk.               </span><br><span class=\"line\">     .hkbddpppmJCpppp0JJQppJCqbk`      'mZ0dpppppJCJJJppppppppddbk:.            </span><br><span class=\"line\">   .mZbdpppppUJpppppppppJJpppLJCQO.   hbQCppppppLJOJJJJppppppppppdbk.           </span><br><span class=\"line\">  .hkdpZppZJJJZpppppppppppppdJJJddbkIhbdpppppppdJJJJJCJJCJJJJJpppppbk,          </span><br><span class=\"line\">  mbbppppppCJJJppppppppppppppppCppdddddpppppppppppJJJJJLppppppJJJ0q0L0.         </span><br><span class=\"line\">.,OLLpppLJqCJCCJppppppppppppppppppppppppppppppppppCppppppppppOJdppppCQ0         </span><br><span class=\"line\">.p0LJCCmppppqCJJwppppppppppZJJLppppppppppppppppppJJppppppppppJJJCqpppL0.        </span><br><span class=\"line\"> mkddppppppppppLJpppppqCJJpppJqpppppppppppJJJJCCJJJJJJJJJJJCqJJqCJJJJLQ         </span><br><span class=\"line\"> .kbdppppppppppJpppppppJmpppp0JdpppppppppwJCJpwJZpppppCJJJJdpppppJppdb[         </span><br><span class=\"line\">  lkbdpppwOqQJJCppppppppppOJJJJJJppppppCJOJpJJCpppppppppJJJpppppppppdq.         </span><br><span class=\"line\">   .kbdpppJwpdJLppppppppppCJCdppJJJppppppJJJppppJJJLppppJJJJJqpppdbk.           </span><br><span class=\"line\">     .kpCJqpppdOZOCLJJJJJJJJJppdJJppppppppJqp0JJJLppppppppppppdCdQ.             </span><br><span class=\"line\">       .<span class=\"string\">\"dbdppppJJJpCdCwpppppppppJJpppppppppppppJZppppppppppdbd'.               </span></span><br><span class=\"line\">            kkbLJppppwJJCppppppJJJJJppppppppppppJpppppppdbbm..                  </span><br><span class=\"line\">               .rkbddpppJJJJJCJJJpCJ0ppZLJJJJJJJJdpddpb^                        </span><br><span class=\"line\">                    .kbbpppppJJJqpppppppppppppppCQw'.                           </span><br><span class=\"line\">                        ^kbddppJppppppppppppdbkt.                               </span><br><span class=\"line\">                          .:hbdpppppppppppdb`.                                  </span><br><span class=\"line\">                              .kbdpppppdba.                                     </span><br><span class=\"line\">                                .kbbddb'                                        </span><br><span class=\"line\">                                  .ah..</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"python-图片转成字符串\"><a href=\"#python-图片转成字符串\" class=\"headerlink\" title=\"python 图片转成字符串\"></a>python 图片转成字符串</h2>","more":"<h3 id=\"下面是原始图片\"><a href=\"#下面是原始图片\" class=\"headerlink\" title=\"下面是原始图片\"></a>下面是原始图片</h3><p><img src=\"/image/crawl/red_heart.jpg\" alt=\"红心\"></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\">ascii_char = list(<span class=\"string\">\"$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\\\"^`'. \"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">WIDTH = <span class=\"number\">85</span> <span class=\"comment\"># 字符画的宽</span></span><br><span class=\"line\">HEIGHT = <span class=\"number\">25</span> <span class=\"comment\"># 字符画的高</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将256灰度映射到70个字符上，也就是RGB值转字符的函数：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_char</span><span class=\"params\">(r, g, b, alpha=<span class=\"number\">256</span>)</span>:</span>  <span class=\"comment\"># alpha透明度</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> alpha == <span class=\"number\">0</span>:</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">' '</span></span><br><span class=\"line\">   length = len(ascii_char)</span><br><span class=\"line\">   gray = int(<span class=\"number\">0.2126</span> * r + <span class=\"number\">0.7152</span> * g + <span class=\"number\">0.0722</span> * b)  <span class=\"comment\"># 计算灰度</span></span><br><span class=\"line\">   unit = (<span class=\"number\">256.0</span> + <span class=\"number\">1</span>) / length</span><br><span class=\"line\">   <span class=\"keyword\">return</span> ascii_char[int(gray / unit)]  <span class=\"comment\"># 不同的灰度对应着不同的字符</span></span><br><span class=\"line\">   <span class=\"comment\"># 通过灰度来区分色块</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">   img = <span class=\"string\">'./15.jpg'</span> <span class=\"comment\"># 图片所在位置</span></span><br><span class=\"line\">   im = Image.open(img)</span><br><span class=\"line\">   im = im.resize((WIDTH, HEIGHT), Image.NEAREST)</span><br><span class=\"line\">   txt = <span class=\"string\">\"\"</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(HEIGHT):</span><br><span class=\"line\">       <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(WIDTH):</span><br><span class=\"line\">           txt += get_char(*im.getpixel((j, i))) <span class=\"comment\"># 获得相应的字符</span></span><br><span class=\"line\">       txt += <span class=\"string\">'\\n'</span></span><br><span class=\"line\">   print(txt)  <span class=\"comment\"># 打印出字符画</span></span><br><span class=\"line\">   <span class=\"comment\"># 将字符画 写入文件中</span></span><br><span class=\"line\">   <span class=\"keyword\">with</span> open(<span class=\"string\">\"15.txt\"</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">       f.write(txt)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转换后的效果\"><a href=\"#转换后的效果\" class=\"headerlink\" title=\"转换后的效果\"></a>转换后的效果</h3><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                                                                </span><br><span class=\"line\">           .uahZO000Okhhw^.                  ..'hhhhhhkqZwk`'.                  </span><br><span class=\"line\">       'phkbddppJJJJmdppddbkb&lt;             aZ0ZqQppppOOdppddbkhk.               </span><br><span class=\"line\">     .hkbddpppmJCpppp0JJQppJCqbk`      'mZ0dpppppJCJJJppppppppddbk:.            </span><br><span class=\"line\">   .mZbdpppppUJpppppppppJJpppLJCQO.   hbQCppppppLJOJJJJppppppppppdbk.           </span><br><span class=\"line\">  .hkdpZppZJJJZpppppppppppppdJJJddbkIhbdpppppppdJJJJJCJJCJJJJJpppppbk,          </span><br><span class=\"line\">  mbbppppppCJJJppppppppppppppppCppdddddpppppppppppJJJJJLppppppJJJ0q0L0.         </span><br><span class=\"line\">.,OLLpppLJqCJCCJppppppppppppppppppppppppppppppppppCppppppppppOJdppppCQ0         </span><br><span class=\"line\">.p0LJCCmppppqCJJwppppppppppZJJLppppppppppppppppppJJppppppppppJJJCqpppL0.        </span><br><span class=\"line\"> mkddppppppppppLJpppppqCJJpppJqpppppppppppJJJJCCJJJJJJJJJJJCqJJqCJJJJLQ         </span><br><span class=\"line\"> .kbdppppppppppJpppppppJmpppp0JdpppppppppwJCJpwJZpppppCJJJJdpppppJppdb[         </span><br><span class=\"line\">  lkbdpppwOqQJJCppppppppppOJJJJJJppppppCJOJpJJCpppppppppJJJpppppppppdq.         </span><br><span class=\"line\">   .kbdpppJwpdJLppppppppppCJCdppJJJppppppJJJppppJJJLppppJJJJJqpppdbk.           </span><br><span class=\"line\">     .kpCJqpppdOZOCLJJJJJJJJJppdJJppppppppJqp0JJJLppppppppppppdCdQ.             </span><br><span class=\"line\">       .<span class=\"string\">\"dbdppppJJJpCdCwpppppppppJJpppppppppppppJZppppppppppdbd'.               </span></span><br><span class=\"line\">            kkbLJppppwJJCppppppJJJJJppppppppppppJpppppppdbbm..                  </span><br><span class=\"line\">               .rkbddpppJJJJJCJJJpCJ0ppZLJJJJJJJJdpddpb^                        </span><br><span class=\"line\">                    .kbbpppppJJJqpppppppppppppppCQw'.                           </span><br><span class=\"line\">                        ^kbddppJppppppppppppdbkt.                               </span><br><span class=\"line\">                          .:hbdpppppppppppdb`.                                  </span><br><span class=\"line\">                              .kbdpppppdba.                                     </span><br><span class=\"line\">                                .kbbddb'                                        </span><br><span class=\"line\">                                  .ah..</span><br></pre></td></tr></table></figure>"},{"title":"python字典多次嵌套","type":"categories","copyright":true,"date":"2020-01-02T03:15:28.000Z","_content":"\n## python实现字典多层嵌套\n\n```python\n# 对于字典\ndict1 = {\"a\":1, \"b\":2, \"c.1\":3, \"c.2\":4, \"d.5.2\":5, \"d.5.3\":6, \"d.4.1\":7}\n\n# 将其实现多次嵌套效果\ndict2 = {'a': 1, 'b': 2, 'c': {'1': 3, '2': 4}, \n        'd': {'5': {'2': 5, '3': 6}, '4': {'1': 7}}}\n```\n<!--more-->\n\n### 解决方案\n```python\nd1 = {\"a\":1, \"b\":2, \"c.1\":3, \"c.2\":4, \"d.5.2\":5, \"d.5.3\":6, \"d.4.1\":7}\nd2 = {}\n\ndef fun(d1):\n    for key, value in d1.items():\n        if '.' in key:\n            parts = key.split('.')\n            par = d2\n            key = parts.pop(0)\n            print('==========', key)\n            while parts:\n                par = par.setdefault(key, {})\n                print(par)\n                key = parts.pop(0)\n            par[key] = value\n            print(par)\n        else:\n        d2[key] = value\n\nfun(d1)\nprint(d2)\n```\n\n### 其中用到了字典的setdefault方法\n\n```python\ndict.setdefault(key,default=None)\n```\n如果键不存在于字典中，将会添加新的键，并将值设置为默认值；如果字典中包含该给定的键，则返回该键对应的值，否则返回该键设置的默认值。\n\n### get方法\ndict.get(key,default=None)\nget方法返回给定键的值，如果键不可用返回默认值；\n\n### collection defaultdict\ndefaultdict()返回一个字典，自动给每一个键赋一个初始值\n\n\n*参考链接地址：https://blog.csdn.net/whgyxy/article/details/72458000*\n","source":"_posts/python字典多次嵌套.md","raw":"---\ntitle: python字典多次嵌套\ntype: categories\ncopyright: true\ndate: 2020-01-02 11:15:28\ntags:\n    - python\ncategories: python\n---\n\n## python实现字典多层嵌套\n\n```python\n# 对于字典\ndict1 = {\"a\":1, \"b\":2, \"c.1\":3, \"c.2\":4, \"d.5.2\":5, \"d.5.3\":6, \"d.4.1\":7}\n\n# 将其实现多次嵌套效果\ndict2 = {'a': 1, 'b': 2, 'c': {'1': 3, '2': 4}, \n        'd': {'5': {'2': 5, '3': 6}, '4': {'1': 7}}}\n```\n<!--more-->\n\n### 解决方案\n```python\nd1 = {\"a\":1, \"b\":2, \"c.1\":3, \"c.2\":4, \"d.5.2\":5, \"d.5.3\":6, \"d.4.1\":7}\nd2 = {}\n\ndef fun(d1):\n    for key, value in d1.items():\n        if '.' in key:\n            parts = key.split('.')\n            par = d2\n            key = parts.pop(0)\n            print('==========', key)\n            while parts:\n                par = par.setdefault(key, {})\n                print(par)\n                key = parts.pop(0)\n            par[key] = value\n            print(par)\n        else:\n        d2[key] = value\n\nfun(d1)\nprint(d2)\n```\n\n### 其中用到了字典的setdefault方法\n\n```python\ndict.setdefault(key,default=None)\n```\n如果键不存在于字典中，将会添加新的键，并将值设置为默认值；如果字典中包含该给定的键，则返回该键对应的值，否则返回该键设置的默认值。\n\n### get方法\ndict.get(key,default=None)\nget方法返回给定键的值，如果键不可用返回默认值；\n\n### collection defaultdict\ndefaultdict()返回一个字典，自动给每一个键赋一个初始值\n\n\n*参考链接地址：https://blog.csdn.net/whgyxy/article/details/72458000*\n","slug":"python字典多次嵌套","published":1,"updated":"2022-02-25T08:37:09.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77yh001fhvx34b7hfgul","content":"<h2 id=\"python实现字典多层嵌套\"><a href=\"#python实现字典多层嵌套\" class=\"headerlink\" title=\"python实现字典多层嵌套\"></a>python实现字典多层嵌套</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对于字典</span></span><br><span class=\"line\">dict1 = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>, <span class=\"string\">\"c.1\"</span>:<span class=\"number\">3</span>, <span class=\"string\">\"c.2\"</span>:<span class=\"number\">4</span>, <span class=\"string\">\"d.5.2\"</span>:<span class=\"number\">5</span>, <span class=\"string\">\"d.5.3\"</span>:<span class=\"number\">6</span>, <span class=\"string\">\"d.4.1\"</span>:<span class=\"number\">7</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将其实现多次嵌套效果</span></span><br><span class=\"line\">dict2 = &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>, <span class=\"string\">'c'</span>: &#123;<span class=\"string\">'1'</span>: <span class=\"number\">3</span>, <span class=\"string\">'2'</span>: <span class=\"number\">4</span>&#125;, </span><br><span class=\"line\">        <span class=\"string\">'d'</span>: &#123;<span class=\"string\">'5'</span>: &#123;<span class=\"string\">'2'</span>: <span class=\"number\">5</span>, <span class=\"string\">'3'</span>: <span class=\"number\">6</span>&#125;, <span class=\"string\">'4'</span>: &#123;<span class=\"string\">'1'</span>: <span class=\"number\">7</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d1 = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>, <span class=\"string\">\"c.1\"</span>:<span class=\"number\">3</span>, <span class=\"string\">\"c.2\"</span>:<span class=\"number\">4</span>, <span class=\"string\">\"d.5.2\"</span>:<span class=\"number\">5</span>, <span class=\"string\">\"d.5.3\"</span>:<span class=\"number\">6</span>, <span class=\"string\">\"d.4.1\"</span>:<span class=\"number\">7</span>&#125;</span><br><span class=\"line\">d2 = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun</span><span class=\"params\">(d1)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> d1.items():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'.'</span> <span class=\"keyword\">in</span> key:</span><br><span class=\"line\">            parts = key.split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">            par = d2</span><br><span class=\"line\">            key = parts.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            print(<span class=\"string\">'=========='</span>, key)</span><br><span class=\"line\">            <span class=\"keyword\">while</span> parts:</span><br><span class=\"line\">                par = par.setdefault(key, &#123;&#125;)</span><br><span class=\"line\">                print(par)</span><br><span class=\"line\">                key = parts.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            par[key] = value</span><br><span class=\"line\">            print(par)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        d2[key] = value</span><br><span class=\"line\"></span><br><span class=\"line\">fun(d1)</span><br><span class=\"line\">print(d2)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其中用到了字典的setdefault方法\"><a href=\"#其中用到了字典的setdefault方法\" class=\"headerlink\" title=\"其中用到了字典的setdefault方法\"></a>其中用到了字典的setdefault方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict.setdefault(key,default=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<p>如果键不存在于字典中，将会添加新的键，并将值设置为默认值；如果字典中包含该给定的键，则返回该键对应的值，否则返回该键设置的默认值。</p>\n<h3 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h3><p>dict.get(key,default=None)<br>get方法返回给定键的值，如果键不可用返回默认值；</p>\n<h3 id=\"collection-defaultdict\"><a href=\"#collection-defaultdict\" class=\"headerlink\" title=\"collection defaultdict\"></a>collection defaultdict</h3><p>defaultdict()返回一个字典，自动给每一个键赋一个初始值</p>\n<p><em>参考链接地址：<a href=\"https://blog.csdn.net/whgyxy/article/details/72458000\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/whgyxy/article/details/72458000</a></em></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"python实现字典多层嵌套\"><a href=\"#python实现字典多层嵌套\" class=\"headerlink\" title=\"python实现字典多层嵌套\"></a>python实现字典多层嵌套</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对于字典</span></span><br><span class=\"line\">dict1 = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>, <span class=\"string\">\"c.1\"</span>:<span class=\"number\">3</span>, <span class=\"string\">\"c.2\"</span>:<span class=\"number\">4</span>, <span class=\"string\">\"d.5.2\"</span>:<span class=\"number\">5</span>, <span class=\"string\">\"d.5.3\"</span>:<span class=\"number\">6</span>, <span class=\"string\">\"d.4.1\"</span>:<span class=\"number\">7</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将其实现多次嵌套效果</span></span><br><span class=\"line\">dict2 = &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>, <span class=\"string\">'c'</span>: &#123;<span class=\"string\">'1'</span>: <span class=\"number\">3</span>, <span class=\"string\">'2'</span>: <span class=\"number\">4</span>&#125;, </span><br><span class=\"line\">        <span class=\"string\">'d'</span>: &#123;<span class=\"string\">'5'</span>: &#123;<span class=\"string\">'2'</span>: <span class=\"number\">5</span>, <span class=\"string\">'3'</span>: <span class=\"number\">6</span>&#125;, <span class=\"string\">'4'</span>: &#123;<span class=\"string\">'1'</span>: <span class=\"number\">7</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d1 = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>, <span class=\"string\">\"c.1\"</span>:<span class=\"number\">3</span>, <span class=\"string\">\"c.2\"</span>:<span class=\"number\">4</span>, <span class=\"string\">\"d.5.2\"</span>:<span class=\"number\">5</span>, <span class=\"string\">\"d.5.3\"</span>:<span class=\"number\">6</span>, <span class=\"string\">\"d.4.1\"</span>:<span class=\"number\">7</span>&#125;</span><br><span class=\"line\">d2 = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun</span><span class=\"params\">(d1)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> d1.items():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'.'</span> <span class=\"keyword\">in</span> key:</span><br><span class=\"line\">            parts = key.split(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">            par = d2</span><br><span class=\"line\">            key = parts.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            print(<span class=\"string\">'=========='</span>, key)</span><br><span class=\"line\">            <span class=\"keyword\">while</span> parts:</span><br><span class=\"line\">                par = par.setdefault(key, &#123;&#125;)</span><br><span class=\"line\">                print(par)</span><br><span class=\"line\">                key = parts.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            par[key] = value</span><br><span class=\"line\">            print(par)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        d2[key] = value</span><br><span class=\"line\"></span><br><span class=\"line\">fun(d1)</span><br><span class=\"line\">print(d2)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其中用到了字典的setdefault方法\"><a href=\"#其中用到了字典的setdefault方法\" class=\"headerlink\" title=\"其中用到了字典的setdefault方法\"></a>其中用到了字典的setdefault方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict.setdefault(key,default=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<p>如果键不存在于字典中，将会添加新的键，并将值设置为默认值；如果字典中包含该给定的键，则返回该键对应的值，否则返回该键设置的默认值。</p>\n<h3 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h3><p>dict.get(key,default=None)<br>get方法返回给定键的值，如果键不可用返回默认值；</p>\n<h3 id=\"collection-defaultdict\"><a href=\"#collection-defaultdict\" class=\"headerlink\" title=\"collection defaultdict\"></a>collection defaultdict</h3><p>defaultdict()返回一个字典，自动给每一个键赋一个初始值</p>\n<p><em>参考链接地址：<a href=\"https://blog.csdn.net/whgyxy/article/details/72458000\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/whgyxy/article/details/72458000</a></em></p>"},{"title":"python版布隆过滤器","type":"categories","copyright":true,"date":"2019-12-31T09:18:06.000Z","_content":"\n## 布隆过滤器介绍\n本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure），特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存在”。\n\n相比于传统的 List、Set、Map 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。\n\n<!--more-->\n## 代码实现\n### 首先导包\n```python\n# -*-conding: utf8 -*-\nimport hashlib\nimport six\nimport redis\n```\n\n### 定义哈希Map类\n```python\nclass MultipleHash(object):\n    \"\"\"根据提供的原始数据，和预定义的多个salt，生成多个hash值\"\"\"\n    def __init__(self, salts, hash_func_name='md5'):\n        self.hash_func = getattr(hashlib, hash_func_name)\n        if len(salts) < 3:\n            raise Exception(\"please provide more than 3 element(salt) in the salts\")\n        self.salts = salts\n\n    def _safe_data(self, data):\n        \"\"\"\n        :param data: 原始数据\n        :return: 处理成对应python版本可以被hash函数的update方法解析的数据\n        \"\"\"\n        if six.PY3:\n            if isinstance(data, str):\n                return data.encode()\n            elif isinstance(data, bytes):\n                return data\n            else:\n                raise Exception(\"please provide a right str data\")\n        else:\n            if isinstance(data, unicode):\n                return data.encode()\n            elif isinstance(data, str):\n                return data\n            else:\n                raise  Exception(\"please provide a right str data\")\n\n    def get_hash_values(self, data):\n        \"\"\"根据提供的原始数据, 返回多个hash函数值\"\"\"\n        hash_values = []\n        hash_obj = self.hash_func()\n        for salt in self.salts:\n            hash_obj.update(self._safe_data(data))\n            hash_obj.update(self._safe_data(salt))\n            ret = hash_obj.hexdigest()\n            hash_values.append(int(ret, 16))\n        return hash_values\n```\n\n### 定义布隆过滤器\n```python\nclass BloomFilter(object):\n    \"\"\"布隆过滤器\"\"\"\n    def __init__(self, salts, redis_host=\"localhost\", redis_port=6379, redis_db=0, redis_key=\"bloomfilter\"):\n        self.redis_host = redis_host\n        self.redis_port = redis_port\n        self.redis_db = redis_db\n        self.redis_key = redis_key\n        self.client = self._get_redis_cli()\n        self.multiple_hash = MultipleHash(salts=salts)\n\n    def _get_redis_cli(self):\n        \"\"\"返回一个redis连接对象\"\"\"\n        pool = redis.ConnectionPool(host=self.redis_host, port=self.redis_port, db=self.redis_db)\n        client = redis.StrictRedis(connection_pool=pool)\n        return client\n\n    def save(self, data):\n        hash_values = self.multiple_hash.get_hash_values(data)\n        for hash_value in hash_values:\n            offset = self._get_offset(hash_value)\n            self.client.setbit(self.redis_key, offset, 1)  # default 0, set 1 when match\n        return True\n\n    def _get_offset(self, hash_value):\n        # (2**9 * 2**20 * 2**3): the len of hash list 哈希表的长度\n        return hash_value % (2**9 * 2**20 * 2**3)  # Mb -> bit\n        \n    def is_exists(self, data):\n        hash_values = self.multiple_hash.get_hash_values(data)\n        for hash_value in hash_values:\n            offset = self._get_offset(hash_value)\n            v = self.client.getbit(self.redis_key, offset)\n            if v == 0:\n                self.save(data)  # 如果不存在，保存数据\n                return False\n        return True\n```\n\n### 过滤器的使用\n```python\ndata = [\"asfdsafweafxc\", \"123\", \"123\", \"hello\", \"hello\", 'haha']\n    bm = BloomFilter(salts=['1', '2', '3', '4'], redis_host=\"10.0.12.191\", redis_db=1)\n    for d in data:\n        if not bm.is_exists(d):\n            print(\"mapping data success : %s\" % d)\n        else:\n            print(\"find replace data : %s\" % d)\n```\n","source":"_posts/python版布隆过滤器.md","raw":"---\ntitle: python版布隆过滤器\ntype: categories\ncopyright: true\ndate: 2019-12-31 17:18:06\ntags:\n    - python\ncategories: python\n---\n\n## 布隆过滤器介绍\n本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure），特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存在”。\n\n相比于传统的 List、Set、Map 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。\n\n<!--more-->\n## 代码实现\n### 首先导包\n```python\n# -*-conding: utf8 -*-\nimport hashlib\nimport six\nimport redis\n```\n\n### 定义哈希Map类\n```python\nclass MultipleHash(object):\n    \"\"\"根据提供的原始数据，和预定义的多个salt，生成多个hash值\"\"\"\n    def __init__(self, salts, hash_func_name='md5'):\n        self.hash_func = getattr(hashlib, hash_func_name)\n        if len(salts) < 3:\n            raise Exception(\"please provide more than 3 element(salt) in the salts\")\n        self.salts = salts\n\n    def _safe_data(self, data):\n        \"\"\"\n        :param data: 原始数据\n        :return: 处理成对应python版本可以被hash函数的update方法解析的数据\n        \"\"\"\n        if six.PY3:\n            if isinstance(data, str):\n                return data.encode()\n            elif isinstance(data, bytes):\n                return data\n            else:\n                raise Exception(\"please provide a right str data\")\n        else:\n            if isinstance(data, unicode):\n                return data.encode()\n            elif isinstance(data, str):\n                return data\n            else:\n                raise  Exception(\"please provide a right str data\")\n\n    def get_hash_values(self, data):\n        \"\"\"根据提供的原始数据, 返回多个hash函数值\"\"\"\n        hash_values = []\n        hash_obj = self.hash_func()\n        for salt in self.salts:\n            hash_obj.update(self._safe_data(data))\n            hash_obj.update(self._safe_data(salt))\n            ret = hash_obj.hexdigest()\n            hash_values.append(int(ret, 16))\n        return hash_values\n```\n\n### 定义布隆过滤器\n```python\nclass BloomFilter(object):\n    \"\"\"布隆过滤器\"\"\"\n    def __init__(self, salts, redis_host=\"localhost\", redis_port=6379, redis_db=0, redis_key=\"bloomfilter\"):\n        self.redis_host = redis_host\n        self.redis_port = redis_port\n        self.redis_db = redis_db\n        self.redis_key = redis_key\n        self.client = self._get_redis_cli()\n        self.multiple_hash = MultipleHash(salts=salts)\n\n    def _get_redis_cli(self):\n        \"\"\"返回一个redis连接对象\"\"\"\n        pool = redis.ConnectionPool(host=self.redis_host, port=self.redis_port, db=self.redis_db)\n        client = redis.StrictRedis(connection_pool=pool)\n        return client\n\n    def save(self, data):\n        hash_values = self.multiple_hash.get_hash_values(data)\n        for hash_value in hash_values:\n            offset = self._get_offset(hash_value)\n            self.client.setbit(self.redis_key, offset, 1)  # default 0, set 1 when match\n        return True\n\n    def _get_offset(self, hash_value):\n        # (2**9 * 2**20 * 2**3): the len of hash list 哈希表的长度\n        return hash_value % (2**9 * 2**20 * 2**3)  # Mb -> bit\n        \n    def is_exists(self, data):\n        hash_values = self.multiple_hash.get_hash_values(data)\n        for hash_value in hash_values:\n            offset = self._get_offset(hash_value)\n            v = self.client.getbit(self.redis_key, offset)\n            if v == 0:\n                self.save(data)  # 如果不存在，保存数据\n                return False\n        return True\n```\n\n### 过滤器的使用\n```python\ndata = [\"asfdsafweafxc\", \"123\", \"123\", \"hello\", \"hello\", 'haha']\n    bm = BloomFilter(salts=['1', '2', '3', '4'], redis_host=\"10.0.12.191\", redis_db=1)\n    for d in data:\n        if not bm.is_exists(d):\n            print(\"mapping data success : %s\" % d)\n        else:\n            print(\"find replace data : %s\" % d)\n```\n","slug":"python版布隆过滤器","published":1,"updated":"2022-02-25T08:37:09.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77yi001ihvx3cebb963x","content":"<h2 id=\"布隆过滤器介绍\"><a href=\"#布隆过滤器介绍\" class=\"headerlink\" title=\"布隆过滤器介绍\"></a>布隆过滤器介绍</h2><p>本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure），特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存在”。</p>\n<p>相比于传统的 List、Set、Map 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。</p>\n<a id=\"more\"></a>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"首先导包\"><a href=\"#首先导包\" class=\"headerlink\" title=\"首先导包\"></a>首先导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*-conding: utf8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> six</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义哈希Map类\"><a href=\"#定义哈希Map类\" class=\"headerlink\" title=\"定义哈希Map类\"></a>定义哈希Map类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultipleHash</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"根据提供的原始数据，和预定义的多个salt，生成多个hash值\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, salts, hash_func_name=<span class=\"string\">'md5'</span>)</span>:</span></span><br><span class=\"line\">        self.hash_func = getattr(hashlib, hash_func_name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(salts) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"please provide more than 3 element(salt) in the salts\"</span>)</span><br><span class=\"line\">        self.salts = salts</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_safe_data</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :param data: 原始数据</span></span><br><span class=\"line\"><span class=\"string\">        :return: 处理成对应python版本可以被hash函数的update方法解析的数据</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> six.PY3:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(data, str):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data.encode()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> isinstance(data, bytes):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"please provide a right str data\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(data, unicode):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data.encode()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> isinstance(data, str):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span>  Exception(<span class=\"string\">\"please provide a right str data\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_hash_values</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"根据提供的原始数据, 返回多个hash函数值\"\"\"</span></span><br><span class=\"line\">        hash_values = []</span><br><span class=\"line\">        hash_obj = self.hash_func()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> salt <span class=\"keyword\">in</span> self.salts:</span><br><span class=\"line\">            hash_obj.update(self._safe_data(data))</span><br><span class=\"line\">            hash_obj.update(self._safe_data(salt))</span><br><span class=\"line\">            ret = hash_obj.hexdigest()</span><br><span class=\"line\">            hash_values.append(int(ret, <span class=\"number\">16</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash_values</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义布隆过滤器\"><a href=\"#定义布隆过滤器\" class=\"headerlink\" title=\"定义布隆过滤器\"></a>定义布隆过滤器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BloomFilter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"布隆过滤器\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, salts, redis_host=<span class=\"string\">\"localhost\"</span>, redis_port=<span class=\"number\">6379</span>, redis_db=<span class=\"number\">0</span>, redis_key=<span class=\"string\">\"bloomfilter\"</span>)</span>:</span></span><br><span class=\"line\">        self.redis_host = redis_host</span><br><span class=\"line\">        self.redis_port = redis_port</span><br><span class=\"line\">        self.redis_db = redis_db</span><br><span class=\"line\">        self.redis_key = redis_key</span><br><span class=\"line\">        self.client = self._get_redis_cli()</span><br><span class=\"line\">        self.multiple_hash = MultipleHash(salts=salts)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_redis_cli</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"返回一个redis连接对象\"\"\"</span></span><br><span class=\"line\">        pool = redis.ConnectionPool(host=self.redis_host, port=self.redis_port, db=self.redis_db)</span><br><span class=\"line\">        client = redis.StrictRedis(connection_pool=pool)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> client</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        hash_values = self.multiple_hash.get_hash_values(data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> hash_value <span class=\"keyword\">in</span> hash_values:</span><br><span class=\"line\">            offset = self._get_offset(hash_value)</span><br><span class=\"line\">            self.client.setbit(self.redis_key, offset, <span class=\"number\">1</span>)  <span class=\"comment\"># default 0, set 1 when match</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_offset</span><span class=\"params\">(self, hash_value)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># (2**9 * 2**20 * 2**3): the len of hash list 哈希表的长度</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash_value % (<span class=\"number\">2</span>**<span class=\"number\">9</span> * <span class=\"number\">2</span>**<span class=\"number\">20</span> * <span class=\"number\">2</span>**<span class=\"number\">3</span>)  <span class=\"comment\"># Mb -&gt; bit</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_exists</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        hash_values = self.multiple_hash.get_hash_values(data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> hash_value <span class=\"keyword\">in</span> hash_values:</span><br><span class=\"line\">            offset = self._get_offset(hash_value)</span><br><span class=\"line\">            v = self.client.getbit(self.redis_key, offset)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> v == <span class=\"number\">0</span>:</span><br><span class=\"line\">                self.save(data)  <span class=\"comment\"># 如果不存在，保存数据</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"过滤器的使用\"><a href=\"#过滤器的使用\" class=\"headerlink\" title=\"过滤器的使用\"></a>过滤器的使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = [<span class=\"string\">\"asfdsafweafxc\"</span>, <span class=\"string\">\"123\"</span>, <span class=\"string\">\"123\"</span>, <span class=\"string\">\"hello\"</span>, <span class=\"string\">\"hello\"</span>, <span class=\"string\">'haha'</span>]</span><br><span class=\"line\">    bm = BloomFilter(salts=[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>], redis_host=<span class=\"string\">\"10.0.12.191\"</span>, redis_db=<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> bm.is_exists(d):</span><br><span class=\"line\">            print(<span class=\"string\">\"mapping data success : %s\"</span> % d)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"find replace data : %s\"</span> % d)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"布隆过滤器介绍\"><a href=\"#布隆过滤器介绍\" class=\"headerlink\" title=\"布隆过滤器介绍\"></a>布隆过滤器介绍</h2><p>本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure），特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存在”。</p>\n<p>相比于传统的 List、Set、Map 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。</p>","more":"<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"首先导包\"><a href=\"#首先导包\" class=\"headerlink\" title=\"首先导包\"></a>首先导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*-conding: utf8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> six</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义哈希Map类\"><a href=\"#定义哈希Map类\" class=\"headerlink\" title=\"定义哈希Map类\"></a>定义哈希Map类</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultipleHash</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"根据提供的原始数据，和预定义的多个salt，生成多个hash值\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, salts, hash_func_name=<span class=\"string\">'md5'</span>)</span>:</span></span><br><span class=\"line\">        self.hash_func = getattr(hashlib, hash_func_name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(salts) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"please provide more than 3 element(salt) in the salts\"</span>)</span><br><span class=\"line\">        self.salts = salts</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_safe_data</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :param data: 原始数据</span></span><br><span class=\"line\"><span class=\"string\">        :return: 处理成对应python版本可以被hash函数的update方法解析的数据</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> six.PY3:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(data, str):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data.encode()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> isinstance(data, bytes):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"please provide a right str data\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(data, unicode):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data.encode()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> isinstance(data, str):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span>  Exception(<span class=\"string\">\"please provide a right str data\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_hash_values</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"根据提供的原始数据, 返回多个hash函数值\"\"\"</span></span><br><span class=\"line\">        hash_values = []</span><br><span class=\"line\">        hash_obj = self.hash_func()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> salt <span class=\"keyword\">in</span> self.salts:</span><br><span class=\"line\">            hash_obj.update(self._safe_data(data))</span><br><span class=\"line\">            hash_obj.update(self._safe_data(salt))</span><br><span class=\"line\">            ret = hash_obj.hexdigest()</span><br><span class=\"line\">            hash_values.append(int(ret, <span class=\"number\">16</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash_values</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义布隆过滤器\"><a href=\"#定义布隆过滤器\" class=\"headerlink\" title=\"定义布隆过滤器\"></a>定义布隆过滤器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BloomFilter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"布隆过滤器\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, salts, redis_host=<span class=\"string\">\"localhost\"</span>, redis_port=<span class=\"number\">6379</span>, redis_db=<span class=\"number\">0</span>, redis_key=<span class=\"string\">\"bloomfilter\"</span>)</span>:</span></span><br><span class=\"line\">        self.redis_host = redis_host</span><br><span class=\"line\">        self.redis_port = redis_port</span><br><span class=\"line\">        self.redis_db = redis_db</span><br><span class=\"line\">        self.redis_key = redis_key</span><br><span class=\"line\">        self.client = self._get_redis_cli()</span><br><span class=\"line\">        self.multiple_hash = MultipleHash(salts=salts)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_redis_cli</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"返回一个redis连接对象\"\"\"</span></span><br><span class=\"line\">        pool = redis.ConnectionPool(host=self.redis_host, port=self.redis_port, db=self.redis_db)</span><br><span class=\"line\">        client = redis.StrictRedis(connection_pool=pool)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> client</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        hash_values = self.multiple_hash.get_hash_values(data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> hash_value <span class=\"keyword\">in</span> hash_values:</span><br><span class=\"line\">            offset = self._get_offset(hash_value)</span><br><span class=\"line\">            self.client.setbit(self.redis_key, offset, <span class=\"number\">1</span>)  <span class=\"comment\"># default 0, set 1 when match</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_offset</span><span class=\"params\">(self, hash_value)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># (2**9 * 2**20 * 2**3): the len of hash list 哈希表的长度</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> hash_value % (<span class=\"number\">2</span>**<span class=\"number\">9</span> * <span class=\"number\">2</span>**<span class=\"number\">20</span> * <span class=\"number\">2</span>**<span class=\"number\">3</span>)  <span class=\"comment\"># Mb -&gt; bit</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_exists</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        hash_values = self.multiple_hash.get_hash_values(data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> hash_value <span class=\"keyword\">in</span> hash_values:</span><br><span class=\"line\">            offset = self._get_offset(hash_value)</span><br><span class=\"line\">            v = self.client.getbit(self.redis_key, offset)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> v == <span class=\"number\">0</span>:</span><br><span class=\"line\">                self.save(data)  <span class=\"comment\"># 如果不存在，保存数据</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"过滤器的使用\"><a href=\"#过滤器的使用\" class=\"headerlink\" title=\"过滤器的使用\"></a>过滤器的使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = [<span class=\"string\">\"asfdsafweafxc\"</span>, <span class=\"string\">\"123\"</span>, <span class=\"string\">\"123\"</span>, <span class=\"string\">\"hello\"</span>, <span class=\"string\">\"hello\"</span>, <span class=\"string\">'haha'</span>]</span><br><span class=\"line\">    bm = BloomFilter(salts=[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>], redis_host=<span class=\"string\">\"10.0.12.191\"</span>, redis_db=<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> bm.is_exists(d):</span><br><span class=\"line\">            print(<span class=\"string\">\"mapping data success : %s\"</span> % d)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"find replace data : %s\"</span> % d)</span><br></pre></td></tr></table></figure>"},{"title":"python返回每个月最大天数","type":"categories","copyright":true,"date":"2020-01-02T04:07:27.000Z","_content":"\n## python返回过去时间里的每月最大天数\n\n### 导包 \n```python\nimport datetime\n```\n\n### 代码\n\n<!--more-->\n\n```python\ndef get_date_list(num=1):\n    now = datetime.datetime.now()\n    year = now.strftime('%Y')\n    mon = now.strftime('%m')\n    day = now.strftime('%d')\n    date_list = []\n    date_list.append([day, mon, year])\n    temp = now\n    for i in range(1, num):\n        last_mon_day = temp - datetime.timedelta(days=temp.day)\n        last_day = last_mon_day.strftime('%d')\n        mon = last_mon_day.strftime('%m')\n        year = last_mon_day.strftime('%Y')\n        date_list.append([last_day, mon, year])\n        temp = last_mon_day\n    return date_list\n```\n\n```python\n# 返回过去一年每个月的时间\ndate_list = get_date_list(12)\nprint(date_list)\n```\n\n```python\n[['22', '06', '2018'], ['31', '05', '2018'], ['30', '04', '2018'], ['31', '03', '2018'], ['28', '02', '2018'], ['31', '01', '2018'], ['31', '12', '2017'], ['30', '11', '2017'], ['31', '10', '2017'], ['30', '09', '2017'], ['31', '08', '2017'], ['31', '07', '2017']]\n```\n","source":"_posts/python返回每个月最大天数.md","raw":"---\ntitle: python返回每个月最大天数\ntype: categories\ncopyright: true\ndate: 2020-01-02 12:07:27\ntags:\n    - python\ncategories: python\n---\n\n## python返回过去时间里的每月最大天数\n\n### 导包 \n```python\nimport datetime\n```\n\n### 代码\n\n<!--more-->\n\n```python\ndef get_date_list(num=1):\n    now = datetime.datetime.now()\n    year = now.strftime('%Y')\n    mon = now.strftime('%m')\n    day = now.strftime('%d')\n    date_list = []\n    date_list.append([day, mon, year])\n    temp = now\n    for i in range(1, num):\n        last_mon_day = temp - datetime.timedelta(days=temp.day)\n        last_day = last_mon_day.strftime('%d')\n        mon = last_mon_day.strftime('%m')\n        year = last_mon_day.strftime('%Y')\n        date_list.append([last_day, mon, year])\n        temp = last_mon_day\n    return date_list\n```\n\n```python\n# 返回过去一年每个月的时间\ndate_list = get_date_list(12)\nprint(date_list)\n```\n\n```python\n[['22', '06', '2018'], ['31', '05', '2018'], ['30', '04', '2018'], ['31', '03', '2018'], ['28', '02', '2018'], ['31', '01', '2018'], ['31', '12', '2017'], ['30', '11', '2017'], ['31', '10', '2017'], ['30', '09', '2017'], ['31', '08', '2017'], ['31', '07', '2017']]\n```\n","slug":"python返回每个月最大天数","published":1,"updated":"2022-02-25T08:37:09.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77yl001nhvx3f8q6ax7b","content":"<h2 id=\"python返回过去时间里的每月最大天数\"><a href=\"#python返回过去时间里的每月最大天数\" class=\"headerlink\" title=\"python返回过去时间里的每月最大天数\"></a>python返回过去时间里的每月最大天数</h2><h3 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><a id=\"more\"></a>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_date_list</span><span class=\"params\">(num=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">    now = datetime.datetime.now()</span><br><span class=\"line\">    year = now.strftime(<span class=\"string\">'%Y'</span>)</span><br><span class=\"line\">    mon = now.strftime(<span class=\"string\">'%m'</span>)</span><br><span class=\"line\">    day = now.strftime(<span class=\"string\">'%d'</span>)</span><br><span class=\"line\">    date_list = []</span><br><span class=\"line\">    date_list.append([day, mon, year])</span><br><span class=\"line\">    temp = now</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, num):</span><br><span class=\"line\">        last_mon_day = temp - datetime.timedelta(days=temp.day)</span><br><span class=\"line\">        last_day = last_mon_day.strftime(<span class=\"string\">'%d'</span>)</span><br><span class=\"line\">        mon = last_mon_day.strftime(<span class=\"string\">'%m'</span>)</span><br><span class=\"line\">        year = last_mon_day.strftime(<span class=\"string\">'%Y'</span>)</span><br><span class=\"line\">        date_list.append([last_day, mon, year])</span><br><span class=\"line\">        temp = last_mon_day</span><br><span class=\"line\">    <span class=\"keyword\">return</span> date_list</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 返回过去一年每个月的时间</span></span><br><span class=\"line\">date_list = get_date_list(<span class=\"number\">12</span>)</span><br><span class=\"line\">print(date_list)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"string\">'22'</span>, <span class=\"string\">'06'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'05'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'30'</span>, <span class=\"string\">'04'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'03'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'28'</span>, <span class=\"string\">'02'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'01'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'12'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'30'</span>, <span class=\"string\">'11'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'10'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'30'</span>, <span class=\"string\">'09'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'08'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'07'</span>, <span class=\"string\">'2017'</span>]]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"python返回过去时间里的每月最大天数\"><a href=\"#python返回过去时间里的每月最大天数\" class=\"headerlink\" title=\"python返回过去时间里的每月最大天数\"></a>python返回过去时间里的每月最大天数</h2><h3 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_date_list</span><span class=\"params\">(num=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">    now = datetime.datetime.now()</span><br><span class=\"line\">    year = now.strftime(<span class=\"string\">'%Y'</span>)</span><br><span class=\"line\">    mon = now.strftime(<span class=\"string\">'%m'</span>)</span><br><span class=\"line\">    day = now.strftime(<span class=\"string\">'%d'</span>)</span><br><span class=\"line\">    date_list = []</span><br><span class=\"line\">    date_list.append([day, mon, year])</span><br><span class=\"line\">    temp = now</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, num):</span><br><span class=\"line\">        last_mon_day = temp - datetime.timedelta(days=temp.day)</span><br><span class=\"line\">        last_day = last_mon_day.strftime(<span class=\"string\">'%d'</span>)</span><br><span class=\"line\">        mon = last_mon_day.strftime(<span class=\"string\">'%m'</span>)</span><br><span class=\"line\">        year = last_mon_day.strftime(<span class=\"string\">'%Y'</span>)</span><br><span class=\"line\">        date_list.append([last_day, mon, year])</span><br><span class=\"line\">        temp = last_mon_day</span><br><span class=\"line\">    <span class=\"keyword\">return</span> date_list</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 返回过去一年每个月的时间</span></span><br><span class=\"line\">date_list = get_date_list(<span class=\"number\">12</span>)</span><br><span class=\"line\">print(date_list)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"string\">'22'</span>, <span class=\"string\">'06'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'05'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'30'</span>, <span class=\"string\">'04'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'03'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'28'</span>, <span class=\"string\">'02'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'01'</span>, <span class=\"string\">'2018'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'12'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'30'</span>, <span class=\"string\">'11'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'10'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'30'</span>, <span class=\"string\">'09'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'08'</span>, <span class=\"string\">'2017'</span>], [<span class=\"string\">'31'</span>, <span class=\"string\">'07'</span>, <span class=\"string\">'2017'</span>]]</span><br></pre></td></tr></table></figure>"},{"title":"排序","type":"categories","copyright":true,"date":"2022-03-01T06:07:13.000Z","keywords":"排序","_content":"\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n## python中的几种排序方法\n\n使用python来实现数据的几种排序方法，包括冒泡排序，直接选择排序，直接插入排序，快排，归并排序，二分法查找，堆排序等\n\n#### 1. 冒泡排序\n```python\ndef bubble_sort(list):\n    for i in range(len(list)-1):\n        current_status = False\n        for j in range(len(list) - i -1):\n            if list[j] > list[j + 1]:\n                list[j], list[j + 1] = list[j + 1], list[j]\n                current_status = True\n        if not current_status:\n            break\n    return list\n```\n<!-- more -->\n\n#### 2. 直接选择排序\n```python\ndef select_sort(list):\n    for i in range(len(list) - 1):\n        min_index = i\n        for j in range(i + 1, len(list)):\n            if list[j] < list[min_index]:\n                min_index = j\n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n```\n\n#### 3. 直接插入排序\n```python\ndef insert_sort(list):\n    for i in range(1, len(list)):\n        min_value = list[i]\n        j = i - 1\n        while j >= 0 and list[j] > min_value:\n            list[j + 1] = list[j]\n            j -= 1\n        list[j + 1] = min_value\n    return list\n```\n\n#### 4. 快速排序\n```python\ndef partition(list, left, right):\n    tmp = list[left]\n    while left < right:\n        while left < right and list[right] >= tmp:\n            right -= 1\n        list[left] = list[right]\n        while left < right and list[left] <= tmp:\n            left += 1\n        list[right] = list[left]\n    list[left] = tmp\n    return list\n\n\n# 快速排序\ndef quick_sort(list, left, right):\n    if left < right:\n        mid = partition(list, left, right)\n        quick_sort(list, left, mid - 1)\n        quick_sort(list, mid + 1, right)\n        return list\n```\n\n#### 5. 归并排序\n```python\n# 归并排序\ndef merge(list, low, mid, high):\n    \"\"\"\n    两段需要归并的序列从左到右遍历， 逐一比较，小的就放到tmp里\n    :param list:\n    :param low:\n    :param mid:\n    :param high:\n    :return:\n    \"\"\"\n    tmp = []\n    i = low\n    j = mid + 1\n    while i <= mid and j <= high:\n        if list[i] < list[j]:\n            tmp.append(list[i])\n            i += 1\n        else:\n            tmp.append(list[j])\n            j += 1\n\n    while i <= mid:\n        tmp.append(list[i])\n        i += 1\n\n    while j <= high:\n        tmp.append(list[j])\n        j += 1\n    list[low: high + 1] = tmp\n    return list\n\n\ndef merge_sort(list, low, high):\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(list, low, mid)\n        merge_sort(list, mid + 1, high)\n        return merge(list, low, mid, high)\n```\n\n#### 6. 二分法查找\n```python\nimport math\n# 二分法查找\ndef binary_sort(list, a):\n    list.sort()\n    low = 0\n    high = len(list) - 1\n    while low <= high:\n        mid = math.floor((low + high) / 2)\n        if list[mid] < a:\n            low = mid + 1\n        elif list[mid] > a:\n            high = mid - 1\n        else:\n            return mid\n    return None\n```\n\n#### 7. 堆排序\n```python\n# 堆排序\ndef sift(list, left, right):\n    i = left\n    j = 2 * i + 1\n    tmp = list[i]\n    while j <= right:\n        if j < right and list[j] < list[j + 1]:\n            j += 1\n        if tmp < list[i]:\n            list[i] = list[j]\n            i = j\n            j = 2 * j + 1\n        else:\n            break\n    list[i] = tmp\n\n\ndef heap(list):\n    n = len(list)\n    for i in range(n//2 - 1, -1, -1):\n        sift(list, i, n -1)\n    for i in range(n -1, -1, -1):\n        list[0], list[i] = list[i], list[0]\n        sift(list, 0, i - 1)\n```\n\n#### 测试\n```python\nimport random\n\n\nif __name__ == '__main__':\n    li = list(range(10))\n    random.shuffle(li)\n    print(li)\n```\n\n#### 字符串全排序\n```python\nimport itertools\n\n\ndef fun1(s=''):\n    if len(s) <= 1:\n        return [s]\n    l1 = []\n    for i in range(len(s)):\n        for j in fun1(s[0:i] + s[i+1:]):\n            l1.append(s[i] + j)\n    return l1\n\n\ndef main():\n    a = fun1('abc')\n    print(len(a), a)\n\n\ndef func2():\n    list1 = [1, 2, 3, 4]\n    list2 = []\n    for i in range(1, len(list1) + 1):\n        iter = itertools.combinations(list1, i)\n        list2.append(list(iter))\n    print(list2)\n\n\nif __name__ == '__main__':\n    # main()\n    func2()\n```\n\n","source":"_posts/排序.md","raw":"---\ntitle: 排序\ntype: categories\ncopyright: true\ndate: 2022-03-01 14:07:13\ntags:\n    - python\n    - 排序\ncategories: [python, 排序]\nkeywords: 排序\n---\n\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n## python中的几种排序方法\n\n使用python来实现数据的几种排序方法，包括冒泡排序，直接选择排序，直接插入排序，快排，归并排序，二分法查找，堆排序等\n\n#### 1. 冒泡排序\n```python\ndef bubble_sort(list):\n    for i in range(len(list)-1):\n        current_status = False\n        for j in range(len(list) - i -1):\n            if list[j] > list[j + 1]:\n                list[j], list[j + 1] = list[j + 1], list[j]\n                current_status = True\n        if not current_status:\n            break\n    return list\n```\n<!-- more -->\n\n#### 2. 直接选择排序\n```python\ndef select_sort(list):\n    for i in range(len(list) - 1):\n        min_index = i\n        for j in range(i + 1, len(list)):\n            if list[j] < list[min_index]:\n                min_index = j\n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n```\n\n#### 3. 直接插入排序\n```python\ndef insert_sort(list):\n    for i in range(1, len(list)):\n        min_value = list[i]\n        j = i - 1\n        while j >= 0 and list[j] > min_value:\n            list[j + 1] = list[j]\n            j -= 1\n        list[j + 1] = min_value\n    return list\n```\n\n#### 4. 快速排序\n```python\ndef partition(list, left, right):\n    tmp = list[left]\n    while left < right:\n        while left < right and list[right] >= tmp:\n            right -= 1\n        list[left] = list[right]\n        while left < right and list[left] <= tmp:\n            left += 1\n        list[right] = list[left]\n    list[left] = tmp\n    return list\n\n\n# 快速排序\ndef quick_sort(list, left, right):\n    if left < right:\n        mid = partition(list, left, right)\n        quick_sort(list, left, mid - 1)\n        quick_sort(list, mid + 1, right)\n        return list\n```\n\n#### 5. 归并排序\n```python\n# 归并排序\ndef merge(list, low, mid, high):\n    \"\"\"\n    两段需要归并的序列从左到右遍历， 逐一比较，小的就放到tmp里\n    :param list:\n    :param low:\n    :param mid:\n    :param high:\n    :return:\n    \"\"\"\n    tmp = []\n    i = low\n    j = mid + 1\n    while i <= mid and j <= high:\n        if list[i] < list[j]:\n            tmp.append(list[i])\n            i += 1\n        else:\n            tmp.append(list[j])\n            j += 1\n\n    while i <= mid:\n        tmp.append(list[i])\n        i += 1\n\n    while j <= high:\n        tmp.append(list[j])\n        j += 1\n    list[low: high + 1] = tmp\n    return list\n\n\ndef merge_sort(list, low, high):\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(list, low, mid)\n        merge_sort(list, mid + 1, high)\n        return merge(list, low, mid, high)\n```\n\n#### 6. 二分法查找\n```python\nimport math\n# 二分法查找\ndef binary_sort(list, a):\n    list.sort()\n    low = 0\n    high = len(list) - 1\n    while low <= high:\n        mid = math.floor((low + high) / 2)\n        if list[mid] < a:\n            low = mid + 1\n        elif list[mid] > a:\n            high = mid - 1\n        else:\n            return mid\n    return None\n```\n\n#### 7. 堆排序\n```python\n# 堆排序\ndef sift(list, left, right):\n    i = left\n    j = 2 * i + 1\n    tmp = list[i]\n    while j <= right:\n        if j < right and list[j] < list[j + 1]:\n            j += 1\n        if tmp < list[i]:\n            list[i] = list[j]\n            i = j\n            j = 2 * j + 1\n        else:\n            break\n    list[i] = tmp\n\n\ndef heap(list):\n    n = len(list)\n    for i in range(n//2 - 1, -1, -1):\n        sift(list, i, n -1)\n    for i in range(n -1, -1, -1):\n        list[0], list[i] = list[i], list[0]\n        sift(list, 0, i - 1)\n```\n\n#### 测试\n```python\nimport random\n\n\nif __name__ == '__main__':\n    li = list(range(10))\n    random.shuffle(li)\n    print(li)\n```\n\n#### 字符串全排序\n```python\nimport itertools\n\n\ndef fun1(s=''):\n    if len(s) <= 1:\n        return [s]\n    l1 = []\n    for i in range(len(s)):\n        for j in fun1(s[0:i] + s[i+1:]):\n            l1.append(s[i] + j)\n    return l1\n\n\ndef main():\n    a = fun1('abc')\n    print(len(a), a)\n\n\ndef func2():\n    list1 = [1, 2, 3, 4]\n    list2 = []\n    for i in range(1, len(list1) + 1):\n        iter = itertools.combinations(list1, i)\n        list2.append(list(iter))\n    print(list2)\n\n\nif __name__ == '__main__':\n    # main()\n    func2()\n```\n\n","slug":"排序","published":1,"updated":"2022-03-01T06:39:20.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77ym001phvx319bod2qk","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<h2 id=\"python中的几种排序方法\"><a href=\"#python中的几种排序方法\" class=\"headerlink\" title=\"python中的几种排序方法\"></a>python中的几种排序方法</h2><p>使用python来实现数据的几种排序方法，包括冒泡排序，直接选择排序，直接插入排序，快排，归并排序，二分法查找，堆排序等</p>\n<h4 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1. 冒泡排序\"></a>1. 冒泡排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(list)<span class=\"number\">-1</span>):</span><br><span class=\"line\">        current_status = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(list) - i <span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> list[j] &gt; list[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                list[j], list[j + <span class=\"number\">1</span>] = list[j + <span class=\"number\">1</span>], list[j]</span><br><span class=\"line\">                current_status = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> current_status:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<h4 id=\"2-直接选择排序\"><a href=\"#2-直接选择排序\" class=\"headerlink\" title=\"2. 直接选择排序\"></a>2. 直接选择排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_sort</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(list) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        min_index = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i + <span class=\"number\">1</span>, len(list)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> list[j] &lt; list[min_index]:</span><br><span class=\"line\">                min_index = j</span><br><span class=\"line\">        list[i], list[min_index] = list[min_index], list[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-直接插入排序\"><a href=\"#3-直接插入排序\" class=\"headerlink\" title=\"3. 直接插入排序\"></a>3. 直接插入排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(list)):</span><br><span class=\"line\">        min_value = list[i]</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> list[j] &gt; min_value:</span><br><span class=\"line\">            list[j + <span class=\"number\">1</span>] = list[j]</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">        list[j + <span class=\"number\">1</span>] = min_value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-快速排序\"><a href=\"#4-快速排序\" class=\"headerlink\" title=\"4. 快速排序\"></a>4. 快速排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partition</span><span class=\"params\">(list, left, right)</span>:</span></span><br><span class=\"line\">    tmp = list[left]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> list[right] &gt;= tmp:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span></span><br><span class=\"line\">        list[left] = list[right]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> list[left] &lt;= tmp:</span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">        list[right] = list[left]</span><br><span class=\"line\">    list[left] = tmp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 快速排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(list, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        mid = partition(list, left, right)</span><br><span class=\"line\">        quick_sort(list, left, mid - <span class=\"number\">1</span>)</span><br><span class=\"line\">        quick_sort(list, mid + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-归并排序\"><a href=\"#5-归并排序\" class=\"headerlink\" title=\"5. 归并排序\"></a>5. 归并排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 归并排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span><span class=\"params\">(list, low, mid, high)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    两段需要归并的序列从左到右遍历， 逐一比较，小的就放到tmp里</span></span><br><span class=\"line\"><span class=\"string\">    :param list:</span></span><br><span class=\"line\"><span class=\"string\">    :param low:</span></span><br><span class=\"line\"><span class=\"string\">    :param mid:</span></span><br><span class=\"line\"><span class=\"string\">    :param high:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    tmp = []</span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid <span class=\"keyword\">and</span> j &lt;= high:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> list[i] &lt; list[j]:</span><br><span class=\"line\">            tmp.append(list[i])</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            tmp.append(list[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid:</span><br><span class=\"line\">        tmp.append(list[i])</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:</span><br><span class=\"line\">        tmp.append(list[j])</span><br><span class=\"line\">        j += <span class=\"number\">1</span></span><br><span class=\"line\">    list[low: high + <span class=\"number\">1</span>] = tmp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge_sort</span><span class=\"params\">(list, low, high)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> low &lt; high:</span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        merge_sort(list, low, mid)</span><br><span class=\"line\">        merge_sort(list, mid + <span class=\"number\">1</span>, high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> merge(list, low, mid, high)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-二分法查找\"><a href=\"#6-二分法查找\" class=\"headerlink\" title=\"6. 二分法查找\"></a>6. 二分法查找</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"comment\"># 二分法查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_sort</span><span class=\"params\">(list, a)</span>:</span></span><br><span class=\"line\">    list.sort()</span><br><span class=\"line\">    low = <span class=\"number\">0</span></span><br><span class=\"line\">    high = len(list) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">        mid = math.floor((low + high) / <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> list[mid] &lt; a:</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> list[mid] &gt; a:</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-堆排序\"><a href=\"#7-堆排序\" class=\"headerlink\" title=\"7. 堆排序\"></a>7. 堆排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 堆排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sift</span><span class=\"params\">(list, left, right)</span>:</span></span><br><span class=\"line\">    i = left</span><br><span class=\"line\">    j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">    tmp = list[i]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= right:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j &lt; right <span class=\"keyword\">and</span> list[j] &lt; list[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp &lt; list[i]:</span><br><span class=\"line\">            list[i] = list[j]</span><br><span class=\"line\">            i = j</span><br><span class=\"line\">            j = <span class=\"number\">2</span> * j + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    list[i] = tmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heap</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    n = len(list)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n//<span class=\"number\">2</span> - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        sift(list, i, n <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n <span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        list[<span class=\"number\">0</span>], list[i] = list[i], list[<span class=\"number\">0</span>]</span><br><span class=\"line\">        sift(list, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    li = list(range(<span class=\"number\">10</span>))</span><br><span class=\"line\">    random.shuffle(li)</span><br><span class=\"line\">    print(li)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符串全排序\"><a href=\"#字符串全排序\" class=\"headerlink\" title=\"字符串全排序\"></a>字符串全排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun1</span><span class=\"params\">(s=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(s) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [s]</span><br><span class=\"line\">    l1 = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> fun1(s[<span class=\"number\">0</span>:i] + s[i+<span class=\"number\">1</span>:]):</span><br><span class=\"line\">            l1.append(s[i] + j)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    a = fun1(<span class=\"string\">'abc'</span>)</span><br><span class=\"line\">    print(len(a), a)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    list1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    list2 = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(list1) + <span class=\"number\">1</span>):</span><br><span class=\"line\">        iter = itertools.combinations(list1, i)</span><br><span class=\"line\">        list2.append(list(iter))</span><br><span class=\"line\">    print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># main()</span></span><br><span class=\"line\">    func2()</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n\n<h2 id=\"python中的几种排序方法\"><a href=\"#python中的几种排序方法\" class=\"headerlink\" title=\"python中的几种排序方法\"></a>python中的几种排序方法</h2><p>使用python来实现数据的几种排序方法，包括冒泡排序，直接选择排序，直接插入排序，快排，归并排序，二分法查找，堆排序等</p>\n<h4 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1. 冒泡排序\"></a>1. 冒泡排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(list)<span class=\"number\">-1</span>):</span><br><span class=\"line\">        current_status = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(list) - i <span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> list[j] &gt; list[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                list[j], list[j + <span class=\"number\">1</span>] = list[j + <span class=\"number\">1</span>], list[j]</span><br><span class=\"line\">                current_status = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> current_status:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"2-直接选择排序\"><a href=\"#2-直接选择排序\" class=\"headerlink\" title=\"2. 直接选择排序\"></a>2. 直接选择排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_sort</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(list) - <span class=\"number\">1</span>):</span><br><span class=\"line\">        min_index = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i + <span class=\"number\">1</span>, len(list)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> list[j] &lt; list[min_index]:</span><br><span class=\"line\">                min_index = j</span><br><span class=\"line\">        list[i], list[min_index] = list[min_index], list[i]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-直接插入排序\"><a href=\"#3-直接插入排序\" class=\"headerlink\" title=\"3. 直接插入排序\"></a>3. 直接插入排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(list)):</span><br><span class=\"line\">        min_value = list[i]</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> list[j] &gt; min_value:</span><br><span class=\"line\">            list[j + <span class=\"number\">1</span>] = list[j]</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">        list[j + <span class=\"number\">1</span>] = min_value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-快速排序\"><a href=\"#4-快速排序\" class=\"headerlink\" title=\"4. 快速排序\"></a>4. 快速排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partition</span><span class=\"params\">(list, left, right)</span>:</span></span><br><span class=\"line\">    tmp = list[left]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> list[right] &gt;= tmp:</span><br><span class=\"line\">            right -= <span class=\"number\">1</span></span><br><span class=\"line\">        list[left] = list[right]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> list[left] &lt;= tmp:</span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">        list[right] = list[left]</span><br><span class=\"line\">    list[left] = tmp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 快速排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(list, left, right)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        mid = partition(list, left, right)</span><br><span class=\"line\">        quick_sort(list, left, mid - <span class=\"number\">1</span>)</span><br><span class=\"line\">        quick_sort(list, mid + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-归并排序\"><a href=\"#5-归并排序\" class=\"headerlink\" title=\"5. 归并排序\"></a>5. 归并排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 归并排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span><span class=\"params\">(list, low, mid, high)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    两段需要归并的序列从左到右遍历， 逐一比较，小的就放到tmp里</span></span><br><span class=\"line\"><span class=\"string\">    :param list:</span></span><br><span class=\"line\"><span class=\"string\">    :param low:</span></span><br><span class=\"line\"><span class=\"string\">    :param mid:</span></span><br><span class=\"line\"><span class=\"string\">    :param high:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    tmp = []</span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid <span class=\"keyword\">and</span> j &lt;= high:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> list[i] &lt; list[j]:</span><br><span class=\"line\">            tmp.append(list[i])</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            tmp.append(list[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid:</span><br><span class=\"line\">        tmp.append(list[i])</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:</span><br><span class=\"line\">        tmp.append(list[j])</span><br><span class=\"line\">        j += <span class=\"number\">1</span></span><br><span class=\"line\">    list[low: high + <span class=\"number\">1</span>] = tmp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge_sort</span><span class=\"params\">(list, low, high)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> low &lt; high:</span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        merge_sort(list, low, mid)</span><br><span class=\"line\">        merge_sort(list, mid + <span class=\"number\">1</span>, high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> merge(list, low, mid, high)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-二分法查找\"><a href=\"#6-二分法查找\" class=\"headerlink\" title=\"6. 二分法查找\"></a>6. 二分法查找</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"comment\"># 二分法查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_sort</span><span class=\"params\">(list, a)</span>:</span></span><br><span class=\"line\">    list.sort()</span><br><span class=\"line\">    low = <span class=\"number\">0</span></span><br><span class=\"line\">    high = len(list) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">        mid = math.floor((low + high) / <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> list[mid] &lt; a:</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> list[mid] &gt; a:</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-堆排序\"><a href=\"#7-堆排序\" class=\"headerlink\" title=\"7. 堆排序\"></a>7. 堆排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 堆排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sift</span><span class=\"params\">(list, left, right)</span>:</span></span><br><span class=\"line\">    i = left</span><br><span class=\"line\">    j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">    tmp = list[i]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= right:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j &lt; right <span class=\"keyword\">and</span> list[j] &lt; list[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tmp &lt; list[i]:</span><br><span class=\"line\">            list[i] = list[j]</span><br><span class=\"line\">            i = j</span><br><span class=\"line\">            j = <span class=\"number\">2</span> * j + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    list[i] = tmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heap</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">    n = len(list)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n//<span class=\"number\">2</span> - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        sift(list, i, n <span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n <span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        list[<span class=\"number\">0</span>], list[i] = list[i], list[<span class=\"number\">0</span>]</span><br><span class=\"line\">        sift(list, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    li = list(range(<span class=\"number\">10</span>))</span><br><span class=\"line\">    random.shuffle(li)</span><br><span class=\"line\">    print(li)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符串全排序\"><a href=\"#字符串全排序\" class=\"headerlink\" title=\"字符串全排序\"></a>字符串全排序</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun1</span><span class=\"params\">(s=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(s) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [s]</span><br><span class=\"line\">    l1 = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> fun1(s[<span class=\"number\">0</span>:i] + s[i+<span class=\"number\">1</span>:]):</span><br><span class=\"line\">            l1.append(s[i] + j)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    a = fun1(<span class=\"string\">'abc'</span>)</span><br><span class=\"line\">    print(len(a), a)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    list1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    list2 = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(list1) + <span class=\"number\">1</span>):</span><br><span class=\"line\">        iter = itertools.combinations(list1, i)</span><br><span class=\"line\">        list2.append(list(iter))</span><br><span class=\"line\">    print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># main()</span></span><br><span class=\"line\">    func2()</span><br></pre></td></tr></table></figure>"},{"title":"百度贴吧图片抓取","type":"categories","copyright":true,"date":"2020-01-02T07:34:54.000Z","_content":"\n## python爬取百度贴吧张国荣图片\n\n一直喜欢哥哥的歌，也一直听哥哥的歌，突然想着收集一些哥哥的照片，所以写了一个爬虫爬取哥哥的图片，也给大家参考一下；\n\n#### 这里我用的request-html这个包\n```python\nfrom requests_html import HTMLSession\nfrom requests_html import HTML\n```\n\n#### 构造请求\n<!--more-->\n```python\nclass CrawlSpider(object):\n    def __init__(self):\n        self.sess = HTMLSession()\n        self.headers = {\n            \"Host\": \"tieba.baidu.com\",\n            \"Referer\": \"https://www.baidu.com/\",\n            \"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\"\n        }\n```\n#### 分析请求的api,发现它是get请求，带有参数\n\n```python\nself.params = {\n            \"kw\": \"张国荣\",\n            \"tab\": \"album\",\n            \"subtab\": \"album_good\",\n            \"cat_id\": \"\"\n        }\n```\n#### 发送请求，找到分类的id\n```python\nresp = self.sess.get(url=\"http://tieba.baidu.com/f?\",params=self.params, headers=self.headers)\ncategory_list = re.findall('<li cat-id=\"(.*)\"><span>', resp.text)\n```\n#### 对每个分类构造api请求，获取每个图册的id\n```python\nall_tid_list = []\nfor cat_id in category_list:\n    self.params[\"cat_id\"] = cat_id\n    self.params[\"pagelets\"] = 'album/pagelet/album_good'\n    self.params[\"pagelets_stamp\"] = \"%013d\"%(1000 * time.time())\n    try:\n        resp = self.sess.get(url=\"http://tieba.baidu.com/f?\", params=self.params, headers=self.headers)\n        resp.html.render()\n        html = HTML(html=resp.html.text)\n        tid_list = re.findall(r\"/p/\\d+\", re.sub(r\"\\\\\", '', str(html.links)))\n        all_tid_list.extend(tid_list)\n    except Exception as err:\n        print(\"获取tid失败{}\".format(err))\nreturn all_tid_list\n```\n\n#### 拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“_”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\n```python\nparams = {\n        \"kw\": \"张国荣\",\n        \"alt\": \"jview\",\n        \"rn\": \"200\",\n        \"tid\": tid,\n        \"pn\": \"1\",\n        \"ps\": \"1\",\n        \"pe\": \"40\",\n        \"info\": \"1\",\n        \"_\": \"%013d\" % (1000 * time.time())\n    }\n```\n#### 构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\n```python\nbase_url = \"http://tieba.baidu.com/photo/g/bw/picture/list?\"\nresp = self.sess.get(url=base_url, params=params, headers=self.headers).text\ntime.sleep(random.random() + 1)\nresp = json.loads(resp)\ntitle = resp[\"data\"][\"title\"]\npic_list = resp[\"data\"][\"pic_list\"]\n```\n\n#### 保存我们需要的图册标题和图片链接\n```python\ntry:\n    image_list = []\n    for item in self.total_images:\n        image_dict = {}\n        image_url = []\n        image_dict[\"title\"] = item[\"title\"]\n        for each in item[\"images_info\"]:\n            image_url.append(each[\"purl\"])\n        image_dict[\"image_url\"] = image_url\n        image_list.append(image_dict)\n\n    with open(\"image_urls.json\", \"w\", encoding='GBK') as f:\n        f.write(json.dumps(image_list))\nexcept Exception as err:\n    print(\"写入数据失败{}\".format(err))\n```\n\n这样我们就拿到了哥哥的图片链接了，然后我们请求图片链接，下载图片即可\n![张国荣](/image/crawl/leslie.png)\n\n## 完整代码可以看我的gitub链接：\n[https://github.com/gongjiaqiang/my_spider](https://github.com/gongjiaqiang/my_spider)","source":"_posts/百度贴吧图片抓取.md","raw":"---\ntitle: 百度贴吧图片抓取\ntype: categories\ncopyright: true\ndate: 2020-01-02 15:34:54\ntags:\n    - python\n    - 爬虫\ncategories: [python, 爬虫]\n---\n\n## python爬取百度贴吧张国荣图片\n\n一直喜欢哥哥的歌，也一直听哥哥的歌，突然想着收集一些哥哥的照片，所以写了一个爬虫爬取哥哥的图片，也给大家参考一下；\n\n#### 这里我用的request-html这个包\n```python\nfrom requests_html import HTMLSession\nfrom requests_html import HTML\n```\n\n#### 构造请求\n<!--more-->\n```python\nclass CrawlSpider(object):\n    def __init__(self):\n        self.sess = HTMLSession()\n        self.headers = {\n            \"Host\": \"tieba.baidu.com\",\n            \"Referer\": \"https://www.baidu.com/\",\n            \"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\"\n        }\n```\n#### 分析请求的api,发现它是get请求，带有参数\n\n```python\nself.params = {\n            \"kw\": \"张国荣\",\n            \"tab\": \"album\",\n            \"subtab\": \"album_good\",\n            \"cat_id\": \"\"\n        }\n```\n#### 发送请求，找到分类的id\n```python\nresp = self.sess.get(url=\"http://tieba.baidu.com/f?\",params=self.params, headers=self.headers)\ncategory_list = re.findall('<li cat-id=\"(.*)\"><span>', resp.text)\n```\n#### 对每个分类构造api请求，获取每个图册的id\n```python\nall_tid_list = []\nfor cat_id in category_list:\n    self.params[\"cat_id\"] = cat_id\n    self.params[\"pagelets\"] = 'album/pagelet/album_good'\n    self.params[\"pagelets_stamp\"] = \"%013d\"%(1000 * time.time())\n    try:\n        resp = self.sess.get(url=\"http://tieba.baidu.com/f?\", params=self.params, headers=self.headers)\n        resp.html.render()\n        html = HTML(html=resp.html.text)\n        tid_list = re.findall(r\"/p/\\d+\", re.sub(r\"\\\\\", '', str(html.links)))\n        all_tid_list.extend(tid_list)\n    except Exception as err:\n        print(\"获取tid失败{}\".format(err))\nreturn all_tid_list\n```\n\n#### 拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“_”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\n```python\nparams = {\n        \"kw\": \"张国荣\",\n        \"alt\": \"jview\",\n        \"rn\": \"200\",\n        \"tid\": tid,\n        \"pn\": \"1\",\n        \"ps\": \"1\",\n        \"pe\": \"40\",\n        \"info\": \"1\",\n        \"_\": \"%013d\" % (1000 * time.time())\n    }\n```\n#### 构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\n```python\nbase_url = \"http://tieba.baidu.com/photo/g/bw/picture/list?\"\nresp = self.sess.get(url=base_url, params=params, headers=self.headers).text\ntime.sleep(random.random() + 1)\nresp = json.loads(resp)\ntitle = resp[\"data\"][\"title\"]\npic_list = resp[\"data\"][\"pic_list\"]\n```\n\n#### 保存我们需要的图册标题和图片链接\n```python\ntry:\n    image_list = []\n    for item in self.total_images:\n        image_dict = {}\n        image_url = []\n        image_dict[\"title\"] = item[\"title\"]\n        for each in item[\"images_info\"]:\n            image_url.append(each[\"purl\"])\n        image_dict[\"image_url\"] = image_url\n        image_list.append(image_dict)\n\n    with open(\"image_urls.json\", \"w\", encoding='GBK') as f:\n        f.write(json.dumps(image_list))\nexcept Exception as err:\n    print(\"写入数据失败{}\".format(err))\n```\n\n这样我们就拿到了哥哥的图片链接了，然后我们请求图片链接，下载图片即可\n![张国荣](/image/crawl/leslie.png)\n\n## 完整代码可以看我的gitub链接：\n[https://github.com/gongjiaqiang/my_spider](https://github.com/gongjiaqiang/my_spider)","slug":"百度贴吧图片抓取","published":1,"updated":"2022-02-25T08:37:09.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77yr001thvx33xiiggx2","content":"<h2 id=\"python爬取百度贴吧张国荣图片\"><a href=\"#python爬取百度贴吧张国荣图片\" class=\"headerlink\" title=\"python爬取百度贴吧张国荣图片\"></a>python爬取百度贴吧张国荣图片</h2><p>一直喜欢哥哥的歌，也一直听哥哥的歌，突然想着收集一些哥哥的照片，所以写了一个爬虫爬取哥哥的图片，也给大家参考一下；</p>\n<h4 id=\"这里我用的request-html这个包\"><a href=\"#这里我用的request-html这个包\" class=\"headerlink\" title=\"这里我用的request-html这个包\"></a>这里我用的request-html这个包</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> HTMLSession</span><br><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> HTML</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构造请求\"><a href=\"#构造请求\" class=\"headerlink\" title=\"构造请求\"></a>构造请求</h4><a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrawlSpider</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.sess = HTMLSession()</span><br><span class=\"line\">        self.headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Host\"</span>: <span class=\"string\">\"tieba.baidu.com\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Referer\"</span>: <span class=\"string\">\"https://www.baidu.com/\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"User-Agent\"</span>:<span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\"</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析请求的api-发现它是get请求，带有参数\"><a href=\"#分析请求的api-发现它是get请求，带有参数\" class=\"headerlink\" title=\"分析请求的api,发现它是get请求，带有参数\"></a>分析请求的api,发现它是get请求，带有参数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.params = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"kw\"</span>: <span class=\"string\">\"张国荣\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"tab\"</span>: <span class=\"string\">\"album\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"subtab\"</span>: <span class=\"string\">\"album_good\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"cat_id\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"发送请求，找到分类的id\"><a href=\"#发送请求，找到分类的id\" class=\"headerlink\" title=\"发送请求，找到分类的id\"></a>发送请求，找到分类的id</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resp = self.sess.get(url=<span class=\"string\">\"http://tieba.baidu.com/f?\"</span>,params=self.params, headers=self.headers)</span><br><span class=\"line\">category_list = re.findall(<span class=\"string\">'&lt;li cat-id=\"(.*)\"&gt;&lt;span&gt;'</span>, resp.text)</span><br></pre></td></tr></table></figure>\n<h4 id=\"对每个分类构造api请求，获取每个图册的id\"><a href=\"#对每个分类构造api请求，获取每个图册的id\" class=\"headerlink\" title=\"对每个分类构造api请求，获取每个图册的id\"></a>对每个分类构造api请求，获取每个图册的id</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all_tid_list = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> cat_id <span class=\"keyword\">in</span> category_list:</span><br><span class=\"line\">    self.params[<span class=\"string\">\"cat_id\"</span>] = cat_id</span><br><span class=\"line\">    self.params[<span class=\"string\">\"pagelets\"</span>] = <span class=\"string\">'album/pagelet/album_good'</span></span><br><span class=\"line\">    self.params[<span class=\"string\">\"pagelets_stamp\"</span>] = <span class=\"string\">\"%013d\"</span>%(<span class=\"number\">1000</span> * time.time())</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        resp = self.sess.get(url=<span class=\"string\">\"http://tieba.baidu.com/f?\"</span>, params=self.params, headers=self.headers)</span><br><span class=\"line\">        resp.html.render()</span><br><span class=\"line\">        html = HTML(html=resp.html.text)</span><br><span class=\"line\">        tid_list = re.findall(<span class=\"string\">r\"/p/\\d+\"</span>, re.sub(<span class=\"string\">r\"\\\\\"</span>, <span class=\"string\">''</span>, str(html.links)))</span><br><span class=\"line\">        all_tid_list.extend(tid_list)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">        print(<span class=\"string\">\"获取tid失败&#123;&#125;\"</span>.format(err))</span><br><span class=\"line\"><span class=\"keyword\">return</span> all_tid_list</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“-”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\"><a href=\"#拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“-”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\" class=\"headerlink\" title=\"拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“_”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\"></a>拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“_”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">params = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"kw\"</span>: <span class=\"string\">\"张国荣\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"alt\"</span>: <span class=\"string\">\"jview\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"rn\"</span>: <span class=\"string\">\"200\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"tid\"</span>: tid,</span><br><span class=\"line\">        <span class=\"string\">\"pn\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ps\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pe\"</span>: <span class=\"string\">\"40\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"info\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"_\"</span>: <span class=\"string\">\"%013d\"</span> % (<span class=\"number\">1000</span> * time.time())</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\"><a href=\"#构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\" class=\"headerlink\" title=\"构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\"></a>构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_url = <span class=\"string\">\"http://tieba.baidu.com/photo/g/bw/picture/list?\"</span></span><br><span class=\"line\">resp = self.sess.get(url=base_url, params=params, headers=self.headers).text</span><br><span class=\"line\">time.sleep(random.random() + <span class=\"number\">1</span>)</span><br><span class=\"line\">resp = json.loads(resp)</span><br><span class=\"line\">title = resp[<span class=\"string\">\"data\"</span>][<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">pic_list = resp[<span class=\"string\">\"data\"</span>][<span class=\"string\">\"pic_list\"</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"保存我们需要的图册标题和图片链接\"><a href=\"#保存我们需要的图册标题和图片链接\" class=\"headerlink\" title=\"保存我们需要的图册标题和图片链接\"></a>保存我们需要的图册标题和图片链接</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    image_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.total_images:</span><br><span class=\"line\">        image_dict = &#123;&#125;</span><br><span class=\"line\">        image_url = []</span><br><span class=\"line\">        image_dict[<span class=\"string\">\"title\"</span>] = item[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> item[<span class=\"string\">\"images_info\"</span>]:</span><br><span class=\"line\">            image_url.append(each[<span class=\"string\">\"purl\"</span>])</span><br><span class=\"line\">        image_dict[<span class=\"string\">\"image_url\"</span>] = image_url</span><br><span class=\"line\">        image_list.append(image_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"image_urls.json\"</span>, <span class=\"string\">\"w\"</span>, encoding=<span class=\"string\">'GBK'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(json.dumps(image_list))</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入数据失败&#123;&#125;\"</span>.format(err))</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就拿到了哥哥的图片链接了，然后我们请求图片链接，下载图片即可<br><img src=\"/image/crawl/leslie.png\" alt=\"张国荣\"></p>\n<h2 id=\"完整代码可以看我的gitub链接：\"><a href=\"#完整代码可以看我的gitub链接：\" class=\"headerlink\" title=\"完整代码可以看我的gitub链接：\"></a>完整代码可以看我的gitub链接：</h2><p><a href=\"https://github.com/gongjiaqiang/my_spider\" target=\"_blank\" rel=\"noopener\">https://github.com/gongjiaqiang/my_spider</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"python爬取百度贴吧张国荣图片\"><a href=\"#python爬取百度贴吧张国荣图片\" class=\"headerlink\" title=\"python爬取百度贴吧张国荣图片\"></a>python爬取百度贴吧张国荣图片</h2><p>一直喜欢哥哥的歌，也一直听哥哥的歌，突然想着收集一些哥哥的照片，所以写了一个爬虫爬取哥哥的图片，也给大家参考一下；</p>\n<h4 id=\"这里我用的request-html这个包\"><a href=\"#这里我用的request-html这个包\" class=\"headerlink\" title=\"这里我用的request-html这个包\"></a>这里我用的request-html这个包</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> HTMLSession</span><br><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> HTML</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构造请求\"><a href=\"#构造请求\" class=\"headerlink\" title=\"构造请求\"></a>构造请求</h4>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrawlSpider</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.sess = HTMLSession()</span><br><span class=\"line\">        self.headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Host\"</span>: <span class=\"string\">\"tieba.baidu.com\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Referer\"</span>: <span class=\"string\">\"https://www.baidu.com/\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"User-Agent\"</span>:<span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\"</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"分析请求的api-发现它是get请求，带有参数\"><a href=\"#分析请求的api-发现它是get请求，带有参数\" class=\"headerlink\" title=\"分析请求的api,发现它是get请求，带有参数\"></a>分析请求的api,发现它是get请求，带有参数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.params = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"kw\"</span>: <span class=\"string\">\"张国荣\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"tab\"</span>: <span class=\"string\">\"album\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"subtab\"</span>: <span class=\"string\">\"album_good\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"cat_id\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"发送请求，找到分类的id\"><a href=\"#发送请求，找到分类的id\" class=\"headerlink\" title=\"发送请求，找到分类的id\"></a>发送请求，找到分类的id</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resp = self.sess.get(url=<span class=\"string\">\"http://tieba.baidu.com/f?\"</span>,params=self.params, headers=self.headers)</span><br><span class=\"line\">category_list = re.findall(<span class=\"string\">'&lt;li cat-id=\"(.*)\"&gt;&lt;span&gt;'</span>, resp.text)</span><br></pre></td></tr></table></figure>\n<h4 id=\"对每个分类构造api请求，获取每个图册的id\"><a href=\"#对每个分类构造api请求，获取每个图册的id\" class=\"headerlink\" title=\"对每个分类构造api请求，获取每个图册的id\"></a>对每个分类构造api请求，获取每个图册的id</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all_tid_list = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> cat_id <span class=\"keyword\">in</span> category_list:</span><br><span class=\"line\">    self.params[<span class=\"string\">\"cat_id\"</span>] = cat_id</span><br><span class=\"line\">    self.params[<span class=\"string\">\"pagelets\"</span>] = <span class=\"string\">'album/pagelet/album_good'</span></span><br><span class=\"line\">    self.params[<span class=\"string\">\"pagelets_stamp\"</span>] = <span class=\"string\">\"%013d\"</span>%(<span class=\"number\">1000</span> * time.time())</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        resp = self.sess.get(url=<span class=\"string\">\"http://tieba.baidu.com/f?\"</span>, params=self.params, headers=self.headers)</span><br><span class=\"line\">        resp.html.render()</span><br><span class=\"line\">        html = HTML(html=resp.html.text)</span><br><span class=\"line\">        tid_list = re.findall(<span class=\"string\">r\"/p/\\d+\"</span>, re.sub(<span class=\"string\">r\"\\\\\"</span>, <span class=\"string\">''</span>, str(html.links)))</span><br><span class=\"line\">        all_tid_list.extend(tid_list)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">        print(<span class=\"string\">\"获取tid失败&#123;&#125;\"</span>.format(err))</span><br><span class=\"line\"><span class=\"keyword\">return</span> all_tid_list</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“-”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\"><a href=\"#拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“-”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\" class=\"headerlink\" title=\"拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“_”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数\"></a>拿到图册的id后我们就可以去请求图册的数据了；tid就是图册的id，“_”是当前的时间戳，“pe”是每页返回40条数据，”pn“是当前页数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">params = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"kw\"</span>: <span class=\"string\">\"张国荣\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"alt\"</span>: <span class=\"string\">\"jview\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"rn\"</span>: <span class=\"string\">\"200\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"tid\"</span>: tid,</span><br><span class=\"line\">        <span class=\"string\">\"pn\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ps\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pe\"</span>: <span class=\"string\">\"40\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"info\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"_\"</span>: <span class=\"string\">\"%013d\"</span> % (<span class=\"number\">1000</span> * time.time())</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\"><a href=\"#构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\" class=\"headerlink\" title=\"构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息\"></a>构造请求获取图册的数据；这里我们可以拿到每个图册的标题和图册中图片的信息</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_url = <span class=\"string\">\"http://tieba.baidu.com/photo/g/bw/picture/list?\"</span></span><br><span class=\"line\">resp = self.sess.get(url=base_url, params=params, headers=self.headers).text</span><br><span class=\"line\">time.sleep(random.random() + <span class=\"number\">1</span>)</span><br><span class=\"line\">resp = json.loads(resp)</span><br><span class=\"line\">title = resp[<span class=\"string\">\"data\"</span>][<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">pic_list = resp[<span class=\"string\">\"data\"</span>][<span class=\"string\">\"pic_list\"</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"保存我们需要的图册标题和图片链接\"><a href=\"#保存我们需要的图册标题和图片链接\" class=\"headerlink\" title=\"保存我们需要的图册标题和图片链接\"></a>保存我们需要的图册标题和图片链接</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    image_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> self.total_images:</span><br><span class=\"line\">        image_dict = &#123;&#125;</span><br><span class=\"line\">        image_url = []</span><br><span class=\"line\">        image_dict[<span class=\"string\">\"title\"</span>] = item[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> item[<span class=\"string\">\"images_info\"</span>]:</span><br><span class=\"line\">            image_url.append(each[<span class=\"string\">\"purl\"</span>])</span><br><span class=\"line\">        image_dict[<span class=\"string\">\"image_url\"</span>] = image_url</span><br><span class=\"line\">        image_list.append(image_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"image_urls.json\"</span>, <span class=\"string\">\"w\"</span>, encoding=<span class=\"string\">'GBK'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(json.dumps(image_list))</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入数据失败&#123;&#125;\"</span>.format(err))</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就拿到了哥哥的图片链接了，然后我们请求图片链接，下载图片即可<br><img src=\"/image/crawl/leslie.png\" alt=\"张国荣\"></p>\n<h2 id=\"完整代码可以看我的gitub链接：\"><a href=\"#完整代码可以看我的gitub链接：\" class=\"headerlink\" title=\"完整代码可以看我的gitub链接：\"></a>完整代码可以看我的gitub链接：</h2><p><a href=\"https://github.com/gongjiaqiang/my_spider\" target=\"_blank\" rel=\"noopener\">https://github.com/gongjiaqiang/my_spider</a></p>"},{"title":"python进行excel转json","type":"categories","copyright":true,"date":"2020-01-02T03:36:53.000Z","_content":"## 使用python进行excel转json文件\n### 1、首先导入我们需要用到的库\n```python\nimport xlrd\nfrom collections import OrderedDict\nimport json\n```\n<!--more-->\n\n### 2、具体代码如下：\n```python\ndef Excel_to_json(file):\n    wb = xlrd.open_workbook(file)\n\n    convert_list = []\n    sh = wb.sheet_by_index(0)\n    title = sh.row_values(0)  # 表头，json文件的key\n    print(title)\n    for rownum in range(1, sh.nrows):\n        rowvalue = sh.row_values(rownum)\n        single = OrderedDict()  # 有序字典\n        for colnum in range(0, len(rowvalue)):\n            print(\"key:{0}, value:{1}\".format(title[colnum], rowvalue[colnum]))\n            single[title[colnum]] = rowvalue[colnum]\n        convert_list.append(single)\n\n    j = json.dumps(convert_list)\n\n    with open(\"file.json\", \"w\", encoding=\"utf8\") as f:\n        f.write(j)\n```\n## 使用python进行json转csv文件\n### 1、同样，我们先导入需要的库\n\n```python\nimport csv\nimport json\n```\n### 2、代码如下：\n\n```python\ndef json_to_csv(path):\n    with open(path + '.json', \"r\") as  f:\n        data = f.read()\n    jsonData = json.loads(data)\n\n    csvfile = open(path + \".csv\", \"w\", newline='')\n    keys_write = True\n    writer = csv.writer(csvfile)\n    print(jsonData)\n    for dic in jsonData:\n        if keys_write:\n            keys = list(dic.keys())\n            print(keys)\n            writer.writerow(keys)\n            keys_write = False\n        writer.writerow(list(dic.values()))\n        print(list(dic.values()))\n    csvfile.close()\n```\n\n```python\nif __name__ == \"__main__\":\n    path = \"file\"  # 文件的路径\n    json_to_csv(path)\n```\n","source":"_posts/python进行excel转json.md","raw":"---\ntitle: python进行excel转json\ntype: categories\ncopyright: true\ndate: 2020-01-02 11:36:53\ntags:\n    - 数据分析\n    - python\ncategories: [python, 数据分析]\n---\n## 使用python进行excel转json文件\n### 1、首先导入我们需要用到的库\n```python\nimport xlrd\nfrom collections import OrderedDict\nimport json\n```\n<!--more-->\n\n### 2、具体代码如下：\n```python\ndef Excel_to_json(file):\n    wb = xlrd.open_workbook(file)\n\n    convert_list = []\n    sh = wb.sheet_by_index(0)\n    title = sh.row_values(0)  # 表头，json文件的key\n    print(title)\n    for rownum in range(1, sh.nrows):\n        rowvalue = sh.row_values(rownum)\n        single = OrderedDict()  # 有序字典\n        for colnum in range(0, len(rowvalue)):\n            print(\"key:{0}, value:{1}\".format(title[colnum], rowvalue[colnum]))\n            single[title[colnum]] = rowvalue[colnum]\n        convert_list.append(single)\n\n    j = json.dumps(convert_list)\n\n    with open(\"file.json\", \"w\", encoding=\"utf8\") as f:\n        f.write(j)\n```\n## 使用python进行json转csv文件\n### 1、同样，我们先导入需要的库\n\n```python\nimport csv\nimport json\n```\n### 2、代码如下：\n\n```python\ndef json_to_csv(path):\n    with open(path + '.json', \"r\") as  f:\n        data = f.read()\n    jsonData = json.loads(data)\n\n    csvfile = open(path + \".csv\", \"w\", newline='')\n    keys_write = True\n    writer = csv.writer(csvfile)\n    print(jsonData)\n    for dic in jsonData:\n        if keys_write:\n            keys = list(dic.keys())\n            print(keys)\n            writer.writerow(keys)\n            keys_write = False\n        writer.writerow(list(dic.values()))\n        print(list(dic.values()))\n    csvfile.close()\n```\n\n```python\nif __name__ == \"__main__\":\n    path = \"file\"  # 文件的路径\n    json_to_csv(path)\n```\n","slug":"python进行excel转json","published":1,"updated":"2022-02-25T08:37:09.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77ys001whvx317ee7xjb","content":"<h2 id=\"使用python进行excel转json文件\"><a href=\"#使用python进行excel转json文件\" class=\"headerlink\" title=\"使用python进行excel转json文件\"></a>使用python进行excel转json文件</h2><h3 id=\"1、首先导入我们需要用到的库\"><a href=\"#1、首先导入我们需要用到的库\" class=\"headerlink\" title=\"1、首先导入我们需要用到的库\"></a>1、首先导入我们需要用到的库</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xlrd</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<h3 id=\"2、具体代码如下：\"><a href=\"#2、具体代码如下：\" class=\"headerlink\" title=\"2、具体代码如下：\"></a>2、具体代码如下：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Excel_to_json</span><span class=\"params\">(file)</span>:</span></span><br><span class=\"line\">    wb = xlrd.open_workbook(file)</span><br><span class=\"line\"></span><br><span class=\"line\">    convert_list = []</span><br><span class=\"line\">    sh = wb.sheet_by_index(<span class=\"number\">0</span>)</span><br><span class=\"line\">    title = sh.row_values(<span class=\"number\">0</span>)  <span class=\"comment\"># 表头，json文件的key</span></span><br><span class=\"line\">    print(title)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> rownum <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, sh.nrows):</span><br><span class=\"line\">        rowvalue = sh.row_values(rownum)</span><br><span class=\"line\">        single = OrderedDict()  <span class=\"comment\"># 有序字典</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> colnum <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(rowvalue)):</span><br><span class=\"line\">            print(<span class=\"string\">\"key:&#123;0&#125;, value:&#123;1&#125;\"</span>.format(title[colnum], rowvalue[colnum]))</span><br><span class=\"line\">            single[title[colnum]] = rowvalue[colnum]</span><br><span class=\"line\">        convert_list.append(single)</span><br><span class=\"line\"></span><br><span class=\"line\">    j = json.dumps(convert_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"file.json\"</span>, <span class=\"string\">\"w\"</span>, encoding=<span class=\"string\">\"utf8\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(j)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用python进行json转csv文件\"><a href=\"#使用python进行json转csv文件\" class=\"headerlink\" title=\"使用python进行json转csv文件\"></a>使用python进行json转csv文件</h2><h3 id=\"1、同样，我们先导入需要的库\"><a href=\"#1、同样，我们先导入需要的库\" class=\"headerlink\" title=\"1、同样，我们先导入需要的库\"></a>1、同样，我们先导入需要的库</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、代码如下：\"><a href=\"#2、代码如下：\" class=\"headerlink\" title=\"2、代码如下：\"></a>2、代码如下：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">json_to_csv</span><span class=\"params\">(path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(path + <span class=\"string\">'.json'</span>, <span class=\"string\">\"r\"</span>) <span class=\"keyword\">as</span>  f:</span><br><span class=\"line\">        data = f.read()</span><br><span class=\"line\">    jsonData = json.loads(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    csvfile = open(path + <span class=\"string\">\".csv\"</span>, <span class=\"string\">\"w\"</span>, newline=<span class=\"string\">''</span>)</span><br><span class=\"line\">    keys_write = <span class=\"literal\">True</span></span><br><span class=\"line\">    writer = csv.writer(csvfile)</span><br><span class=\"line\">    print(jsonData)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> dic <span class=\"keyword\">in</span> jsonData:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> keys_write:</span><br><span class=\"line\">            keys = list(dic.keys())</span><br><span class=\"line\">            print(keys)</span><br><span class=\"line\">            writer.writerow(keys)</span><br><span class=\"line\">            keys_write = <span class=\"literal\">False</span></span><br><span class=\"line\">        writer.writerow(list(dic.values()))</span><br><span class=\"line\">        print(list(dic.values()))</span><br><span class=\"line\">    csvfile.close()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    path = <span class=\"string\">\"file\"</span>  <span class=\"comment\"># 文件的路径</span></span><br><span class=\"line\">    json_to_csv(path)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"使用python进行excel转json文件\"><a href=\"#使用python进行excel转json文件\" class=\"headerlink\" title=\"使用python进行excel转json文件\"></a>使用python进行excel转json文件</h2><h3 id=\"1、首先导入我们需要用到的库\"><a href=\"#1、首先导入我们需要用到的库\" class=\"headerlink\" title=\"1、首先导入我们需要用到的库\"></a>1、首先导入我们需要用到的库</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xlrd</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"2、具体代码如下：\"><a href=\"#2、具体代码如下：\" class=\"headerlink\" title=\"2、具体代码如下：\"></a>2、具体代码如下：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Excel_to_json</span><span class=\"params\">(file)</span>:</span></span><br><span class=\"line\">    wb = xlrd.open_workbook(file)</span><br><span class=\"line\"></span><br><span class=\"line\">    convert_list = []</span><br><span class=\"line\">    sh = wb.sheet_by_index(<span class=\"number\">0</span>)</span><br><span class=\"line\">    title = sh.row_values(<span class=\"number\">0</span>)  <span class=\"comment\"># 表头，json文件的key</span></span><br><span class=\"line\">    print(title)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> rownum <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, sh.nrows):</span><br><span class=\"line\">        rowvalue = sh.row_values(rownum)</span><br><span class=\"line\">        single = OrderedDict()  <span class=\"comment\"># 有序字典</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> colnum <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(rowvalue)):</span><br><span class=\"line\">            print(<span class=\"string\">\"key:&#123;0&#125;, value:&#123;1&#125;\"</span>.format(title[colnum], rowvalue[colnum]))</span><br><span class=\"line\">            single[title[colnum]] = rowvalue[colnum]</span><br><span class=\"line\">        convert_list.append(single)</span><br><span class=\"line\"></span><br><span class=\"line\">    j = json.dumps(convert_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"file.json\"</span>, <span class=\"string\">\"w\"</span>, encoding=<span class=\"string\">\"utf8\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(j)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用python进行json转csv文件\"><a href=\"#使用python进行json转csv文件\" class=\"headerlink\" title=\"使用python进行json转csv文件\"></a>使用python进行json转csv文件</h2><h3 id=\"1、同样，我们先导入需要的库\"><a href=\"#1、同样，我们先导入需要的库\" class=\"headerlink\" title=\"1、同样，我们先导入需要的库\"></a>1、同样，我们先导入需要的库</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、代码如下：\"><a href=\"#2、代码如下：\" class=\"headerlink\" title=\"2、代码如下：\"></a>2、代码如下：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">json_to_csv</span><span class=\"params\">(path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(path + <span class=\"string\">'.json'</span>, <span class=\"string\">\"r\"</span>) <span class=\"keyword\">as</span>  f:</span><br><span class=\"line\">        data = f.read()</span><br><span class=\"line\">    jsonData = json.loads(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    csvfile = open(path + <span class=\"string\">\".csv\"</span>, <span class=\"string\">\"w\"</span>, newline=<span class=\"string\">''</span>)</span><br><span class=\"line\">    keys_write = <span class=\"literal\">True</span></span><br><span class=\"line\">    writer = csv.writer(csvfile)</span><br><span class=\"line\">    print(jsonData)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> dic <span class=\"keyword\">in</span> jsonData:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> keys_write:</span><br><span class=\"line\">            keys = list(dic.keys())</span><br><span class=\"line\">            print(keys)</span><br><span class=\"line\">            writer.writerow(keys)</span><br><span class=\"line\">            keys_write = <span class=\"literal\">False</span></span><br><span class=\"line\">        writer.writerow(list(dic.values()))</span><br><span class=\"line\">        print(list(dic.values()))</span><br><span class=\"line\">    csvfile.close()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    path = <span class=\"string\">\"file\"</span>  <span class=\"comment\"># 文件的路径</span></span><br><span class=\"line\">    json_to_csv(path)</span><br></pre></td></tr></table></figure>"},{"title":"解决api变化问题","type":"categories","copyright":true,"date":"2020-01-02T07:48:11.000Z","_content":"\n## python解决api变化的问题\n\n案例：http://cic.org.vn\n\n&emsp;&emsp;该网站用python进行模拟登录时，url链接是经过js加载生成的，当我们用requests发送get请求的时候，返回的结果并不是真正的主页数据，而是一段js代码，但是直接从这段js代码中解析我们需要的登录页url很困难，因此这里我们可以构造一个轻量级的js环境，执行js代码来获取我们需要的数据。\n\n环境：\n我们通过jsdom来构造一个轻量的环境，它是基于node的，因此我们需要安装node环境，这里安装的是node8的版本；\n<!--more-->\n\n```\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nsudo apt-get install -y nodejs\n```\n安装jsdom\n```\nnpm install jsdom\n```\n\n创建js的运行环境\n```python\njs_env = '''\n    const jsdom = require(\"jsdom\");const { JSDOM } = jsdom;\n    const dom = new JSDOM(`<!DOCTYPE html><p>Hello world</p>`, {\n        url: \"%s\",\n        contentType: \"text/html;charset=utf-8\",\n        includeNodeLocations: true,\n        storageQuota: 10000000\n    });\n    const window=dom.window;\n    const document=dom.window.document;\n    const navigator = dom.window.navigator;\n    '''\n```\n### 爬虫部分\n#### 导包\n```python\n# -*- coding: utf-8 -*-\n\nimport execjs\nimport requests\nfrom scrapy import Selector\n```\n\n#### 构造请求\n```python\nsess = requests.Session()\n\nheaders = {\n    'Host': 'cic.org.vn',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n    'Accept-Language': 'en-US,en;q=0.9',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Connection': 'keep-alive',\n    'Upgrade-Insecure-Requests': '1'\n}\n\nurl = \"http://cic.org.vn/\"\nres = sess.get(url=url, headers=headers)\nhtml = Selector(text=res.text)\njs = html.xpath(\"/html/head/script/text()\").extract_first()\n```\n\n#### 将我们获取的js代码加载到我们能构建的js运行环境中\n\n```python\nctx = execjs.compile(js_env % res.url + js)\n```\n\n执行js获取生成的下一个链接\n\n```python\nnext_url = ctx.eval(\"href\") + ctx.eval(\"query\")\nprint(next_url)\n\n# 结果\nurl = \"https://cic.org.vn/webcenter/portal/CMSPortal/;jsessionid=4Hej6rGiIAbPiBs6nsBUMP61E9XNGVRYkRzjI5H0kxOhUW9dTaqR!873813657?_afrLoop=715225492645337\"\n```\n\n接下来的步骤都类似上一步，直到我们最终得到登录的url；最后我们就可以正常的模拟登录进行操作抓取数据了。\n\n## 总结\n&emsp;&emsp;本次的案例是我第一次遇到的爬虫情况，该网站的主页url也是经过js加载的，其参数是一直变化的，其返回的结果并不是主页的数据，因此我们无法直接从返回的数据中解析出我们需要的参数，所以我们构造这么一个轻量级的js环境进行交互，直接问询我们需要的url参数，到最终获取我们需要的登录页链接中间这种js交互需要3次。","source":"_posts/解决api变化问题.md","raw":"---\ntitle: 解决api变化问题\ntype: categories\ncopyright: true\ndate: 2020-01-02 15:48:11\ntags:\n    - 项目\n    - requests\n    - jsdom\ncategories: [python, 爬虫] \n---\n\n## python解决api变化的问题\n\n案例：http://cic.org.vn\n\n&emsp;&emsp;该网站用python进行模拟登录时，url链接是经过js加载生成的，当我们用requests发送get请求的时候，返回的结果并不是真正的主页数据，而是一段js代码，但是直接从这段js代码中解析我们需要的登录页url很困难，因此这里我们可以构造一个轻量级的js环境，执行js代码来获取我们需要的数据。\n\n环境：\n我们通过jsdom来构造一个轻量的环境，它是基于node的，因此我们需要安装node环境，这里安装的是node8的版本；\n<!--more-->\n\n```\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nsudo apt-get install -y nodejs\n```\n安装jsdom\n```\nnpm install jsdom\n```\n\n创建js的运行环境\n```python\njs_env = '''\n    const jsdom = require(\"jsdom\");const { JSDOM } = jsdom;\n    const dom = new JSDOM(`<!DOCTYPE html><p>Hello world</p>`, {\n        url: \"%s\",\n        contentType: \"text/html;charset=utf-8\",\n        includeNodeLocations: true,\n        storageQuota: 10000000\n    });\n    const window=dom.window;\n    const document=dom.window.document;\n    const navigator = dom.window.navigator;\n    '''\n```\n### 爬虫部分\n#### 导包\n```python\n# -*- coding: utf-8 -*-\n\nimport execjs\nimport requests\nfrom scrapy import Selector\n```\n\n#### 构造请求\n```python\nsess = requests.Session()\n\nheaders = {\n    'Host': 'cic.org.vn',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n    'Accept-Language': 'en-US,en;q=0.9',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Connection': 'keep-alive',\n    'Upgrade-Insecure-Requests': '1'\n}\n\nurl = \"http://cic.org.vn/\"\nres = sess.get(url=url, headers=headers)\nhtml = Selector(text=res.text)\njs = html.xpath(\"/html/head/script/text()\").extract_first()\n```\n\n#### 将我们获取的js代码加载到我们能构建的js运行环境中\n\n```python\nctx = execjs.compile(js_env % res.url + js)\n```\n\n执行js获取生成的下一个链接\n\n```python\nnext_url = ctx.eval(\"href\") + ctx.eval(\"query\")\nprint(next_url)\n\n# 结果\nurl = \"https://cic.org.vn/webcenter/portal/CMSPortal/;jsessionid=4Hej6rGiIAbPiBs6nsBUMP61E9XNGVRYkRzjI5H0kxOhUW9dTaqR!873813657?_afrLoop=715225492645337\"\n```\n\n接下来的步骤都类似上一步，直到我们最终得到登录的url；最后我们就可以正常的模拟登录进行操作抓取数据了。\n\n## 总结\n&emsp;&emsp;本次的案例是我第一次遇到的爬虫情况，该网站的主页url也是经过js加载的，其参数是一直变化的，其返回的结果并不是主页的数据，因此我们无法直接从返回的数据中解析出我们需要的参数，所以我们构造这么一个轻量级的js环境进行交互，直接问询我们需要的url参数，到最终获取我们需要的登录页链接中间这种js交互需要3次。","slug":"解决api变化问题","published":1,"updated":"2022-02-25T08:37:09.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77yt0021hvx3gl1n3cnp","content":"<h2 id=\"python解决api变化的问题\"><a href=\"#python解决api变化的问题\" class=\"headerlink\" title=\"python解决api变化的问题\"></a>python解决api变化的问题</h2><p>案例：<a href=\"http://cic.org.vn\" target=\"_blank\" rel=\"noopener\">http://cic.org.vn</a></p>\n<p>&emsp;&emsp;该网站用python进行模拟登录时，url链接是经过js加载生成的，当我们用requests发送get请求的时候，返回的结果并不是真正的主页数据，而是一段js代码，但是直接从这段js代码中解析我们需要的登录页url很困难，因此这里我们可以构造一个轻量级的js环境，执行js代码来获取我们需要的数据。</p>\n<p>环境：<br>我们通过jsdom来构造一个轻量的环境，它是基于node的，因此我们需要安装node环境，这里安装的是node8的版本；</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL http<span class=\"variable\">s:</span>//<span class=\"keyword\">deb</span>.nodesource.<span class=\"keyword\">com</span>/setup_8.<span class=\"keyword\">x</span> | sudo -E bash -</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install -<span class=\"keyword\">y</span> nodejs</span><br></pre></td></tr></table></figure>\n<p>安装jsdom</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> jsdom</span><br></pre></td></tr></table></figure>\n\n<p>创建js的运行环境</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js_env = <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    const jsdom = require(\"jsdom\");const &#123; JSDOM &#125; = jsdom;</span></span><br><span class=\"line\"><span class=\"string\">    const dom = new JSDOM(`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`, &#123;</span></span><br><span class=\"line\"><span class=\"string\">        url: \"%s\",</span></span><br><span class=\"line\"><span class=\"string\">        contentType: \"text/html;charset=utf-8\",</span></span><br><span class=\"line\"><span class=\"string\">        includeNodeLocations: true,</span></span><br><span class=\"line\"><span class=\"string\">        storageQuota: 10000000</span></span><br><span class=\"line\"><span class=\"string\">    &#125;);</span></span><br><span class=\"line\"><span class=\"string\">    const window=dom.window;</span></span><br><span class=\"line\"><span class=\"string\">    const document=dom.window.document;</span></span><br><span class=\"line\"><span class=\"string\">    const navigator = dom.window.navigator;</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"爬虫部分\"><a href=\"#爬虫部分\" class=\"headerlink\" title=\"爬虫部分\"></a>爬虫部分</h3><h4 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> execjs</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> Selector</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构造请求\"><a href=\"#构造请求\" class=\"headerlink\" title=\"构造请求\"></a>构造请求</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sess = requests.Session()</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'Host'</span>: <span class=\"string\">'cic.org.vn'</span>,</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept'</span>: <span class=\"string\">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'en-US,en;q=0.9'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Encoding'</span>: <span class=\"string\">'gzip, deflate, br'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Connection'</span>: <span class=\"string\">'keep-alive'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Upgrade-Insecure-Requests'</span>: <span class=\"string\">'1'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://cic.org.vn/\"</span></span><br><span class=\"line\">res = sess.get(url=url, headers=headers)</span><br><span class=\"line\">html = Selector(text=res.text)</span><br><span class=\"line\">js = html.xpath(<span class=\"string\">\"/html/head/script/text()\"</span>).extract_first()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将我们获取的js代码加载到我们能构建的js运行环境中\"><a href=\"#将我们获取的js代码加载到我们能构建的js运行环境中\" class=\"headerlink\" title=\"将我们获取的js代码加载到我们能构建的js运行环境中\"></a>将我们获取的js代码加载到我们能构建的js运行环境中</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx = execjs.compile(js_env % res.url + js)</span><br></pre></td></tr></table></figure>\n\n<p>执行js获取生成的下一个链接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next_url = ctx.eval(<span class=\"string\">\"href\"</span>) + ctx.eval(<span class=\"string\">\"query\"</span>)</span><br><span class=\"line\">print(next_url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 结果</span></span><br><span class=\"line\">url = <span class=\"string\">\"https://cic.org.vn/webcenter/portal/CMSPortal/;jsessionid=4Hej6rGiIAbPiBs6nsBUMP61E9XNGVRYkRzjI5H0kxOhUW9dTaqR!873813657?_afrLoop=715225492645337\"</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来的步骤都类似上一步，直到我们最终得到登录的url；最后我们就可以正常的模拟登录进行操作抓取数据了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>&emsp;&emsp;本次的案例是我第一次遇到的爬虫情况，该网站的主页url也是经过js加载的，其参数是一直变化的，其返回的结果并不是主页的数据，因此我们无法直接从返回的数据中解析出我们需要的参数，所以我们构造这么一个轻量级的js环境进行交互，直接问询我们需要的url参数，到最终获取我们需要的登录页链接中间这种js交互需要3次。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"python解决api变化的问题\"><a href=\"#python解决api变化的问题\" class=\"headerlink\" title=\"python解决api变化的问题\"></a>python解决api变化的问题</h2><p>案例：<a href=\"http://cic.org.vn\" target=\"_blank\" rel=\"noopener\">http://cic.org.vn</a></p>\n<p>&emsp;&emsp;该网站用python进行模拟登录时，url链接是经过js加载生成的，当我们用requests发送get请求的时候，返回的结果并不是真正的主页数据，而是一段js代码，但是直接从这段js代码中解析我们需要的登录页url很困难，因此这里我们可以构造一个轻量级的js环境，执行js代码来获取我们需要的数据。</p>\n<p>环境：<br>我们通过jsdom来构造一个轻量的环境，它是基于node的，因此我们需要安装node环境，这里安装的是node8的版本；</p>","more":"<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL http<span class=\"variable\">s:</span>//<span class=\"keyword\">deb</span>.nodesource.<span class=\"keyword\">com</span>/setup_8.<span class=\"keyword\">x</span> | sudo -E bash -</span><br><span class=\"line\">sudo apt-<span class=\"built_in\">get</span> install -<span class=\"keyword\">y</span> nodejs</span><br></pre></td></tr></table></figure>\n<p>安装jsdom</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> jsdom</span><br></pre></td></tr></table></figure>\n\n<p>创建js的运行环境</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js_env = <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    const jsdom = require(\"jsdom\");const &#123; JSDOM &#125; = jsdom;</span></span><br><span class=\"line\"><span class=\"string\">    const dom = new JSDOM(`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`, &#123;</span></span><br><span class=\"line\"><span class=\"string\">        url: \"%s\",</span></span><br><span class=\"line\"><span class=\"string\">        contentType: \"text/html;charset=utf-8\",</span></span><br><span class=\"line\"><span class=\"string\">        includeNodeLocations: true,</span></span><br><span class=\"line\"><span class=\"string\">        storageQuota: 10000000</span></span><br><span class=\"line\"><span class=\"string\">    &#125;);</span></span><br><span class=\"line\"><span class=\"string\">    const window=dom.window;</span></span><br><span class=\"line\"><span class=\"string\">    const document=dom.window.document;</span></span><br><span class=\"line\"><span class=\"string\">    const navigator = dom.window.navigator;</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"爬虫部分\"><a href=\"#爬虫部分\" class=\"headerlink\" title=\"爬虫部分\"></a>爬虫部分</h3><h4 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> execjs</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> Selector</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"构造请求\"><a href=\"#构造请求\" class=\"headerlink\" title=\"构造请求\"></a>构造请求</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sess = requests.Session()</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'Host'</span>: <span class=\"string\">'cic.org.vn'</span>,</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept'</span>: <span class=\"string\">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'en-US,en;q=0.9'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Encoding'</span>: <span class=\"string\">'gzip, deflate, br'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Connection'</span>: <span class=\"string\">'keep-alive'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Upgrade-Insecure-Requests'</span>: <span class=\"string\">'1'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://cic.org.vn/\"</span></span><br><span class=\"line\">res = sess.get(url=url, headers=headers)</span><br><span class=\"line\">html = Selector(text=res.text)</span><br><span class=\"line\">js = html.xpath(<span class=\"string\">\"/html/head/script/text()\"</span>).extract_first()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将我们获取的js代码加载到我们能构建的js运行环境中\"><a href=\"#将我们获取的js代码加载到我们能构建的js运行环境中\" class=\"headerlink\" title=\"将我们获取的js代码加载到我们能构建的js运行环境中\"></a>将我们获取的js代码加载到我们能构建的js运行环境中</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx = execjs.compile(js_env % res.url + js)</span><br></pre></td></tr></table></figure>\n\n<p>执行js获取生成的下一个链接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next_url = ctx.eval(<span class=\"string\">\"href\"</span>) + ctx.eval(<span class=\"string\">\"query\"</span>)</span><br><span class=\"line\">print(next_url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 结果</span></span><br><span class=\"line\">url = <span class=\"string\">\"https://cic.org.vn/webcenter/portal/CMSPortal/;jsessionid=4Hej6rGiIAbPiBs6nsBUMP61E9XNGVRYkRzjI5H0kxOhUW9dTaqR!873813657?_afrLoop=715225492645337\"</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来的步骤都类似上一步，直到我们最终得到登录的url；最后我们就可以正常的模拟登录进行操作抓取数据了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>&emsp;&emsp;本次的案例是我第一次遇到的爬虫情况，该网站的主页url也是经过js加载的，其参数是一直变化的，其返回的结果并不是主页的数据，因此我们无法直接从返回的数据中解析出我们需要的参数，所以我们构造这么一个轻量级的js环境进行交互，直接问询我们需要的url参数，到最终获取我们需要的登录页链接中间这种js交互需要3次。</p>"},{"title":"tcp_socket","type":"categories","copyright":true,"date":"2022-03-01T06:52:00.000Z","keywords":"tcp, socket, python","_content":"\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n## 用python实现tcp socket服务端与客户端的通信\n\n#### tcp客户端\n```python\nimport socket\nimport traceback\nimport threading\n\n\ndef send_msg(client_socket):\n    # 准备发送数据\n    send_data = input(\"要发送的数据：\").encode('utf8')\n    # 发送数据\n    client_socket.send(send_data)\n\n\ndef recv_msg(client_socket):\n    # 接收数据\n        recv_data = client_socket.recv(1024).decode('utf8')\n        print(recv_data)\n\n\ndef main():\n    # 创建socket\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 建立连接\n    client_socket.connect(('127.0.0.1', 8989))\n    try:\n        while 1:\n            # 发送数据\n            send_msg(client_socket)\n            # 接收数据\n            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))\n            recv_process.start()\n            recv_process.join()\n            # recv_msg(client_socket)\n            flag = input(\"是否结束会话(yes or no):\")\n            if flag == 'yes':\n                # 关闭socket\n                client_socket.close()\n                break\n    except:\n        client_socket.close()\n        print('客户端出现异常', traceback.format_exc())\n```\n<!-- more -->\n\n#### tcp服务端\n```python\nimport socket\nimport threading\nimport traceback\n\n\ndef recv_msg(client_socket):\n    # 接收客户端的数据\n    recv_data = client_socket.recv(1024).decode(\"utf8\")\n    print(recv_data)\n\n\ndef send_msg(client_socket):\n    # 返回给客户端的数据\n    send_data = input(\"返回给客户端的数据：\").encode('utf8')\n    client_socket.send(send_data)\n\n\ndef main():\n    # 创建socket\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 设置socket选项， 立即释放端口\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n    # 绑定端口\n    server_socket.bind(('', 8989))\n    # 设置监听\n    server_socket.listen(128)\n    # 创建服务于客户端的socket\n    client_socket, ip_port = server_socket.accept()\n    try:\n        while 1:\n            # 返回给客户端的数据\n            send_msg(client_socket)\n            # 接收客户端的数据\n            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))\n            recv_process.start()\n            # recv_msg(client_socket)\n            recv_process.join()\n            # 关闭服务客户端的socket\n            client_socket.close()\n    except:\n        # 关闭服务客户端的socket\n        client_socket.close()\n        print(\"服务器出现异常：\", traceback.format_exc())\n    # 关闭监听的socket, 不再接收客户端的连接\n    server_socket.close()\n```\n\n\n\n\n","source":"_posts/tcp-socket.md","raw":"---\ntitle: tcp_socket\ntype: categories\ncopyright: true\ndate: 2022-03-01 14:52:00\ntags:\n    - python\n    - tcp\n    - socket\ncategories: [python, tcp, socket]\nkeywords: tcp, socket, python\n---\n\n<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n## 用python实现tcp socket服务端与客户端的通信\n\n#### tcp客户端\n```python\nimport socket\nimport traceback\nimport threading\n\n\ndef send_msg(client_socket):\n    # 准备发送数据\n    send_data = input(\"要发送的数据：\").encode('utf8')\n    # 发送数据\n    client_socket.send(send_data)\n\n\ndef recv_msg(client_socket):\n    # 接收数据\n        recv_data = client_socket.recv(1024).decode('utf8')\n        print(recv_data)\n\n\ndef main():\n    # 创建socket\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 建立连接\n    client_socket.connect(('127.0.0.1', 8989))\n    try:\n        while 1:\n            # 发送数据\n            send_msg(client_socket)\n            # 接收数据\n            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))\n            recv_process.start()\n            recv_process.join()\n            # recv_msg(client_socket)\n            flag = input(\"是否结束会话(yes or no):\")\n            if flag == 'yes':\n                # 关闭socket\n                client_socket.close()\n                break\n    except:\n        client_socket.close()\n        print('客户端出现异常', traceback.format_exc())\n```\n<!-- more -->\n\n#### tcp服务端\n```python\nimport socket\nimport threading\nimport traceback\n\n\ndef recv_msg(client_socket):\n    # 接收客户端的数据\n    recv_data = client_socket.recv(1024).decode(\"utf8\")\n    print(recv_data)\n\n\ndef send_msg(client_socket):\n    # 返回给客户端的数据\n    send_data = input(\"返回给客户端的数据：\").encode('utf8')\n    client_socket.send(send_data)\n\n\ndef main():\n    # 创建socket\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 设置socket选项， 立即释放端口\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n    # 绑定端口\n    server_socket.bind(('', 8989))\n    # 设置监听\n    server_socket.listen(128)\n    # 创建服务于客户端的socket\n    client_socket, ip_port = server_socket.accept()\n    try:\n        while 1:\n            # 返回给客户端的数据\n            send_msg(client_socket)\n            # 接收客户端的数据\n            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))\n            recv_process.start()\n            # recv_msg(client_socket)\n            recv_process.join()\n            # 关闭服务客户端的socket\n            client_socket.close()\n    except:\n        # 关闭服务客户端的socket\n        client_socket.close()\n        print(\"服务器出现异常：\", traceback.format_exc())\n    # 关闭监听的socket, 不再接收客户端的连接\n    server_socket.close()\n```\n\n\n\n\n","slug":"tcp-socket","published":1,"updated":"2022-03-01T06:56:37.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s77yu0023hvx3art26la3","content":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<h2 id=\"用python实现tcp-socket服务端与客户端的通信\"><a href=\"#用python实现tcp-socket服务端与客户端的通信\" class=\"headerlink\" title=\"用python实现tcp socket服务端与客户端的通信\"></a>用python实现tcp socket服务端与客户端的通信</h2><h4 id=\"tcp客户端\"><a href=\"#tcp客户端\" class=\"headerlink\" title=\"tcp客户端\"></a>tcp客户端</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 准备发送数据</span></span><br><span class=\"line\">    send_data = input(<span class=\"string\">\"要发送的数据：\"</span>).encode(<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 发送数据</span></span><br><span class=\"line\">    client_socket.send(send_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">recv_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 接收数据</span></span><br><span class=\"line\">        recv_data = client_socket.recv(<span class=\"number\">1024</span>).decode(<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">        print(recv_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建socket</span></span><br><span class=\"line\">    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    <span class=\"comment\"># 建立连接</span></span><br><span class=\"line\">    client_socket.connect((<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">8989</span>))</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 发送数据</span></span><br><span class=\"line\">            send_msg(client_socket)</span><br><span class=\"line\">            <span class=\"comment\"># 接收数据</span></span><br><span class=\"line\">            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))</span><br><span class=\"line\">            recv_process.start()</span><br><span class=\"line\">            recv_process.join()</span><br><span class=\"line\">            <span class=\"comment\"># recv_msg(client_socket)</span></span><br><span class=\"line\">            flag = input(<span class=\"string\">\"是否结束会话(yes or no):\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag == <span class=\"string\">'yes'</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 关闭socket</span></span><br><span class=\"line\">                client_socket.close()</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        client_socket.close()</span><br><span class=\"line\">        print(<span class=\"string\">'客户端出现异常'</span>, traceback.format_exc())</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<h4 id=\"tcp服务端\"><a href=\"#tcp服务端\" class=\"headerlink\" title=\"tcp服务端\"></a>tcp服务端</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">recv_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 接收客户端的数据</span></span><br><span class=\"line\">    recv_data = client_socket.recv(<span class=\"number\">1024</span>).decode(<span class=\"string\">\"utf8\"</span>)</span><br><span class=\"line\">    print(recv_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回给客户端的数据</span></span><br><span class=\"line\">    send_data = input(<span class=\"string\">\"返回给客户端的数据：\"</span>).encode(<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">    client_socket.send(send_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建socket</span></span><br><span class=\"line\">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    <span class=\"comment\"># 设置socket选项， 立即释放端口</span></span><br><span class=\"line\">    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 绑定端口</span></span><br><span class=\"line\">    server_socket.bind((<span class=\"string\">''</span>, <span class=\"number\">8989</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 设置监听</span></span><br><span class=\"line\">    server_socket.listen(<span class=\"number\">128</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 创建服务于客户端的socket</span></span><br><span class=\"line\">    client_socket, ip_port = server_socket.accept()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 返回给客户端的数据</span></span><br><span class=\"line\">            send_msg(client_socket)</span><br><span class=\"line\">            <span class=\"comment\"># 接收客户端的数据</span></span><br><span class=\"line\">            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))</span><br><span class=\"line\">            recv_process.start()</span><br><span class=\"line\">            <span class=\"comment\"># recv_msg(client_socket)</span></span><br><span class=\"line\">            recv_process.join()</span><br><span class=\"line\">            <span class=\"comment\"># 关闭服务客户端的socket</span></span><br><span class=\"line\">            client_socket.close()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 关闭服务客户端的socket</span></span><br><span class=\"line\">        client_socket.close()</span><br><span class=\"line\">        print(<span class=\"string\">\"服务器出现异常：\"</span>, traceback.format_exc())</span><br><span class=\"line\">    <span class=\"comment\"># 关闭监听的socket, 不再接收客户端的连接</span></span><br><span class=\"line\">    server_socket.close()</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"<script type=\"text/javascript\" src=\"/js/src/bai.js\"></script>\n\n<h2 id=\"用python实现tcp-socket服务端与客户端的通信\"><a href=\"#用python实现tcp-socket服务端与客户端的通信\" class=\"headerlink\" title=\"用python实现tcp socket服务端与客户端的通信\"></a>用python实现tcp socket服务端与客户端的通信</h2><h4 id=\"tcp客户端\"><a href=\"#tcp客户端\" class=\"headerlink\" title=\"tcp客户端\"></a>tcp客户端</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 准备发送数据</span></span><br><span class=\"line\">    send_data = input(<span class=\"string\">\"要发送的数据：\"</span>).encode(<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 发送数据</span></span><br><span class=\"line\">    client_socket.send(send_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">recv_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 接收数据</span></span><br><span class=\"line\">        recv_data = client_socket.recv(<span class=\"number\">1024</span>).decode(<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">        print(recv_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建socket</span></span><br><span class=\"line\">    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    <span class=\"comment\"># 建立连接</span></span><br><span class=\"line\">    client_socket.connect((<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">8989</span>))</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 发送数据</span></span><br><span class=\"line\">            send_msg(client_socket)</span><br><span class=\"line\">            <span class=\"comment\"># 接收数据</span></span><br><span class=\"line\">            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))</span><br><span class=\"line\">            recv_process.start()</span><br><span class=\"line\">            recv_process.join()</span><br><span class=\"line\">            <span class=\"comment\"># recv_msg(client_socket)</span></span><br><span class=\"line\">            flag = input(<span class=\"string\">\"是否结束会话(yes or no):\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> flag == <span class=\"string\">'yes'</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 关闭socket</span></span><br><span class=\"line\">                client_socket.close()</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        client_socket.close()</span><br><span class=\"line\">        print(<span class=\"string\">'客户端出现异常'</span>, traceback.format_exc())</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"tcp服务端\"><a href=\"#tcp服务端\" class=\"headerlink\" title=\"tcp服务端\"></a>tcp服务端</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> traceback</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">recv_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 接收客户端的数据</span></span><br><span class=\"line\">    recv_data = client_socket.recv(<span class=\"number\">1024</span>).decode(<span class=\"string\">\"utf8\"</span>)</span><br><span class=\"line\">    print(recv_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_msg</span><span class=\"params\">(client_socket)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 返回给客户端的数据</span></span><br><span class=\"line\">    send_data = input(<span class=\"string\">\"返回给客户端的数据：\"</span>).encode(<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">    client_socket.send(send_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建socket</span></span><br><span class=\"line\">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    <span class=\"comment\"># 设置socket选项， 立即释放端口</span></span><br><span class=\"line\">    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 绑定端口</span></span><br><span class=\"line\">    server_socket.bind((<span class=\"string\">''</span>, <span class=\"number\">8989</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 设置监听</span></span><br><span class=\"line\">    server_socket.listen(<span class=\"number\">128</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 创建服务于客户端的socket</span></span><br><span class=\"line\">    client_socket, ip_port = server_socket.accept()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 返回给客户端的数据</span></span><br><span class=\"line\">            send_msg(client_socket)</span><br><span class=\"line\">            <span class=\"comment\"># 接收客户端的数据</span></span><br><span class=\"line\">            recv_process = threading.Thread(target=recv_msg, args=(client_socket,))</span><br><span class=\"line\">            recv_process.start()</span><br><span class=\"line\">            <span class=\"comment\"># recv_msg(client_socket)</span></span><br><span class=\"line\">            recv_process.join()</span><br><span class=\"line\">            <span class=\"comment\"># 关闭服务客户端的socket</span></span><br><span class=\"line\">            client_socket.close()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 关闭服务客户端的socket</span></span><br><span class=\"line\">        client_socket.close()</span><br><span class=\"line\">        print(<span class=\"string\">\"服务器出现异常：\"</span>, traceback.format_exc())</span><br><span class=\"line\">    <span class=\"comment\"># 关闭监听的socket, 不再接收客户端的连接</span></span><br><span class=\"line\">    server_socket.close()</span><br></pre></td></tr></table></figure>"},{"title":"numpy学习","type":"categories","copyright":true,"date":"2020-01-02T08:32:20.000Z","_content":"\n## numpy学习小结\n\n### 安装numpy包\n```\npip3 install numpy\n```\n### 导包\n```python\nimport numpy as np\n```\n<!--more-->\n\n* ndarray.ndim：数组的维数。在Python世界中，维数称之为rank\n* ndarray.shape：数组的维度。这是一系列数字，长度由数组的维度（ndim）决定。例如：长度为n的一维数组的shape是n。一个n行m列的矩阵的shape是n,m\n* ndarray.size：数组中所有元素的数量\n* ndarray.dtype：数组中元素的类型，例如numpy.int32, numpy.int16或者numpy.float64\n* ndarray.itemsize：数组中每个元素的大小，单位为字节\n* ndarray.data：存储数组元素的缓冲。通常我们只需要通过下标来访问元素，而不需要访问缓冲\n\n```python\na = np.array([1,2,3])\nprint(a)\nprint(\"a's ndim {}\".format(a.ndim))\nprint(\"a's shape {}\".format(a.shape))\nprint(\"a's size {}\".format(a.size))\nprint(\"a's dtype {}\".format(a.dtype))\nprint(\"a's itemsize {}\".format(a.itemsize))\n\n# [1 2 3]\n# a's ndim 1\n# a's shape (3,)\n# a's size 3\n# a's dtype int32\n# a's itemsize 4\n```\n\n```python\nb = np.array([[1,2,3],[4,5,6]])\nprint(b)\nprint(\"b's ndim {}\".format(b.ndim))\nprint(\"b's shape {}\".format(b.shape))\nprint(\"b's size {}\".format(b.size))\nprint(\"b's dtype {}\".format(b.dtype))\nprint(\"b's itemsize {}\".format(b.itemsize))\n\n# [[1 2 3]\n#  [4 5 6]]\n# b's ndim 2\n# b's shape (2, 3)\n# b's size 6\n# b's dtype int32\n# b's itemsize 4\n```\n\n* zeros：用来创建元素全部是0的数组\n* ones：用来创建元素全部是1的数组\n* empty：用来创建未初始化的数据，因此是内容是不确定的\n* arange：通过指定范围和步长来创建数组\n* linespace：通过指定范围和元素数量来创建数组\n* random：用来生成随机数\n\n```python\nc = np.zeros((2,3))     \nprint(c)\n# [[0. 0. 0.]\n#  [0. 0. 0.]]\n\nd = np.ones((3,2))\nprint(d)\n# [[1. 1.]\n#  [1. 1.]\n#  [1. 1.]]\n\ne = np.empty((2,3))\nprint(e)\n# [[6.23042070e-307 3.56043053e-307 1.37961641e-306]\n#  [6.23039015e-307 1.69115935e-306 2.11392033e-307]]\n\nf = np.arange(1,2,0.3)\nprint(f)\n# [1.  1.3 1.6 1.9]\n\ng = np.linspace(1,2,3)\nprint(g)\n# [1.  1.5 2. ]\n\nh = np.random.random((2,3))\nprint(h)\n# [[0.64425744 0.4496131  0.88346286]\n#  [0.3458989  0.89334331 0.61867948]]\n```\n&emsp;&emsp;除了生成数组之外，当我们已经持有某个数据之后，我们可能会需要根据已有数组来产生一些新的数据结构，这时候我们可以使用下面这些函数：\n* reshape：根据已有数组和指定的shape，生成一个新的数组\n* vstack：用来将多个数组在垂直（v代表vertical）方向拼接（数组的维度必须匹配）\n* hstack：用来将多个数组在水平（h代表horizontal）方向拼接（数组的维度必须匹配）\n* hsplit：用来将数组在水平方向拆分\n* vsplit：用来将数组在垂直方向拆分\n\n&emsp;&emsp;下面我们通过一些例子来进行说明。为了便于测试，我们先创建几个数据。这里我们创建了：\n* zero_line：一行包含3个0的数组\n* one_column：一列包含3个1的数组\n* a：一个2行3列的矩阵\n* b：[11, 20)区间的整数数组\n\n```python\nzero_line = np.zeros((1,3))\none_column = np.ones((3,1))\n# [[0. 0. 0.]]\n# [[1.]\n#  [1.]\n#  [1.]]\n\na = np.array(([1,2,3],[4,5,6]))\nb = np.arange(11,20)\n# [[1 2 3]\n#  [4 5 6]]\n# [11 12 13 14 15 16 17 18 19]\n\n#数组b原先是一个一维数组，现在我们通过reshape方法将其调整成为一个3行3列的矩阵\n#这里的第二参数设为-1，表示根据实际情况自动决定。由于原先是9个元素的数组，因此调整后刚好是3X3的矩阵\nb = b.reshape(3,-1)\nprint(b)\n# [[11 12 13]\n#  [14 15 16]\n#  [17 18 19]]\n\n# 竖直方向拼接数组\nc = np.vstack((a,b,zero_line))\nprint(c)\n# [[ 1.  2.  3.]\n#  [ 4.  5.  6.]\n#  [11. 12. 13.]\n#  [14. 15. 16.]\n#  [17. 18. 19.]\n#  [ 0.  0.  0.]]\n\na = a.reshape(3,-1)\nprint(a)\n# [[1 2]\n#  [3 4]\n#  [5 6]]\n# 水平方向拼接数组\nd = np.hstack((a,b,one_column))\nprint(d)\n# [[ 1.  2. 11. 12. 13.  1.]\n#  [ 3.  4. 14. 15. 16.  1.]\n#  [ 5.  6. 17. 18. 19.  1.]]\n\n# 指定数量进行水平拆分\ne = np.hsplit(d,3)\nprint(e)\n# [array([[1., 2.],\n#        [3., 4.],\n#        [5., 6.]]), array([[11., 12.],\n#        [14., 15.],\n#        [17., 18.]]), array([[13.,  1.],\n#        [16.,  1.],\n#        [19.,  1.]])]\n\n# 指定列数进行水平拆分\nf = np.hsplit(d,(1,3))\nprint(f)\n# [array([[1.],\n#        [3.],\n#        [5.]]), array([[ 2., 11.],\n#        [ 4., 14.],\n#        [ 6., 17.]]), array([[12., 13.,  1.],\n#        [15., 16.,  1.],\n#        [18., 19.,  1.]])]\n\n# 竖直拆分\ng = np.vsplit(d,3)\nprint(g)\n# [array([[ 1.,  2., 11., 12., 13.,  1.]]), array([[ 3.,  4., 14., 15., 16.,  1.]]), array([[ 5.,  6., 17., 18., 19.,  1.]])]\n```\n\n### 索引\n```python\nbase_data = np.arange(100,200)\nprint(base_data)\nprint(base_data[10])\n\"\"\"\n[100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117\n 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135\n 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153\n 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171\n 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189\n 190 191 192 193 194 195 196 197 198 199]\n110\n\"\"\"\nevery_five = np.arange(0,100,5)\nprint(every_five)\n# [ 0  5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95]\n\nprint(base_data[every_five])\n# [100 105 110 115 120 125 130 135 140 145 150 155 160 165 170 175 180 185 190 195]\n\na = np.array([(1,2),[10,20]])\nprint(a)\n# [[ 1  2]\n#  [10 20]]\nprint(base_data[a])\n# [[101 102]\n#  [110 120]]\n\nbase_data2 = base_data.reshape(10, -1)\nprint(base_data2)\n\"\"\"\n[[100 101 102 103 104 105 106 107 108 109]\n [110 111 112 113 114 115 116 117 118 119]\n [120 121 122 123 124 125 126 127 128 129]\n [130 131 132 133 134 135 136 137 138 139]\n [140 141 142 143 144 145 146 147 148 149]\n [150 151 152 153 154 155 156 157 158 159]\n [160 161 162 163 164 165 166 167 168 169]\n [170 171 172 173 174 175 176 177 178 179]\n [180 181 182 183 184 185 186 187 188 189]\n [190 191 192 193 194 195 196 197 198 199]]\n\"\"\"\nprint(base_data2[-1,-1])  # 199\n\n# 切片索引从0开始\nprint(base_data2[2, :])\n# [120 121 122 123 124 125 126 127 128 129]\nprint(base_data2[:,3])\n# [103 113 123 133 143 153 163 173 183 193]\n```\n\n### 数字运算\n```python\nbase_data = (np.random.random((5,5))-0.5) * 100\n\"\"\"\n[[ -4.99893607  39.77193936 -15.46706727  16.80691258 -38.51945213]\n [-49.06612449  49.35329335  -0.4216167   13.12483635 -41.60876645]\n [-43.18292355 -25.25568989   0.44448147  -2.89856688 -24.13873839]\n [ 32.75485688  11.0737333   18.77766764  22.513295     3.48913839]\n [-10.96543248 -40.42721305  30.38299405 -32.77083843  40.39435566]]\n\"\"\"\nprint(np.amin(base_data))\n# -49.06612449306485\n\nprint(np.amax(base_data))\n# 49.35329334672289\n\nprint(np.average(base_data))\n# -2.0333544702011186\n\nprint(np.sin(base_data))\n\"\"\"\n[[ 0.95922553  0.87660695 -0.23857285 -0.89073028 -0.73137794]\n [ 0.93180625 -0.7908454  -0.40923611  0.52988566  0.69474259]\n [ 0.71691953 -0.12263914  0.42998979 -0.24064058  0.83821559]\n [ 0.9732393  -0.99694714 -0.07182638 -0.4987417  -0.34059131]\n [ 0.99954577 -0.40180897 -0.858805   -0.97678732  0.43167496]]\n\"\"\"\nprint(np.sum(base_data))\n# -50.83386175502796\n```\n\n### 矩阵运算\n```python\nbase_data = np.floor((np.random.random((5,5))-0.5) * 100)\n\"\"\"\n[[ 39. -20. -44. -45.   6.]\n [ -5.  44.  42. -33.  -6.]\n [-14.  -9. -13. -30.  -4.]\n [ 31. -50.   5.   7.  45.]\n [ 39. -16.  42.  39. -24.]]\n\"\"\"\n# 矩阵转置\nprint(base_data.T)  或着\nprint(base_data.transpose())\n\"\"\"\n[[ 39.  -5. -14.  31.  39.]\n [-20.  44.  -9. -50. -16.]\n [-44.  42. -13.   5.  42.]\n [-45. -33. -30.   7.  39.]\n [  6.  -6.  -4.  45. -24.]]\n\"\"\"\nmatri_one = np.ones((5,5))\n\"\"\"\n[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]\n\"\"\"\nminu_one = np.dot(matri_one, -1)\n\"\"\"\n[[-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]]\n\"\"\"\nprint(np.dot(base_data,minu_one))\n\"\"\"\n[[-32. -32. -32. -32. -32.]\n [-84. -84. -84. -84. -84.]\n [-72. -72. -72. -72. -72.]\n [ 51.  51.  51.  51.  51.]\n [ 46.  46.  46.  46.  46.]]\n\"\"\"\n```\n### 随机数\n生成20个随机数，它们每一个都是[0.0, 1.0)之间\n根据指定的shape生成随机数\n生成指定范围内（[0, 100)）的指定数量（20）的随机整数\n对已有的数据（[0, 1, 2, ..., 19]）的顺序随机打乱顺序\n\n```python\nprint(\"random: {}\\n\".format(np.random.random(20)))\n\"\"\"\nrandom: [0.105123   0.90013672 0.58255936 0.27769054 0.00139627 0.69873449\n 0.32550338 0.72112185 0.35799445 0.72302835 0.67139936 0.30039148\n 0.83770639 0.07878046 0.77641452 0.6054163  0.72421693 0.77157218\n 0.08644228 0.65128463]\n\"\"\"\n\nprint(\"rand: {}\\n\".format(np.random.rand(3, 4)))\n\"\"\"\nrand: [[0.73446485 0.30451937 0.49029421 0.62473099]\n [0.09829422 0.55518899 0.83903237 0.71153898]\n [0.11826133 0.53736883 0.47913765 0.0438171 ]]\n\"\"\"\n\nprint(\"randint: {}\\n\".format(np.random.randint(0, 100, 20)))\n\"\"\"\nrandint: [39 51 97 22 92 29 19 54 92 30  5 61 26 19 92 59 23 64 85 97]\n\"\"\"\n\nprint(\"permutation: {}\\n\".format(np.random.permutation(np.arange(20))))\n\"\"\"\npermutation: [ 5  0 14 10  6 13 11  7 18 19  2 12 17  3  9  8  1 15  4 16]\n\"\"\"\n```\n","source":"_posts/numpy学习.md","raw":"---\ntitle: numpy学习\ntype: categories\ncopyright: true\ndate: 2020-01-02 16:32:20\ntags:\n    - 数据分析\n    - python\ncategories: [python, 数据分析]\n---\n\n## numpy学习小结\n\n### 安装numpy包\n```\npip3 install numpy\n```\n### 导包\n```python\nimport numpy as np\n```\n<!--more-->\n\n* ndarray.ndim：数组的维数。在Python世界中，维数称之为rank\n* ndarray.shape：数组的维度。这是一系列数字，长度由数组的维度（ndim）决定。例如：长度为n的一维数组的shape是n。一个n行m列的矩阵的shape是n,m\n* ndarray.size：数组中所有元素的数量\n* ndarray.dtype：数组中元素的类型，例如numpy.int32, numpy.int16或者numpy.float64\n* ndarray.itemsize：数组中每个元素的大小，单位为字节\n* ndarray.data：存储数组元素的缓冲。通常我们只需要通过下标来访问元素，而不需要访问缓冲\n\n```python\na = np.array([1,2,3])\nprint(a)\nprint(\"a's ndim {}\".format(a.ndim))\nprint(\"a's shape {}\".format(a.shape))\nprint(\"a's size {}\".format(a.size))\nprint(\"a's dtype {}\".format(a.dtype))\nprint(\"a's itemsize {}\".format(a.itemsize))\n\n# [1 2 3]\n# a's ndim 1\n# a's shape (3,)\n# a's size 3\n# a's dtype int32\n# a's itemsize 4\n```\n\n```python\nb = np.array([[1,2,3],[4,5,6]])\nprint(b)\nprint(\"b's ndim {}\".format(b.ndim))\nprint(\"b's shape {}\".format(b.shape))\nprint(\"b's size {}\".format(b.size))\nprint(\"b's dtype {}\".format(b.dtype))\nprint(\"b's itemsize {}\".format(b.itemsize))\n\n# [[1 2 3]\n#  [4 5 6]]\n# b's ndim 2\n# b's shape (2, 3)\n# b's size 6\n# b's dtype int32\n# b's itemsize 4\n```\n\n* zeros：用来创建元素全部是0的数组\n* ones：用来创建元素全部是1的数组\n* empty：用来创建未初始化的数据，因此是内容是不确定的\n* arange：通过指定范围和步长来创建数组\n* linespace：通过指定范围和元素数量来创建数组\n* random：用来生成随机数\n\n```python\nc = np.zeros((2,3))     \nprint(c)\n# [[0. 0. 0.]\n#  [0. 0. 0.]]\n\nd = np.ones((3,2))\nprint(d)\n# [[1. 1.]\n#  [1. 1.]\n#  [1. 1.]]\n\ne = np.empty((2,3))\nprint(e)\n# [[6.23042070e-307 3.56043053e-307 1.37961641e-306]\n#  [6.23039015e-307 1.69115935e-306 2.11392033e-307]]\n\nf = np.arange(1,2,0.3)\nprint(f)\n# [1.  1.3 1.6 1.9]\n\ng = np.linspace(1,2,3)\nprint(g)\n# [1.  1.5 2. ]\n\nh = np.random.random((2,3))\nprint(h)\n# [[0.64425744 0.4496131  0.88346286]\n#  [0.3458989  0.89334331 0.61867948]]\n```\n&emsp;&emsp;除了生成数组之外，当我们已经持有某个数据之后，我们可能会需要根据已有数组来产生一些新的数据结构，这时候我们可以使用下面这些函数：\n* reshape：根据已有数组和指定的shape，生成一个新的数组\n* vstack：用来将多个数组在垂直（v代表vertical）方向拼接（数组的维度必须匹配）\n* hstack：用来将多个数组在水平（h代表horizontal）方向拼接（数组的维度必须匹配）\n* hsplit：用来将数组在水平方向拆分\n* vsplit：用来将数组在垂直方向拆分\n\n&emsp;&emsp;下面我们通过一些例子来进行说明。为了便于测试，我们先创建几个数据。这里我们创建了：\n* zero_line：一行包含3个0的数组\n* one_column：一列包含3个1的数组\n* a：一个2行3列的矩阵\n* b：[11, 20)区间的整数数组\n\n```python\nzero_line = np.zeros((1,3))\none_column = np.ones((3,1))\n# [[0. 0. 0.]]\n# [[1.]\n#  [1.]\n#  [1.]]\n\na = np.array(([1,2,3],[4,5,6]))\nb = np.arange(11,20)\n# [[1 2 3]\n#  [4 5 6]]\n# [11 12 13 14 15 16 17 18 19]\n\n#数组b原先是一个一维数组，现在我们通过reshape方法将其调整成为一个3行3列的矩阵\n#这里的第二参数设为-1，表示根据实际情况自动决定。由于原先是9个元素的数组，因此调整后刚好是3X3的矩阵\nb = b.reshape(3,-1)\nprint(b)\n# [[11 12 13]\n#  [14 15 16]\n#  [17 18 19]]\n\n# 竖直方向拼接数组\nc = np.vstack((a,b,zero_line))\nprint(c)\n# [[ 1.  2.  3.]\n#  [ 4.  5.  6.]\n#  [11. 12. 13.]\n#  [14. 15. 16.]\n#  [17. 18. 19.]\n#  [ 0.  0.  0.]]\n\na = a.reshape(3,-1)\nprint(a)\n# [[1 2]\n#  [3 4]\n#  [5 6]]\n# 水平方向拼接数组\nd = np.hstack((a,b,one_column))\nprint(d)\n# [[ 1.  2. 11. 12. 13.  1.]\n#  [ 3.  4. 14. 15. 16.  1.]\n#  [ 5.  6. 17. 18. 19.  1.]]\n\n# 指定数量进行水平拆分\ne = np.hsplit(d,3)\nprint(e)\n# [array([[1., 2.],\n#        [3., 4.],\n#        [5., 6.]]), array([[11., 12.],\n#        [14., 15.],\n#        [17., 18.]]), array([[13.,  1.],\n#        [16.,  1.],\n#        [19.,  1.]])]\n\n# 指定列数进行水平拆分\nf = np.hsplit(d,(1,3))\nprint(f)\n# [array([[1.],\n#        [3.],\n#        [5.]]), array([[ 2., 11.],\n#        [ 4., 14.],\n#        [ 6., 17.]]), array([[12., 13.,  1.],\n#        [15., 16.,  1.],\n#        [18., 19.,  1.]])]\n\n# 竖直拆分\ng = np.vsplit(d,3)\nprint(g)\n# [array([[ 1.,  2., 11., 12., 13.,  1.]]), array([[ 3.,  4., 14., 15., 16.,  1.]]), array([[ 5.,  6., 17., 18., 19.,  1.]])]\n```\n\n### 索引\n```python\nbase_data = np.arange(100,200)\nprint(base_data)\nprint(base_data[10])\n\"\"\"\n[100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117\n 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135\n 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153\n 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171\n 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189\n 190 191 192 193 194 195 196 197 198 199]\n110\n\"\"\"\nevery_five = np.arange(0,100,5)\nprint(every_five)\n# [ 0  5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95]\n\nprint(base_data[every_five])\n# [100 105 110 115 120 125 130 135 140 145 150 155 160 165 170 175 180 185 190 195]\n\na = np.array([(1,2),[10,20]])\nprint(a)\n# [[ 1  2]\n#  [10 20]]\nprint(base_data[a])\n# [[101 102]\n#  [110 120]]\n\nbase_data2 = base_data.reshape(10, -1)\nprint(base_data2)\n\"\"\"\n[[100 101 102 103 104 105 106 107 108 109]\n [110 111 112 113 114 115 116 117 118 119]\n [120 121 122 123 124 125 126 127 128 129]\n [130 131 132 133 134 135 136 137 138 139]\n [140 141 142 143 144 145 146 147 148 149]\n [150 151 152 153 154 155 156 157 158 159]\n [160 161 162 163 164 165 166 167 168 169]\n [170 171 172 173 174 175 176 177 178 179]\n [180 181 182 183 184 185 186 187 188 189]\n [190 191 192 193 194 195 196 197 198 199]]\n\"\"\"\nprint(base_data2[-1,-1])  # 199\n\n# 切片索引从0开始\nprint(base_data2[2, :])\n# [120 121 122 123 124 125 126 127 128 129]\nprint(base_data2[:,3])\n# [103 113 123 133 143 153 163 173 183 193]\n```\n\n### 数字运算\n```python\nbase_data = (np.random.random((5,5))-0.5) * 100\n\"\"\"\n[[ -4.99893607  39.77193936 -15.46706727  16.80691258 -38.51945213]\n [-49.06612449  49.35329335  -0.4216167   13.12483635 -41.60876645]\n [-43.18292355 -25.25568989   0.44448147  -2.89856688 -24.13873839]\n [ 32.75485688  11.0737333   18.77766764  22.513295     3.48913839]\n [-10.96543248 -40.42721305  30.38299405 -32.77083843  40.39435566]]\n\"\"\"\nprint(np.amin(base_data))\n# -49.06612449306485\n\nprint(np.amax(base_data))\n# 49.35329334672289\n\nprint(np.average(base_data))\n# -2.0333544702011186\n\nprint(np.sin(base_data))\n\"\"\"\n[[ 0.95922553  0.87660695 -0.23857285 -0.89073028 -0.73137794]\n [ 0.93180625 -0.7908454  -0.40923611  0.52988566  0.69474259]\n [ 0.71691953 -0.12263914  0.42998979 -0.24064058  0.83821559]\n [ 0.9732393  -0.99694714 -0.07182638 -0.4987417  -0.34059131]\n [ 0.99954577 -0.40180897 -0.858805   -0.97678732  0.43167496]]\n\"\"\"\nprint(np.sum(base_data))\n# -50.83386175502796\n```\n\n### 矩阵运算\n```python\nbase_data = np.floor((np.random.random((5,5))-0.5) * 100)\n\"\"\"\n[[ 39. -20. -44. -45.   6.]\n [ -5.  44.  42. -33.  -6.]\n [-14.  -9. -13. -30.  -4.]\n [ 31. -50.   5.   7.  45.]\n [ 39. -16.  42.  39. -24.]]\n\"\"\"\n# 矩阵转置\nprint(base_data.T)  或着\nprint(base_data.transpose())\n\"\"\"\n[[ 39.  -5. -14.  31.  39.]\n [-20.  44.  -9. -50. -16.]\n [-44.  42. -13.   5.  42.]\n [-45. -33. -30.   7.  39.]\n [  6.  -6.  -4.  45. -24.]]\n\"\"\"\nmatri_one = np.ones((5,5))\n\"\"\"\n[[1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]\n [1. 1. 1. 1. 1.]]\n\"\"\"\nminu_one = np.dot(matri_one, -1)\n\"\"\"\n[[-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]\n [-1. -1. -1. -1. -1.]]\n\"\"\"\nprint(np.dot(base_data,minu_one))\n\"\"\"\n[[-32. -32. -32. -32. -32.]\n [-84. -84. -84. -84. -84.]\n [-72. -72. -72. -72. -72.]\n [ 51.  51.  51.  51.  51.]\n [ 46.  46.  46.  46.  46.]]\n\"\"\"\n```\n### 随机数\n生成20个随机数，它们每一个都是[0.0, 1.0)之间\n根据指定的shape生成随机数\n生成指定范围内（[0, 100)）的指定数量（20）的随机整数\n对已有的数据（[0, 1, 2, ..., 19]）的顺序随机打乱顺序\n\n```python\nprint(\"random: {}\\n\".format(np.random.random(20)))\n\"\"\"\nrandom: [0.105123   0.90013672 0.58255936 0.27769054 0.00139627 0.69873449\n 0.32550338 0.72112185 0.35799445 0.72302835 0.67139936 0.30039148\n 0.83770639 0.07878046 0.77641452 0.6054163  0.72421693 0.77157218\n 0.08644228 0.65128463]\n\"\"\"\n\nprint(\"rand: {}\\n\".format(np.random.rand(3, 4)))\n\"\"\"\nrand: [[0.73446485 0.30451937 0.49029421 0.62473099]\n [0.09829422 0.55518899 0.83903237 0.71153898]\n [0.11826133 0.53736883 0.47913765 0.0438171 ]]\n\"\"\"\n\nprint(\"randint: {}\\n\".format(np.random.randint(0, 100, 20)))\n\"\"\"\nrandint: [39 51 97 22 92 29 19 54 92 30  5 61 26 19 92 59 23 64 85 97]\n\"\"\"\n\nprint(\"permutation: {}\\n\".format(np.random.permutation(np.arange(20))))\n\"\"\"\npermutation: [ 5  0 14 10  6 13 11  7 18 19  2 12 17  3  9  8  1 15  4 16]\n\"\"\"\n```\n","slug":"numpy学习","published":1,"updated":"2022-02-25T08:37:09.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s7837004whvx34co8hjcm","content":"<h2 id=\"numpy学习小结\"><a href=\"#numpy学习小结\" class=\"headerlink\" title=\"numpy学习小结\"></a>numpy学习小结</h2><h3 id=\"安装numpy包\"><a href=\"#安装numpy包\" class=\"headerlink\" title=\"安装numpy包\"></a>安装numpy包</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 <span class=\"keyword\">install</span> numpy</span><br></pre></td></tr></table></figure>\n<h3 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<ul>\n<li>ndarray.ndim：数组的维数。在Python世界中，维数称之为rank</li>\n<li>ndarray.shape：数组的维度。这是一系列数字，长度由数组的维度（ndim）决定。例如：长度为n的一维数组的shape是n。一个n行m列的矩阵的shape是n,m</li>\n<li>ndarray.size：数组中所有元素的数量</li>\n<li>ndarray.dtype：数组中元素的类型，例如numpy.int32, numpy.int16或者numpy.float64</li>\n<li>ndarray.itemsize：数组中每个元素的大小，单位为字节</li>\n<li>ndarray.data：存储数组元素的缓冲。通常我们只需要通过下标来访问元素，而不需要访问缓冲</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(<span class=\"string\">\"a's ndim &#123;&#125;\"</span>.format(a.ndim))</span><br><span class=\"line\">print(<span class=\"string\">\"a's shape &#123;&#125;\"</span>.format(a.shape))</span><br><span class=\"line\">print(<span class=\"string\">\"a's size &#123;&#125;\"</span>.format(a.size))</span><br><span class=\"line\">print(<span class=\"string\">\"a's dtype &#123;&#125;\"</span>.format(a.dtype))</span><br><span class=\"line\">print(<span class=\"string\">\"a's itemsize &#123;&#125;\"</span>.format(a.itemsize))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [1 2 3]</span></span><br><span class=\"line\"><span class=\"comment\"># a's ndim 1</span></span><br><span class=\"line\"><span class=\"comment\"># a's shape (3,)</span></span><br><span class=\"line\"><span class=\"comment\"># a's size 3</span></span><br><span class=\"line\"><span class=\"comment\"># a's dtype int32</span></span><br><span class=\"line\"><span class=\"comment\"># a's itemsize 4</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</span><br><span class=\"line\">print(b)</span><br><span class=\"line\">print(<span class=\"string\">\"b's ndim &#123;&#125;\"</span>.format(b.ndim))</span><br><span class=\"line\">print(<span class=\"string\">\"b's shape &#123;&#125;\"</span>.format(b.shape))</span><br><span class=\"line\">print(<span class=\"string\">\"b's size &#123;&#125;\"</span>.format(b.size))</span><br><span class=\"line\">print(<span class=\"string\">\"b's dtype &#123;&#125;\"</span>.format(b.dtype))</span><br><span class=\"line\">print(<span class=\"string\">\"b's itemsize &#123;&#125;\"</span>.format(b.itemsize))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [[1 2 3]</span></span><br><span class=\"line\"><span class=\"comment\">#  [4 5 6]]</span></span><br><span class=\"line\"><span class=\"comment\"># b's ndim 2</span></span><br><span class=\"line\"><span class=\"comment\"># b's shape (2, 3)</span></span><br><span class=\"line\"><span class=\"comment\"># b's size 6</span></span><br><span class=\"line\"><span class=\"comment\"># b's dtype int32</span></span><br><span class=\"line\"><span class=\"comment\"># b's itemsize 4</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>zeros：用来创建元素全部是0的数组</li>\n<li>ones：用来创建元素全部是1的数组</li>\n<li>empty：用来创建未初始化的数据，因此是内容是不确定的</li>\n<li>arange：通过指定范围和步长来创建数组</li>\n<li>linespace：通过指定范围和元素数量来创建数组</li>\n<li>random：用来生成随机数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = np.zeros((<span class=\"number\">2</span>,<span class=\"number\">3</span>))     </span><br><span class=\"line\">print(c)</span><br><span class=\"line\"><span class=\"comment\"># [[0. 0. 0.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0. 0. 0.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">d = np.ones((<span class=\"number\">3</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">print(d)</span><br><span class=\"line\"><span class=\"comment\"># [[1. 1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1. 1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1. 1.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">e = np.empty((<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">print(e)</span><br><span class=\"line\"><span class=\"comment\"># [[6.23042070e-307 3.56043053e-307 1.37961641e-306]</span></span><br><span class=\"line\"><span class=\"comment\">#  [6.23039015e-307 1.69115935e-306 2.11392033e-307]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">f = np.arange(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0.3</span>)</span><br><span class=\"line\">print(f)</span><br><span class=\"line\"><span class=\"comment\"># [1.  1.3 1.6 1.9]</span></span><br><span class=\"line\"></span><br><span class=\"line\">g = np.linspace(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">print(g)</span><br><span class=\"line\"><span class=\"comment\"># [1.  1.5 2. ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">h = np.random.random((<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">print(h)</span><br><span class=\"line\"><span class=\"comment\"># [[0.64425744 0.4496131  0.88346286]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0.3458989  0.89334331 0.61867948]]</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;除了生成数组之外，当我们已经持有某个数据之后，我们可能会需要根据已有数组来产生一些新的数据结构，这时候我们可以使用下面这些函数：</p>\n<ul>\n<li>reshape：根据已有数组和指定的shape，生成一个新的数组</li>\n<li>vstack：用来将多个数组在垂直（v代表vertical）方向拼接（数组的维度必须匹配）</li>\n<li>hstack：用来将多个数组在水平（h代表horizontal）方向拼接（数组的维度必须匹配）</li>\n<li>hsplit：用来将数组在水平方向拆分</li>\n<li>vsplit：用来将数组在垂直方向拆分</li>\n</ul>\n<p>&emsp;&emsp;下面我们通过一些例子来进行说明。为了便于测试，我们先创建几个数据。这里我们创建了：</p>\n<ul>\n<li>zero_line：一行包含3个0的数组</li>\n<li>one_column：一列包含3个1的数组</li>\n<li>a：一个2行3列的矩阵</li>\n<li>b：[11, 20)区间的整数数组</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zero_line = np.zeros((<span class=\"number\">1</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">one_column = np.ones((<span class=\"number\">3</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\"># [[0. 0. 0.]]</span></span><br><span class=\"line\"><span class=\"comment\"># [[1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.array(([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]))</span><br><span class=\"line\">b = np.arange(<span class=\"number\">11</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"comment\"># [[1 2 3]</span></span><br><span class=\"line\"><span class=\"comment\">#  [4 5 6]]</span></span><br><span class=\"line\"><span class=\"comment\"># [11 12 13 14 15 16 17 18 19]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#数组b原先是一个一维数组，现在我们通过reshape方法将其调整成为一个3行3列的矩阵</span></span><br><span class=\"line\"><span class=\"comment\">#这里的第二参数设为-1，表示根据实际情况自动决定。由于原先是9个元素的数组，因此调整后刚好是3X3的矩阵</span></span><br><span class=\"line\">b = b.reshape(<span class=\"number\">3</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\"><span class=\"comment\"># [[11 12 13]</span></span><br><span class=\"line\"><span class=\"comment\">#  [14 15 16]</span></span><br><span class=\"line\"><span class=\"comment\">#  [17 18 19]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 竖直方向拼接数组</span></span><br><span class=\"line\">c = np.vstack((a,b,zero_line))</span><br><span class=\"line\">print(c)</span><br><span class=\"line\"><span class=\"comment\"># [[ 1.  2.  3.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 4.  5.  6.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [11. 12. 13.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [14. 15. 16.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [17. 18. 19.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 0.  0.  0.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = a.reshape(<span class=\"number\">3</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"comment\"># [[1 2]</span></span><br><span class=\"line\"><span class=\"comment\">#  [3 4]</span></span><br><span class=\"line\"><span class=\"comment\">#  [5 6]]</span></span><br><span class=\"line\"><span class=\"comment\"># 水平方向拼接数组</span></span><br><span class=\"line\">d = np.hstack((a,b,one_column))</span><br><span class=\"line\">print(d)</span><br><span class=\"line\"><span class=\"comment\"># [[ 1.  2. 11. 12. 13.  1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 3.  4. 14. 15. 16.  1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 5.  6. 17. 18. 19.  1.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定数量进行水平拆分</span></span><br><span class=\"line\">e = np.hsplit(d,<span class=\"number\">3</span>)</span><br><span class=\"line\">print(e)</span><br><span class=\"line\"><span class=\"comment\"># [array([[1., 2.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [3., 4.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [5., 6.]]), array([[11., 12.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [14., 15.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [17., 18.]]), array([[13.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [16.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [19.,  1.]])]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定列数进行水平拆分</span></span><br><span class=\"line\">f = np.hsplit(d,(<span class=\"number\">1</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">print(f)</span><br><span class=\"line\"><span class=\"comment\"># [array([[1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [3.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [5.]]), array([[ 2., 11.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [ 4., 14.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [ 6., 17.]]), array([[12., 13.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [15., 16.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [18., 19.,  1.]])]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 竖直拆分</span></span><br><span class=\"line\">g = np.vsplit(d,<span class=\"number\">3</span>)</span><br><span class=\"line\">print(g)</span><br><span class=\"line\"><span class=\"comment\"># [array([[ 1.,  2., 11., 12., 13.,  1.]]), array([[ 3.,  4., 14., 15., 16.,  1.]]), array([[ 5.,  6., 17., 18., 19.,  1.]])]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_data = np.arange(<span class=\"number\">100</span>,<span class=\"number\">200</span>)</span><br><span class=\"line\">print(base_data)</span><br><span class=\"line\">print(base_data[<span class=\"number\">10</span>])</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117</span></span><br><span class=\"line\"><span class=\"string\"> 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135</span></span><br><span class=\"line\"><span class=\"string\"> 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153</span></span><br><span class=\"line\"><span class=\"string\"> 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171</span></span><br><span class=\"line\"><span class=\"string\"> 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189</span></span><br><span class=\"line\"><span class=\"string\"> 190 191 192 193 194 195 196 197 198 199]</span></span><br><span class=\"line\"><span class=\"string\">110</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">every_five = np.arange(<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">print(every_five)</span><br><span class=\"line\"><span class=\"comment\"># [ 0  5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95]</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(base_data[every_five])</span><br><span class=\"line\"><span class=\"comment\"># [100 105 110 115 120 125 130 135 140 145 150 155 160 165 170 175 180 185 190 195]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.array([(<span class=\"number\">1</span>,<span class=\"number\">2</span>),[<span class=\"number\">10</span>,<span class=\"number\">20</span>]])</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"comment\"># [[ 1  2]</span></span><br><span class=\"line\"><span class=\"comment\">#  [10 20]]</span></span><br><span class=\"line\">print(base_data[a])</span><br><span class=\"line\"><span class=\"comment\"># [[101 102]</span></span><br><span class=\"line\"><span class=\"comment\">#  [110 120]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">base_data2 = base_data.reshape(<span class=\"number\">10</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\">print(base_data2)</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[100 101 102 103 104 105 106 107 108 109]</span></span><br><span class=\"line\"><span class=\"string\"> [110 111 112 113 114 115 116 117 118 119]</span></span><br><span class=\"line\"><span class=\"string\"> [120 121 122 123 124 125 126 127 128 129]</span></span><br><span class=\"line\"><span class=\"string\"> [130 131 132 133 134 135 136 137 138 139]</span></span><br><span class=\"line\"><span class=\"string\"> [140 141 142 143 144 145 146 147 148 149]</span></span><br><span class=\"line\"><span class=\"string\"> [150 151 152 153 154 155 156 157 158 159]</span></span><br><span class=\"line\"><span class=\"string\"> [160 161 162 163 164 165 166 167 168 169]</span></span><br><span class=\"line\"><span class=\"string\"> [170 171 172 173 174 175 176 177 178 179]</span></span><br><span class=\"line\"><span class=\"string\"> [180 181 182 183 184 185 186 187 188 189]</span></span><br><span class=\"line\"><span class=\"string\"> [190 191 192 193 194 195 196 197 198 199]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(base_data2[<span class=\"number\">-1</span>,<span class=\"number\">-1</span>])  <span class=\"comment\"># 199</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切片索引从0开始</span></span><br><span class=\"line\">print(base_data2[<span class=\"number\">2</span>, :])</span><br><span class=\"line\"><span class=\"comment\"># [120 121 122 123 124 125 126 127 128 129]</span></span><br><span class=\"line\">print(base_data2[:,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\"># [103 113 123 133 143 153 163 173 183 193]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数字运算\"><a href=\"#数字运算\" class=\"headerlink\" title=\"数字运算\"></a>数字运算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_data = (np.random.random((<span class=\"number\">5</span>,<span class=\"number\">5</span>))<span class=\"number\">-0.5</span>) * <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ -4.99893607  39.77193936 -15.46706727  16.80691258 -38.51945213]</span></span><br><span class=\"line\"><span class=\"string\"> [-49.06612449  49.35329335  -0.4216167   13.12483635 -41.60876645]</span></span><br><span class=\"line\"><span class=\"string\"> [-43.18292355 -25.25568989   0.44448147  -2.89856688 -24.13873839]</span></span><br><span class=\"line\"><span class=\"string\"> [ 32.75485688  11.0737333   18.77766764  22.513295     3.48913839]</span></span><br><span class=\"line\"><span class=\"string\"> [-10.96543248 -40.42721305  30.38299405 -32.77083843  40.39435566]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(np.amin(base_data))</span><br><span class=\"line\"><span class=\"comment\"># -49.06612449306485</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.amax(base_data))</span><br><span class=\"line\"><span class=\"comment\"># 49.35329334672289</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.average(base_data))</span><br><span class=\"line\"><span class=\"comment\"># -2.0333544702011186</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.sin(base_data))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ 0.95922553  0.87660695 -0.23857285 -0.89073028 -0.73137794]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.93180625 -0.7908454  -0.40923611  0.52988566  0.69474259]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.71691953 -0.12263914  0.42998979 -0.24064058  0.83821559]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.9732393  -0.99694714 -0.07182638 -0.4987417  -0.34059131]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.99954577 -0.40180897 -0.858805   -0.97678732  0.43167496]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(np.sum(base_data))</span><br><span class=\"line\"><span class=\"comment\"># -50.83386175502796</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"矩阵运算\"><a href=\"#矩阵运算\" class=\"headerlink\" title=\"矩阵运算\"></a>矩阵运算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_data = np.floor((np.random.random((<span class=\"number\">5</span>,<span class=\"number\">5</span>))<span class=\"number\">-0.5</span>) * <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ 39. -20. -44. -45.   6.]</span></span><br><span class=\"line\"><span class=\"string\"> [ -5.  44.  42. -33.  -6.]</span></span><br><span class=\"line\"><span class=\"string\"> [-14.  -9. -13. -30.  -4.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 31. -50.   5.   7.  45.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 39. -16.  42.  39. -24.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># 矩阵转置</span></span><br><span class=\"line\">print(base_data.T)  或着</span><br><span class=\"line\">print(base_data.transpose())</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ 39.  -5. -14.  31.  39.]</span></span><br><span class=\"line\"><span class=\"string\"> [-20.  44.  -9. -50. -16.]</span></span><br><span class=\"line\"><span class=\"string\"> [-44.  42. -13.   5.  42.]</span></span><br><span class=\"line\"><span class=\"string\"> [-45. -33. -30.   7.  39.]</span></span><br><span class=\"line\"><span class=\"string\"> [  6.  -6.  -4.  45. -24.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">matri_one = np.ones((<span class=\"number\">5</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">minu_one = np.dot(matri_one, <span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(np.dot(base_data,minu_one))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[-32. -32. -32. -32. -32.]</span></span><br><span class=\"line\"><span class=\"string\"> [-84. -84. -84. -84. -84.]</span></span><br><span class=\"line\"><span class=\"string\"> [-72. -72. -72. -72. -72.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 51.  51.  51.  51.  51.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 46.  46.  46.  46.  46.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"随机数\"><a href=\"#随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数</h3><p>生成20个随机数，它们每一个都是[0.0, 1.0)之间<br>根据指定的shape生成随机数<br>生成指定范围内（[0, 100)）的指定数量（20）的随机整数<br>对已有的数据（[0, 1, 2, …, 19]）的顺序随机打乱顺序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"random: &#123;&#125;\\n\"</span>.format(np.random.random(<span class=\"number\">20</span>)))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">random: [0.105123   0.90013672 0.58255936 0.27769054 0.00139627 0.69873449</span></span><br><span class=\"line\"><span class=\"string\"> 0.32550338 0.72112185 0.35799445 0.72302835 0.67139936 0.30039148</span></span><br><span class=\"line\"><span class=\"string\"> 0.83770639 0.07878046 0.77641452 0.6054163  0.72421693 0.77157218</span></span><br><span class=\"line\"><span class=\"string\"> 0.08644228 0.65128463]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"rand: &#123;&#125;\\n\"</span>.format(np.random.rand(<span class=\"number\">3</span>, <span class=\"number\">4</span>)))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">rand: [[0.73446485 0.30451937 0.49029421 0.62473099]</span></span><br><span class=\"line\"><span class=\"string\"> [0.09829422 0.55518899 0.83903237 0.71153898]</span></span><br><span class=\"line\"><span class=\"string\"> [0.11826133 0.53736883 0.47913765 0.0438171 ]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"randint: &#123;&#125;\\n\"</span>.format(np.random.randint(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">20</span>)))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">randint: [39 51 97 22 92 29 19 54 92 30  5 61 26 19 92 59 23 64 85 97]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"permutation: &#123;&#125;\\n\"</span>.format(np.random.permutation(np.arange(<span class=\"number\">20</span>))))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">permutation: [ 5  0 14 10  6 13 11  7 18 19  2 12 17  3  9  8  1 15  4 16]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"numpy学习小结\"><a href=\"#numpy学习小结\" class=\"headerlink\" title=\"numpy学习小结\"></a>numpy学习小结</h2><h3 id=\"安装numpy包\"><a href=\"#安装numpy包\" class=\"headerlink\" title=\"安装numpy包\"></a>安装numpy包</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 <span class=\"keyword\">install</span> numpy</span><br></pre></td></tr></table></figure>\n<h3 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>ndarray.ndim：数组的维数。在Python世界中，维数称之为rank</li>\n<li>ndarray.shape：数组的维度。这是一系列数字，长度由数组的维度（ndim）决定。例如：长度为n的一维数组的shape是n。一个n行m列的矩阵的shape是n,m</li>\n<li>ndarray.size：数组中所有元素的数量</li>\n<li>ndarray.dtype：数组中元素的类型，例如numpy.int32, numpy.int16或者numpy.float64</li>\n<li>ndarray.itemsize：数组中每个元素的大小，单位为字节</li>\n<li>ndarray.data：存储数组元素的缓冲。通常我们只需要通过下标来访问元素，而不需要访问缓冲</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(<span class=\"string\">\"a's ndim &#123;&#125;\"</span>.format(a.ndim))</span><br><span class=\"line\">print(<span class=\"string\">\"a's shape &#123;&#125;\"</span>.format(a.shape))</span><br><span class=\"line\">print(<span class=\"string\">\"a's size &#123;&#125;\"</span>.format(a.size))</span><br><span class=\"line\">print(<span class=\"string\">\"a's dtype &#123;&#125;\"</span>.format(a.dtype))</span><br><span class=\"line\">print(<span class=\"string\">\"a's itemsize &#123;&#125;\"</span>.format(a.itemsize))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [1 2 3]</span></span><br><span class=\"line\"><span class=\"comment\"># a's ndim 1</span></span><br><span class=\"line\"><span class=\"comment\"># a's shape (3,)</span></span><br><span class=\"line\"><span class=\"comment\"># a's size 3</span></span><br><span class=\"line\"><span class=\"comment\"># a's dtype int32</span></span><br><span class=\"line\"><span class=\"comment\"># a's itemsize 4</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]])</span><br><span class=\"line\">print(b)</span><br><span class=\"line\">print(<span class=\"string\">\"b's ndim &#123;&#125;\"</span>.format(b.ndim))</span><br><span class=\"line\">print(<span class=\"string\">\"b's shape &#123;&#125;\"</span>.format(b.shape))</span><br><span class=\"line\">print(<span class=\"string\">\"b's size &#123;&#125;\"</span>.format(b.size))</span><br><span class=\"line\">print(<span class=\"string\">\"b's dtype &#123;&#125;\"</span>.format(b.dtype))</span><br><span class=\"line\">print(<span class=\"string\">\"b's itemsize &#123;&#125;\"</span>.format(b.itemsize))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [[1 2 3]</span></span><br><span class=\"line\"><span class=\"comment\">#  [4 5 6]]</span></span><br><span class=\"line\"><span class=\"comment\"># b's ndim 2</span></span><br><span class=\"line\"><span class=\"comment\"># b's shape (2, 3)</span></span><br><span class=\"line\"><span class=\"comment\"># b's size 6</span></span><br><span class=\"line\"><span class=\"comment\"># b's dtype int32</span></span><br><span class=\"line\"><span class=\"comment\"># b's itemsize 4</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>zeros：用来创建元素全部是0的数组</li>\n<li>ones：用来创建元素全部是1的数组</li>\n<li>empty：用来创建未初始化的数据，因此是内容是不确定的</li>\n<li>arange：通过指定范围和步长来创建数组</li>\n<li>linespace：通过指定范围和元素数量来创建数组</li>\n<li>random：用来生成随机数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = np.zeros((<span class=\"number\">2</span>,<span class=\"number\">3</span>))     </span><br><span class=\"line\">print(c)</span><br><span class=\"line\"><span class=\"comment\"># [[0. 0. 0.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0. 0. 0.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">d = np.ones((<span class=\"number\">3</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">print(d)</span><br><span class=\"line\"><span class=\"comment\"># [[1. 1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1. 1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1. 1.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">e = np.empty((<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">print(e)</span><br><span class=\"line\"><span class=\"comment\"># [[6.23042070e-307 3.56043053e-307 1.37961641e-306]</span></span><br><span class=\"line\"><span class=\"comment\">#  [6.23039015e-307 1.69115935e-306 2.11392033e-307]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">f = np.arange(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0.3</span>)</span><br><span class=\"line\">print(f)</span><br><span class=\"line\"><span class=\"comment\"># [1.  1.3 1.6 1.9]</span></span><br><span class=\"line\"></span><br><span class=\"line\">g = np.linspace(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">print(g)</span><br><span class=\"line\"><span class=\"comment\"># [1.  1.5 2. ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">h = np.random.random((<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">print(h)</span><br><span class=\"line\"><span class=\"comment\"># [[0.64425744 0.4496131  0.88346286]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0.3458989  0.89334331 0.61867948]]</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;除了生成数组之外，当我们已经持有某个数据之后，我们可能会需要根据已有数组来产生一些新的数据结构，这时候我们可以使用下面这些函数：</p>\n<ul>\n<li>reshape：根据已有数组和指定的shape，生成一个新的数组</li>\n<li>vstack：用来将多个数组在垂直（v代表vertical）方向拼接（数组的维度必须匹配）</li>\n<li>hstack：用来将多个数组在水平（h代表horizontal）方向拼接（数组的维度必须匹配）</li>\n<li>hsplit：用来将数组在水平方向拆分</li>\n<li>vsplit：用来将数组在垂直方向拆分</li>\n</ul>\n<p>&emsp;&emsp;下面我们通过一些例子来进行说明。为了便于测试，我们先创建几个数据。这里我们创建了：</p>\n<ul>\n<li>zero_line：一行包含3个0的数组</li>\n<li>one_column：一列包含3个1的数组</li>\n<li>a：一个2行3列的矩阵</li>\n<li>b：[11, 20)区间的整数数组</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zero_line = np.zeros((<span class=\"number\">1</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">one_column = np.ones((<span class=\"number\">3</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\"># [[0. 0. 0.]]</span></span><br><span class=\"line\"><span class=\"comment\"># [[1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [1.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.array(([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]))</span><br><span class=\"line\">b = np.arange(<span class=\"number\">11</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"comment\"># [[1 2 3]</span></span><br><span class=\"line\"><span class=\"comment\">#  [4 5 6]]</span></span><br><span class=\"line\"><span class=\"comment\"># [11 12 13 14 15 16 17 18 19]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#数组b原先是一个一维数组，现在我们通过reshape方法将其调整成为一个3行3列的矩阵</span></span><br><span class=\"line\"><span class=\"comment\">#这里的第二参数设为-1，表示根据实际情况自动决定。由于原先是9个元素的数组，因此调整后刚好是3X3的矩阵</span></span><br><span class=\"line\">b = b.reshape(<span class=\"number\">3</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\"><span class=\"comment\"># [[11 12 13]</span></span><br><span class=\"line\"><span class=\"comment\">#  [14 15 16]</span></span><br><span class=\"line\"><span class=\"comment\">#  [17 18 19]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 竖直方向拼接数组</span></span><br><span class=\"line\">c = np.vstack((a,b,zero_line))</span><br><span class=\"line\">print(c)</span><br><span class=\"line\"><span class=\"comment\"># [[ 1.  2.  3.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 4.  5.  6.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [11. 12. 13.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [14. 15. 16.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [17. 18. 19.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 0.  0.  0.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = a.reshape(<span class=\"number\">3</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"comment\"># [[1 2]</span></span><br><span class=\"line\"><span class=\"comment\">#  [3 4]</span></span><br><span class=\"line\"><span class=\"comment\">#  [5 6]]</span></span><br><span class=\"line\"><span class=\"comment\"># 水平方向拼接数组</span></span><br><span class=\"line\">d = np.hstack((a,b,one_column))</span><br><span class=\"line\">print(d)</span><br><span class=\"line\"><span class=\"comment\"># [[ 1.  2. 11. 12. 13.  1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 3.  4. 14. 15. 16.  1.]</span></span><br><span class=\"line\"><span class=\"comment\">#  [ 5.  6. 17. 18. 19.  1.]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定数量进行水平拆分</span></span><br><span class=\"line\">e = np.hsplit(d,<span class=\"number\">3</span>)</span><br><span class=\"line\">print(e)</span><br><span class=\"line\"><span class=\"comment\"># [array([[1., 2.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [3., 4.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [5., 6.]]), array([[11., 12.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [14., 15.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [17., 18.]]), array([[13.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [16.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [19.,  1.]])]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定列数进行水平拆分</span></span><br><span class=\"line\">f = np.hsplit(d,(<span class=\"number\">1</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">print(f)</span><br><span class=\"line\"><span class=\"comment\"># [array([[1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [3.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [5.]]), array([[ 2., 11.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [ 4., 14.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [ 6., 17.]]), array([[12., 13.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [15., 16.,  1.],</span></span><br><span class=\"line\"><span class=\"comment\">#        [18., 19.,  1.]])]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 竖直拆分</span></span><br><span class=\"line\">g = np.vsplit(d,<span class=\"number\">3</span>)</span><br><span class=\"line\">print(g)</span><br><span class=\"line\"><span class=\"comment\"># [array([[ 1.,  2., 11., 12., 13.,  1.]]), array([[ 3.,  4., 14., 15., 16.,  1.]]), array([[ 5.,  6., 17., 18., 19.,  1.]])]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_data = np.arange(<span class=\"number\">100</span>,<span class=\"number\">200</span>)</span><br><span class=\"line\">print(base_data)</span><br><span class=\"line\">print(base_data[<span class=\"number\">10</span>])</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117</span></span><br><span class=\"line\"><span class=\"string\"> 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135</span></span><br><span class=\"line\"><span class=\"string\"> 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153</span></span><br><span class=\"line\"><span class=\"string\"> 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171</span></span><br><span class=\"line\"><span class=\"string\"> 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189</span></span><br><span class=\"line\"><span class=\"string\"> 190 191 192 193 194 195 196 197 198 199]</span></span><br><span class=\"line\"><span class=\"string\">110</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">every_five = np.arange(<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">print(every_five)</span><br><span class=\"line\"><span class=\"comment\"># [ 0  5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95]</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(base_data[every_five])</span><br><span class=\"line\"><span class=\"comment\"># [100 105 110 115 120 125 130 135 140 145 150 155 160 165 170 175 180 185 190 195]</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.array([(<span class=\"number\">1</span>,<span class=\"number\">2</span>),[<span class=\"number\">10</span>,<span class=\"number\">20</span>]])</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"comment\"># [[ 1  2]</span></span><br><span class=\"line\"><span class=\"comment\">#  [10 20]]</span></span><br><span class=\"line\">print(base_data[a])</span><br><span class=\"line\"><span class=\"comment\"># [[101 102]</span></span><br><span class=\"line\"><span class=\"comment\">#  [110 120]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">base_data2 = base_data.reshape(<span class=\"number\">10</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\">print(base_data2)</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[100 101 102 103 104 105 106 107 108 109]</span></span><br><span class=\"line\"><span class=\"string\"> [110 111 112 113 114 115 116 117 118 119]</span></span><br><span class=\"line\"><span class=\"string\"> [120 121 122 123 124 125 126 127 128 129]</span></span><br><span class=\"line\"><span class=\"string\"> [130 131 132 133 134 135 136 137 138 139]</span></span><br><span class=\"line\"><span class=\"string\"> [140 141 142 143 144 145 146 147 148 149]</span></span><br><span class=\"line\"><span class=\"string\"> [150 151 152 153 154 155 156 157 158 159]</span></span><br><span class=\"line\"><span class=\"string\"> [160 161 162 163 164 165 166 167 168 169]</span></span><br><span class=\"line\"><span class=\"string\"> [170 171 172 173 174 175 176 177 178 179]</span></span><br><span class=\"line\"><span class=\"string\"> [180 181 182 183 184 185 186 187 188 189]</span></span><br><span class=\"line\"><span class=\"string\"> [190 191 192 193 194 195 196 197 198 199]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(base_data2[<span class=\"number\">-1</span>,<span class=\"number\">-1</span>])  <span class=\"comment\"># 199</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切片索引从0开始</span></span><br><span class=\"line\">print(base_data2[<span class=\"number\">2</span>, :])</span><br><span class=\"line\"><span class=\"comment\"># [120 121 122 123 124 125 126 127 128 129]</span></span><br><span class=\"line\">print(base_data2[:,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\"># [103 113 123 133 143 153 163 173 183 193]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数字运算\"><a href=\"#数字运算\" class=\"headerlink\" title=\"数字运算\"></a>数字运算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_data = (np.random.random((<span class=\"number\">5</span>,<span class=\"number\">5</span>))<span class=\"number\">-0.5</span>) * <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ -4.99893607  39.77193936 -15.46706727  16.80691258 -38.51945213]</span></span><br><span class=\"line\"><span class=\"string\"> [-49.06612449  49.35329335  -0.4216167   13.12483635 -41.60876645]</span></span><br><span class=\"line\"><span class=\"string\"> [-43.18292355 -25.25568989   0.44448147  -2.89856688 -24.13873839]</span></span><br><span class=\"line\"><span class=\"string\"> [ 32.75485688  11.0737333   18.77766764  22.513295     3.48913839]</span></span><br><span class=\"line\"><span class=\"string\"> [-10.96543248 -40.42721305  30.38299405 -32.77083843  40.39435566]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(np.amin(base_data))</span><br><span class=\"line\"><span class=\"comment\"># -49.06612449306485</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.amax(base_data))</span><br><span class=\"line\"><span class=\"comment\"># 49.35329334672289</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.average(base_data))</span><br><span class=\"line\"><span class=\"comment\"># -2.0333544702011186</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.sin(base_data))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ 0.95922553  0.87660695 -0.23857285 -0.89073028 -0.73137794]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.93180625 -0.7908454  -0.40923611  0.52988566  0.69474259]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.71691953 -0.12263914  0.42998979 -0.24064058  0.83821559]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.9732393  -0.99694714 -0.07182638 -0.4987417  -0.34059131]</span></span><br><span class=\"line\"><span class=\"string\"> [ 0.99954577 -0.40180897 -0.858805   -0.97678732  0.43167496]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(np.sum(base_data))</span><br><span class=\"line\"><span class=\"comment\"># -50.83386175502796</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"矩阵运算\"><a href=\"#矩阵运算\" class=\"headerlink\" title=\"矩阵运算\"></a>矩阵运算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base_data = np.floor((np.random.random((<span class=\"number\">5</span>,<span class=\"number\">5</span>))<span class=\"number\">-0.5</span>) * <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ 39. -20. -44. -45.   6.]</span></span><br><span class=\"line\"><span class=\"string\"> [ -5.  44.  42. -33.  -6.]</span></span><br><span class=\"line\"><span class=\"string\"> [-14.  -9. -13. -30.  -4.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 31. -50.   5.   7.  45.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 39. -16.  42.  39. -24.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># 矩阵转置</span></span><br><span class=\"line\">print(base_data.T)  或着</span><br><span class=\"line\">print(base_data.transpose())</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[ 39.  -5. -14.  31.  39.]</span></span><br><span class=\"line\"><span class=\"string\"> [-20.  44.  -9. -50. -16.]</span></span><br><span class=\"line\"><span class=\"string\"> [-44.  42. -13.   5.  42.]</span></span><br><span class=\"line\"><span class=\"string\"> [-45. -33. -30.   7.  39.]</span></span><br><span class=\"line\"><span class=\"string\"> [  6.  -6.  -4.  45. -24.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">matri_one = np.ones((<span class=\"number\">5</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]</span></span><br><span class=\"line\"><span class=\"string\"> [1. 1. 1. 1. 1.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">minu_one = np.dot(matri_one, <span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]</span></span><br><span class=\"line\"><span class=\"string\"> [-1. -1. -1. -1. -1.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">print(np.dot(base_data,minu_one))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">[[-32. -32. -32. -32. -32.]</span></span><br><span class=\"line\"><span class=\"string\"> [-84. -84. -84. -84. -84.]</span></span><br><span class=\"line\"><span class=\"string\"> [-72. -72. -72. -72. -72.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 51.  51.  51.  51.  51.]</span></span><br><span class=\"line\"><span class=\"string\"> [ 46.  46.  46.  46.  46.]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"随机数\"><a href=\"#随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数</h3><p>生成20个随机数，它们每一个都是[0.0, 1.0)之间<br>根据指定的shape生成随机数<br>生成指定范围内（[0, 100)）的指定数量（20）的随机整数<br>对已有的数据（[0, 1, 2, …, 19]）的顺序随机打乱顺序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"random: &#123;&#125;\\n\"</span>.format(np.random.random(<span class=\"number\">20</span>)))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">random: [0.105123   0.90013672 0.58255936 0.27769054 0.00139627 0.69873449</span></span><br><span class=\"line\"><span class=\"string\"> 0.32550338 0.72112185 0.35799445 0.72302835 0.67139936 0.30039148</span></span><br><span class=\"line\"><span class=\"string\"> 0.83770639 0.07878046 0.77641452 0.6054163  0.72421693 0.77157218</span></span><br><span class=\"line\"><span class=\"string\"> 0.08644228 0.65128463]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"rand: &#123;&#125;\\n\"</span>.format(np.random.rand(<span class=\"number\">3</span>, <span class=\"number\">4</span>)))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">rand: [[0.73446485 0.30451937 0.49029421 0.62473099]</span></span><br><span class=\"line\"><span class=\"string\"> [0.09829422 0.55518899 0.83903237 0.71153898]</span></span><br><span class=\"line\"><span class=\"string\"> [0.11826133 0.53736883 0.47913765 0.0438171 ]]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"randint: &#123;&#125;\\n\"</span>.format(np.random.randint(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">20</span>)))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">randint: [39 51 97 22 92 29 19 54 92 30  5 61 26 19 92 59 23 64 85 97]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"permutation: &#123;&#125;\\n\"</span>.format(np.random.permutation(np.arange(<span class=\"number\">20</span>))))</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">permutation: [ 5  0 14 10  6 13 11  7 18 19  2 12 17  3  9  8  1 15  4 16]</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>"},{"title":"pep8的使用","copyright":true,"date":"2019-12-30T11:23:56.000Z","_content":"\n## 1 介绍(Introduction)\n本文档给出了包含主要Python发行版中的标准库的Python代码的编码约定。\n随着时间的推移，随着更多的约定被识别，过去的约定被语言本身的变化所淘汰，这种风格指南也在不断发展。\n\n<!--more-->\n## 2 代码布局(Code Lay-Out)\n### 2.1 缩进(Indentation)\n每个缩进需要使用4个空格。\n\n连续行所包装的元素应该要么采用Python隐式续行，即垂直对齐于圆括号、方括号和花括号，要么采用悬挂缩进。采用悬挂缩进时需考虑以下两点：第一行不应该包括参数，并且在续行中需要再缩进一级以便清楚表示。\n\n正确的写法\n\n    # 同开始分界符(左括号)对齐\n    foo = long_function_name(var_one, var_two,\n                             var_three, var_four)\n                             \n    # 续行多缩进一级以同其他代码区别\n    def long_function_name(\n            var_one, var_two, var_three,\n            var_four):\n        print(var_one)\n       \n    # 悬挂缩进需要多缩进一级\n    foo = long_function_name(\n        var_one, var_two,\n        var_three, var_four)\n\n错误的写法\n\n    # 采用悬挂缩进时第一行不应该有参数\n    foo = long_function_name(var_one, var_two,\n        var_three, var_four)\n     \n    # 续行并没有被区分开，因此需要再缩进一级\n    def long_function_name(\n        var_one, var_two, var_three,\n        var_four):\n        print(var_one)\n\n对于延续行，4个空格的规则是可选使用的。\n\n同样可行的例子:\n\n\n    # 悬挂缩进可以不采用4空格的缩进方法。\n    foo = long_function_name(\n      var_one, var_two,\n      var_three, var_four)\n      \n如果if语句太长，需要用多行书写，2个字符(例如,if)加上一个空格和一个左括号刚好是4空格的缩进，但这对多行条件语句的续行是没用的。因为这会和if语句中嵌套的其他的缩进的语句产生视觉上的冲突。这份PEP中并没有做出明确的说明应该怎样来区分条件语句和if语句中所嵌套的语句。以下几种方法都是可行的，但不仅仅只限于这几种方法：\n\n    # 不采用额外缩进\n    if (this_is_one_thing and\n        that_is_another_thing):\n        do_something()\n    \n    # 增加一行注释，在编辑器中显示时能有所区分\n    # supporting syntax highlighting.\n    if (this_is_one_thing and\n        that_is_another_thing):\n        # Since both conditions are true, we can frobnicate.\n        do_something()\n    \n    # 在条件语句的续行增加一级缩进\n    if (this_is_one_thing\n            and that_is_another_thing):\n        do_something()\n        \n多行结束右圆/方/花括号可以单独一行书写，和上一行的缩进对齐：\n\n    my_list = [\n        1, 2, 3,\n        4, 5, 6,\n        ]\n    result = some_function_that_takes_arguments(\n        'a', 'b', 'c',\n        'd', 'e', 'f',\n        )\n        \n也可以和多行开始的第一行的第一个字符对齐：\n\n    my_list = [\n        1, 2, 3,\n        4, 5, 6,\n    ]\n    result = some_function_that_takes_arguments(\n        'a', 'b', 'c',\n        'd', 'e', 'f',\n    )\n    \nTab还是空格？(Tab Or Space?)\n\n推荐使用空格来进行缩进。\n\nTab应该只在现有代码已经使用tab进行缩进的情况下使用，以便和现有代码保持一致。\n\nPython 3不允许tab和空格混合使用。\n\nPython 2的代码若有tab和空格混合使用的情况，应该把tab全部转换为只有空格。\n\n### 2.2 每行最大长度(Maximum Line Length)\n将所有行都限制在79个字符长度以内。\n\n对于连续大段的文字（比如文档字符串(docstring)或注释），其结构上的限制更少，这些行应该被限制在72个字符长度内。\n\n限制编辑器的窗口宽度能让好几个文件同时打开在屏幕上显示，在使用代码评审(code review)工具时在两个相邻窗口显示两个版本的代码效果很好。\n\n很多工具的默认自动换行会破坏代码的结构，使代码更难以理解。在窗口大小设置为80个字符的编辑器中，即使在换行时编辑器可能会在最后一列放置一个记号，为避免自动换行也需要限制每行字符长度。一些基于web的工具可能根本没有自动换行的功能。\n\n一些团队会强烈希望行长度比79个字符更长。当代码仅仅只由一个团队维护时，可以达成一致让行长度增加到80到100字符(实际上最大行长是99字符)，注释和文档字符串仍然是以72字符换行。\n\nPython标准库比较传统，将行长限制在79个字符以内（文档字符串/注释为72个字符）。\n\n一种推荐的换行方式是利用Python圆括号、方括号和花括号中的隐式续行。长行可以通过在括号内换行来分成多行。应该最好加上反斜杠来区别续行。\n\n隐式续行\n\n    a = ('sdfaf' \n        'test')\n\n有时续行只能使用反斜杠。例如，较长的多个with语句不能采用隐式续行，只能接受反斜杠表示换行：\n\n    with open('/path/to/some/file/you/want/to/read') as file_1, \\\n         open('/path/to/some/file/being/written', 'w') as file_2:\n        file_2.write(file_1.read())\n        \n### 2.3 二元运算符之前还是之后换行？(Should a line break before or after a binary operator?)\n\n长期以来一直推荐的风格是在二元运算符之后换行。但是这样会影响代码可读性，包括两个方面：一是运算符会分散在屏幕上的不同列上，二是每个运算符会留在前一行并远离操作数。所以，阅读代码的时候眼睛必须做更多的工作来确定哪些操作数被加，哪些操作数被减：\n\n    # 错误的例子：运算符远离操作数\n    income = (gross_wages +\n              taxable_interest +\n              (dividends - qualified_dividends) -\n              ira_deduction -\n              student_loan_interest)\n        \n为了解决这个可读性问题，数学家及其出版商遵循相反的规定。Donald Knuth在他的“电脑和排版”系列中解释了传统的规则：“尽管在段落中的公式总是在二元运算符之后换行，但显示公式时总是在二元运算符之前换行”。\n        \n    # 正确的例子：更容易匹配运算符与操作数\n    income = (gross_wages\n              + taxable_interest\n              + (dividends - qualified_dividends)\n              - ira_deduction\n              - student_loan_interest)\n              \n在Python代码中，只要在统一项目中约定一致，就可以在二元运算符之前或之后换行。对于新编写的代码，建议使用Knuth的风格。\n        \n### 2.4 空行(Blank Line)\n\n使用2个空行来分隔最外层的函数(function)和类(class)定义。\n\n使用1个空行来分隔类中的方法(method)定义。\n\n可以使用额外的空行（尽量少）来分隔一组相关的函数。在一系列相关的仅占一行的函数之间，空行也可以被省略（比如一组虚函数定义）。\n\n在函数内使用空行（尽量少）使代码逻辑更清晰。\n\n例子：\n\n    def func():\n        \n        \n        class A(object):\n            pass\n        \n        def func1():\n            a = A()\n            \n        def func2():\n            print('aaa')\n            print('bbb')\n\nPython支持control-L（如:^L）换页符作为空格；许多工具将这些符号作为分页符，因此你可以使用这些符号来分页或者区分文件中的相关区域。注意，一些编辑器和基于web的代码预览器可能不会将control-L识别为分页符，而是显示成其他符号。\n\n### 2.5 源文件编码(Source File Encoding)\n\nPython核心发行版中的代码应该一直使用UTF-8（Python 2中使用ASCII）。\n\n使用ASCII（Python 2）或者UTF-8（Python 3）的文件不应该添加编码声明。\n\n在标准库中，只有用作测试目的，或者注释或文档字符串需要提及作者名字而不得不使用非ASCII字符时，才能使用非默认的编码。否则，在字符串文字中包括非ASCII数据时，推荐使用\\x, \\u, \\U或\\N等转义符。\n\n对于Python 3.0及其以后的版本中，标准库遵循以下原则（参见PEP 3131）：Python标准库中的所有标识符都必须只采用ASCII编码的标识符，在可行的条件下也应当使用英文词（很多情况下，使用的缩写和技术术语词都不是英文）。此外，字符串文字和注释应该只包括ASCII编码。只有两种例外：\n\n(a) 测试情况下为了测试非ASCII编码的特性\n\n(b) 作者名字。作者名字不是由拉丁字母组成的也必须提供一个拉丁音译名。\n\n鼓励具有全球受众的开放源码项目采用类似的原则。\n\n### 2.6 模块引用(Imports)\n\nImports应该分行写，而不是都写在一行，例如：\n\n    # 分开写\n    import os\n    import sys\n    \n    # 不要像下面一样写在一行\n    import sys, os\n    \n这样写也是可以的：\n\n    from subprocess import Popen, PIPE\n    \nImports应该写在代码文件的开头，位于模块(module)注释和文档字符串(docstring)之后，模块全局变量(globals)和常量(constants)声明之前。\n    \nImports应该按照下面的顺序分组来写：\n\n1. 标准库imports\n2. 相关第三方imports\n3. 本地应用/库的特定imports\n\n如：\n\n    import re\n    from lxml import etree\n    from ak_spider.common.mongo_models import *\n    from ak_spider.settings import CAPTCHA_SERVER, AK_PROXY_SERVER, logger\n\n不同组的imports之前用空格隔开。\n\n推荐使用绝对(absolute)imports，因为这样通常更易读，在import系统没有正确配置（比如中的路径以sys.path结束）的情况下，也会有更好的表现（或者至少会给出错误信息）：\n    \n    import mypkg.sibling\n    from mypkg import sibling\n    from mypkg.sibling import example\n    \n然而，除了绝对imports，显式的相对imports也是一种可以接受的替代方式。特别是当处理复杂的包布局(package layouts)时，采用绝对imports会显得啰嗦。\n    \n    from . import sibling\n    from .sibling import example\n    \n标准库代码应当一直使用绝对imports，避免复杂的包布局。\n\n隐式的相对imports应该永不使用，并且Python 3中已经被去掉了\n\n当从一个包括类的模块中import一个类时，通常可以这样写：\n\n    from myclass import MyClass\n    from foo.bar.yourclass import YourClass\n    \n如果和本地命名的拼写产生了冲突，应当直接import模块：\n\n    import myclass\n    import foo.bar.yourclass\n    \n然后使用”myclass.MyClass”和”foo.bar.yourclass.YourClass”。\n\n避免使用通配符imports(from <module> import *)，因为会造成在当前命名空间出现的命名含义不清晰，给读者和许多自动化工具造成困扰。有一个可以正当使用通配符import的情形，即将一个内部接口重新发布成公共API的一部分（比如，使用备选的加速模块中的定义去覆盖纯Python实现的接口，预先无法知晓具体哪些定义将被覆盖）。\n\n当使用这种方式重新发布命名时，指南后面关于公共和内部接口的部分仍然适用。\n\n### 2.7 模块级的双下划线命名(Module level dunder names)\n\n模块中的“双下滑线”（变量名以两个下划线开头，两个下划线结尾）变量，比如__all__，__author，__version__等，应该写在文档字符串(docstring)之后，除了form __future__引用(imports)的任何其它类型的引用语句之前。Python要求模块中__future__的导入必须出现在除文档字符串(docstring)之外的任何其他代码之前。\n    \n例如：\n\n    \"\"\"This is the example module.\n    \n    This module does stuff.\n    \"\"\"\n    \n    from __future__ import barry_as_FLUFL\n    \n    __all__ = ['a', 'b', 'c']\n    __version__ = '0.1'\n    __author__ = 'Cardinal Biggles'\n    \n    import os\n    import sys\n    \n##  3 字符串引用(String Quotes)\n\n在Python中表示字符串时，不管用单引号还是双引号都是一样的。但是不推荐将这两种方式看作一样并且混用。最好选择一种规则并坚持使用。当字符串中包含单引号时，采用双引号来表示字符串，反之也是一样，这样可以避免使用反斜杠，代码也更易读。\n\n对于三引号表示的字符串，使用双引号字符来表示(即用\"\"\"而不是''')。\n    \n## 4 表达式和语句中的空格(Whitespace In Expressions And Statements)\n\n    \n### 4.1 一些痛点(Pet Peeves)\n\n在下列情形中避免使用过多的空白：\n    \n方括号，圆括号和花括号之后：\n\n    #正确的例子:\n    spam(ham[1], {eggs: 2})\n    \n    #错误的例子：\n    spam( ham[ 1 ], { eggs: 2 } )\n    \n逗号，分号或冒号之前：\n\n    #正确的例子:\n    if x == 4: print x, y; x, y = y, x\n    \n    #错误的例子:\n    if x == 4 : print x , y ; x , y = y , x\n    \n不过，在切片操作时，冒号和二元运算符是一样的，应该在其左右两边保留相同数量的空格（就像对待优先级最低的运算符一样）。在扩展切片操作中，所有冒号的左右两边空格数都应该相等。不过也有例外，当切片操作中的参数被省略时，应该也忽略空格。\n\n    #正确的例子:\n    ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\n    ham[lower:upper], ham[lower:upper:], ham[lower::step]\n    ham[lower+offset : upper+offset]\n    ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\n    ham[lower + offset : upper + offset]\n    \n    #错误的例子:\n    ham[lower + offset:upper + offset]\n    ham[1: 9], ham[1 :9], ham[1:9 :3]\n    ham[lower : : upper]\n    ham[ : upper]\n    \n在调用函数时传递参数list的括号之前：\n\n    #正确的例子:\n    spam(1)\n    \n    #错误的例子:\n    pam (1)\n\n在索引和切片操作的左括号之前：\n\n    #正确的例子:\n    dct['key'] = lst[index]\n    \n    #错误的例子:\n    dct ['key'] = lst [index]\n    \n赋值(或其他)运算符周围使用多个空格来和其他语句对齐：\n\n    #正确的例子:\n    x = 1\n    y = 2\n    long_variable = 3\n    \n    #错误的例子:\n    x             = 1\n    y             = 2\n    long_variable = 3\n    \n### 4.2 其他建议(Other Recommendations)\n\n避免任何行末的空格。因为它通常是不可见的，它可能会令人困惑：例如反斜杠后跟空格和换行符不会作为续行标记。一些编辑器会自动去除行末空格，许多项目（如CPython本身）都有提交前的预处理钩子来自动去除行末空格。\n\n在二元运算符的两边都使用一个空格：赋值运算符(=)，增量赋值运算符(+=, -= etc.)，比较运算符(==, <, >, !=, <>, <=, >=, in, not in, is, is not)，布尔运算符(and, or, not)。\n    \n如果使用了优先级不同的运算符，则在优先级较低的操作符周围增加空白。请你自行判断，不过永远不要用超过1个空格，永远保持二元运算符两侧的空白数量一样。\n    \n    #正确的例子:\n    i = i + 1\n    submitted += 1\n    x = x*2 - 1\n    hypot2 = x*x + y*y\n    c = (a+b) * (a-b)\n    \n    #错误的例子:\n    i=i+1\n    submitted +=1\n    x = x * 2 - 1\n    hypot2 = x * x + y * y\n    c = (a + b) * (a - b)    \n\n使用=符号来表示关键字参数或参数默认值时，不要在其周围使用空格。\n\n    #正确的例子:\n    def complex(real, imag=0.0):\n    return magic(r=real, i=imag)\n    \n    #错误的例子:\n    def complex(real, imag = 0.0):\n    return magic(r = real, i = imag)\n\n函数注解中的:也遵循一般的:加空格的规则，在->两侧各使用一个空格。\n\n    #正确的例子:\n    def munge(input: AnyStr): ...\n    def munge() -> AnyStr: ...\n    \n    #错误的例子:\n    def munge(input:AnyStr): ...\n    def munge()->PosInt: ...\n    \n在组合使用函数注解和参数默认值时，需要在=两侧各使用一个空格（只有当这个参数既有函数注解，又有默认值的时候）。\n\n    #正确的例子:\n    def munge(sep: AnyStr = None): ...\n    def munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...\n    \n    #错误的例子:\n    def munge(input: AnyStr=None): ...\n    def munge(input: AnyStr, limit = 1000): ...\n    \n复合语句（即将多行语句写在一行）一般是不鼓励使用的。\n\n    #正确的例子:\n    if foo == 'blah':\n    do_blah_thing()\n    do_one()\n    do_two()\n    do_three()\n    \n    #最好不要这样:\n    if foo == 'blah': do_blah_thing()\n    do_one(); do_two(); do_three()\n    \n有时也可以将短小的if/for/while中的语句写在一行，但对于有多个分句的语句永远不要这样做。也要避免将多行都写在一起。\n    \n    #最好不要这样：\n    if foo == 'blah': do_blah_thing()\n    for x in lst: total += x\n    while t < 10: t = delay()\n    \n    #绝对不要这样：\n    if foo == 'blah': do_blah_thing()\n    else: do_non_blah_thing()\n    \n    try: something()\n    finally: cleanup()\n    \n    do_one(); do_two(); do_three(long, argument,\n    list, like, this)\n    \n    if foo == 'blah': one(); two(); three()\n    \n## 5 何时在末尾加逗号(When to use trailing commas)\n    \n末尾逗号通常是可选的，除非在定义单元素元组(tuple)时是必需的（而且在Python 2中，它们具有print语句的语义）。为了清楚起见，建议使用括号（技术上来说是冗余的）括起来。\n    \n    #正确的例子:\n    FILES = ('setup.cfg',)\n    \n    #也正确，但令人困惑:\n    FILES = 'setup.cfg',\n    \n当使用版本控制系统时，在将来有可能扩展的列表末尾添加冗余的逗号是有好处的。具体的做法是将每一个元素写在单独的一行，并在行尾添加逗号，右括号单独占一行。但是，与有括号在同一行的末尾元素后面加逗号是没有意义的（上述的单元素元组除外）。\n\n    #正确的例子:\n    FILES = [\n        'setup.cfg',\n        'tox.ini',\n        ]\n    initialize(FILES,\n               error=True,\n               )\n    \n    #错误的例子:\n    FILES = ['setup.cfg', 'tox.ini',]\n    initialize(FILES, error=True,)\n    \n## 6 注释(Comments)\n\n和代码矛盾的注释还不如没有。当代码有改动时，一定要优先更改注释使其保持最新。\n\n注释应该是完整的多个句子。如果注释是一个短语或一个句子，其首字母应该大写，除非开头是一个以小写字母开头的标识符（永远不要更改标识符的大小写）。\n\n如果注释很短，结束的句号可以被忽略。块注释通常由一段或几段完整的句子组成，每个句子都应该以句号结束。\n\n你应该在句尾的句号后再加上2个空格。\n\n使用英文写作，参考Strunk和White的《The Elements of Style》\n\n来自非英语国家的Python程序员们，请使用英文来写注释，除非你120%确定你的代码永远不会被不懂你所用语言的人阅读到。\n\n### 6.1 块注释（Block Comments）\n\n块注释一般写在对应代码之前，并且和对应代码有同样的缩进级别。块注释的每一行都应该以#和一个空格开头（除非该文本是在注释内缩进对齐的）。\n\n块注释中的段落应该用只含有单个#的一行隔开。\n\n### 6.2 行内注释（Inline Comments）\n\n尽量少用行内注释。\n\n行内注释是和代码语句写在一行内的注释。行内注释应该至少和代码语句之间有两个空格的间隔，并且以#和一个空格开始。\n\n行内注释通常不是必要的，在代码含义很明显时甚至会让人分心。请不要这样做：\n\n    x = x + 1                 # x自加\n\n但这样做是有用的：\n\n    x = x + 1                 # 边界补偿\n\n### 6.3 文档字符串(Documentation Strings)\n\n要知道如何写出好的文档字符串（docstring），请参考PEP 257\n\n所有的公共模块，函数，类和方法都应该有文档字符串。对于非公共方法，文档字符串不是必要的，但你应该留有注释说明该方法的功能，该注释应当出现在def的下一行。\n\nPEP 257描述了好的文档字符应该遵循的规则。其中最重要的是，多行文档字符串以单行\"\"\"结尾，不能有其他字符，例如：\n\n    \"\"\"Return a foobang\n    \n    Optional plotz says to frobnicate the bizbaz first.\n    \"\"\"\n\n对于仅有一行的文档字符串，结尾处的\"\"\"应该也写在这一行。\n\n## 7 命名约定（Naming Conventions）\n\nPython标准库的命名约定有一些混乱，因此我们永远都无法保持一致。但如今仍然存在一些推荐的命名标准。新的模块和包（包括第三方框架）应该采用这些标准，但若是已经存在的包有另一套风格的话，还是应当与原有的风格保持内部一致。\n\n### 7.1 首要原则（Overriding Principle）\n\n对于用户可见的公共部分API，其命名应当表达出功能用途而不是其具体的实现细节。\n\n### 7.2 描述：命名风格（Descriptive: Naming Styles）\n\n存在很多不同的命名风格，最好能够独立地从命名对象的用途认出采用了哪种命名风格。\n\n通常区分以下命名样式：\n\n- b (单个小写字母)\n- B (单个大写字母)\n- lowercase(小写)\n- lower_case_with_underscores(带下划线小写)\n- UPPERCASE(大写)\n- UPPER_CASE_WITH_UNDERSCORES(带下划线大写)\n- CapitalizedWords (也叫做CapWords或者CamelCase – 因为单词首字母大写看起来很像驼峰)。也被称作StudlyCaps。注意：当CapWords里包含缩写时，将缩写部分的字母都大写。HTTPServerError比HttpServerError要好。\n- mixedCase (注意：和CapitalizedWords不同在于其首字母小写！)\n- Capitalized_Words_With_Underscores (这种风格超丑！)\n\n也有风格使用简短唯一的前缀来表示一组相关的命名。这在Python中并不常见，但为了完整起见这里也捎带提一下。比如，os.stat()函数返回一个tuple，其中的元素名原本为st_mode,st-size,st_mtime等等。（这样做是为了强调和POSIX系统调用结构之间的关系，可以让程序员更熟悉。）\n\nX11库中的公共函数名都以X开头。在Python中这样的风格一般被认为是不必要的，因为属性和方法名之前已经有了对象名的前缀，而函数名前也有了模块名的前缀。\n\n此外，要区别以下划线开始或结尾的特殊形式（可以和其它的规则结合起来）：\n\n_single_leading_underscore: 以单个下划线开头是”内部使用”的弱标志。 比如， from M import *不会import下划线开头的对象。\n\nsingle_trailing_underscore_: 以单个下划线结尾用来避免和Python关键词产生冲突，例如:\n            \n        Tkinter.Toplevel(master, class_='ClassName')\n\n__double_leading_underscore: 以双下划线开头的风格命名类属性表示触发命名修饰（在FooBar类中，__boo命名会被修饰成_FooBar__boo;）。\n\n### 7.3 规范：命名约定(Prescriptive: Naming Conventions)\n\n#### 7.3.1 需要避免的命名(Names To Avoid)\n\n不要使用字符’l’（L的小写的字母），’O’（o大写的字母），或者’I’（i的大写的字母）来作为单个字符的变量名。\n\n在一些字体中，这些字符和数字1和0无法区别开来。比如，当想使用’l’时，使用’L’代替。\n\n#### 7.3.2 ASCII兼容性(ASCII Compatibility)\n\n标准库中使用的标识符必须与ASCII兼容(参见PEP 3131中的[policy](https://www.python.org/dev/peps/pep-3131/#policy-specification)这一节) 。\n\n#### 7.3.3 包和模块命名(Package And Module Names)\n\n模块命名应短小，且为全小写。若下划线能提高可读性，也可以在模块名中使用。Python包命名也应该短小，且为全小写，但不应使用下划线。\n\n当使用C或C++写的扩展模块有相应的Python模块提供更高级的接口时（比如，更加面向对象），C/C++模块名以下划线开头（例如，_sociket）\n\n#### 7.3.4 类命名(Class Names)\n\n类命名应该使用驼峰（CapWords）的命名约定。\n\n当接口已有文档说明且主要是被用作调用时，也可以使用函数的命名约定。\n\n注意对于内建命名(builtin names)有一个特殊的约定：大部分内建名都是一个单词（或者两个一起使用的单词），驼峰(CapWords)的约定只对异常命名和内建常量使用。\n\n#### 7.3.5 类型变量命名(Type variable names)\n\nPEP 484中引入的类型变量名称通常应使用简短的驼峰命名: T，AnyStr，Num。 建议将后缀_co或_contra添加到用于声明相应的协变(covariant)和逆变(contravariant)的行为。例如：\n\n    from typing import TypeVar\n    \n    VT_co = TypeVar('VT_co', covariant=True)\n    KT_contra = TypeVar('KT_contra', contravariant=True)\n\n#### 7.3.6 异常命名(Exception Names)\n\n由于异常实际上也是类，因此类命名约定也适用与异常。不同的是，如果异常实际上是抛出错误的话，异常名前应该加上”Error”的前缀。\n\n#### 7.3.7 全局变量命名(Global Variable Names)\n\n（在此之前，我们先假定这些变量都仅在同一个模块内使用。）这些约定同样也适用于函数命名。\n\n对于引用方式设计为from M import *的模块，应该使用__all__机制来避免import全局变量，或者采用下划线前缀的旧约定来命名全局变量，从而表明这些变量是“模块非公开的”。\n\n#### 7.3.8 函数命名(Function Names)\n\n函数命名应该都是小写，必要时使用下划线来提高可读性。\n\n只有当已有代码风格已经是混合大小写时（比如threading.py），为了保留向后兼容性才使用混合大小写。\n\n#### 7.3.9 函数和方法参数(Function And Method Arguments)\n\n实例方法的第一参数永远都是self。\n\n类方法的第一个参数永远都是cls。\n\n在函数参数名和保留关键字冲突时，相对于使用缩写或拼写简化，使用以下划线结尾的命名一般更好。比如，class_比clss更好。（或许使用同义词避免这样的冲突是更好的方式。）\n\n#### 7.3.10 方法命名和实例变量(Method Names And Instance Variables)\n\n使用函数命名的规则：小写单词，必要时使用下划线分开以提高可读性。\n\n仅对于非公开方法和变量命名在开头使用一个下划线。\n\n避免和子类的命名冲突，使用两个下划线开头来触发Python的命名修饰机制。\n\nPython类名的命名修饰规则：如果类Foo有一个属性叫__a，不能使用Foo.__a的方式访问该变量。（有用户可能仍然坚持使用Foo._Foo__a的方法访问。）一般来说，两个下划线开头的命名方法仅用于避免与设计为子类的类中的属性名冲突。\n\n#### 7.3.11 常量(Constants)\n\n常量通常是在模块级别定义的，使用全部大写并用下划线将单词分开。如：MAX_OVERFLOW和TOTAL 。\n\n#### 7.3.12 继承的设计(Designing For Inheritance)\n\n记得永远区别类的方法和实例变量（属性）应该是公开的还是非公开的。如果有疑虑的话，请选择非公开的；因为之后将非公开属性变为公开属性要容易些。\n\n公开属性是那些你希望和你定义的类无关的客户来使用的，并且确保不会出现向后不兼容的问题。非公开属性是那些不希望被第三方使用的部分，你可以不用保证非公开属性不会变化或被移除。\n\n我们在这里没有使用“私有（private）”这个词，因为在Python里没有什么属性是真正私有的（这样设计省略了大量不必要的工作）。\n\n另一类属性属于子类API的一部分（在其他语言中经常被称为”protected”）。一些类是为继承设计的，要么扩展要么修改类的部分行为。当设计这样的类时，需要谨慎明确地决定哪些属性是公开的，哪些属于子类API，哪些真的只会被你的基类调用。\n\n请记住以上几点，下面是Python风格的指南：\n\n- 公开属性不应该有开头下划线。\n- 如果公开属性的名字和保留关键字有冲突，在你的属性名尾部加上一个下划线。这比采用缩写和简写更好。（然而，和这条规则冲突的是，‘cls’对任何变量和参数来说都是一个更好地拼写，因为大家都知道这表示class，特别是在类方法的第一个参数里。）\n- 对于简单的公共数据属性，最后仅公开属性名字，不要公开复杂的调用或设值方法。请记住，如果你发现一个简单的数据属性需要增加功能行为时，Python为功能增强提供了一个简单的途径。这种情况下，使用Properties注解将功能实现隐藏在简单数据属性访问语法之后。注意 1：Properties注解仅仅对新风格类有用。\n注意 2：尽量保证功能行为没有副作用，尽管缓存这种副作用看上去并没有什么大问题。\n注意 3: 对计算量大的运算避免试用properties；属性的注解会让调用者相信访问的运算量是相对较小的。\n- 如果你的类将被子类继承的话，你有一些属性并不想让子类访问，考虑将他们命名为两个下划线开头并且结尾处没有下划线。这样会触发Python命名修饰算法，类名会被修饰添加到属性名中。这样可以避免属性命名冲突，以免子类会不经意间包含相同的命名。注意 1：注意命名修饰仅仅是简单地将类名加入到修饰名中，所以如果子类有相同的类名合属性名，你可能仍然会遇到命名冲突问题。\n注意 2：命名修饰可以有特定用途，比如在调试时，\\_\\_getattr\\_\\_()比较不方便。然而命名修饰算法的可以很好地记录，并且容意手动执行。\n注意 3：不是所有人都喜欢命名修饰。需要试着去平衡避免偶然命名冲突的需求和高级调用者使用的潜在可能性。\n\n### 7.4 公开和内部接口(Public And Internal Interfaces)\n\n任何向后兼容性保证仅对公开接口适用。相应地，用户能够清楚分辨公开接口和内部接口是很重要的。\n\n文档化的接口被认为是公开的，除非文档中明确申明了它们是临时的或者内部接口，不保证向后兼容性。所有文档中未提到的接口应该被认为是内部的。\n\n为了更好审视公开接口和内部接口，模块应该在__all属性中明确申明公开API是哪些。将__all__设为空list表示该模块中没有公开API。\n\n即使正确设置了__all属性，内部接口（包，模块，类，函数，属性或其他命名）也应该以一个下划线开头。\n\n如果接口的任一一个命名空间（包，模块或类）是内部的，那么该接口也应该是内部的\n\n引用的命名应该永远被认为是实现细节。其他模块不应当依赖这些非直接访问的引用命名，除非它们在文档中明确地被写为模块的API，例如os.path或者包的__init__模块，那些从子模块展现的功能。\n\n## 8 编程建议(Programming Recommendations)\n\n1 代码应该以不影响其他Python实现（PyPy，Jython，IronPython，Cython，Psyco等）的方式编写。\n\n例如，不要依赖于 CPython 在字符串拼接时的优化实现，像这种语句形式a += b和a = a + b。即使是 CPython（仅对某些类型起作用） 这种优化也是脆弱的，不是在所有的实现中都不使用引用计数。在库中性能敏感的部分，用''.join形式来代替。这会确保在所有不同的实现中字符串拼接是线性时间的。\n\n2 与单例作比较，像None应该用is或is not，从不使用==操作符。\n\n同样的，当心if x is not None这样的写法，你是不知真的要判断x不是None。例如，测试一个默认值为None的变量或参数是否设置成了其它值，其它值有可能是某种特殊类型（如容器），这种特殊类型在逻辑运算时其值会被当作Flase来看待。\n\n用is not操作符而不是not ... is。虽然这两个表达式是功能相同的，前一个是更可读的，是首选。\n\n推荐的写法:\n\n    if foo is not None:\n    \n不推荐的写法:\n\n    if not foo is None:\n\n3 用富比较实现排序操作的时候，最好实现所有六个比较操作符（ \\_\\_eq__ 、 \\_\\_ne__ 、 \\_\\_lt__ , \\_\\_le__ , \\_\\_gt__ , \\_\\_ge__），而不是依靠其他代码来进行特定比较。\n\n为了最大限度的减少工作量，functools.total_ordering()装饰器提供了一个工具去生成缺少的比较方法。\n\nPEP 207 说明了 Python 假定的所有反射规则。因此，解释器可能使用y > x替换x < y，使用y >= x替换x <= y，也可能交换x == y和x != y的操作数。sort()和min()操作肯定会使用<操作符，max()函数肯定会使用>操作符。当然，最好是六个操作符都实现，以便在其他情况下不会出现混淆。\n\n4 始终使用def语句来代替直接绑定了一个lambda表达式的赋值语句。\n\n推荐的写法:\n\n    def f(x): return 2*x\n\n不推荐的写法:\n\n    f = lambda x: 2*x\n\n第一个表单意味着生成的函数对象的名称是'f'而不是通用的'<lambda>'。通常这对异常追踪和字符串表述是更有用的。使用赋值语句消除了使用lambda表达式可以提供，而一个显式的def语句不能提供的唯一好处，如，lambda能镶嵌在一个很长的表达式里。\n\n5 异常类应派生自Exception而不是BaseException。直接继承BaseException是为Exception保留的，从BaseException继承并捕获异常这种做法几乎总是错的。\n\n设计异常的层次结构，应基于那些可能出现异常的代码，而不是引发异常的位置。编码的时候，以回答“出了什么问题？”为目标，而不是仅仅指出“这里出现了问题”（见 PEP 3151 一个内建异常结构层次的例子）。\n\n类的命名约定适用于异常，如果异常类是一个错误，你应该给异常类加一个后缀Error。用于非本地流程控制或者其他形式的信号的非错误异常不需要一个特殊的后缀。\n\n6 适当的使用异常链。在 Python 3 里，应该使用raise X from Y来指示显式替换，而不会丢失原始的追溯。\n\n当有意替换一个内部的异常时（在 Python 2 用raise X，Python 3.3+ 用raise X from None），请确保将相关详细信息转移到新异常中（例如，将KeyError转换为AttributeError时保留属性名称，或将原始异常的文本嵌入到新的异常消息中）。\n\n7 在 Python 2 里抛出异常时，用raise ValueError('message')代替旧式的raise ValueError, 'message'。\n\n在 Python 3 之后的语法里，旧式的异常抛出方式是非法的。\n\n使用括号形式的异常意味着，当你传给异常的参数过长或者包含字符串格式化时，你就不需要使用续行符了，这要感谢括号！\n\n8 捕获异常时，尽可能使用明确的异常，而不是用一个空的except:语句。\n\n例如，用：\n\n    try:\n        import platform_specific_module\n    except ImportError:\n        platform_specific_module = None\n\n一个空的except:语句将会捕获到SystemExit和KeyboardInterrupt异常，很难区分程序的中断到底是Ctrl+C还是其他问题引起的。如果你想捕获程序的所有错误，使用except Exception:(空except:等同于except BaseException)。\n\n一个好的经验是限制使用空except语句，除了这两种情况：\n\n- 如果异常处理程序会打印出或者记录回溯信息；至少用户意识到错误的存在。\n- 如果代码需要做一些清理工作，但后面用raise向上抛出异常。try .. finally是处理这种情况更好的方式。\n\n9 绑定异常给一个名字时，最好使用 Python 2.6 里添加的明确的名字绑定语法：\n\n    try:\n        process_data()\n    except Exception as exc:\n        raise DataProcessingFailedError(str(exc))\n\nPython 3 只支持这种语法，避免与基于逗号的旧式语法产生二义性。\n\n10 捕获操作系统错误时，最好使用 Python 3.3 里引进的明确的异常结构层次，而不是内省的errno值。\n\n11 另外，对于所有try / except子句，将try子句限制为必需的绝对最小代码量。同样，这样可以避免屏蔽错误。\n\n推荐的写法：\n\n    try:\n        value = collection[key]\n    except KeyError:\n        return key_not_found(key)\n    else:\n        return handle_value(value)\n        \n不推荐的写法：\n\n    try:\n        # Too broad!\n        return handle_value(collection[key])\n    except KeyError:\n        # Will also catch KeyError raised by handle_value()\n        return key_not_found(key)\n\n12 当某个资源仅被特定代码段使用，用with语句确保其在使用后被立即干净的清除了，try/finally也是也接受的。\n\n13 当它们做一些除了获取和释放资源之外的事的时候，上下文管理器应该通过单独的函数或方法调用。例如：\n\n推荐的写法:\n\n    with conn.begin_transaction():\n        do_stuff_in_transaction(conn)\n\n不推荐的写法：\n\n    with conn:\n        do_stuff_in_transaction(conn)\n\n第二个例子没有提供任何信息来表明__enter__和__exit__方法在完成一个事务后做了一些除了关闭连接以外的其它事。在这种情况下明确是很重要的。\n\n14 坚持使用return语句。函数内的return语句都应该返回一个表达式，或者None。如果一个return语句返回一个表达式，另一个没有返回值的应该用return None清晰的说明，并且在一个函数的结尾应该明确使用一个return语句（如果有返回值的话）。\n\n推荐的写法：\n\n    def foo(x):\n        if x >= 0:\n            return math.sqrt(x)\n        else:\n            return None\n    \n    def bar(x):\n        if x < 0:\n            return None\n        return math.sqrt(x)\n        \n不推荐的写法：\n\n    def foo(x):\n        if x >= 0:\n            return math.sqrt(x)\n    \n    def bar(x):\n        if x < 0:\n            return\n        return math.sqrt(x)\n\n15 用字符串方法代替字符串模块。\n\n字符串方法总是快得多，并且与unicode字符串共享相同的API。如果需要与2.0以下的Python的向后兼容，则覆盖此规则。\n\n16 用''.startswith()和''.endswith()代替字符串切片来检查前缀和后缀。\n\nstartswith()和endswith()是更简洁的，不容易出错的。例如：\n\n    #推荐的写法：\n    if foo.startswith('bar'):\n    \n    #不推荐的写法：\n    if foo[:3] == 'bar':\n\n17 对象类型的比较应该始终使用isinstance()而不是直接比较。\n\n    #推荐的写法：\n    if isinstance(obj, int):\n    \n    #不推荐的写法：\n    if type(obj) is type(1):\n\n当比较一个对象是不是字符串时，记住它有可能也是一个 unicode 字符串！在 Python 2 里面，str和unicode有一个公共的基类叫basestring，因此你可以这样做：\n\n    if isinstance(obj, basestring):\n\n注意，在 Python 3 里面，unicode和basestring已经不存在了（只有str），byte对象不再是字符串的一种（被一个整数序列替代）。\n\n18 对于序列（字符串、列表、元组）来说，空的序列为False：\n\n正确的写法：\n\n    if not seq:\n    if seq:\n\n错误的写法：\n\n    if len(seq):\n    if not len(seq):\n    \n19 不要让字符串对尾随的空格有依赖。这样的尾随空格是视觉上无法区分的，一些编辑器（或者，reindent.py）会将其裁剪掉。\n\n20 不要用==比较True和False。\n\n    #推荐的写法：\n    if greeting:\n    \n    #不推荐的写法：\n    if greeting == True:\n    \n    #更加不推荐的写法：\n    if greeting is True:\n    ","source":"_posts/pep8.md","raw":"---\ntitle: pep8的使用\ncopyright: true\ndate: 2019-12-30 19:23:56\ntags: \n\t- 编码规范\ncategories: python\n---\n\n## 1 介绍(Introduction)\n本文档给出了包含主要Python发行版中的标准库的Python代码的编码约定。\n随着时间的推移，随着更多的约定被识别，过去的约定被语言本身的变化所淘汰，这种风格指南也在不断发展。\n\n<!--more-->\n## 2 代码布局(Code Lay-Out)\n### 2.1 缩进(Indentation)\n每个缩进需要使用4个空格。\n\n连续行所包装的元素应该要么采用Python隐式续行，即垂直对齐于圆括号、方括号和花括号，要么采用悬挂缩进。采用悬挂缩进时需考虑以下两点：第一行不应该包括参数，并且在续行中需要再缩进一级以便清楚表示。\n\n正确的写法\n\n    # 同开始分界符(左括号)对齐\n    foo = long_function_name(var_one, var_two,\n                             var_three, var_four)\n                             \n    # 续行多缩进一级以同其他代码区别\n    def long_function_name(\n            var_one, var_two, var_three,\n            var_four):\n        print(var_one)\n       \n    # 悬挂缩进需要多缩进一级\n    foo = long_function_name(\n        var_one, var_two,\n        var_three, var_four)\n\n错误的写法\n\n    # 采用悬挂缩进时第一行不应该有参数\n    foo = long_function_name(var_one, var_two,\n        var_three, var_four)\n     \n    # 续行并没有被区分开，因此需要再缩进一级\n    def long_function_name(\n        var_one, var_two, var_three,\n        var_four):\n        print(var_one)\n\n对于延续行，4个空格的规则是可选使用的。\n\n同样可行的例子:\n\n\n    # 悬挂缩进可以不采用4空格的缩进方法。\n    foo = long_function_name(\n      var_one, var_two,\n      var_three, var_four)\n      \n如果if语句太长，需要用多行书写，2个字符(例如,if)加上一个空格和一个左括号刚好是4空格的缩进，但这对多行条件语句的续行是没用的。因为这会和if语句中嵌套的其他的缩进的语句产生视觉上的冲突。这份PEP中并没有做出明确的说明应该怎样来区分条件语句和if语句中所嵌套的语句。以下几种方法都是可行的，但不仅仅只限于这几种方法：\n\n    # 不采用额外缩进\n    if (this_is_one_thing and\n        that_is_another_thing):\n        do_something()\n    \n    # 增加一行注释，在编辑器中显示时能有所区分\n    # supporting syntax highlighting.\n    if (this_is_one_thing and\n        that_is_another_thing):\n        # Since both conditions are true, we can frobnicate.\n        do_something()\n    \n    # 在条件语句的续行增加一级缩进\n    if (this_is_one_thing\n            and that_is_another_thing):\n        do_something()\n        \n多行结束右圆/方/花括号可以单独一行书写，和上一行的缩进对齐：\n\n    my_list = [\n        1, 2, 3,\n        4, 5, 6,\n        ]\n    result = some_function_that_takes_arguments(\n        'a', 'b', 'c',\n        'd', 'e', 'f',\n        )\n        \n也可以和多行开始的第一行的第一个字符对齐：\n\n    my_list = [\n        1, 2, 3,\n        4, 5, 6,\n    ]\n    result = some_function_that_takes_arguments(\n        'a', 'b', 'c',\n        'd', 'e', 'f',\n    )\n    \nTab还是空格？(Tab Or Space?)\n\n推荐使用空格来进行缩进。\n\nTab应该只在现有代码已经使用tab进行缩进的情况下使用，以便和现有代码保持一致。\n\nPython 3不允许tab和空格混合使用。\n\nPython 2的代码若有tab和空格混合使用的情况，应该把tab全部转换为只有空格。\n\n### 2.2 每行最大长度(Maximum Line Length)\n将所有行都限制在79个字符长度以内。\n\n对于连续大段的文字（比如文档字符串(docstring)或注释），其结构上的限制更少，这些行应该被限制在72个字符长度内。\n\n限制编辑器的窗口宽度能让好几个文件同时打开在屏幕上显示，在使用代码评审(code review)工具时在两个相邻窗口显示两个版本的代码效果很好。\n\n很多工具的默认自动换行会破坏代码的结构，使代码更难以理解。在窗口大小设置为80个字符的编辑器中，即使在换行时编辑器可能会在最后一列放置一个记号，为避免自动换行也需要限制每行字符长度。一些基于web的工具可能根本没有自动换行的功能。\n\n一些团队会强烈希望行长度比79个字符更长。当代码仅仅只由一个团队维护时，可以达成一致让行长度增加到80到100字符(实际上最大行长是99字符)，注释和文档字符串仍然是以72字符换行。\n\nPython标准库比较传统，将行长限制在79个字符以内（文档字符串/注释为72个字符）。\n\n一种推荐的换行方式是利用Python圆括号、方括号和花括号中的隐式续行。长行可以通过在括号内换行来分成多行。应该最好加上反斜杠来区别续行。\n\n隐式续行\n\n    a = ('sdfaf' \n        'test')\n\n有时续行只能使用反斜杠。例如，较长的多个with语句不能采用隐式续行，只能接受反斜杠表示换行：\n\n    with open('/path/to/some/file/you/want/to/read') as file_1, \\\n         open('/path/to/some/file/being/written', 'w') as file_2:\n        file_2.write(file_1.read())\n        \n### 2.3 二元运算符之前还是之后换行？(Should a line break before or after a binary operator?)\n\n长期以来一直推荐的风格是在二元运算符之后换行。但是这样会影响代码可读性，包括两个方面：一是运算符会分散在屏幕上的不同列上，二是每个运算符会留在前一行并远离操作数。所以，阅读代码的时候眼睛必须做更多的工作来确定哪些操作数被加，哪些操作数被减：\n\n    # 错误的例子：运算符远离操作数\n    income = (gross_wages +\n              taxable_interest +\n              (dividends - qualified_dividends) -\n              ira_deduction -\n              student_loan_interest)\n        \n为了解决这个可读性问题，数学家及其出版商遵循相反的规定。Donald Knuth在他的“电脑和排版”系列中解释了传统的规则：“尽管在段落中的公式总是在二元运算符之后换行，但显示公式时总是在二元运算符之前换行”。\n        \n    # 正确的例子：更容易匹配运算符与操作数\n    income = (gross_wages\n              + taxable_interest\n              + (dividends - qualified_dividends)\n              - ira_deduction\n              - student_loan_interest)\n              \n在Python代码中，只要在统一项目中约定一致，就可以在二元运算符之前或之后换行。对于新编写的代码，建议使用Knuth的风格。\n        \n### 2.4 空行(Blank Line)\n\n使用2个空行来分隔最外层的函数(function)和类(class)定义。\n\n使用1个空行来分隔类中的方法(method)定义。\n\n可以使用额外的空行（尽量少）来分隔一组相关的函数。在一系列相关的仅占一行的函数之间，空行也可以被省略（比如一组虚函数定义）。\n\n在函数内使用空行（尽量少）使代码逻辑更清晰。\n\n例子：\n\n    def func():\n        \n        \n        class A(object):\n            pass\n        \n        def func1():\n            a = A()\n            \n        def func2():\n            print('aaa')\n            print('bbb')\n\nPython支持control-L（如:^L）换页符作为空格；许多工具将这些符号作为分页符，因此你可以使用这些符号来分页或者区分文件中的相关区域。注意，一些编辑器和基于web的代码预览器可能不会将control-L识别为分页符，而是显示成其他符号。\n\n### 2.5 源文件编码(Source File Encoding)\n\nPython核心发行版中的代码应该一直使用UTF-8（Python 2中使用ASCII）。\n\n使用ASCII（Python 2）或者UTF-8（Python 3）的文件不应该添加编码声明。\n\n在标准库中，只有用作测试目的，或者注释或文档字符串需要提及作者名字而不得不使用非ASCII字符时，才能使用非默认的编码。否则，在字符串文字中包括非ASCII数据时，推荐使用\\x, \\u, \\U或\\N等转义符。\n\n对于Python 3.0及其以后的版本中，标准库遵循以下原则（参见PEP 3131）：Python标准库中的所有标识符都必须只采用ASCII编码的标识符，在可行的条件下也应当使用英文词（很多情况下，使用的缩写和技术术语词都不是英文）。此外，字符串文字和注释应该只包括ASCII编码。只有两种例外：\n\n(a) 测试情况下为了测试非ASCII编码的特性\n\n(b) 作者名字。作者名字不是由拉丁字母组成的也必须提供一个拉丁音译名。\n\n鼓励具有全球受众的开放源码项目采用类似的原则。\n\n### 2.6 模块引用(Imports)\n\nImports应该分行写，而不是都写在一行，例如：\n\n    # 分开写\n    import os\n    import sys\n    \n    # 不要像下面一样写在一行\n    import sys, os\n    \n这样写也是可以的：\n\n    from subprocess import Popen, PIPE\n    \nImports应该写在代码文件的开头，位于模块(module)注释和文档字符串(docstring)之后，模块全局变量(globals)和常量(constants)声明之前。\n    \nImports应该按照下面的顺序分组来写：\n\n1. 标准库imports\n2. 相关第三方imports\n3. 本地应用/库的特定imports\n\n如：\n\n    import re\n    from lxml import etree\n    from ak_spider.common.mongo_models import *\n    from ak_spider.settings import CAPTCHA_SERVER, AK_PROXY_SERVER, logger\n\n不同组的imports之前用空格隔开。\n\n推荐使用绝对(absolute)imports，因为这样通常更易读，在import系统没有正确配置（比如中的路径以sys.path结束）的情况下，也会有更好的表现（或者至少会给出错误信息）：\n    \n    import mypkg.sibling\n    from mypkg import sibling\n    from mypkg.sibling import example\n    \n然而，除了绝对imports，显式的相对imports也是一种可以接受的替代方式。特别是当处理复杂的包布局(package layouts)时，采用绝对imports会显得啰嗦。\n    \n    from . import sibling\n    from .sibling import example\n    \n标准库代码应当一直使用绝对imports，避免复杂的包布局。\n\n隐式的相对imports应该永不使用，并且Python 3中已经被去掉了\n\n当从一个包括类的模块中import一个类时，通常可以这样写：\n\n    from myclass import MyClass\n    from foo.bar.yourclass import YourClass\n    \n如果和本地命名的拼写产生了冲突，应当直接import模块：\n\n    import myclass\n    import foo.bar.yourclass\n    \n然后使用”myclass.MyClass”和”foo.bar.yourclass.YourClass”。\n\n避免使用通配符imports(from <module> import *)，因为会造成在当前命名空间出现的命名含义不清晰，给读者和许多自动化工具造成困扰。有一个可以正当使用通配符import的情形，即将一个内部接口重新发布成公共API的一部分（比如，使用备选的加速模块中的定义去覆盖纯Python实现的接口，预先无法知晓具体哪些定义将被覆盖）。\n\n当使用这种方式重新发布命名时，指南后面关于公共和内部接口的部分仍然适用。\n\n### 2.7 模块级的双下划线命名(Module level dunder names)\n\n模块中的“双下滑线”（变量名以两个下划线开头，两个下划线结尾）变量，比如__all__，__author，__version__等，应该写在文档字符串(docstring)之后，除了form __future__引用(imports)的任何其它类型的引用语句之前。Python要求模块中__future__的导入必须出现在除文档字符串(docstring)之外的任何其他代码之前。\n    \n例如：\n\n    \"\"\"This is the example module.\n    \n    This module does stuff.\n    \"\"\"\n    \n    from __future__ import barry_as_FLUFL\n    \n    __all__ = ['a', 'b', 'c']\n    __version__ = '0.1'\n    __author__ = 'Cardinal Biggles'\n    \n    import os\n    import sys\n    \n##  3 字符串引用(String Quotes)\n\n在Python中表示字符串时，不管用单引号还是双引号都是一样的。但是不推荐将这两种方式看作一样并且混用。最好选择一种规则并坚持使用。当字符串中包含单引号时，采用双引号来表示字符串，反之也是一样，这样可以避免使用反斜杠，代码也更易读。\n\n对于三引号表示的字符串，使用双引号字符来表示(即用\"\"\"而不是''')。\n    \n## 4 表达式和语句中的空格(Whitespace In Expressions And Statements)\n\n    \n### 4.1 一些痛点(Pet Peeves)\n\n在下列情形中避免使用过多的空白：\n    \n方括号，圆括号和花括号之后：\n\n    #正确的例子:\n    spam(ham[1], {eggs: 2})\n    \n    #错误的例子：\n    spam( ham[ 1 ], { eggs: 2 } )\n    \n逗号，分号或冒号之前：\n\n    #正确的例子:\n    if x == 4: print x, y; x, y = y, x\n    \n    #错误的例子:\n    if x == 4 : print x , y ; x , y = y , x\n    \n不过，在切片操作时，冒号和二元运算符是一样的，应该在其左右两边保留相同数量的空格（就像对待优先级最低的运算符一样）。在扩展切片操作中，所有冒号的左右两边空格数都应该相等。不过也有例外，当切片操作中的参数被省略时，应该也忽略空格。\n\n    #正确的例子:\n    ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\n    ham[lower:upper], ham[lower:upper:], ham[lower::step]\n    ham[lower+offset : upper+offset]\n    ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\n    ham[lower + offset : upper + offset]\n    \n    #错误的例子:\n    ham[lower + offset:upper + offset]\n    ham[1: 9], ham[1 :9], ham[1:9 :3]\n    ham[lower : : upper]\n    ham[ : upper]\n    \n在调用函数时传递参数list的括号之前：\n\n    #正确的例子:\n    spam(1)\n    \n    #错误的例子:\n    pam (1)\n\n在索引和切片操作的左括号之前：\n\n    #正确的例子:\n    dct['key'] = lst[index]\n    \n    #错误的例子:\n    dct ['key'] = lst [index]\n    \n赋值(或其他)运算符周围使用多个空格来和其他语句对齐：\n\n    #正确的例子:\n    x = 1\n    y = 2\n    long_variable = 3\n    \n    #错误的例子:\n    x             = 1\n    y             = 2\n    long_variable = 3\n    \n### 4.2 其他建议(Other Recommendations)\n\n避免任何行末的空格。因为它通常是不可见的，它可能会令人困惑：例如反斜杠后跟空格和换行符不会作为续行标记。一些编辑器会自动去除行末空格，许多项目（如CPython本身）都有提交前的预处理钩子来自动去除行末空格。\n\n在二元运算符的两边都使用一个空格：赋值运算符(=)，增量赋值运算符(+=, -= etc.)，比较运算符(==, <, >, !=, <>, <=, >=, in, not in, is, is not)，布尔运算符(and, or, not)。\n    \n如果使用了优先级不同的运算符，则在优先级较低的操作符周围增加空白。请你自行判断，不过永远不要用超过1个空格，永远保持二元运算符两侧的空白数量一样。\n    \n    #正确的例子:\n    i = i + 1\n    submitted += 1\n    x = x*2 - 1\n    hypot2 = x*x + y*y\n    c = (a+b) * (a-b)\n    \n    #错误的例子:\n    i=i+1\n    submitted +=1\n    x = x * 2 - 1\n    hypot2 = x * x + y * y\n    c = (a + b) * (a - b)    \n\n使用=符号来表示关键字参数或参数默认值时，不要在其周围使用空格。\n\n    #正确的例子:\n    def complex(real, imag=0.0):\n    return magic(r=real, i=imag)\n    \n    #错误的例子:\n    def complex(real, imag = 0.0):\n    return magic(r = real, i = imag)\n\n函数注解中的:也遵循一般的:加空格的规则，在->两侧各使用一个空格。\n\n    #正确的例子:\n    def munge(input: AnyStr): ...\n    def munge() -> AnyStr: ...\n    \n    #错误的例子:\n    def munge(input:AnyStr): ...\n    def munge()->PosInt: ...\n    \n在组合使用函数注解和参数默认值时，需要在=两侧各使用一个空格（只有当这个参数既有函数注解，又有默认值的时候）。\n\n    #正确的例子:\n    def munge(sep: AnyStr = None): ...\n    def munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...\n    \n    #错误的例子:\n    def munge(input: AnyStr=None): ...\n    def munge(input: AnyStr, limit = 1000): ...\n    \n复合语句（即将多行语句写在一行）一般是不鼓励使用的。\n\n    #正确的例子:\n    if foo == 'blah':\n    do_blah_thing()\n    do_one()\n    do_two()\n    do_three()\n    \n    #最好不要这样:\n    if foo == 'blah': do_blah_thing()\n    do_one(); do_two(); do_three()\n    \n有时也可以将短小的if/for/while中的语句写在一行，但对于有多个分句的语句永远不要这样做。也要避免将多行都写在一起。\n    \n    #最好不要这样：\n    if foo == 'blah': do_blah_thing()\n    for x in lst: total += x\n    while t < 10: t = delay()\n    \n    #绝对不要这样：\n    if foo == 'blah': do_blah_thing()\n    else: do_non_blah_thing()\n    \n    try: something()\n    finally: cleanup()\n    \n    do_one(); do_two(); do_three(long, argument,\n    list, like, this)\n    \n    if foo == 'blah': one(); two(); three()\n    \n## 5 何时在末尾加逗号(When to use trailing commas)\n    \n末尾逗号通常是可选的，除非在定义单元素元组(tuple)时是必需的（而且在Python 2中，它们具有print语句的语义）。为了清楚起见，建议使用括号（技术上来说是冗余的）括起来。\n    \n    #正确的例子:\n    FILES = ('setup.cfg',)\n    \n    #也正确，但令人困惑:\n    FILES = 'setup.cfg',\n    \n当使用版本控制系统时，在将来有可能扩展的列表末尾添加冗余的逗号是有好处的。具体的做法是将每一个元素写在单独的一行，并在行尾添加逗号，右括号单独占一行。但是，与有括号在同一行的末尾元素后面加逗号是没有意义的（上述的单元素元组除外）。\n\n    #正确的例子:\n    FILES = [\n        'setup.cfg',\n        'tox.ini',\n        ]\n    initialize(FILES,\n               error=True,\n               )\n    \n    #错误的例子:\n    FILES = ['setup.cfg', 'tox.ini',]\n    initialize(FILES, error=True,)\n    \n## 6 注释(Comments)\n\n和代码矛盾的注释还不如没有。当代码有改动时，一定要优先更改注释使其保持最新。\n\n注释应该是完整的多个句子。如果注释是一个短语或一个句子，其首字母应该大写，除非开头是一个以小写字母开头的标识符（永远不要更改标识符的大小写）。\n\n如果注释很短，结束的句号可以被忽略。块注释通常由一段或几段完整的句子组成，每个句子都应该以句号结束。\n\n你应该在句尾的句号后再加上2个空格。\n\n使用英文写作，参考Strunk和White的《The Elements of Style》\n\n来自非英语国家的Python程序员们，请使用英文来写注释，除非你120%确定你的代码永远不会被不懂你所用语言的人阅读到。\n\n### 6.1 块注释（Block Comments）\n\n块注释一般写在对应代码之前，并且和对应代码有同样的缩进级别。块注释的每一行都应该以#和一个空格开头（除非该文本是在注释内缩进对齐的）。\n\n块注释中的段落应该用只含有单个#的一行隔开。\n\n### 6.2 行内注释（Inline Comments）\n\n尽量少用行内注释。\n\n行内注释是和代码语句写在一行内的注释。行内注释应该至少和代码语句之间有两个空格的间隔，并且以#和一个空格开始。\n\n行内注释通常不是必要的，在代码含义很明显时甚至会让人分心。请不要这样做：\n\n    x = x + 1                 # x自加\n\n但这样做是有用的：\n\n    x = x + 1                 # 边界补偿\n\n### 6.3 文档字符串(Documentation Strings)\n\n要知道如何写出好的文档字符串（docstring），请参考PEP 257\n\n所有的公共模块，函数，类和方法都应该有文档字符串。对于非公共方法，文档字符串不是必要的，但你应该留有注释说明该方法的功能，该注释应当出现在def的下一行。\n\nPEP 257描述了好的文档字符应该遵循的规则。其中最重要的是，多行文档字符串以单行\"\"\"结尾，不能有其他字符，例如：\n\n    \"\"\"Return a foobang\n    \n    Optional plotz says to frobnicate the bizbaz first.\n    \"\"\"\n\n对于仅有一行的文档字符串，结尾处的\"\"\"应该也写在这一行。\n\n## 7 命名约定（Naming Conventions）\n\nPython标准库的命名约定有一些混乱，因此我们永远都无法保持一致。但如今仍然存在一些推荐的命名标准。新的模块和包（包括第三方框架）应该采用这些标准，但若是已经存在的包有另一套风格的话，还是应当与原有的风格保持内部一致。\n\n### 7.1 首要原则（Overriding Principle）\n\n对于用户可见的公共部分API，其命名应当表达出功能用途而不是其具体的实现细节。\n\n### 7.2 描述：命名风格（Descriptive: Naming Styles）\n\n存在很多不同的命名风格，最好能够独立地从命名对象的用途认出采用了哪种命名风格。\n\n通常区分以下命名样式：\n\n- b (单个小写字母)\n- B (单个大写字母)\n- lowercase(小写)\n- lower_case_with_underscores(带下划线小写)\n- UPPERCASE(大写)\n- UPPER_CASE_WITH_UNDERSCORES(带下划线大写)\n- CapitalizedWords (也叫做CapWords或者CamelCase – 因为单词首字母大写看起来很像驼峰)。也被称作StudlyCaps。注意：当CapWords里包含缩写时，将缩写部分的字母都大写。HTTPServerError比HttpServerError要好。\n- mixedCase (注意：和CapitalizedWords不同在于其首字母小写！)\n- Capitalized_Words_With_Underscores (这种风格超丑！)\n\n也有风格使用简短唯一的前缀来表示一组相关的命名。这在Python中并不常见，但为了完整起见这里也捎带提一下。比如，os.stat()函数返回一个tuple，其中的元素名原本为st_mode,st-size,st_mtime等等。（这样做是为了强调和POSIX系统调用结构之间的关系，可以让程序员更熟悉。）\n\nX11库中的公共函数名都以X开头。在Python中这样的风格一般被认为是不必要的，因为属性和方法名之前已经有了对象名的前缀，而函数名前也有了模块名的前缀。\n\n此外，要区别以下划线开始或结尾的特殊形式（可以和其它的规则结合起来）：\n\n_single_leading_underscore: 以单个下划线开头是”内部使用”的弱标志。 比如， from M import *不会import下划线开头的对象。\n\nsingle_trailing_underscore_: 以单个下划线结尾用来避免和Python关键词产生冲突，例如:\n            \n        Tkinter.Toplevel(master, class_='ClassName')\n\n__double_leading_underscore: 以双下划线开头的风格命名类属性表示触发命名修饰（在FooBar类中，__boo命名会被修饰成_FooBar__boo;）。\n\n### 7.3 规范：命名约定(Prescriptive: Naming Conventions)\n\n#### 7.3.1 需要避免的命名(Names To Avoid)\n\n不要使用字符’l’（L的小写的字母），’O’（o大写的字母），或者’I’（i的大写的字母）来作为单个字符的变量名。\n\n在一些字体中，这些字符和数字1和0无法区别开来。比如，当想使用’l’时，使用’L’代替。\n\n#### 7.3.2 ASCII兼容性(ASCII Compatibility)\n\n标准库中使用的标识符必须与ASCII兼容(参见PEP 3131中的[policy](https://www.python.org/dev/peps/pep-3131/#policy-specification)这一节) 。\n\n#### 7.3.3 包和模块命名(Package And Module Names)\n\n模块命名应短小，且为全小写。若下划线能提高可读性，也可以在模块名中使用。Python包命名也应该短小，且为全小写，但不应使用下划线。\n\n当使用C或C++写的扩展模块有相应的Python模块提供更高级的接口时（比如，更加面向对象），C/C++模块名以下划线开头（例如，_sociket）\n\n#### 7.3.4 类命名(Class Names)\n\n类命名应该使用驼峰（CapWords）的命名约定。\n\n当接口已有文档说明且主要是被用作调用时，也可以使用函数的命名约定。\n\n注意对于内建命名(builtin names)有一个特殊的约定：大部分内建名都是一个单词（或者两个一起使用的单词），驼峰(CapWords)的约定只对异常命名和内建常量使用。\n\n#### 7.3.5 类型变量命名(Type variable names)\n\nPEP 484中引入的类型变量名称通常应使用简短的驼峰命名: T，AnyStr，Num。 建议将后缀_co或_contra添加到用于声明相应的协变(covariant)和逆变(contravariant)的行为。例如：\n\n    from typing import TypeVar\n    \n    VT_co = TypeVar('VT_co', covariant=True)\n    KT_contra = TypeVar('KT_contra', contravariant=True)\n\n#### 7.3.6 异常命名(Exception Names)\n\n由于异常实际上也是类，因此类命名约定也适用与异常。不同的是，如果异常实际上是抛出错误的话，异常名前应该加上”Error”的前缀。\n\n#### 7.3.7 全局变量命名(Global Variable Names)\n\n（在此之前，我们先假定这些变量都仅在同一个模块内使用。）这些约定同样也适用于函数命名。\n\n对于引用方式设计为from M import *的模块，应该使用__all__机制来避免import全局变量，或者采用下划线前缀的旧约定来命名全局变量，从而表明这些变量是“模块非公开的”。\n\n#### 7.3.8 函数命名(Function Names)\n\n函数命名应该都是小写，必要时使用下划线来提高可读性。\n\n只有当已有代码风格已经是混合大小写时（比如threading.py），为了保留向后兼容性才使用混合大小写。\n\n#### 7.3.9 函数和方法参数(Function And Method Arguments)\n\n实例方法的第一参数永远都是self。\n\n类方法的第一个参数永远都是cls。\n\n在函数参数名和保留关键字冲突时，相对于使用缩写或拼写简化，使用以下划线结尾的命名一般更好。比如，class_比clss更好。（或许使用同义词避免这样的冲突是更好的方式。）\n\n#### 7.3.10 方法命名和实例变量(Method Names And Instance Variables)\n\n使用函数命名的规则：小写单词，必要时使用下划线分开以提高可读性。\n\n仅对于非公开方法和变量命名在开头使用一个下划线。\n\n避免和子类的命名冲突，使用两个下划线开头来触发Python的命名修饰机制。\n\nPython类名的命名修饰规则：如果类Foo有一个属性叫__a，不能使用Foo.__a的方式访问该变量。（有用户可能仍然坚持使用Foo._Foo__a的方法访问。）一般来说，两个下划线开头的命名方法仅用于避免与设计为子类的类中的属性名冲突。\n\n#### 7.3.11 常量(Constants)\n\n常量通常是在模块级别定义的，使用全部大写并用下划线将单词分开。如：MAX_OVERFLOW和TOTAL 。\n\n#### 7.3.12 继承的设计(Designing For Inheritance)\n\n记得永远区别类的方法和实例变量（属性）应该是公开的还是非公开的。如果有疑虑的话，请选择非公开的；因为之后将非公开属性变为公开属性要容易些。\n\n公开属性是那些你希望和你定义的类无关的客户来使用的，并且确保不会出现向后不兼容的问题。非公开属性是那些不希望被第三方使用的部分，你可以不用保证非公开属性不会变化或被移除。\n\n我们在这里没有使用“私有（private）”这个词，因为在Python里没有什么属性是真正私有的（这样设计省略了大量不必要的工作）。\n\n另一类属性属于子类API的一部分（在其他语言中经常被称为”protected”）。一些类是为继承设计的，要么扩展要么修改类的部分行为。当设计这样的类时，需要谨慎明确地决定哪些属性是公开的，哪些属于子类API，哪些真的只会被你的基类调用。\n\n请记住以上几点，下面是Python风格的指南：\n\n- 公开属性不应该有开头下划线。\n- 如果公开属性的名字和保留关键字有冲突，在你的属性名尾部加上一个下划线。这比采用缩写和简写更好。（然而，和这条规则冲突的是，‘cls’对任何变量和参数来说都是一个更好地拼写，因为大家都知道这表示class，特别是在类方法的第一个参数里。）\n- 对于简单的公共数据属性，最后仅公开属性名字，不要公开复杂的调用或设值方法。请记住，如果你发现一个简单的数据属性需要增加功能行为时，Python为功能增强提供了一个简单的途径。这种情况下，使用Properties注解将功能实现隐藏在简单数据属性访问语法之后。注意 1：Properties注解仅仅对新风格类有用。\n注意 2：尽量保证功能行为没有副作用，尽管缓存这种副作用看上去并没有什么大问题。\n注意 3: 对计算量大的运算避免试用properties；属性的注解会让调用者相信访问的运算量是相对较小的。\n- 如果你的类将被子类继承的话，你有一些属性并不想让子类访问，考虑将他们命名为两个下划线开头并且结尾处没有下划线。这样会触发Python命名修饰算法，类名会被修饰添加到属性名中。这样可以避免属性命名冲突，以免子类会不经意间包含相同的命名。注意 1：注意命名修饰仅仅是简单地将类名加入到修饰名中，所以如果子类有相同的类名合属性名，你可能仍然会遇到命名冲突问题。\n注意 2：命名修饰可以有特定用途，比如在调试时，\\_\\_getattr\\_\\_()比较不方便。然而命名修饰算法的可以很好地记录，并且容意手动执行。\n注意 3：不是所有人都喜欢命名修饰。需要试着去平衡避免偶然命名冲突的需求和高级调用者使用的潜在可能性。\n\n### 7.4 公开和内部接口(Public And Internal Interfaces)\n\n任何向后兼容性保证仅对公开接口适用。相应地，用户能够清楚分辨公开接口和内部接口是很重要的。\n\n文档化的接口被认为是公开的，除非文档中明确申明了它们是临时的或者内部接口，不保证向后兼容性。所有文档中未提到的接口应该被认为是内部的。\n\n为了更好审视公开接口和内部接口，模块应该在__all属性中明确申明公开API是哪些。将__all__设为空list表示该模块中没有公开API。\n\n即使正确设置了__all属性，内部接口（包，模块，类，函数，属性或其他命名）也应该以一个下划线开头。\n\n如果接口的任一一个命名空间（包，模块或类）是内部的，那么该接口也应该是内部的\n\n引用的命名应该永远被认为是实现细节。其他模块不应当依赖这些非直接访问的引用命名，除非它们在文档中明确地被写为模块的API，例如os.path或者包的__init__模块，那些从子模块展现的功能。\n\n## 8 编程建议(Programming Recommendations)\n\n1 代码应该以不影响其他Python实现（PyPy，Jython，IronPython，Cython，Psyco等）的方式编写。\n\n例如，不要依赖于 CPython 在字符串拼接时的优化实现，像这种语句形式a += b和a = a + b。即使是 CPython（仅对某些类型起作用） 这种优化也是脆弱的，不是在所有的实现中都不使用引用计数。在库中性能敏感的部分，用''.join形式来代替。这会确保在所有不同的实现中字符串拼接是线性时间的。\n\n2 与单例作比较，像None应该用is或is not，从不使用==操作符。\n\n同样的，当心if x is not None这样的写法，你是不知真的要判断x不是None。例如，测试一个默认值为None的变量或参数是否设置成了其它值，其它值有可能是某种特殊类型（如容器），这种特殊类型在逻辑运算时其值会被当作Flase来看待。\n\n用is not操作符而不是not ... is。虽然这两个表达式是功能相同的，前一个是更可读的，是首选。\n\n推荐的写法:\n\n    if foo is not None:\n    \n不推荐的写法:\n\n    if not foo is None:\n\n3 用富比较实现排序操作的时候，最好实现所有六个比较操作符（ \\_\\_eq__ 、 \\_\\_ne__ 、 \\_\\_lt__ , \\_\\_le__ , \\_\\_gt__ , \\_\\_ge__），而不是依靠其他代码来进行特定比较。\n\n为了最大限度的减少工作量，functools.total_ordering()装饰器提供了一个工具去生成缺少的比较方法。\n\nPEP 207 说明了 Python 假定的所有反射规则。因此，解释器可能使用y > x替换x < y，使用y >= x替换x <= y，也可能交换x == y和x != y的操作数。sort()和min()操作肯定会使用<操作符，max()函数肯定会使用>操作符。当然，最好是六个操作符都实现，以便在其他情况下不会出现混淆。\n\n4 始终使用def语句来代替直接绑定了一个lambda表达式的赋值语句。\n\n推荐的写法:\n\n    def f(x): return 2*x\n\n不推荐的写法:\n\n    f = lambda x: 2*x\n\n第一个表单意味着生成的函数对象的名称是'f'而不是通用的'<lambda>'。通常这对异常追踪和字符串表述是更有用的。使用赋值语句消除了使用lambda表达式可以提供，而一个显式的def语句不能提供的唯一好处，如，lambda能镶嵌在一个很长的表达式里。\n\n5 异常类应派生自Exception而不是BaseException。直接继承BaseException是为Exception保留的，从BaseException继承并捕获异常这种做法几乎总是错的。\n\n设计异常的层次结构，应基于那些可能出现异常的代码，而不是引发异常的位置。编码的时候，以回答“出了什么问题？”为目标，而不是仅仅指出“这里出现了问题”（见 PEP 3151 一个内建异常结构层次的例子）。\n\n类的命名约定适用于异常，如果异常类是一个错误，你应该给异常类加一个后缀Error。用于非本地流程控制或者其他形式的信号的非错误异常不需要一个特殊的后缀。\n\n6 适当的使用异常链。在 Python 3 里，应该使用raise X from Y来指示显式替换，而不会丢失原始的追溯。\n\n当有意替换一个内部的异常时（在 Python 2 用raise X，Python 3.3+ 用raise X from None），请确保将相关详细信息转移到新异常中（例如，将KeyError转换为AttributeError时保留属性名称，或将原始异常的文本嵌入到新的异常消息中）。\n\n7 在 Python 2 里抛出异常时，用raise ValueError('message')代替旧式的raise ValueError, 'message'。\n\n在 Python 3 之后的语法里，旧式的异常抛出方式是非法的。\n\n使用括号形式的异常意味着，当你传给异常的参数过长或者包含字符串格式化时，你就不需要使用续行符了，这要感谢括号！\n\n8 捕获异常时，尽可能使用明确的异常，而不是用一个空的except:语句。\n\n例如，用：\n\n    try:\n        import platform_specific_module\n    except ImportError:\n        platform_specific_module = None\n\n一个空的except:语句将会捕获到SystemExit和KeyboardInterrupt异常，很难区分程序的中断到底是Ctrl+C还是其他问题引起的。如果你想捕获程序的所有错误，使用except Exception:(空except:等同于except BaseException)。\n\n一个好的经验是限制使用空except语句，除了这两种情况：\n\n- 如果异常处理程序会打印出或者记录回溯信息；至少用户意识到错误的存在。\n- 如果代码需要做一些清理工作，但后面用raise向上抛出异常。try .. finally是处理这种情况更好的方式。\n\n9 绑定异常给一个名字时，最好使用 Python 2.6 里添加的明确的名字绑定语法：\n\n    try:\n        process_data()\n    except Exception as exc:\n        raise DataProcessingFailedError(str(exc))\n\nPython 3 只支持这种语法，避免与基于逗号的旧式语法产生二义性。\n\n10 捕获操作系统错误时，最好使用 Python 3.3 里引进的明确的异常结构层次，而不是内省的errno值。\n\n11 另外，对于所有try / except子句，将try子句限制为必需的绝对最小代码量。同样，这样可以避免屏蔽错误。\n\n推荐的写法：\n\n    try:\n        value = collection[key]\n    except KeyError:\n        return key_not_found(key)\n    else:\n        return handle_value(value)\n        \n不推荐的写法：\n\n    try:\n        # Too broad!\n        return handle_value(collection[key])\n    except KeyError:\n        # Will also catch KeyError raised by handle_value()\n        return key_not_found(key)\n\n12 当某个资源仅被特定代码段使用，用with语句确保其在使用后被立即干净的清除了，try/finally也是也接受的。\n\n13 当它们做一些除了获取和释放资源之外的事的时候，上下文管理器应该通过单独的函数或方法调用。例如：\n\n推荐的写法:\n\n    with conn.begin_transaction():\n        do_stuff_in_transaction(conn)\n\n不推荐的写法：\n\n    with conn:\n        do_stuff_in_transaction(conn)\n\n第二个例子没有提供任何信息来表明__enter__和__exit__方法在完成一个事务后做了一些除了关闭连接以外的其它事。在这种情况下明确是很重要的。\n\n14 坚持使用return语句。函数内的return语句都应该返回一个表达式，或者None。如果一个return语句返回一个表达式，另一个没有返回值的应该用return None清晰的说明，并且在一个函数的结尾应该明确使用一个return语句（如果有返回值的话）。\n\n推荐的写法：\n\n    def foo(x):\n        if x >= 0:\n            return math.sqrt(x)\n        else:\n            return None\n    \n    def bar(x):\n        if x < 0:\n            return None\n        return math.sqrt(x)\n        \n不推荐的写法：\n\n    def foo(x):\n        if x >= 0:\n            return math.sqrt(x)\n    \n    def bar(x):\n        if x < 0:\n            return\n        return math.sqrt(x)\n\n15 用字符串方法代替字符串模块。\n\n字符串方法总是快得多，并且与unicode字符串共享相同的API。如果需要与2.0以下的Python的向后兼容，则覆盖此规则。\n\n16 用''.startswith()和''.endswith()代替字符串切片来检查前缀和后缀。\n\nstartswith()和endswith()是更简洁的，不容易出错的。例如：\n\n    #推荐的写法：\n    if foo.startswith('bar'):\n    \n    #不推荐的写法：\n    if foo[:3] == 'bar':\n\n17 对象类型的比较应该始终使用isinstance()而不是直接比较。\n\n    #推荐的写法：\n    if isinstance(obj, int):\n    \n    #不推荐的写法：\n    if type(obj) is type(1):\n\n当比较一个对象是不是字符串时，记住它有可能也是一个 unicode 字符串！在 Python 2 里面，str和unicode有一个公共的基类叫basestring，因此你可以这样做：\n\n    if isinstance(obj, basestring):\n\n注意，在 Python 3 里面，unicode和basestring已经不存在了（只有str），byte对象不再是字符串的一种（被一个整数序列替代）。\n\n18 对于序列（字符串、列表、元组）来说，空的序列为False：\n\n正确的写法：\n\n    if not seq:\n    if seq:\n\n错误的写法：\n\n    if len(seq):\n    if not len(seq):\n    \n19 不要让字符串对尾随的空格有依赖。这样的尾随空格是视觉上无法区分的，一些编辑器（或者，reindent.py）会将其裁剪掉。\n\n20 不要用==比较True和False。\n\n    #推荐的写法：\n    if greeting:\n    \n    #不推荐的写法：\n    if greeting == True:\n    \n    #更加不推荐的写法：\n    if greeting is True:\n    ","slug":"pep8","published":1,"updated":"2022-02-25T08:37:09.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl07s78630051hvx3cxtodi20","content":"<h2 id=\"1-介绍-Introduction\"><a href=\"#1-介绍-Introduction\" class=\"headerlink\" title=\"1 介绍(Introduction)\"></a>1 介绍(Introduction)</h2><p>本文档给出了包含主要Python发行版中的标准库的Python代码的编码约定。<br>随着时间的推移，随着更多的约定被识别，过去的约定被语言本身的变化所淘汰，这种风格指南也在不断发展。</p>\n<a id=\"more\"></a>\n<h2 id=\"2-代码布局-Code-Lay-Out\"><a href=\"#2-代码布局-Code-Lay-Out\" class=\"headerlink\" title=\"2 代码布局(Code Lay-Out)\"></a>2 代码布局(Code Lay-Out)</h2><h3 id=\"2-1-缩进-Indentation\"><a href=\"#2-1-缩进-Indentation\" class=\"headerlink\" title=\"2.1 缩进(Indentation)\"></a>2.1 缩进(Indentation)</h3><p>每个缩进需要使用4个空格。</p>\n<p>连续行所包装的元素应该要么采用Python隐式续行，即垂直对齐于圆括号、方括号和花括号，要么采用悬挂缩进。采用悬挂缩进时需考虑以下两点：第一行不应该包括参数，并且在续行中需要再缩进一级以便清楚表示。</p>\n<p>正确的写法</p>\n<pre><code># 同开始分界符(左括号)对齐\nfoo = long_function_name(var_one, var_two,\n                         var_three, var_four)\n\n# 续行多缩进一级以同其他代码区别\ndef long_function_name(\n        var_one, var_two, var_three,\n        var_four):\n    print(var_one)\n\n# 悬挂缩进需要多缩进一级\nfoo = long_function_name(\n    var_one, var_two,\n    var_three, var_four)</code></pre><p>错误的写法</p>\n<pre><code># 采用悬挂缩进时第一行不应该有参数\nfoo = long_function_name(var_one, var_two,\n    var_three, var_four)\n\n# 续行并没有被区分开，因此需要再缩进一级\ndef long_function_name(\n    var_one, var_two, var_three,\n    var_four):\n    print(var_one)</code></pre><p>对于延续行，4个空格的规则是可选使用的。</p>\n<p>同样可行的例子:</p>\n<pre><code># 悬挂缩进可以不采用4空格的缩进方法。\nfoo = long_function_name(\n  var_one, var_two,\n  var_three, var_four)</code></pre><p>如果if语句太长，需要用多行书写，2个字符(例如,if)加上一个空格和一个左括号刚好是4空格的缩进，但这对多行条件语句的续行是没用的。因为这会和if语句中嵌套的其他的缩进的语句产生视觉上的冲突。这份PEP中并没有做出明确的说明应该怎样来区分条件语句和if语句中所嵌套的语句。以下几种方法都是可行的，但不仅仅只限于这几种方法：</p>\n<pre><code># 不采用额外缩进\nif (this_is_one_thing and\n    that_is_another_thing):\n    do_something()\n\n# 增加一行注释，在编辑器中显示时能有所区分\n# supporting syntax highlighting.\nif (this_is_one_thing and\n    that_is_another_thing):\n    # Since both conditions are true, we can frobnicate.\n    do_something()\n\n# 在条件语句的续行增加一级缩进\nif (this_is_one_thing\n        and that_is_another_thing):\n    do_something()</code></pre><p>多行结束右圆/方/花括号可以单独一行书写，和上一行的缩进对齐：</p>\n<pre><code>my_list = [\n    1, 2, 3,\n    4, 5, 6,\n    ]\nresult = some_function_that_takes_arguments(\n    &apos;a&apos;, &apos;b&apos;, &apos;c&apos;,\n    &apos;d&apos;, &apos;e&apos;, &apos;f&apos;,\n    )</code></pre><p>也可以和多行开始的第一行的第一个字符对齐：</p>\n<pre><code>my_list = [\n    1, 2, 3,\n    4, 5, 6,\n]\nresult = some_function_that_takes_arguments(\n    &apos;a&apos;, &apos;b&apos;, &apos;c&apos;,\n    &apos;d&apos;, &apos;e&apos;, &apos;f&apos;,\n)</code></pre><p>Tab还是空格？(Tab Or Space?)</p>\n<p>推荐使用空格来进行缩进。</p>\n<p>Tab应该只在现有代码已经使用tab进行缩进的情况下使用，以便和现有代码保持一致。</p>\n<p>Python 3不允许tab和空格混合使用。</p>\n<p>Python 2的代码若有tab和空格混合使用的情况，应该把tab全部转换为只有空格。</p>\n<h3 id=\"2-2-每行最大长度-Maximum-Line-Length\"><a href=\"#2-2-每行最大长度-Maximum-Line-Length\" class=\"headerlink\" title=\"2.2 每行最大长度(Maximum Line Length)\"></a>2.2 每行最大长度(Maximum Line Length)</h3><p>将所有行都限制在79个字符长度以内。</p>\n<p>对于连续大段的文字（比如文档字符串(docstring)或注释），其结构上的限制更少，这些行应该被限制在72个字符长度内。</p>\n<p>限制编辑器的窗口宽度能让好几个文件同时打开在屏幕上显示，在使用代码评审(code review)工具时在两个相邻窗口显示两个版本的代码效果很好。</p>\n<p>很多工具的默认自动换行会破坏代码的结构，使代码更难以理解。在窗口大小设置为80个字符的编辑器中，即使在换行时编辑器可能会在最后一列放置一个记号，为避免自动换行也需要限制每行字符长度。一些基于web的工具可能根本没有自动换行的功能。</p>\n<p>一些团队会强烈希望行长度比79个字符更长。当代码仅仅只由一个团队维护时，可以达成一致让行长度增加到80到100字符(实际上最大行长是99字符)，注释和文档字符串仍然是以72字符换行。</p>\n<p>Python标准库比较传统，将行长限制在79个字符以内（文档字符串/注释为72个字符）。</p>\n<p>一种推荐的换行方式是利用Python圆括号、方括号和花括号中的隐式续行。长行可以通过在括号内换行来分成多行。应该最好加上反斜杠来区别续行。</p>\n<p>隐式续行</p>\n<pre><code>a = (&apos;sdfaf&apos; \n    &apos;test&apos;)</code></pre><p>有时续行只能使用反斜杠。例如，较长的多个with语句不能采用隐式续行，只能接受反斜杠表示换行：</p>\n<pre><code>with open(&apos;/path/to/some/file/you/want/to/read&apos;) as file_1, \\\n     open(&apos;/path/to/some/file/being/written&apos;, &apos;w&apos;) as file_2:\n    file_2.write(file_1.read())</code></pre><h3 id=\"2-3-二元运算符之前还是之后换行？-Should-a-line-break-before-or-after-a-binary-operator\"><a href=\"#2-3-二元运算符之前还是之后换行？-Should-a-line-break-before-or-after-a-binary-operator\" class=\"headerlink\" title=\"2.3 二元运算符之前还是之后换行？(Should a line break before or after a binary operator?)\"></a>2.3 二元运算符之前还是之后换行？(Should a line break before or after a binary operator?)</h3><p>长期以来一直推荐的风格是在二元运算符之后换行。但是这样会影响代码可读性，包括两个方面：一是运算符会分散在屏幕上的不同列上，二是每个运算符会留在前一行并远离操作数。所以，阅读代码的时候眼睛必须做更多的工作来确定哪些操作数被加，哪些操作数被减：</p>\n<pre><code># 错误的例子：运算符远离操作数\nincome = (gross_wages +\n          taxable_interest +\n          (dividends - qualified_dividends) -\n          ira_deduction -\n          student_loan_interest)</code></pre><p>为了解决这个可读性问题，数学家及其出版商遵循相反的规定。Donald Knuth在他的“电脑和排版”系列中解释了传统的规则：“尽管在段落中的公式总是在二元运算符之后换行，但显示公式时总是在二元运算符之前换行”。</p>\n<pre><code># 正确的例子：更容易匹配运算符与操作数\nincome = (gross_wages\n          + taxable_interest\n          + (dividends - qualified_dividends)\n          - ira_deduction\n          - student_loan_interest)</code></pre><p>在Python代码中，只要在统一项目中约定一致，就可以在二元运算符之前或之后换行。对于新编写的代码，建议使用Knuth的风格。</p>\n<h3 id=\"2-4-空行-Blank-Line\"><a href=\"#2-4-空行-Blank-Line\" class=\"headerlink\" title=\"2.4 空行(Blank Line)\"></a>2.4 空行(Blank Line)</h3><p>使用2个空行来分隔最外层的函数(function)和类(class)定义。</p>\n<p>使用1个空行来分隔类中的方法(method)定义。</p>\n<p>可以使用额外的空行（尽量少）来分隔一组相关的函数。在一系列相关的仅占一行的函数之间，空行也可以被省略（比如一组虚函数定义）。</p>\n<p>在函数内使用空行（尽量少）使代码逻辑更清晰。</p>\n<p>例子：</p>\n<pre><code>def func():\n\n\n    class A(object):\n        pass\n\n    def func1():\n        a = A()\n\n    def func2():\n        print(&apos;aaa&apos;)\n        print(&apos;bbb&apos;)</code></pre><p>Python支持control-L（如:^L）换页符作为空格；许多工具将这些符号作为分页符，因此你可以使用这些符号来分页或者区分文件中的相关区域。注意，一些编辑器和基于web的代码预览器可能不会将control-L识别为分页符，而是显示成其他符号。</p>\n<h3 id=\"2-5-源文件编码-Source-File-Encoding\"><a href=\"#2-5-源文件编码-Source-File-Encoding\" class=\"headerlink\" title=\"2.5 源文件编码(Source File Encoding)\"></a>2.5 源文件编码(Source File Encoding)</h3><p>Python核心发行版中的代码应该一直使用UTF-8（Python 2中使用ASCII）。</p>\n<p>使用ASCII（Python 2）或者UTF-8（Python 3）的文件不应该添加编码声明。</p>\n<p>在标准库中，只有用作测试目的，或者注释或文档字符串需要提及作者名字而不得不使用非ASCII字符时，才能使用非默认的编码。否则，在字符串文字中包括非ASCII数据时，推荐使用\\x, \\u, \\U或\\N等转义符。</p>\n<p>对于Python 3.0及其以后的版本中，标准库遵循以下原则（参见PEP 3131）：Python标准库中的所有标识符都必须只采用ASCII编码的标识符，在可行的条件下也应当使用英文词（很多情况下，使用的缩写和技术术语词都不是英文）。此外，字符串文字和注释应该只包括ASCII编码。只有两种例外：</p>\n<p>(a) 测试情况下为了测试非ASCII编码的特性</p>\n<p>(b) 作者名字。作者名字不是由拉丁字母组成的也必须提供一个拉丁音译名。</p>\n<p>鼓励具有全球受众的开放源码项目采用类似的原则。</p>\n<h3 id=\"2-6-模块引用-Imports\"><a href=\"#2-6-模块引用-Imports\" class=\"headerlink\" title=\"2.6 模块引用(Imports)\"></a>2.6 模块引用(Imports)</h3><p>Imports应该分行写，而不是都写在一行，例如：</p>\n<pre><code># 分开写\nimport os\nimport sys\n\n# 不要像下面一样写在一行\nimport sys, os</code></pre><p>这样写也是可以的：</p>\n<pre><code>from subprocess import Popen, PIPE</code></pre><p>Imports应该写在代码文件的开头，位于模块(module)注释和文档字符串(docstring)之后，模块全局变量(globals)和常量(constants)声明之前。</p>\n<p>Imports应该按照下面的顺序分组来写：</p>\n<ol>\n<li>标准库imports</li>\n<li>相关第三方imports</li>\n<li>本地应用/库的特定imports</li>\n</ol>\n<p>如：</p>\n<pre><code>import re\nfrom lxml import etree\nfrom ak_spider.common.mongo_models import *\nfrom ak_spider.settings import CAPTCHA_SERVER, AK_PROXY_SERVER, logger</code></pre><p>不同组的imports之前用空格隔开。</p>\n<p>推荐使用绝对(absolute)imports，因为这样通常更易读，在import系统没有正确配置（比如中的路径以sys.path结束）的情况下，也会有更好的表现（或者至少会给出错误信息）：</p>\n<pre><code>import mypkg.sibling\nfrom mypkg import sibling\nfrom mypkg.sibling import example</code></pre><p>然而，除了绝对imports，显式的相对imports也是一种可以接受的替代方式。特别是当处理复杂的包布局(package layouts)时，采用绝对imports会显得啰嗦。</p>\n<pre><code>from . import sibling\nfrom .sibling import example</code></pre><p>标准库代码应当一直使用绝对imports，避免复杂的包布局。</p>\n<p>隐式的相对imports应该永不使用，并且Python 3中已经被去掉了</p>\n<p>当从一个包括类的模块中import一个类时，通常可以这样写：</p>\n<pre><code>from myclass import MyClass\nfrom foo.bar.yourclass import YourClass</code></pre><p>如果和本地命名的拼写产生了冲突，应当直接import模块：</p>\n<pre><code>import myclass\nimport foo.bar.yourclass</code></pre><p>然后使用”myclass.MyClass”和”foo.bar.yourclass.YourClass”。</p>\n<p>避免使用通配符imports(from <module> import *)，因为会造成在当前命名空间出现的命名含义不清晰，给读者和许多自动化工具造成困扰。有一个可以正当使用通配符import的情形，即将一个内部接口重新发布成公共API的一部分（比如，使用备选的加速模块中的定义去覆盖纯Python实现的接口，预先无法知晓具体哪些定义将被覆盖）。</p>\n<p>当使用这种方式重新发布命名时，指南后面关于公共和内部接口的部分仍然适用。</p>\n<h3 id=\"2-7-模块级的双下划线命名-Module-level-dunder-names\"><a href=\"#2-7-模块级的双下划线命名-Module-level-dunder-names\" class=\"headerlink\" title=\"2.7 模块级的双下划线命名(Module level dunder names)\"></a>2.7 模块级的双下划线命名(Module level dunder names)</h3><p>模块中的“双下滑线”（变量名以两个下划线开头，两个下划线结尾）变量，比如<strong>all</strong>，<strong>author，</strong>version__等，应该写在文档字符串(docstring)之后，除了form <strong>future</strong>引用(imports)的任何其它类型的引用语句之前。Python要求模块中<strong>future</strong>的导入必须出现在除文档字符串(docstring)之外的任何其他代码之前。</p>\n<p>例如：</p>\n<pre><code>&quot;&quot;&quot;This is the example module.\n\nThis module does stuff.\n&quot;&quot;&quot;\n\nfrom __future__ import barry_as_FLUFL\n\n__all__ = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]\n__version__ = &apos;0.1&apos;\n__author__ = &apos;Cardinal Biggles&apos;\n\nimport os\nimport sys</code></pre><h2 id=\"3-字符串引用-String-Quotes\"><a href=\"#3-字符串引用-String-Quotes\" class=\"headerlink\" title=\"3 字符串引用(String Quotes)\"></a>3 字符串引用(String Quotes)</h2><p>在Python中表示字符串时，不管用单引号还是双引号都是一样的。但是不推荐将这两种方式看作一样并且混用。最好选择一种规则并坚持使用。当字符串中包含单引号时，采用双引号来表示字符串，反之也是一样，这样可以避免使用反斜杠，代码也更易读。</p>\n<p>对于三引号表示的字符串，使用双引号字符来表示(即用”””而不是’’’)。</p>\n<h2 id=\"4-表达式和语句中的空格-Whitespace-In-Expressions-And-Statements\"><a href=\"#4-表达式和语句中的空格-Whitespace-In-Expressions-And-Statements\" class=\"headerlink\" title=\"4 表达式和语句中的空格(Whitespace In Expressions And Statements)\"></a>4 表达式和语句中的空格(Whitespace In Expressions And Statements)</h2><h3 id=\"4-1-一些痛点-Pet-Peeves\"><a href=\"#4-1-一些痛点-Pet-Peeves\" class=\"headerlink\" title=\"4.1 一些痛点(Pet Peeves)\"></a>4.1 一些痛点(Pet Peeves)</h3><p>在下列情形中避免使用过多的空白：</p>\n<p>方括号，圆括号和花括号之后：</p>\n<pre><code>#正确的例子:\nspam(ham[1], {eggs: 2})\n\n#错误的例子：\nspam( ham[ 1 ], { eggs: 2 } )</code></pre><p>逗号，分号或冒号之前：</p>\n<pre><code>#正确的例子:\nif x == 4: print x, y; x, y = y, x\n\n#错误的例子:\nif x == 4 : print x , y ; x , y = y , x</code></pre><p>不过，在切片操作时，冒号和二元运算符是一样的，应该在其左右两边保留相同数量的空格（就像对待优先级最低的运算符一样）。在扩展切片操作中，所有冒号的左右两边空格数都应该相等。不过也有例外，当切片操作中的参数被省略时，应该也忽略空格。</p>\n<pre><code>#正确的例子:\nham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\nham[lower:upper], ham[lower:upper:], ham[lower::step]\nham[lower+offset : upper+offset]\nham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\nham[lower + offset : upper + offset]\n\n#错误的例子:\nham[lower + offset:upper + offset]\nham[1: 9], ham[1 :9], ham[1:9 :3]\nham[lower : : upper]\nham[ : upper]</code></pre><p>在调用函数时传递参数list的括号之前：</p>\n<pre><code>#正确的例子:\nspam(1)\n\n#错误的例子:\npam (1)</code></pre><p>在索引和切片操作的左括号之前：</p>\n<pre><code>#正确的例子:\ndct[&apos;key&apos;] = lst[index]\n\n#错误的例子:\ndct [&apos;key&apos;] = lst [index]</code></pre><p>赋值(或其他)运算符周围使用多个空格来和其他语句对齐：</p>\n<pre><code>#正确的例子:\nx = 1\ny = 2\nlong_variable = 3\n\n#错误的例子:\nx             = 1\ny             = 2\nlong_variable = 3</code></pre><h3 id=\"4-2-其他建议-Other-Recommendations\"><a href=\"#4-2-其他建议-Other-Recommendations\" class=\"headerlink\" title=\"4.2 其他建议(Other Recommendations)\"></a>4.2 其他建议(Other Recommendations)</h3><p>避免任何行末的空格。因为它通常是不可见的，它可能会令人困惑：例如反斜杠后跟空格和换行符不会作为续行标记。一些编辑器会自动去除行末空格，许多项目（如CPython本身）都有提交前的预处理钩子来自动去除行末空格。</p>\n<p>在二元运算符的两边都使用一个空格：赋值运算符(=)，增量赋值运算符(+=, -= etc.)，比较运算符(==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not)，布尔运算符(and, or, not)。</p>\n<p>如果使用了优先级不同的运算符，则在优先级较低的操作符周围增加空白。请你自行判断，不过永远不要用超过1个空格，永远保持二元运算符两侧的空白数量一样。</p>\n<pre><code>#正确的例子:\ni = i + 1\nsubmitted += 1\nx = x*2 - 1\nhypot2 = x*x + y*y\nc = (a+b) * (a-b)\n\n#错误的例子:\ni=i+1\nsubmitted +=1\nx = x * 2 - 1\nhypot2 = x * x + y * y\nc = (a + b) * (a - b)    </code></pre><p>使用=符号来表示关键字参数或参数默认值时，不要在其周围使用空格。</p>\n<pre><code>#正确的例子:\ndef complex(real, imag=0.0):\nreturn magic(r=real, i=imag)\n\n#错误的例子:\ndef complex(real, imag = 0.0):\nreturn magic(r = real, i = imag)</code></pre><p>函数注解中的:也遵循一般的:加空格的规则，在-&gt;两侧各使用一个空格。</p>\n<pre><code>#正确的例子:\ndef munge(input: AnyStr): ...\ndef munge() -&gt; AnyStr: ...\n\n#错误的例子:\ndef munge(input:AnyStr): ...\ndef munge()-&gt;PosInt: ...</code></pre><p>在组合使用函数注解和参数默认值时，需要在=两侧各使用一个空格（只有当这个参数既有函数注解，又有默认值的时候）。</p>\n<pre><code>#正确的例子:\ndef munge(sep: AnyStr = None): ...\ndef munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...\n\n#错误的例子:\ndef munge(input: AnyStr=None): ...\ndef munge(input: AnyStr, limit = 1000): ...</code></pre><p>复合语句（即将多行语句写在一行）一般是不鼓励使用的。</p>\n<pre><code>#正确的例子:\nif foo == &apos;blah&apos;:\ndo_blah_thing()\ndo_one()\ndo_two()\ndo_three()\n\n#最好不要这样:\nif foo == &apos;blah&apos;: do_blah_thing()\ndo_one(); do_two(); do_three()</code></pre><p>有时也可以将短小的if/for/while中的语句写在一行，但对于有多个分句的语句永远不要这样做。也要避免将多行都写在一起。</p>\n<pre><code>#最好不要这样：\nif foo == &apos;blah&apos;: do_blah_thing()\nfor x in lst: total += x\nwhile t &lt; 10: t = delay()\n\n#绝对不要这样：\nif foo == &apos;blah&apos;: do_blah_thing()\nelse: do_non_blah_thing()\n\ntry: something()\nfinally: cleanup()\n\ndo_one(); do_two(); do_three(long, argument,\nlist, like, this)\n\nif foo == &apos;blah&apos;: one(); two(); three()</code></pre><h2 id=\"5-何时在末尾加逗号-When-to-use-trailing-commas\"><a href=\"#5-何时在末尾加逗号-When-to-use-trailing-commas\" class=\"headerlink\" title=\"5 何时在末尾加逗号(When to use trailing commas)\"></a>5 何时在末尾加逗号(When to use trailing commas)</h2><p>末尾逗号通常是可选的，除非在定义单元素元组(tuple)时是必需的（而且在Python 2中，它们具有print语句的语义）。为了清楚起见，建议使用括号（技术上来说是冗余的）括起来。</p>\n<pre><code>#正确的例子:\nFILES = (&apos;setup.cfg&apos;,)\n\n#也正确，但令人困惑:\nFILES = &apos;setup.cfg&apos;,</code></pre><p>当使用版本控制系统时，在将来有可能扩展的列表末尾添加冗余的逗号是有好处的。具体的做法是将每一个元素写在单独的一行，并在行尾添加逗号，右括号单独占一行。但是，与有括号在同一行的末尾元素后面加逗号是没有意义的（上述的单元素元组除外）。</p>\n<pre><code>#正确的例子:\nFILES = [\n    &apos;setup.cfg&apos;,\n    &apos;tox.ini&apos;,\n    ]\ninitialize(FILES,\n           error=True,\n           )\n\n#错误的例子:\nFILES = [&apos;setup.cfg&apos;, &apos;tox.ini&apos;,]\ninitialize(FILES, error=True,)</code></pre><h2 id=\"6-注释-Comments\"><a href=\"#6-注释-Comments\" class=\"headerlink\" title=\"6 注释(Comments)\"></a>6 注释(Comments)</h2><p>和代码矛盾的注释还不如没有。当代码有改动时，一定要优先更改注释使其保持最新。</p>\n<p>注释应该是完整的多个句子。如果注释是一个短语或一个句子，其首字母应该大写，除非开头是一个以小写字母开头的标识符（永远不要更改标识符的大小写）。</p>\n<p>如果注释很短，结束的句号可以被忽略。块注释通常由一段或几段完整的句子组成，每个句子都应该以句号结束。</p>\n<p>你应该在句尾的句号后再加上2个空格。</p>\n<p>使用英文写作，参考Strunk和White的《The Elements of Style》</p>\n<p>来自非英语国家的Python程序员们，请使用英文来写注释，除非你120%确定你的代码永远不会被不懂你所用语言的人阅读到。</p>\n<h3 id=\"6-1-块注释（Block-Comments）\"><a href=\"#6-1-块注释（Block-Comments）\" class=\"headerlink\" title=\"6.1 块注释（Block Comments）\"></a>6.1 块注释（Block Comments）</h3><p>块注释一般写在对应代码之前，并且和对应代码有同样的缩进级别。块注释的每一行都应该以#和一个空格开头（除非该文本是在注释内缩进对齐的）。</p>\n<p>块注释中的段落应该用只含有单个#的一行隔开。</p>\n<h3 id=\"6-2-行内注释（Inline-Comments）\"><a href=\"#6-2-行内注释（Inline-Comments）\" class=\"headerlink\" title=\"6.2 行内注释（Inline Comments）\"></a>6.2 行内注释（Inline Comments）</h3><p>尽量少用行内注释。</p>\n<p>行内注释是和代码语句写在一行内的注释。行内注释应该至少和代码语句之间有两个空格的间隔，并且以#和一个空格开始。</p>\n<p>行内注释通常不是必要的，在代码含义很明显时甚至会让人分心。请不要这样做：</p>\n<pre><code>x = x + 1                 # x自加</code></pre><p>但这样做是有用的：</p>\n<pre><code>x = x + 1                 # 边界补偿</code></pre><h3 id=\"6-3-文档字符串-Documentation-Strings\"><a href=\"#6-3-文档字符串-Documentation-Strings\" class=\"headerlink\" title=\"6.3 文档字符串(Documentation Strings)\"></a>6.3 文档字符串(Documentation Strings)</h3><p>要知道如何写出好的文档字符串（docstring），请参考PEP 257</p>\n<p>所有的公共模块，函数，类和方法都应该有文档字符串。对于非公共方法，文档字符串不是必要的，但你应该留有注释说明该方法的功能，该注释应当出现在def的下一行。</p>\n<p>PEP 257描述了好的文档字符应该遵循的规则。其中最重要的是，多行文档字符串以单行”””结尾，不能有其他字符，例如：</p>\n<pre><code>&quot;&quot;&quot;Return a foobang\n\nOptional plotz says to frobnicate the bizbaz first.\n&quot;&quot;&quot;</code></pre><p>对于仅有一行的文档字符串，结尾处的”””应该也写在这一行。</p>\n<h2 id=\"7-命名约定（Naming-Conventions）\"><a href=\"#7-命名约定（Naming-Conventions）\" class=\"headerlink\" title=\"7 命名约定（Naming Conventions）\"></a>7 命名约定（Naming Conventions）</h2><p>Python标准库的命名约定有一些混乱，因此我们永远都无法保持一致。但如今仍然存在一些推荐的命名标准。新的模块和包（包括第三方框架）应该采用这些标准，但若是已经存在的包有另一套风格的话，还是应当与原有的风格保持内部一致。</p>\n<h3 id=\"7-1-首要原则（Overriding-Principle）\"><a href=\"#7-1-首要原则（Overriding-Principle）\" class=\"headerlink\" title=\"7.1 首要原则（Overriding Principle）\"></a>7.1 首要原则（Overriding Principle）</h3><p>对于用户可见的公共部分API，其命名应当表达出功能用途而不是其具体的实现细节。</p>\n<h3 id=\"7-2-描述：命名风格（Descriptive-Naming-Styles）\"><a href=\"#7-2-描述：命名风格（Descriptive-Naming-Styles）\" class=\"headerlink\" title=\"7.2 描述：命名风格（Descriptive: Naming Styles）\"></a>7.2 描述：命名风格（Descriptive: Naming Styles）</h3><p>存在很多不同的命名风格，最好能够独立地从命名对象的用途认出采用了哪种命名风格。</p>\n<p>通常区分以下命名样式：</p>\n<ul>\n<li>b (单个小写字母)</li>\n<li>B (单个大写字母)</li>\n<li>lowercase(小写)</li>\n<li>lower_case_with_underscores(带下划线小写)</li>\n<li>UPPERCASE(大写)</li>\n<li>UPPER_CASE_WITH_UNDERSCORES(带下划线大写)</li>\n<li>CapitalizedWords (也叫做CapWords或者CamelCase – 因为单词首字母大写看起来很像驼峰)。也被称作StudlyCaps。注意：当CapWords里包含缩写时，将缩写部分的字母都大写。HTTPServerError比HttpServerError要好。</li>\n<li>mixedCase (注意：和CapitalizedWords不同在于其首字母小写！)</li>\n<li>Capitalized_Words_With_Underscores (这种风格超丑！)</li>\n</ul>\n<p>也有风格使用简短唯一的前缀来表示一组相关的命名。这在Python中并不常见，但为了完整起见这里也捎带提一下。比如，os.stat()函数返回一个tuple，其中的元素名原本为st_mode,st-size,st_mtime等等。（这样做是为了强调和POSIX系统调用结构之间的关系，可以让程序员更熟悉。）</p>\n<p>X11库中的公共函数名都以X开头。在Python中这样的风格一般被认为是不必要的，因为属性和方法名之前已经有了对象名的前缀，而函数名前也有了模块名的前缀。</p>\n<p>此外，要区别以下划线开始或结尾的特殊形式（可以和其它的规则结合起来）：</p>\n<p>_single_leading_underscore: 以单个下划线开头是”内部使用”的弱标志。 比如， from M import *不会import下划线开头的对象。</p>\n<p>single_trailing_underscore_: 以单个下划线结尾用来避免和Python关键词产生冲突，例如:</p>\n<pre><code>Tkinter.Toplevel(master, class_=&apos;ClassName&apos;)</code></pre><p><strong>double_leading_underscore: 以双下划线开头的风格命名类属性表示触发命名修饰（在FooBar类中，</strong>boo命名会被修饰成_FooBar__boo;）。</p>\n<h3 id=\"7-3-规范：命名约定-Prescriptive-Naming-Conventions\"><a href=\"#7-3-规范：命名约定-Prescriptive-Naming-Conventions\" class=\"headerlink\" title=\"7.3 规范：命名约定(Prescriptive: Naming Conventions)\"></a>7.3 规范：命名约定(Prescriptive: Naming Conventions)</h3><h4 id=\"7-3-1-需要避免的命名-Names-To-Avoid\"><a href=\"#7-3-1-需要避免的命名-Names-To-Avoid\" class=\"headerlink\" title=\"7.3.1 需要避免的命名(Names To Avoid)\"></a>7.3.1 需要避免的命名(Names To Avoid)</h4><p>不要使用字符’l’（L的小写的字母），’O’（o大写的字母），或者’I’（i的大写的字母）来作为单个字符的变量名。</p>\n<p>在一些字体中，这些字符和数字1和0无法区别开来。比如，当想使用’l’时，使用’L’代替。</p>\n<h4 id=\"7-3-2-ASCII兼容性-ASCII-Compatibility\"><a href=\"#7-3-2-ASCII兼容性-ASCII-Compatibility\" class=\"headerlink\" title=\"7.3.2 ASCII兼容性(ASCII Compatibility)\"></a>7.3.2 ASCII兼容性(ASCII Compatibility)</h4><p>标准库中使用的标识符必须与ASCII兼容(参见PEP 3131中的<a href=\"https://www.python.org/dev/peps/pep-3131/#policy-specification\" target=\"_blank\" rel=\"noopener\">policy</a>这一节) 。</p>\n<h4 id=\"7-3-3-包和模块命名-Package-And-Module-Names\"><a href=\"#7-3-3-包和模块命名-Package-And-Module-Names\" class=\"headerlink\" title=\"7.3.3 包和模块命名(Package And Module Names)\"></a>7.3.3 包和模块命名(Package And Module Names)</h4><p>模块命名应短小，且为全小写。若下划线能提高可读性，也可以在模块名中使用。Python包命名也应该短小，且为全小写，但不应使用下划线。</p>\n<p>当使用C或C++写的扩展模块有相应的Python模块提供更高级的接口时（比如，更加面向对象），C/C++模块名以下划线开头（例如，_sociket）</p>\n<h4 id=\"7-3-4-类命名-Class-Names\"><a href=\"#7-3-4-类命名-Class-Names\" class=\"headerlink\" title=\"7.3.4 类命名(Class Names)\"></a>7.3.4 类命名(Class Names)</h4><p>类命名应该使用驼峰（CapWords）的命名约定。</p>\n<p>当接口已有文档说明且主要是被用作调用时，也可以使用函数的命名约定。</p>\n<p>注意对于内建命名(builtin names)有一个特殊的约定：大部分内建名都是一个单词（或者两个一起使用的单词），驼峰(CapWords)的约定只对异常命名和内建常量使用。</p>\n<h4 id=\"7-3-5-类型变量命名-Type-variable-names\"><a href=\"#7-3-5-类型变量命名-Type-variable-names\" class=\"headerlink\" title=\"7.3.5 类型变量命名(Type variable names)\"></a>7.3.5 类型变量命名(Type variable names)</h4><p>PEP 484中引入的类型变量名称通常应使用简短的驼峰命名: T，AnyStr，Num。 建议将后缀_co或_contra添加到用于声明相应的协变(covariant)和逆变(contravariant)的行为。例如：</p>\n<pre><code>from typing import TypeVar\n\nVT_co = TypeVar(&apos;VT_co&apos;, covariant=True)\nKT_contra = TypeVar(&apos;KT_contra&apos;, contravariant=True)</code></pre><h4 id=\"7-3-6-异常命名-Exception-Names\"><a href=\"#7-3-6-异常命名-Exception-Names\" class=\"headerlink\" title=\"7.3.6 异常命名(Exception Names)\"></a>7.3.6 异常命名(Exception Names)</h4><p>由于异常实际上也是类，因此类命名约定也适用与异常。不同的是，如果异常实际上是抛出错误的话，异常名前应该加上”Error”的前缀。</p>\n<h4 id=\"7-3-7-全局变量命名-Global-Variable-Names\"><a href=\"#7-3-7-全局变量命名-Global-Variable-Names\" class=\"headerlink\" title=\"7.3.7 全局变量命名(Global Variable Names)\"></a>7.3.7 全局变量命名(Global Variable Names)</h4><p>（在此之前，我们先假定这些变量都仅在同一个模块内使用。）这些约定同样也适用于函数命名。</p>\n<p>对于引用方式设计为from M import *的模块，应该使用<strong>all</strong>机制来避免import全局变量，或者采用下划线前缀的旧约定来命名全局变量，从而表明这些变量是“模块非公开的”。</p>\n<h4 id=\"7-3-8-函数命名-Function-Names\"><a href=\"#7-3-8-函数命名-Function-Names\" class=\"headerlink\" title=\"7.3.8 函数命名(Function Names)\"></a>7.3.8 函数命名(Function Names)</h4><p>函数命名应该都是小写，必要时使用下划线来提高可读性。</p>\n<p>只有当已有代码风格已经是混合大小写时（比如threading.py），为了保留向后兼容性才使用混合大小写。</p>\n<h4 id=\"7-3-9-函数和方法参数-Function-And-Method-Arguments\"><a href=\"#7-3-9-函数和方法参数-Function-And-Method-Arguments\" class=\"headerlink\" title=\"7.3.9 函数和方法参数(Function And Method Arguments)\"></a>7.3.9 函数和方法参数(Function And Method Arguments)</h4><p>实例方法的第一参数永远都是self。</p>\n<p>类方法的第一个参数永远都是cls。</p>\n<p>在函数参数名和保留关键字冲突时，相对于使用缩写或拼写简化，使用以下划线结尾的命名一般更好。比如，class_比clss更好。（或许使用同义词避免这样的冲突是更好的方式。）</p>\n<h4 id=\"7-3-10-方法命名和实例变量-Method-Names-And-Instance-Variables\"><a href=\"#7-3-10-方法命名和实例变量-Method-Names-And-Instance-Variables\" class=\"headerlink\" title=\"7.3.10 方法命名和实例变量(Method Names And Instance Variables)\"></a>7.3.10 方法命名和实例变量(Method Names And Instance Variables)</h4><p>使用函数命名的规则：小写单词，必要时使用下划线分开以提高可读性。</p>\n<p>仅对于非公开方法和变量命名在开头使用一个下划线。</p>\n<p>避免和子类的命名冲突，使用两个下划线开头来触发Python的命名修饰机制。</p>\n<p>Python类名的命名修饰规则：如果类Foo有一个属性叫<strong>a，不能使用Foo.</strong>a的方式访问该变量。（有用户可能仍然坚持使用Foo._Foo__a的方法访问。）一般来说，两个下划线开头的命名方法仅用于避免与设计为子类的类中的属性名冲突。</p>\n<h4 id=\"7-3-11-常量-Constants\"><a href=\"#7-3-11-常量-Constants\" class=\"headerlink\" title=\"7.3.11 常量(Constants)\"></a>7.3.11 常量(Constants)</h4><p>常量通常是在模块级别定义的，使用全部大写并用下划线将单词分开。如：MAX_OVERFLOW和TOTAL 。</p>\n<h4 id=\"7-3-12-继承的设计-Designing-For-Inheritance\"><a href=\"#7-3-12-继承的设计-Designing-For-Inheritance\" class=\"headerlink\" title=\"7.3.12 继承的设计(Designing For Inheritance)\"></a>7.3.12 继承的设计(Designing For Inheritance)</h4><p>记得永远区别类的方法和实例变量（属性）应该是公开的还是非公开的。如果有疑虑的话，请选择非公开的；因为之后将非公开属性变为公开属性要容易些。</p>\n<p>公开属性是那些你希望和你定义的类无关的客户来使用的，并且确保不会出现向后不兼容的问题。非公开属性是那些不希望被第三方使用的部分，你可以不用保证非公开属性不会变化或被移除。</p>\n<p>我们在这里没有使用“私有（private）”这个词，因为在Python里没有什么属性是真正私有的（这样设计省略了大量不必要的工作）。</p>\n<p>另一类属性属于子类API的一部分（在其他语言中经常被称为”protected”）。一些类是为继承设计的，要么扩展要么修改类的部分行为。当设计这样的类时，需要谨慎明确地决定哪些属性是公开的，哪些属于子类API，哪些真的只会被你的基类调用。</p>\n<p>请记住以上几点，下面是Python风格的指南：</p>\n<ul>\n<li>公开属性不应该有开头下划线。</li>\n<li>如果公开属性的名字和保留关键字有冲突，在你的属性名尾部加上一个下划线。这比采用缩写和简写更好。（然而，和这条规则冲突的是，‘cls’对任何变量和参数来说都是一个更好地拼写，因为大家都知道这表示class，特别是在类方法的第一个参数里。）</li>\n<li>对于简单的公共数据属性，最后仅公开属性名字，不要公开复杂的调用或设值方法。请记住，如果你发现一个简单的数据属性需要增加功能行为时，Python为功能增强提供了一个简单的途径。这种情况下，使用Properties注解将功能实现隐藏在简单数据属性访问语法之后。注意 1：Properties注解仅仅对新风格类有用。<br>注意 2：尽量保证功能行为没有副作用，尽管缓存这种副作用看上去并没有什么大问题。<br>注意 3: 对计算量大的运算避免试用properties；属性的注解会让调用者相信访问的运算量是相对较小的。</li>\n<li>如果你的类将被子类继承的话，你有一些属性并不想让子类访问，考虑将他们命名为两个下划线开头并且结尾处没有下划线。这样会触发Python命名修饰算法，类名会被修饰添加到属性名中。这样可以避免属性命名冲突，以免子类会不经意间包含相同的命名。注意 1：注意命名修饰仅仅是简单地将类名加入到修饰名中，所以如果子类有相同的类名合属性名，你可能仍然会遇到命名冲突问题。<br>注意 2：命名修饰可以有特定用途，比如在调试时，__getattr__()比较不方便。然而命名修饰算法的可以很好地记录，并且容意手动执行。<br>注意 3：不是所有人都喜欢命名修饰。需要试着去平衡避免偶然命名冲突的需求和高级调用者使用的潜在可能性。</li>\n</ul>\n<h3 id=\"7-4-公开和内部接口-Public-And-Internal-Interfaces\"><a href=\"#7-4-公开和内部接口-Public-And-Internal-Interfaces\" class=\"headerlink\" title=\"7.4 公开和内部接口(Public And Internal Interfaces)\"></a>7.4 公开和内部接口(Public And Internal Interfaces)</h3><p>任何向后兼容性保证仅对公开接口适用。相应地，用户能够清楚分辨公开接口和内部接口是很重要的。</p>\n<p>文档化的接口被认为是公开的，除非文档中明确申明了它们是临时的或者内部接口，不保证向后兼容性。所有文档中未提到的接口应该被认为是内部的。</p>\n<p>为了更好审视公开接口和内部接口，模块应该在<strong>all属性中明确申明公开API是哪些。将</strong>all__设为空list表示该模块中没有公开API。</p>\n<p>即使正确设置了__all属性，内部接口（包，模块，类，函数，属性或其他命名）也应该以一个下划线开头。</p>\n<p>如果接口的任一一个命名空间（包，模块或类）是内部的，那么该接口也应该是内部的</p>\n<p>引用的命名应该永远被认为是实现细节。其他模块不应当依赖这些非直接访问的引用命名，除非它们在文档中明确地被写为模块的API，例如os.path或者包的<strong>init</strong>模块，那些从子模块展现的功能。</p>\n<h2 id=\"8-编程建议-Programming-Recommendations\"><a href=\"#8-编程建议-Programming-Recommendations\" class=\"headerlink\" title=\"8 编程建议(Programming Recommendations)\"></a>8 编程建议(Programming Recommendations)</h2><p>1 代码应该以不影响其他Python实现（PyPy，Jython，IronPython，Cython，Psyco等）的方式编写。</p>\n<p>例如，不要依赖于 CPython 在字符串拼接时的优化实现，像这种语句形式a += b和a = a + b。即使是 CPython（仅对某些类型起作用） 这种优化也是脆弱的，不是在所有的实现中都不使用引用计数。在库中性能敏感的部分，用’’.join形式来代替。这会确保在所有不同的实现中字符串拼接是线性时间的。</p>\n<p>2 与单例作比较，像None应该用is或is not，从不使用==操作符。</p>\n<p>同样的，当心if x is not None这样的写法，你是不知真的要判断x不是None。例如，测试一个默认值为None的变量或参数是否设置成了其它值，其它值有可能是某种特殊类型（如容器），这种特殊类型在逻辑运算时其值会被当作Flase来看待。</p>\n<p>用is not操作符而不是not … is。虽然这两个表达式是功能相同的，前一个是更可读的，是首选。</p>\n<p>推荐的写法:</p>\n<pre><code>if foo is not None:</code></pre><p>不推荐的写法:</p>\n<pre><code>if not foo is None:</code></pre><p>3 用富比较实现排序操作的时候，最好实现所有六个比较操作符（ __eq__ 、 __ne__ 、 __lt__ , __le__ , __gt__ , __ge__），而不是依靠其他代码来进行特定比较。</p>\n<p>为了最大限度的减少工作量，functools.total_ordering()装饰器提供了一个工具去生成缺少的比较方法。</p>\n<p>PEP 207 说明了 Python 假定的所有反射规则。因此，解释器可能使用y &gt; x替换x &lt; y，使用y &gt;= x替换x &lt;= y，也可能交换x == y和x != y的操作数。sort()和min()操作肯定会使用&lt;操作符，max()函数肯定会使用&gt;操作符。当然，最好是六个操作符都实现，以便在其他情况下不会出现混淆。</p>\n<p>4 始终使用def语句来代替直接绑定了一个lambda表达式的赋值语句。</p>\n<p>推荐的写法:</p>\n<pre><code>def f(x): return 2*x</code></pre><p>不推荐的写法:</p>\n<pre><code>f = lambda x: 2*x</code></pre><p>第一个表单意味着生成的函数对象的名称是’f’而不是通用的’<lambda>‘。通常这对异常追踪和字符串表述是更有用的。使用赋值语句消除了使用lambda表达式可以提供，而一个显式的def语句不能提供的唯一好处，如，lambda能镶嵌在一个很长的表达式里。</p>\n<p>5 异常类应派生自Exception而不是BaseException。直接继承BaseException是为Exception保留的，从BaseException继承并捕获异常这种做法几乎总是错的。</p>\n<p>设计异常的层次结构，应基于那些可能出现异常的代码，而不是引发异常的位置。编码的时候，以回答“出了什么问题？”为目标，而不是仅仅指出“这里出现了问题”（见 PEP 3151 一个内建异常结构层次的例子）。</p>\n<p>类的命名约定适用于异常，如果异常类是一个错误，你应该给异常类加一个后缀Error。用于非本地流程控制或者其他形式的信号的非错误异常不需要一个特殊的后缀。</p>\n<p>6 适当的使用异常链。在 Python 3 里，应该使用raise X from Y来指示显式替换，而不会丢失原始的追溯。</p>\n<p>当有意替换一个内部的异常时（在 Python 2 用raise X，Python 3.3+ 用raise X from None），请确保将相关详细信息转移到新异常中（例如，将KeyError转换为AttributeError时保留属性名称，或将原始异常的文本嵌入到新的异常消息中）。</p>\n<p>7 在 Python 2 里抛出异常时，用raise ValueError(‘message’)代替旧式的raise ValueError, ‘message’。</p>\n<p>在 Python 3 之后的语法里，旧式的异常抛出方式是非法的。</p>\n<p>使用括号形式的异常意味着，当你传给异常的参数过长或者包含字符串格式化时，你就不需要使用续行符了，这要感谢括号！</p>\n<p>8 捕获异常时，尽可能使用明确的异常，而不是用一个空的except:语句。</p>\n<p>例如，用：</p>\n<pre><code>try:\n    import platform_specific_module\nexcept ImportError:\n    platform_specific_module = None</code></pre><p>一个空的except:语句将会捕获到SystemExit和KeyboardInterrupt异常，很难区分程序的中断到底是Ctrl+C还是其他问题引起的。如果你想捕获程序的所有错误，使用except Exception:(空except:等同于except BaseException)。</p>\n<p>一个好的经验是限制使用空except语句，除了这两种情况：</p>\n<ul>\n<li>如果异常处理程序会打印出或者记录回溯信息；至少用户意识到错误的存在。</li>\n<li>如果代码需要做一些清理工作，但后面用raise向上抛出异常。try .. finally是处理这种情况更好的方式。</li>\n</ul>\n<p>9 绑定异常给一个名字时，最好使用 Python 2.6 里添加的明确的名字绑定语法：</p>\n<pre><code>try:\n    process_data()\nexcept Exception as exc:\n    raise DataProcessingFailedError(str(exc))</code></pre><p>Python 3 只支持这种语法，避免与基于逗号的旧式语法产生二义性。</p>\n<p>10 捕获操作系统错误时，最好使用 Python 3.3 里引进的明确的异常结构层次，而不是内省的errno值。</p>\n<p>11 另外，对于所有try / except子句，将try子句限制为必需的绝对最小代码量。同样，这样可以避免屏蔽错误。</p>\n<p>推荐的写法：</p>\n<pre><code>try:\n    value = collection[key]\nexcept KeyError:\n    return key_not_found(key)\nelse:\n    return handle_value(value)</code></pre><p>不推荐的写法：</p>\n<pre><code>try:\n    # Too broad!\n    return handle_value(collection[key])\nexcept KeyError:\n    # Will also catch KeyError raised by handle_value()\n    return key_not_found(key)</code></pre><p>12 当某个资源仅被特定代码段使用，用with语句确保其在使用后被立即干净的清除了，try/finally也是也接受的。</p>\n<p>13 当它们做一些除了获取和释放资源之外的事的时候，上下文管理器应该通过单独的函数或方法调用。例如：</p>\n<p>推荐的写法:</p>\n<pre><code>with conn.begin_transaction():\n    do_stuff_in_transaction(conn)</code></pre><p>不推荐的写法：</p>\n<pre><code>with conn:\n    do_stuff_in_transaction(conn)</code></pre><p>第二个例子没有提供任何信息来表明<strong>enter</strong>和<strong>exit</strong>方法在完成一个事务后做了一些除了关闭连接以外的其它事。在这种情况下明确是很重要的。</p>\n<p>14 坚持使用return语句。函数内的return语句都应该返回一个表达式，或者None。如果一个return语句返回一个表达式，另一个没有返回值的应该用return None清晰的说明，并且在一个函数的结尾应该明确使用一个return语句（如果有返回值的话）。</p>\n<p>推荐的写法：</p>\n<pre><code>def foo(x):\n    if x &gt;= 0:\n        return math.sqrt(x)\n    else:\n        return None\n\ndef bar(x):\n    if x &lt; 0:\n        return None\n    return math.sqrt(x)</code></pre><p>不推荐的写法：</p>\n<pre><code>def foo(x):\n    if x &gt;= 0:\n        return math.sqrt(x)\n\ndef bar(x):\n    if x &lt; 0:\n        return\n    return math.sqrt(x)</code></pre><p>15 用字符串方法代替字符串模块。</p>\n<p>字符串方法总是快得多，并且与unicode字符串共享相同的API。如果需要与2.0以下的Python的向后兼容，则覆盖此规则。</p>\n<p>16 用’’.startswith()和’’.endswith()代替字符串切片来检查前缀和后缀。</p>\n<p>startswith()和endswith()是更简洁的，不容易出错的。例如：</p>\n<pre><code>#推荐的写法：\nif foo.startswith(&apos;bar&apos;):\n\n#不推荐的写法：\nif foo[:3] == &apos;bar&apos;:</code></pre><p>17 对象类型的比较应该始终使用isinstance()而不是直接比较。</p>\n<pre><code>#推荐的写法：\nif isinstance(obj, int):\n\n#不推荐的写法：\nif type(obj) is type(1):</code></pre><p>当比较一个对象是不是字符串时，记住它有可能也是一个 unicode 字符串！在 Python 2 里面，str和unicode有一个公共的基类叫basestring，因此你可以这样做：</p>\n<pre><code>if isinstance(obj, basestring):</code></pre><p>注意，在 Python 3 里面，unicode和basestring已经不存在了（只有str），byte对象不再是字符串的一种（被一个整数序列替代）。</p>\n<p>18 对于序列（字符串、列表、元组）来说，空的序列为False：</p>\n<p>正确的写法：</p>\n<pre><code>if not seq:\nif seq:</code></pre><p>错误的写法：</p>\n<pre><code>if len(seq):\nif not len(seq):</code></pre><p>19 不要让字符串对尾随的空格有依赖。这样的尾随空格是视觉上无法区分的，一些编辑器（或者，reindent.py）会将其裁剪掉。</p>\n<p>20 不要用==比较True和False。</p>\n<pre><code>#推荐的写法：\nif greeting:\n\n#不推荐的写法：\nif greeting == True:\n\n#更加不推荐的写法：\nif greeting is True:</code></pre>","site":{"data":{}},"excerpt":"<h2 id=\"1-介绍-Introduction\"><a href=\"#1-介绍-Introduction\" class=\"headerlink\" title=\"1 介绍(Introduction)\"></a>1 介绍(Introduction)</h2><p>本文档给出了包含主要Python发行版中的标准库的Python代码的编码约定。<br>随着时间的推移，随着更多的约定被识别，过去的约定被语言本身的变化所淘汰，这种风格指南也在不断发展。</p>","more":"<h2 id=\"2-代码布局-Code-Lay-Out\"><a href=\"#2-代码布局-Code-Lay-Out\" class=\"headerlink\" title=\"2 代码布局(Code Lay-Out)\"></a>2 代码布局(Code Lay-Out)</h2><h3 id=\"2-1-缩进-Indentation\"><a href=\"#2-1-缩进-Indentation\" class=\"headerlink\" title=\"2.1 缩进(Indentation)\"></a>2.1 缩进(Indentation)</h3><p>每个缩进需要使用4个空格。</p>\n<p>连续行所包装的元素应该要么采用Python隐式续行，即垂直对齐于圆括号、方括号和花括号，要么采用悬挂缩进。采用悬挂缩进时需考虑以下两点：第一行不应该包括参数，并且在续行中需要再缩进一级以便清楚表示。</p>\n<p>正确的写法</p>\n<pre><code># 同开始分界符(左括号)对齐\nfoo = long_function_name(var_one, var_two,\n                         var_three, var_four)\n\n# 续行多缩进一级以同其他代码区别\ndef long_function_name(\n        var_one, var_two, var_three,\n        var_four):\n    print(var_one)\n\n# 悬挂缩进需要多缩进一级\nfoo = long_function_name(\n    var_one, var_two,\n    var_three, var_four)</code></pre><p>错误的写法</p>\n<pre><code># 采用悬挂缩进时第一行不应该有参数\nfoo = long_function_name(var_one, var_two,\n    var_three, var_four)\n\n# 续行并没有被区分开，因此需要再缩进一级\ndef long_function_name(\n    var_one, var_two, var_three,\n    var_four):\n    print(var_one)</code></pre><p>对于延续行，4个空格的规则是可选使用的。</p>\n<p>同样可行的例子:</p>\n<pre><code># 悬挂缩进可以不采用4空格的缩进方法。\nfoo = long_function_name(\n  var_one, var_two,\n  var_three, var_four)</code></pre><p>如果if语句太长，需要用多行书写，2个字符(例如,if)加上一个空格和一个左括号刚好是4空格的缩进，但这对多行条件语句的续行是没用的。因为这会和if语句中嵌套的其他的缩进的语句产生视觉上的冲突。这份PEP中并没有做出明确的说明应该怎样来区分条件语句和if语句中所嵌套的语句。以下几种方法都是可行的，但不仅仅只限于这几种方法：</p>\n<pre><code># 不采用额外缩进\nif (this_is_one_thing and\n    that_is_another_thing):\n    do_something()\n\n# 增加一行注释，在编辑器中显示时能有所区分\n# supporting syntax highlighting.\nif (this_is_one_thing and\n    that_is_another_thing):\n    # Since both conditions are true, we can frobnicate.\n    do_something()\n\n# 在条件语句的续行增加一级缩进\nif (this_is_one_thing\n        and that_is_another_thing):\n    do_something()</code></pre><p>多行结束右圆/方/花括号可以单独一行书写，和上一行的缩进对齐：</p>\n<pre><code>my_list = [\n    1, 2, 3,\n    4, 5, 6,\n    ]\nresult = some_function_that_takes_arguments(\n    &apos;a&apos;, &apos;b&apos;, &apos;c&apos;,\n    &apos;d&apos;, &apos;e&apos;, &apos;f&apos;,\n    )</code></pre><p>也可以和多行开始的第一行的第一个字符对齐：</p>\n<pre><code>my_list = [\n    1, 2, 3,\n    4, 5, 6,\n]\nresult = some_function_that_takes_arguments(\n    &apos;a&apos;, &apos;b&apos;, &apos;c&apos;,\n    &apos;d&apos;, &apos;e&apos;, &apos;f&apos;,\n)</code></pre><p>Tab还是空格？(Tab Or Space?)</p>\n<p>推荐使用空格来进行缩进。</p>\n<p>Tab应该只在现有代码已经使用tab进行缩进的情况下使用，以便和现有代码保持一致。</p>\n<p>Python 3不允许tab和空格混合使用。</p>\n<p>Python 2的代码若有tab和空格混合使用的情况，应该把tab全部转换为只有空格。</p>\n<h3 id=\"2-2-每行最大长度-Maximum-Line-Length\"><a href=\"#2-2-每行最大长度-Maximum-Line-Length\" class=\"headerlink\" title=\"2.2 每行最大长度(Maximum Line Length)\"></a>2.2 每行最大长度(Maximum Line Length)</h3><p>将所有行都限制在79个字符长度以内。</p>\n<p>对于连续大段的文字（比如文档字符串(docstring)或注释），其结构上的限制更少，这些行应该被限制在72个字符长度内。</p>\n<p>限制编辑器的窗口宽度能让好几个文件同时打开在屏幕上显示，在使用代码评审(code review)工具时在两个相邻窗口显示两个版本的代码效果很好。</p>\n<p>很多工具的默认自动换行会破坏代码的结构，使代码更难以理解。在窗口大小设置为80个字符的编辑器中，即使在换行时编辑器可能会在最后一列放置一个记号，为避免自动换行也需要限制每行字符长度。一些基于web的工具可能根本没有自动换行的功能。</p>\n<p>一些团队会强烈希望行长度比79个字符更长。当代码仅仅只由一个团队维护时，可以达成一致让行长度增加到80到100字符(实际上最大行长是99字符)，注释和文档字符串仍然是以72字符换行。</p>\n<p>Python标准库比较传统，将行长限制在79个字符以内（文档字符串/注释为72个字符）。</p>\n<p>一种推荐的换行方式是利用Python圆括号、方括号和花括号中的隐式续行。长行可以通过在括号内换行来分成多行。应该最好加上反斜杠来区别续行。</p>\n<p>隐式续行</p>\n<pre><code>a = (&apos;sdfaf&apos; \n    &apos;test&apos;)</code></pre><p>有时续行只能使用反斜杠。例如，较长的多个with语句不能采用隐式续行，只能接受反斜杠表示换行：</p>\n<pre><code>with open(&apos;/path/to/some/file/you/want/to/read&apos;) as file_1, \\\n     open(&apos;/path/to/some/file/being/written&apos;, &apos;w&apos;) as file_2:\n    file_2.write(file_1.read())</code></pre><h3 id=\"2-3-二元运算符之前还是之后换行？-Should-a-line-break-before-or-after-a-binary-operator\"><a href=\"#2-3-二元运算符之前还是之后换行？-Should-a-line-break-before-or-after-a-binary-operator\" class=\"headerlink\" title=\"2.3 二元运算符之前还是之后换行？(Should a line break before or after a binary operator?)\"></a>2.3 二元运算符之前还是之后换行？(Should a line break before or after a binary operator?)</h3><p>长期以来一直推荐的风格是在二元运算符之后换行。但是这样会影响代码可读性，包括两个方面：一是运算符会分散在屏幕上的不同列上，二是每个运算符会留在前一行并远离操作数。所以，阅读代码的时候眼睛必须做更多的工作来确定哪些操作数被加，哪些操作数被减：</p>\n<pre><code># 错误的例子：运算符远离操作数\nincome = (gross_wages +\n          taxable_interest +\n          (dividends - qualified_dividends) -\n          ira_deduction -\n          student_loan_interest)</code></pre><p>为了解决这个可读性问题，数学家及其出版商遵循相反的规定。Donald Knuth在他的“电脑和排版”系列中解释了传统的规则：“尽管在段落中的公式总是在二元运算符之后换行，但显示公式时总是在二元运算符之前换行”。</p>\n<pre><code># 正确的例子：更容易匹配运算符与操作数\nincome = (gross_wages\n          + taxable_interest\n          + (dividends - qualified_dividends)\n          - ira_deduction\n          - student_loan_interest)</code></pre><p>在Python代码中，只要在统一项目中约定一致，就可以在二元运算符之前或之后换行。对于新编写的代码，建议使用Knuth的风格。</p>\n<h3 id=\"2-4-空行-Blank-Line\"><a href=\"#2-4-空行-Blank-Line\" class=\"headerlink\" title=\"2.4 空行(Blank Line)\"></a>2.4 空行(Blank Line)</h3><p>使用2个空行来分隔最外层的函数(function)和类(class)定义。</p>\n<p>使用1个空行来分隔类中的方法(method)定义。</p>\n<p>可以使用额外的空行（尽量少）来分隔一组相关的函数。在一系列相关的仅占一行的函数之间，空行也可以被省略（比如一组虚函数定义）。</p>\n<p>在函数内使用空行（尽量少）使代码逻辑更清晰。</p>\n<p>例子：</p>\n<pre><code>def func():\n\n\n    class A(object):\n        pass\n\n    def func1():\n        a = A()\n\n    def func2():\n        print(&apos;aaa&apos;)\n        print(&apos;bbb&apos;)</code></pre><p>Python支持control-L（如:^L）换页符作为空格；许多工具将这些符号作为分页符，因此你可以使用这些符号来分页或者区分文件中的相关区域。注意，一些编辑器和基于web的代码预览器可能不会将control-L识别为分页符，而是显示成其他符号。</p>\n<h3 id=\"2-5-源文件编码-Source-File-Encoding\"><a href=\"#2-5-源文件编码-Source-File-Encoding\" class=\"headerlink\" title=\"2.5 源文件编码(Source File Encoding)\"></a>2.5 源文件编码(Source File Encoding)</h3><p>Python核心发行版中的代码应该一直使用UTF-8（Python 2中使用ASCII）。</p>\n<p>使用ASCII（Python 2）或者UTF-8（Python 3）的文件不应该添加编码声明。</p>\n<p>在标准库中，只有用作测试目的，或者注释或文档字符串需要提及作者名字而不得不使用非ASCII字符时，才能使用非默认的编码。否则，在字符串文字中包括非ASCII数据时，推荐使用\\x, \\u, \\U或\\N等转义符。</p>\n<p>对于Python 3.0及其以后的版本中，标准库遵循以下原则（参见PEP 3131）：Python标准库中的所有标识符都必须只采用ASCII编码的标识符，在可行的条件下也应当使用英文词（很多情况下，使用的缩写和技术术语词都不是英文）。此外，字符串文字和注释应该只包括ASCII编码。只有两种例外：</p>\n<p>(a) 测试情况下为了测试非ASCII编码的特性</p>\n<p>(b) 作者名字。作者名字不是由拉丁字母组成的也必须提供一个拉丁音译名。</p>\n<p>鼓励具有全球受众的开放源码项目采用类似的原则。</p>\n<h3 id=\"2-6-模块引用-Imports\"><a href=\"#2-6-模块引用-Imports\" class=\"headerlink\" title=\"2.6 模块引用(Imports)\"></a>2.6 模块引用(Imports)</h3><p>Imports应该分行写，而不是都写在一行，例如：</p>\n<pre><code># 分开写\nimport os\nimport sys\n\n# 不要像下面一样写在一行\nimport sys, os</code></pre><p>这样写也是可以的：</p>\n<pre><code>from subprocess import Popen, PIPE</code></pre><p>Imports应该写在代码文件的开头，位于模块(module)注释和文档字符串(docstring)之后，模块全局变量(globals)和常量(constants)声明之前。</p>\n<p>Imports应该按照下面的顺序分组来写：</p>\n<ol>\n<li>标准库imports</li>\n<li>相关第三方imports</li>\n<li>本地应用/库的特定imports</li>\n</ol>\n<p>如：</p>\n<pre><code>import re\nfrom lxml import etree\nfrom ak_spider.common.mongo_models import *\nfrom ak_spider.settings import CAPTCHA_SERVER, AK_PROXY_SERVER, logger</code></pre><p>不同组的imports之前用空格隔开。</p>\n<p>推荐使用绝对(absolute)imports，因为这样通常更易读，在import系统没有正确配置（比如中的路径以sys.path结束）的情况下，也会有更好的表现（或者至少会给出错误信息）：</p>\n<pre><code>import mypkg.sibling\nfrom mypkg import sibling\nfrom mypkg.sibling import example</code></pre><p>然而，除了绝对imports，显式的相对imports也是一种可以接受的替代方式。特别是当处理复杂的包布局(package layouts)时，采用绝对imports会显得啰嗦。</p>\n<pre><code>from . import sibling\nfrom .sibling import example</code></pre><p>标准库代码应当一直使用绝对imports，避免复杂的包布局。</p>\n<p>隐式的相对imports应该永不使用，并且Python 3中已经被去掉了</p>\n<p>当从一个包括类的模块中import一个类时，通常可以这样写：</p>\n<pre><code>from myclass import MyClass\nfrom foo.bar.yourclass import YourClass</code></pre><p>如果和本地命名的拼写产生了冲突，应当直接import模块：</p>\n<pre><code>import myclass\nimport foo.bar.yourclass</code></pre><p>然后使用”myclass.MyClass”和”foo.bar.yourclass.YourClass”。</p>\n<p>避免使用通配符imports(from <module> import *)，因为会造成在当前命名空间出现的命名含义不清晰，给读者和许多自动化工具造成困扰。有一个可以正当使用通配符import的情形，即将一个内部接口重新发布成公共API的一部分（比如，使用备选的加速模块中的定义去覆盖纯Python实现的接口，预先无法知晓具体哪些定义将被覆盖）。</p>\n<p>当使用这种方式重新发布命名时，指南后面关于公共和内部接口的部分仍然适用。</p>\n<h3 id=\"2-7-模块级的双下划线命名-Module-level-dunder-names\"><a href=\"#2-7-模块级的双下划线命名-Module-level-dunder-names\" class=\"headerlink\" title=\"2.7 模块级的双下划线命名(Module level dunder names)\"></a>2.7 模块级的双下划线命名(Module level dunder names)</h3><p>模块中的“双下滑线”（变量名以两个下划线开头，两个下划线结尾）变量，比如<strong>all</strong>，<strong>author，</strong>version__等，应该写在文档字符串(docstring)之后，除了form <strong>future</strong>引用(imports)的任何其它类型的引用语句之前。Python要求模块中<strong>future</strong>的导入必须出现在除文档字符串(docstring)之外的任何其他代码之前。</p>\n<p>例如：</p>\n<pre><code>&quot;&quot;&quot;This is the example module.\n\nThis module does stuff.\n&quot;&quot;&quot;\n\nfrom __future__ import barry_as_FLUFL\n\n__all__ = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]\n__version__ = &apos;0.1&apos;\n__author__ = &apos;Cardinal Biggles&apos;\n\nimport os\nimport sys</code></pre><h2 id=\"3-字符串引用-String-Quotes\"><a href=\"#3-字符串引用-String-Quotes\" class=\"headerlink\" title=\"3 字符串引用(String Quotes)\"></a>3 字符串引用(String Quotes)</h2><p>在Python中表示字符串时，不管用单引号还是双引号都是一样的。但是不推荐将这两种方式看作一样并且混用。最好选择一种规则并坚持使用。当字符串中包含单引号时，采用双引号来表示字符串，反之也是一样，这样可以避免使用反斜杠，代码也更易读。</p>\n<p>对于三引号表示的字符串，使用双引号字符来表示(即用”””而不是’’’)。</p>\n<h2 id=\"4-表达式和语句中的空格-Whitespace-In-Expressions-And-Statements\"><a href=\"#4-表达式和语句中的空格-Whitespace-In-Expressions-And-Statements\" class=\"headerlink\" title=\"4 表达式和语句中的空格(Whitespace In Expressions And Statements)\"></a>4 表达式和语句中的空格(Whitespace In Expressions And Statements)</h2><h3 id=\"4-1-一些痛点-Pet-Peeves\"><a href=\"#4-1-一些痛点-Pet-Peeves\" class=\"headerlink\" title=\"4.1 一些痛点(Pet Peeves)\"></a>4.1 一些痛点(Pet Peeves)</h3><p>在下列情形中避免使用过多的空白：</p>\n<p>方括号，圆括号和花括号之后：</p>\n<pre><code>#正确的例子:\nspam(ham[1], {eggs: 2})\n\n#错误的例子：\nspam( ham[ 1 ], { eggs: 2 } )</code></pre><p>逗号，分号或冒号之前：</p>\n<pre><code>#正确的例子:\nif x == 4: print x, y; x, y = y, x\n\n#错误的例子:\nif x == 4 : print x , y ; x , y = y , x</code></pre><p>不过，在切片操作时，冒号和二元运算符是一样的，应该在其左右两边保留相同数量的空格（就像对待优先级最低的运算符一样）。在扩展切片操作中，所有冒号的左右两边空格数都应该相等。不过也有例外，当切片操作中的参数被省略时，应该也忽略空格。</p>\n<pre><code>#正确的例子:\nham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\nham[lower:upper], ham[lower:upper:], ham[lower::step]\nham[lower+offset : upper+offset]\nham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\nham[lower + offset : upper + offset]\n\n#错误的例子:\nham[lower + offset:upper + offset]\nham[1: 9], ham[1 :9], ham[1:9 :3]\nham[lower : : upper]\nham[ : upper]</code></pre><p>在调用函数时传递参数list的括号之前：</p>\n<pre><code>#正确的例子:\nspam(1)\n\n#错误的例子:\npam (1)</code></pre><p>在索引和切片操作的左括号之前：</p>\n<pre><code>#正确的例子:\ndct[&apos;key&apos;] = lst[index]\n\n#错误的例子:\ndct [&apos;key&apos;] = lst [index]</code></pre><p>赋值(或其他)运算符周围使用多个空格来和其他语句对齐：</p>\n<pre><code>#正确的例子:\nx = 1\ny = 2\nlong_variable = 3\n\n#错误的例子:\nx             = 1\ny             = 2\nlong_variable = 3</code></pre><h3 id=\"4-2-其他建议-Other-Recommendations\"><a href=\"#4-2-其他建议-Other-Recommendations\" class=\"headerlink\" title=\"4.2 其他建议(Other Recommendations)\"></a>4.2 其他建议(Other Recommendations)</h3><p>避免任何行末的空格。因为它通常是不可见的，它可能会令人困惑：例如反斜杠后跟空格和换行符不会作为续行标记。一些编辑器会自动去除行末空格，许多项目（如CPython本身）都有提交前的预处理钩子来自动去除行末空格。</p>\n<p>在二元运算符的两边都使用一个空格：赋值运算符(=)，增量赋值运算符(+=, -= etc.)，比较运算符(==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not)，布尔运算符(and, or, not)。</p>\n<p>如果使用了优先级不同的运算符，则在优先级较低的操作符周围增加空白。请你自行判断，不过永远不要用超过1个空格，永远保持二元运算符两侧的空白数量一样。</p>\n<pre><code>#正确的例子:\ni = i + 1\nsubmitted += 1\nx = x*2 - 1\nhypot2 = x*x + y*y\nc = (a+b) * (a-b)\n\n#错误的例子:\ni=i+1\nsubmitted +=1\nx = x * 2 - 1\nhypot2 = x * x + y * y\nc = (a + b) * (a - b)    </code></pre><p>使用=符号来表示关键字参数或参数默认值时，不要在其周围使用空格。</p>\n<pre><code>#正确的例子:\ndef complex(real, imag=0.0):\nreturn magic(r=real, i=imag)\n\n#错误的例子:\ndef complex(real, imag = 0.0):\nreturn magic(r = real, i = imag)</code></pre><p>函数注解中的:也遵循一般的:加空格的规则，在-&gt;两侧各使用一个空格。</p>\n<pre><code>#正确的例子:\ndef munge(input: AnyStr): ...\ndef munge() -&gt; AnyStr: ...\n\n#错误的例子:\ndef munge(input:AnyStr): ...\ndef munge()-&gt;PosInt: ...</code></pre><p>在组合使用函数注解和参数默认值时，需要在=两侧各使用一个空格（只有当这个参数既有函数注解，又有默认值的时候）。</p>\n<pre><code>#正确的例子:\ndef munge(sep: AnyStr = None): ...\ndef munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...\n\n#错误的例子:\ndef munge(input: AnyStr=None): ...\ndef munge(input: AnyStr, limit = 1000): ...</code></pre><p>复合语句（即将多行语句写在一行）一般是不鼓励使用的。</p>\n<pre><code>#正确的例子:\nif foo == &apos;blah&apos;:\ndo_blah_thing()\ndo_one()\ndo_two()\ndo_three()\n\n#最好不要这样:\nif foo == &apos;blah&apos;: do_blah_thing()\ndo_one(); do_two(); do_three()</code></pre><p>有时也可以将短小的if/for/while中的语句写在一行，但对于有多个分句的语句永远不要这样做。也要避免将多行都写在一起。</p>\n<pre><code>#最好不要这样：\nif foo == &apos;blah&apos;: do_blah_thing()\nfor x in lst: total += x\nwhile t &lt; 10: t = delay()\n\n#绝对不要这样：\nif foo == &apos;blah&apos;: do_blah_thing()\nelse: do_non_blah_thing()\n\ntry: something()\nfinally: cleanup()\n\ndo_one(); do_two(); do_three(long, argument,\nlist, like, this)\n\nif foo == &apos;blah&apos;: one(); two(); three()</code></pre><h2 id=\"5-何时在末尾加逗号-When-to-use-trailing-commas\"><a href=\"#5-何时在末尾加逗号-When-to-use-trailing-commas\" class=\"headerlink\" title=\"5 何时在末尾加逗号(When to use trailing commas)\"></a>5 何时在末尾加逗号(When to use trailing commas)</h2><p>末尾逗号通常是可选的，除非在定义单元素元组(tuple)时是必需的（而且在Python 2中，它们具有print语句的语义）。为了清楚起见，建议使用括号（技术上来说是冗余的）括起来。</p>\n<pre><code>#正确的例子:\nFILES = (&apos;setup.cfg&apos;,)\n\n#也正确，但令人困惑:\nFILES = &apos;setup.cfg&apos;,</code></pre><p>当使用版本控制系统时，在将来有可能扩展的列表末尾添加冗余的逗号是有好处的。具体的做法是将每一个元素写在单独的一行，并在行尾添加逗号，右括号单独占一行。但是，与有括号在同一行的末尾元素后面加逗号是没有意义的（上述的单元素元组除外）。</p>\n<pre><code>#正确的例子:\nFILES = [\n    &apos;setup.cfg&apos;,\n    &apos;tox.ini&apos;,\n    ]\ninitialize(FILES,\n           error=True,\n           )\n\n#错误的例子:\nFILES = [&apos;setup.cfg&apos;, &apos;tox.ini&apos;,]\ninitialize(FILES, error=True,)</code></pre><h2 id=\"6-注释-Comments\"><a href=\"#6-注释-Comments\" class=\"headerlink\" title=\"6 注释(Comments)\"></a>6 注释(Comments)</h2><p>和代码矛盾的注释还不如没有。当代码有改动时，一定要优先更改注释使其保持最新。</p>\n<p>注释应该是完整的多个句子。如果注释是一个短语或一个句子，其首字母应该大写，除非开头是一个以小写字母开头的标识符（永远不要更改标识符的大小写）。</p>\n<p>如果注释很短，结束的句号可以被忽略。块注释通常由一段或几段完整的句子组成，每个句子都应该以句号结束。</p>\n<p>你应该在句尾的句号后再加上2个空格。</p>\n<p>使用英文写作，参考Strunk和White的《The Elements of Style》</p>\n<p>来自非英语国家的Python程序员们，请使用英文来写注释，除非你120%确定你的代码永远不会被不懂你所用语言的人阅读到。</p>\n<h3 id=\"6-1-块注释（Block-Comments）\"><a href=\"#6-1-块注释（Block-Comments）\" class=\"headerlink\" title=\"6.1 块注释（Block Comments）\"></a>6.1 块注释（Block Comments）</h3><p>块注释一般写在对应代码之前，并且和对应代码有同样的缩进级别。块注释的每一行都应该以#和一个空格开头（除非该文本是在注释内缩进对齐的）。</p>\n<p>块注释中的段落应该用只含有单个#的一行隔开。</p>\n<h3 id=\"6-2-行内注释（Inline-Comments）\"><a href=\"#6-2-行内注释（Inline-Comments）\" class=\"headerlink\" title=\"6.2 行内注释（Inline Comments）\"></a>6.2 行内注释（Inline Comments）</h3><p>尽量少用行内注释。</p>\n<p>行内注释是和代码语句写在一行内的注释。行内注释应该至少和代码语句之间有两个空格的间隔，并且以#和一个空格开始。</p>\n<p>行内注释通常不是必要的，在代码含义很明显时甚至会让人分心。请不要这样做：</p>\n<pre><code>x = x + 1                 # x自加</code></pre><p>但这样做是有用的：</p>\n<pre><code>x = x + 1                 # 边界补偿</code></pre><h3 id=\"6-3-文档字符串-Documentation-Strings\"><a href=\"#6-3-文档字符串-Documentation-Strings\" class=\"headerlink\" title=\"6.3 文档字符串(Documentation Strings)\"></a>6.3 文档字符串(Documentation Strings)</h3><p>要知道如何写出好的文档字符串（docstring），请参考PEP 257</p>\n<p>所有的公共模块，函数，类和方法都应该有文档字符串。对于非公共方法，文档字符串不是必要的，但你应该留有注释说明该方法的功能，该注释应当出现在def的下一行。</p>\n<p>PEP 257描述了好的文档字符应该遵循的规则。其中最重要的是，多行文档字符串以单行”””结尾，不能有其他字符，例如：</p>\n<pre><code>&quot;&quot;&quot;Return a foobang\n\nOptional plotz says to frobnicate the bizbaz first.\n&quot;&quot;&quot;</code></pre><p>对于仅有一行的文档字符串，结尾处的”””应该也写在这一行。</p>\n<h2 id=\"7-命名约定（Naming-Conventions）\"><a href=\"#7-命名约定（Naming-Conventions）\" class=\"headerlink\" title=\"7 命名约定（Naming Conventions）\"></a>7 命名约定（Naming Conventions）</h2><p>Python标准库的命名约定有一些混乱，因此我们永远都无法保持一致。但如今仍然存在一些推荐的命名标准。新的模块和包（包括第三方框架）应该采用这些标准，但若是已经存在的包有另一套风格的话，还是应当与原有的风格保持内部一致。</p>\n<h3 id=\"7-1-首要原则（Overriding-Principle）\"><a href=\"#7-1-首要原则（Overriding-Principle）\" class=\"headerlink\" title=\"7.1 首要原则（Overriding Principle）\"></a>7.1 首要原则（Overriding Principle）</h3><p>对于用户可见的公共部分API，其命名应当表达出功能用途而不是其具体的实现细节。</p>\n<h3 id=\"7-2-描述：命名风格（Descriptive-Naming-Styles）\"><a href=\"#7-2-描述：命名风格（Descriptive-Naming-Styles）\" class=\"headerlink\" title=\"7.2 描述：命名风格（Descriptive: Naming Styles）\"></a>7.2 描述：命名风格（Descriptive: Naming Styles）</h3><p>存在很多不同的命名风格，最好能够独立地从命名对象的用途认出采用了哪种命名风格。</p>\n<p>通常区分以下命名样式：</p>\n<ul>\n<li>b (单个小写字母)</li>\n<li>B (单个大写字母)</li>\n<li>lowercase(小写)</li>\n<li>lower_case_with_underscores(带下划线小写)</li>\n<li>UPPERCASE(大写)</li>\n<li>UPPER_CASE_WITH_UNDERSCORES(带下划线大写)</li>\n<li>CapitalizedWords (也叫做CapWords或者CamelCase – 因为单词首字母大写看起来很像驼峰)。也被称作StudlyCaps。注意：当CapWords里包含缩写时，将缩写部分的字母都大写。HTTPServerError比HttpServerError要好。</li>\n<li>mixedCase (注意：和CapitalizedWords不同在于其首字母小写！)</li>\n<li>Capitalized_Words_With_Underscores (这种风格超丑！)</li>\n</ul>\n<p>也有风格使用简短唯一的前缀来表示一组相关的命名。这在Python中并不常见，但为了完整起见这里也捎带提一下。比如，os.stat()函数返回一个tuple，其中的元素名原本为st_mode,st-size,st_mtime等等。（这样做是为了强调和POSIX系统调用结构之间的关系，可以让程序员更熟悉。）</p>\n<p>X11库中的公共函数名都以X开头。在Python中这样的风格一般被认为是不必要的，因为属性和方法名之前已经有了对象名的前缀，而函数名前也有了模块名的前缀。</p>\n<p>此外，要区别以下划线开始或结尾的特殊形式（可以和其它的规则结合起来）：</p>\n<p>_single_leading_underscore: 以单个下划线开头是”内部使用”的弱标志。 比如， from M import *不会import下划线开头的对象。</p>\n<p>single_trailing_underscore_: 以单个下划线结尾用来避免和Python关键词产生冲突，例如:</p>\n<pre><code>Tkinter.Toplevel(master, class_=&apos;ClassName&apos;)</code></pre><p><strong>double_leading_underscore: 以双下划线开头的风格命名类属性表示触发命名修饰（在FooBar类中，</strong>boo命名会被修饰成_FooBar__boo;）。</p>\n<h3 id=\"7-3-规范：命名约定-Prescriptive-Naming-Conventions\"><a href=\"#7-3-规范：命名约定-Prescriptive-Naming-Conventions\" class=\"headerlink\" title=\"7.3 规范：命名约定(Prescriptive: Naming Conventions)\"></a>7.3 规范：命名约定(Prescriptive: Naming Conventions)</h3><h4 id=\"7-3-1-需要避免的命名-Names-To-Avoid\"><a href=\"#7-3-1-需要避免的命名-Names-To-Avoid\" class=\"headerlink\" title=\"7.3.1 需要避免的命名(Names To Avoid)\"></a>7.3.1 需要避免的命名(Names To Avoid)</h4><p>不要使用字符’l’（L的小写的字母），’O’（o大写的字母），或者’I’（i的大写的字母）来作为单个字符的变量名。</p>\n<p>在一些字体中，这些字符和数字1和0无法区别开来。比如，当想使用’l’时，使用’L’代替。</p>\n<h4 id=\"7-3-2-ASCII兼容性-ASCII-Compatibility\"><a href=\"#7-3-2-ASCII兼容性-ASCII-Compatibility\" class=\"headerlink\" title=\"7.3.2 ASCII兼容性(ASCII Compatibility)\"></a>7.3.2 ASCII兼容性(ASCII Compatibility)</h4><p>标准库中使用的标识符必须与ASCII兼容(参见PEP 3131中的<a href=\"https://www.python.org/dev/peps/pep-3131/#policy-specification\" target=\"_blank\" rel=\"noopener\">policy</a>这一节) 。</p>\n<h4 id=\"7-3-3-包和模块命名-Package-And-Module-Names\"><a href=\"#7-3-3-包和模块命名-Package-And-Module-Names\" class=\"headerlink\" title=\"7.3.3 包和模块命名(Package And Module Names)\"></a>7.3.3 包和模块命名(Package And Module Names)</h4><p>模块命名应短小，且为全小写。若下划线能提高可读性，也可以在模块名中使用。Python包命名也应该短小，且为全小写，但不应使用下划线。</p>\n<p>当使用C或C++写的扩展模块有相应的Python模块提供更高级的接口时（比如，更加面向对象），C/C++模块名以下划线开头（例如，_sociket）</p>\n<h4 id=\"7-3-4-类命名-Class-Names\"><a href=\"#7-3-4-类命名-Class-Names\" class=\"headerlink\" title=\"7.3.4 类命名(Class Names)\"></a>7.3.4 类命名(Class Names)</h4><p>类命名应该使用驼峰（CapWords）的命名约定。</p>\n<p>当接口已有文档说明且主要是被用作调用时，也可以使用函数的命名约定。</p>\n<p>注意对于内建命名(builtin names)有一个特殊的约定：大部分内建名都是一个单词（或者两个一起使用的单词），驼峰(CapWords)的约定只对异常命名和内建常量使用。</p>\n<h4 id=\"7-3-5-类型变量命名-Type-variable-names\"><a href=\"#7-3-5-类型变量命名-Type-variable-names\" class=\"headerlink\" title=\"7.3.5 类型变量命名(Type variable names)\"></a>7.3.5 类型变量命名(Type variable names)</h4><p>PEP 484中引入的类型变量名称通常应使用简短的驼峰命名: T，AnyStr，Num。 建议将后缀_co或_contra添加到用于声明相应的协变(covariant)和逆变(contravariant)的行为。例如：</p>\n<pre><code>from typing import TypeVar\n\nVT_co = TypeVar(&apos;VT_co&apos;, covariant=True)\nKT_contra = TypeVar(&apos;KT_contra&apos;, contravariant=True)</code></pre><h4 id=\"7-3-6-异常命名-Exception-Names\"><a href=\"#7-3-6-异常命名-Exception-Names\" class=\"headerlink\" title=\"7.3.6 异常命名(Exception Names)\"></a>7.3.6 异常命名(Exception Names)</h4><p>由于异常实际上也是类，因此类命名约定也适用与异常。不同的是，如果异常实际上是抛出错误的话，异常名前应该加上”Error”的前缀。</p>\n<h4 id=\"7-3-7-全局变量命名-Global-Variable-Names\"><a href=\"#7-3-7-全局变量命名-Global-Variable-Names\" class=\"headerlink\" title=\"7.3.7 全局变量命名(Global Variable Names)\"></a>7.3.7 全局变量命名(Global Variable Names)</h4><p>（在此之前，我们先假定这些变量都仅在同一个模块内使用。）这些约定同样也适用于函数命名。</p>\n<p>对于引用方式设计为from M import *的模块，应该使用<strong>all</strong>机制来避免import全局变量，或者采用下划线前缀的旧约定来命名全局变量，从而表明这些变量是“模块非公开的”。</p>\n<h4 id=\"7-3-8-函数命名-Function-Names\"><a href=\"#7-3-8-函数命名-Function-Names\" class=\"headerlink\" title=\"7.3.8 函数命名(Function Names)\"></a>7.3.8 函数命名(Function Names)</h4><p>函数命名应该都是小写，必要时使用下划线来提高可读性。</p>\n<p>只有当已有代码风格已经是混合大小写时（比如threading.py），为了保留向后兼容性才使用混合大小写。</p>\n<h4 id=\"7-3-9-函数和方法参数-Function-And-Method-Arguments\"><a href=\"#7-3-9-函数和方法参数-Function-And-Method-Arguments\" class=\"headerlink\" title=\"7.3.9 函数和方法参数(Function And Method Arguments)\"></a>7.3.9 函数和方法参数(Function And Method Arguments)</h4><p>实例方法的第一参数永远都是self。</p>\n<p>类方法的第一个参数永远都是cls。</p>\n<p>在函数参数名和保留关键字冲突时，相对于使用缩写或拼写简化，使用以下划线结尾的命名一般更好。比如，class_比clss更好。（或许使用同义词避免这样的冲突是更好的方式。）</p>\n<h4 id=\"7-3-10-方法命名和实例变量-Method-Names-And-Instance-Variables\"><a href=\"#7-3-10-方法命名和实例变量-Method-Names-And-Instance-Variables\" class=\"headerlink\" title=\"7.3.10 方法命名和实例变量(Method Names And Instance Variables)\"></a>7.3.10 方法命名和实例变量(Method Names And Instance Variables)</h4><p>使用函数命名的规则：小写单词，必要时使用下划线分开以提高可读性。</p>\n<p>仅对于非公开方法和变量命名在开头使用一个下划线。</p>\n<p>避免和子类的命名冲突，使用两个下划线开头来触发Python的命名修饰机制。</p>\n<p>Python类名的命名修饰规则：如果类Foo有一个属性叫<strong>a，不能使用Foo.</strong>a的方式访问该变量。（有用户可能仍然坚持使用Foo._Foo__a的方法访问。）一般来说，两个下划线开头的命名方法仅用于避免与设计为子类的类中的属性名冲突。</p>\n<h4 id=\"7-3-11-常量-Constants\"><a href=\"#7-3-11-常量-Constants\" class=\"headerlink\" title=\"7.3.11 常量(Constants)\"></a>7.3.11 常量(Constants)</h4><p>常量通常是在模块级别定义的，使用全部大写并用下划线将单词分开。如：MAX_OVERFLOW和TOTAL 。</p>\n<h4 id=\"7-3-12-继承的设计-Designing-For-Inheritance\"><a href=\"#7-3-12-继承的设计-Designing-For-Inheritance\" class=\"headerlink\" title=\"7.3.12 继承的设计(Designing For Inheritance)\"></a>7.3.12 继承的设计(Designing For Inheritance)</h4><p>记得永远区别类的方法和实例变量（属性）应该是公开的还是非公开的。如果有疑虑的话，请选择非公开的；因为之后将非公开属性变为公开属性要容易些。</p>\n<p>公开属性是那些你希望和你定义的类无关的客户来使用的，并且确保不会出现向后不兼容的问题。非公开属性是那些不希望被第三方使用的部分，你可以不用保证非公开属性不会变化或被移除。</p>\n<p>我们在这里没有使用“私有（private）”这个词，因为在Python里没有什么属性是真正私有的（这样设计省略了大量不必要的工作）。</p>\n<p>另一类属性属于子类API的一部分（在其他语言中经常被称为”protected”）。一些类是为继承设计的，要么扩展要么修改类的部分行为。当设计这样的类时，需要谨慎明确地决定哪些属性是公开的，哪些属于子类API，哪些真的只会被你的基类调用。</p>\n<p>请记住以上几点，下面是Python风格的指南：</p>\n<ul>\n<li>公开属性不应该有开头下划线。</li>\n<li>如果公开属性的名字和保留关键字有冲突，在你的属性名尾部加上一个下划线。这比采用缩写和简写更好。（然而，和这条规则冲突的是，‘cls’对任何变量和参数来说都是一个更好地拼写，因为大家都知道这表示class，特别是在类方法的第一个参数里。）</li>\n<li>对于简单的公共数据属性，最后仅公开属性名字，不要公开复杂的调用或设值方法。请记住，如果你发现一个简单的数据属性需要增加功能行为时，Python为功能增强提供了一个简单的途径。这种情况下，使用Properties注解将功能实现隐藏在简单数据属性访问语法之后。注意 1：Properties注解仅仅对新风格类有用。<br>注意 2：尽量保证功能行为没有副作用，尽管缓存这种副作用看上去并没有什么大问题。<br>注意 3: 对计算量大的运算避免试用properties；属性的注解会让调用者相信访问的运算量是相对较小的。</li>\n<li>如果你的类将被子类继承的话，你有一些属性并不想让子类访问，考虑将他们命名为两个下划线开头并且结尾处没有下划线。这样会触发Python命名修饰算法，类名会被修饰添加到属性名中。这样可以避免属性命名冲突，以免子类会不经意间包含相同的命名。注意 1：注意命名修饰仅仅是简单地将类名加入到修饰名中，所以如果子类有相同的类名合属性名，你可能仍然会遇到命名冲突问题。<br>注意 2：命名修饰可以有特定用途，比如在调试时，__getattr__()比较不方便。然而命名修饰算法的可以很好地记录，并且容意手动执行。<br>注意 3：不是所有人都喜欢命名修饰。需要试着去平衡避免偶然命名冲突的需求和高级调用者使用的潜在可能性。</li>\n</ul>\n<h3 id=\"7-4-公开和内部接口-Public-And-Internal-Interfaces\"><a href=\"#7-4-公开和内部接口-Public-And-Internal-Interfaces\" class=\"headerlink\" title=\"7.4 公开和内部接口(Public And Internal Interfaces)\"></a>7.4 公开和内部接口(Public And Internal Interfaces)</h3><p>任何向后兼容性保证仅对公开接口适用。相应地，用户能够清楚分辨公开接口和内部接口是很重要的。</p>\n<p>文档化的接口被认为是公开的，除非文档中明确申明了它们是临时的或者内部接口，不保证向后兼容性。所有文档中未提到的接口应该被认为是内部的。</p>\n<p>为了更好审视公开接口和内部接口，模块应该在<strong>all属性中明确申明公开API是哪些。将</strong>all__设为空list表示该模块中没有公开API。</p>\n<p>即使正确设置了__all属性，内部接口（包，模块，类，函数，属性或其他命名）也应该以一个下划线开头。</p>\n<p>如果接口的任一一个命名空间（包，模块或类）是内部的，那么该接口也应该是内部的</p>\n<p>引用的命名应该永远被认为是实现细节。其他模块不应当依赖这些非直接访问的引用命名，除非它们在文档中明确地被写为模块的API，例如os.path或者包的<strong>init</strong>模块，那些从子模块展现的功能。</p>\n<h2 id=\"8-编程建议-Programming-Recommendations\"><a href=\"#8-编程建议-Programming-Recommendations\" class=\"headerlink\" title=\"8 编程建议(Programming Recommendations)\"></a>8 编程建议(Programming Recommendations)</h2><p>1 代码应该以不影响其他Python实现（PyPy，Jython，IronPython，Cython，Psyco等）的方式编写。</p>\n<p>例如，不要依赖于 CPython 在字符串拼接时的优化实现，像这种语句形式a += b和a = a + b。即使是 CPython（仅对某些类型起作用） 这种优化也是脆弱的，不是在所有的实现中都不使用引用计数。在库中性能敏感的部分，用’’.join形式来代替。这会确保在所有不同的实现中字符串拼接是线性时间的。</p>\n<p>2 与单例作比较，像None应该用is或is not，从不使用==操作符。</p>\n<p>同样的，当心if x is not None这样的写法，你是不知真的要判断x不是None。例如，测试一个默认值为None的变量或参数是否设置成了其它值，其它值有可能是某种特殊类型（如容器），这种特殊类型在逻辑运算时其值会被当作Flase来看待。</p>\n<p>用is not操作符而不是not … is。虽然这两个表达式是功能相同的，前一个是更可读的，是首选。</p>\n<p>推荐的写法:</p>\n<pre><code>if foo is not None:</code></pre><p>不推荐的写法:</p>\n<pre><code>if not foo is None:</code></pre><p>3 用富比较实现排序操作的时候，最好实现所有六个比较操作符（ __eq__ 、 __ne__ 、 __lt__ , __le__ , __gt__ , __ge__），而不是依靠其他代码来进行特定比较。</p>\n<p>为了最大限度的减少工作量，functools.total_ordering()装饰器提供了一个工具去生成缺少的比较方法。</p>\n<p>PEP 207 说明了 Python 假定的所有反射规则。因此，解释器可能使用y &gt; x替换x &lt; y，使用y &gt;= x替换x &lt;= y，也可能交换x == y和x != y的操作数。sort()和min()操作肯定会使用&lt;操作符，max()函数肯定会使用&gt;操作符。当然，最好是六个操作符都实现，以便在其他情况下不会出现混淆。</p>\n<p>4 始终使用def语句来代替直接绑定了一个lambda表达式的赋值语句。</p>\n<p>推荐的写法:</p>\n<pre><code>def f(x): return 2*x</code></pre><p>不推荐的写法:</p>\n<pre><code>f = lambda x: 2*x</code></pre><p>第一个表单意味着生成的函数对象的名称是’f’而不是通用的’<lambda>‘。通常这对异常追踪和字符串表述是更有用的。使用赋值语句消除了使用lambda表达式可以提供，而一个显式的def语句不能提供的唯一好处，如，lambda能镶嵌在一个很长的表达式里。</p>\n<p>5 异常类应派生自Exception而不是BaseException。直接继承BaseException是为Exception保留的，从BaseException继承并捕获异常这种做法几乎总是错的。</p>\n<p>设计异常的层次结构，应基于那些可能出现异常的代码，而不是引发异常的位置。编码的时候，以回答“出了什么问题？”为目标，而不是仅仅指出“这里出现了问题”（见 PEP 3151 一个内建异常结构层次的例子）。</p>\n<p>类的命名约定适用于异常，如果异常类是一个错误，你应该给异常类加一个后缀Error。用于非本地流程控制或者其他形式的信号的非错误异常不需要一个特殊的后缀。</p>\n<p>6 适当的使用异常链。在 Python 3 里，应该使用raise X from Y来指示显式替换，而不会丢失原始的追溯。</p>\n<p>当有意替换一个内部的异常时（在 Python 2 用raise X，Python 3.3+ 用raise X from None），请确保将相关详细信息转移到新异常中（例如，将KeyError转换为AttributeError时保留属性名称，或将原始异常的文本嵌入到新的异常消息中）。</p>\n<p>7 在 Python 2 里抛出异常时，用raise ValueError(‘message’)代替旧式的raise ValueError, ‘message’。</p>\n<p>在 Python 3 之后的语法里，旧式的异常抛出方式是非法的。</p>\n<p>使用括号形式的异常意味着，当你传给异常的参数过长或者包含字符串格式化时，你就不需要使用续行符了，这要感谢括号！</p>\n<p>8 捕获异常时，尽可能使用明确的异常，而不是用一个空的except:语句。</p>\n<p>例如，用：</p>\n<pre><code>try:\n    import platform_specific_module\nexcept ImportError:\n    platform_specific_module = None</code></pre><p>一个空的except:语句将会捕获到SystemExit和KeyboardInterrupt异常，很难区分程序的中断到底是Ctrl+C还是其他问题引起的。如果你想捕获程序的所有错误，使用except Exception:(空except:等同于except BaseException)。</p>\n<p>一个好的经验是限制使用空except语句，除了这两种情况：</p>\n<ul>\n<li>如果异常处理程序会打印出或者记录回溯信息；至少用户意识到错误的存在。</li>\n<li>如果代码需要做一些清理工作，但后面用raise向上抛出异常。try .. finally是处理这种情况更好的方式。</li>\n</ul>\n<p>9 绑定异常给一个名字时，最好使用 Python 2.6 里添加的明确的名字绑定语法：</p>\n<pre><code>try:\n    process_data()\nexcept Exception as exc:\n    raise DataProcessingFailedError(str(exc))</code></pre><p>Python 3 只支持这种语法，避免与基于逗号的旧式语法产生二义性。</p>\n<p>10 捕获操作系统错误时，最好使用 Python 3.3 里引进的明确的异常结构层次，而不是内省的errno值。</p>\n<p>11 另外，对于所有try / except子句，将try子句限制为必需的绝对最小代码量。同样，这样可以避免屏蔽错误。</p>\n<p>推荐的写法：</p>\n<pre><code>try:\n    value = collection[key]\nexcept KeyError:\n    return key_not_found(key)\nelse:\n    return handle_value(value)</code></pre><p>不推荐的写法：</p>\n<pre><code>try:\n    # Too broad!\n    return handle_value(collection[key])\nexcept KeyError:\n    # Will also catch KeyError raised by handle_value()\n    return key_not_found(key)</code></pre><p>12 当某个资源仅被特定代码段使用，用with语句确保其在使用后被立即干净的清除了，try/finally也是也接受的。</p>\n<p>13 当它们做一些除了获取和释放资源之外的事的时候，上下文管理器应该通过单独的函数或方法调用。例如：</p>\n<p>推荐的写法:</p>\n<pre><code>with conn.begin_transaction():\n    do_stuff_in_transaction(conn)</code></pre><p>不推荐的写法：</p>\n<pre><code>with conn:\n    do_stuff_in_transaction(conn)</code></pre><p>第二个例子没有提供任何信息来表明<strong>enter</strong>和<strong>exit</strong>方法在完成一个事务后做了一些除了关闭连接以外的其它事。在这种情况下明确是很重要的。</p>\n<p>14 坚持使用return语句。函数内的return语句都应该返回一个表达式，或者None。如果一个return语句返回一个表达式，另一个没有返回值的应该用return None清晰的说明，并且在一个函数的结尾应该明确使用一个return语句（如果有返回值的话）。</p>\n<p>推荐的写法：</p>\n<pre><code>def foo(x):\n    if x &gt;= 0:\n        return math.sqrt(x)\n    else:\n        return None\n\ndef bar(x):\n    if x &lt; 0:\n        return None\n    return math.sqrt(x)</code></pre><p>不推荐的写法：</p>\n<pre><code>def foo(x):\n    if x &gt;= 0:\n        return math.sqrt(x)\n\ndef bar(x):\n    if x &lt; 0:\n        return\n    return math.sqrt(x)</code></pre><p>15 用字符串方法代替字符串模块。</p>\n<p>字符串方法总是快得多，并且与unicode字符串共享相同的API。如果需要与2.0以下的Python的向后兼容，则覆盖此规则。</p>\n<p>16 用’’.startswith()和’’.endswith()代替字符串切片来检查前缀和后缀。</p>\n<p>startswith()和endswith()是更简洁的，不容易出错的。例如：</p>\n<pre><code>#推荐的写法：\nif foo.startswith(&apos;bar&apos;):\n\n#不推荐的写法：\nif foo[:3] == &apos;bar&apos;:</code></pre><p>17 对象类型的比较应该始终使用isinstance()而不是直接比较。</p>\n<pre><code>#推荐的写法：\nif isinstance(obj, int):\n\n#不推荐的写法：\nif type(obj) is type(1):</code></pre><p>当比较一个对象是不是字符串时，记住它有可能也是一个 unicode 字符串！在 Python 2 里面，str和unicode有一个公共的基类叫basestring，因此你可以这样做：</p>\n<pre><code>if isinstance(obj, basestring):</code></pre><p>注意，在 Python 3 里面，unicode和basestring已经不存在了（只有str），byte对象不再是字符串的一种（被一个整数序列替代）。</p>\n<p>18 对于序列（字符串、列表、元组）来说，空的序列为False：</p>\n<p>正确的写法：</p>\n<pre><code>if not seq:\nif seq:</code></pre><p>错误的写法：</p>\n<pre><code>if len(seq):\nif not len(seq):</code></pre><p>19 不要让字符串对尾随的空格有依赖。这样的尾随空格是视觉上无法区分的，一些编辑器（或者，reindent.py）会将其裁剪掉。</p>\n<p>20 不要用==比较True和False。</p>\n<pre><code>#推荐的写法：\nif greeting:\n\n#不推荐的写法：\nif greeting == True:\n\n#更加不推荐的写法：\nif greeting is True:</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl07s77xe0001hvx36g8x6hzy","category_id":"cl07s77xk0004hvx3be45bijk","_id":"cl07s77xv000hhvx380f5acoy"},{"post_id":"cl07s77xn0007hvx3c4ge9x42","category_id":"cl07s77xk0004hvx3be45bijk","_id":"cl07s77y3000shvx3g8444j6q"},{"post_id":"cl07s77xp0009hvx3aoanechv","category_id":"cl07s77y0000nhvx38af088d1","_id":"cl07s77y8000xhvx3g1dm2ote"},{"post_id":"cl07s77y6000vhvx3ax1z1fcc","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77ya0013hvx31wc88iwp"},{"post_id":"cl07s77y7000whvx35p79dyz1","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77yc0017hvx3f5a7ej5e"},{"post_id":"cl07s77y80010hvx38sn1ai3s","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77yd001ahvx3dtd4gu84"},{"post_id":"cl07s77y90012hvx3d7zwcbpr","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77yf001chvx33x2uek5k"},{"post_id":"cl07s77yb0016hvx34ki76hcd","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77yh001ghvx3fbp1b8pu"},{"post_id":"cl07s77yd0019hvx3axxbdcbr","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77yj001jhvx3226obb27"},{"post_id":"cl07s77xi0003hvx3ergod6uj","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77yl001ohvx3f8672d6o"},{"post_id":"cl07s77xi0003hvx3ergod6uj","category_id":"cl07s77yb0015hvx35tvf3nnv","_id":"cl07s77ym001qhvx3d5qo5j8k"},{"post_id":"cl07s77ye001bhvx382jq6bom","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77ys001uhvx37ah626f9"},{"post_id":"cl07s77yh001fhvx34b7hfgul","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77ys001xhvx39028e6uk"},{"post_id":"cl07s77yi001ihvx3cebb963x","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77yu0022hvx3fbpg7dtm"},{"post_id":"cl07s77yl001nhvx3f8q6ax7b","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77yv0024hvx39u55gwit"},{"post_id":"cl07s77y2000rhvx3heoah8d0","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77yw002bhvx3bup08a52"},{"post_id":"cl07s77y2000rhvx3heoah8d0","category_id":"cl07s77yv0025hvx37hyh1aww","_id":"cl07s77yx002ehvx31g3rg2x8"},{"post_id":"cl07s77xq000bhvx33l0e85k7","category_id":"cl07s77y3000thvx37hby85le","_id":"cl07s77yx002hhvx34gcq2ws0"},{"post_id":"cl07s77xq000bhvx33l0e85k7","category_id":"cl07s77yw0028hvx3165t5zvk","_id":"cl07s77yy002khvx3ffin6dqa"},{"post_id":"cl07s77xt000fhvx35kkcfmod","category_id":"cl07s77y3000thvx37hby85le","_id":"cl07s77yy002nhvx3045j3d5k"},{"post_id":"cl07s77xt000fhvx35kkcfmod","category_id":"cl07s77yw002chvx39uazbrkl","_id":"cl07s77yz002phvx39ue53gbe"},{"post_id":"cl07s77xu000ghvx38roae8cg","category_id":"cl07s77y3000thvx37hby85le","_id":"cl07s77yz002thvx332fkevbq"},{"post_id":"cl07s77xu000ghvx38roae8cg","category_id":"cl07s77yw0028hvx3165t5zvk","_id":"cl07s77z0002uhvx34aipe2m7"},{"post_id":"cl07s77xx000khvx31kcd75eh","category_id":"cl07s77y3000thvx37hby85le","_id":"cl07s77z0002whvx3a7nd4jd1"},{"post_id":"cl07s77xx000khvx31kcd75eh","category_id":"cl07s77yw0028hvx3165t5zvk","_id":"cl07s77z1002zhvx3f5eb67fp"},{"post_id":"cl07s77ym001phvx319bod2qk","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77z10033hvx34jar4viv"},{"post_id":"cl07s77ym001phvx319bod2qk","category_id":"cl07s77yz002shvx3h511f8q8","_id":"cl07s77z20034hvx3722z44k9"},{"post_id":"cl07s77yr001thvx33xiiggx2","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77z20036hvx31fgt6lol"},{"post_id":"cl07s77yr001thvx33xiiggx2","category_id":"cl07s77yv0025hvx37hyh1aww","_id":"cl07s77z20039hvx320ux3sxs"},{"post_id":"cl07s77xz000mhvx3evvl6amh","category_id":"cl07s77y3000thvx37hby85le","_id":"cl07s77z3003bhvx31irk4pwr"},{"post_id":"cl07s77xz000mhvx3evvl6amh","category_id":"cl07s77yw0028hvx3165t5zvk","_id":"cl07s77z3003fhvx36vxu8uac"},{"post_id":"cl07s77ys001whvx317ee7xjb","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77z4003ihvx3b9s3baaa"},{"post_id":"cl07s77ys001whvx317ee7xjb","category_id":"cl07s77z20035hvx377nkhe2u","_id":"cl07s77z4003khvx31k064p1d"},{"post_id":"cl07s77yt0021hvx3gl1n3cnp","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77z5003nhvx3dd367r16"},{"post_id":"cl07s77yt0021hvx3gl1n3cnp","category_id":"cl07s77yv0025hvx37hyh1aww","_id":"cl07s77z5003phvx3epno808l"},{"post_id":"cl07s77y1000phvx3hvpv5vry","category_id":"cl07s77y3000thvx37hby85le","_id":"cl07s77z6003rhvx3775mdf9g"},{"post_id":"cl07s77y1000phvx3hvpv5vry","category_id":"cl07s77yw0028hvx3165t5zvk","_id":"cl07s77z6003thvx3f52r0frl"},{"post_id":"cl07s77yu0023hvx3art26la3","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s77z8003zhvx3b2y25y1y"},{"post_id":"cl07s77yu0023hvx3art26la3","category_id":"cl07s77z5003mhvx3c4j113gj","_id":"cl07s77z80041hvx38zix569d"},{"post_id":"cl07s77yu0023hvx3art26la3","category_id":"cl07s77z6003uhvx34bc90fog","_id":"cl07s77z80043hvx34z2t06fl"},{"post_id":"cl07s7837004whvx34co8hjcm","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s783a004zhvx3h5lga00c"},{"post_id":"cl07s7837004whvx34co8hjcm","category_id":"cl07s77z20035hvx377nkhe2u","_id":"cl07s783a0050hvx37miy01ts"},{"post_id":"cl07s78630051hvx3cxtodi20","category_id":"cl07s77xs000chvx3h8gra8ko","_id":"cl07s78640053hvx31cwzgiuf"}],"PostTag":[{"post_id":"cl07s77xe0001hvx36g8x6hzy","tag_id":"cl07s77xm0005hvx36dyn67li","_id":"cl07s77xt000ehvx3cjub490d"},{"post_id":"cl07s77xi0003hvx3ergod6uj","tag_id":"cl07s77xs000dhvx3b36x5ua1","_id":"cl07s77xy000lhvx3hk780q26"},{"post_id":"cl07s77xn0007hvx3c4ge9x42","tag_id":"cl07s77xm0005hvx36dyn67li","_id":"cl07s77y2000qhvx3aryufaoo"},{"post_id":"cl07s77xp0009hvx3aoanechv","tag_id":"cl07s77y1000ohvx3abea06nu","_id":"cl07s77y90011hvx33p6jalo3"},{"post_id":"cl07s77xp0009hvx3aoanechv","tag_id":"cl07s77y4000uhvx3afvpebf1","_id":"cl07s77yb0014hvx3a0h2egrm"},{"post_id":"cl07s77xq000bhvx33l0e85k7","tag_id":"cl07s77y8000zhvx31n8ig9wm","_id":"cl07s77yi001hhvx3ejnn5kmq"},{"post_id":"cl07s77xq000bhvx33l0e85k7","tag_id":"cl07s77yc0018hvx39xmzfsf6","_id":"cl07s77yk001lhvx3hh2acpp1"},{"post_id":"cl07s77xt000fhvx35kkcfmod","tag_id":"cl07s77y8000zhvx31n8ig9wm","_id":"cl07s77ys001vhvx37j2n2fyk"},{"post_id":"cl07s77xt000fhvx35kkcfmod","tag_id":"cl07s77yk001mhvx30twadn40","_id":"cl07s77yt001zhvx33rvohnau"},{"post_id":"cl07s77xu000ghvx38roae8cg","tag_id":"cl07s77y8000zhvx31n8ig9wm","_id":"cl07s77yw0027hvx330v64jp4"},{"post_id":"cl07s77xu000ghvx38roae8cg","tag_id":"cl07s77yc0018hvx39xmzfsf6","_id":"cl07s77yw0029hvx3ckjkhhfg"},{"post_id":"cl07s77xx000khvx31kcd75eh","tag_id":"cl07s77y8000zhvx31n8ig9wm","_id":"cl07s77yx002fhvx3hnq0aded"},{"post_id":"cl07s77xx000khvx31kcd75eh","tag_id":"cl07s77yc0018hvx39xmzfsf6","_id":"cl07s77yx002ghvx34y7f9ptk"},{"post_id":"cl07s77xz000mhvx3evvl6amh","tag_id":"cl07s77y8000zhvx31n8ig9wm","_id":"cl07s77yz002ohvx3altve76p"},{"post_id":"cl07s77xz000mhvx3evvl6amh","tag_id":"cl07s77yc0018hvx39xmzfsf6","_id":"cl07s77yz002qhvx3cm5w5ptn"},{"post_id":"cl07s77y1000phvx3hvpv5vry","tag_id":"cl07s77y8000zhvx31n8ig9wm","_id":"cl07s77z1002yhvx37z5p5rc4"},{"post_id":"cl07s77y1000phvx3hvpv5vry","tag_id":"cl07s77yc0018hvx39xmzfsf6","_id":"cl07s77z10030hvx3clrp5mqo"},{"post_id":"cl07s77y2000rhvx3heoah8d0","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77z20038hvx3hme41gpp"},{"post_id":"cl07s77y2000rhvx3heoah8d0","tag_id":"cl07s77z10031hvx3h1s4epdr","_id":"cl07s77z3003ahvx3a70s0nnm"},{"post_id":"cl07s77y6000vhvx3ax1z1fcc","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77z3003ehvx33jzy16pp"},{"post_id":"cl07s77y7000whvx35p79dyz1","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77z4003jhvx328qh4l7r"},{"post_id":"cl07s77y80010hvx38sn1ai3s","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77z5003ohvx3cvdjhz02"},{"post_id":"cl07s77y90012hvx3d7zwcbpr","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77z6003shvx3ha9o91qi"},{"post_id":"cl07s77yb0016hvx34ki76hcd","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77z7003whvx32652axap"},{"post_id":"cl07s77yd0019hvx3axxbdcbr","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77z8003yhvx30wy71bd1"},{"post_id":"cl07s77ye001bhvx382jq6bom","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77z80042hvx34kj67tv6"},{"post_id":"cl07s77yh001fhvx34b7hfgul","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77z90045hvx3efel2mk8"},{"post_id":"cl07s77yi001ihvx3cebb963x","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77z90047hvx31tew9vpw"},{"post_id":"cl07s77yl001nhvx3f8q6ax7b","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77za0049hvx32dkzawhh"},{"post_id":"cl07s77ym001phvx319bod2qk","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77za004chvx3bbiwh7h3"},{"post_id":"cl07s77ym001phvx319bod2qk","tag_id":"cl07s77za004ahvx3hvya2adw","_id":"cl07s77zb004dhvx3gkq54jhw"},{"post_id":"cl07s77yr001thvx33xiiggx2","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77zc004ghvx34awccntr"},{"post_id":"cl07s77yr001thvx33xiiggx2","tag_id":"cl07s77z10031hvx3h1s4epdr","_id":"cl07s77zc004hhvx3gtach9em"},{"post_id":"cl07s77ys001whvx317ee7xjb","tag_id":"cl07s77zc004fhvx30cnf63wf","_id":"cl07s77zd004khvx32wyz0mhi"},{"post_id":"cl07s77ys001whvx317ee7xjb","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77zd004lhvx314kve9xf"},{"post_id":"cl07s77yt0021hvx3gl1n3cnp","tag_id":"cl07s77y1000ohvx3abea06nu","_id":"cl07s77ze004ohvx32wstftbw"},{"post_id":"cl07s77yt0021hvx3gl1n3cnp","tag_id":"cl07s77zc004jhvx38z48e5mv","_id":"cl07s77ze004phvx3eneddm1p"},{"post_id":"cl07s77yt0021hvx3gl1n3cnp","tag_id":"cl07s77zd004mhvx33c1f6kej","_id":"cl07s77ze004rhvx359qzar3w"},{"post_id":"cl07s77yu0023hvx3art26la3","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s77zf004thvx3altw5moz"},{"post_id":"cl07s77yu0023hvx3art26la3","tag_id":"cl07s77ze004qhvx3fiibg0l0","_id":"cl07s77zf004uhvx36nms2s45"},{"post_id":"cl07s77yu0023hvx3art26la3","tag_id":"cl07s77ze004shvx3d8jiaoy3","_id":"cl07s77zf004vhvx35k7u51zl"},{"post_id":"cl07s7837004whvx34co8hjcm","tag_id":"cl07s77zc004fhvx30cnf63wf","_id":"cl07s783a004xhvx34ehubxfc"},{"post_id":"cl07s7837004whvx34co8hjcm","tag_id":"cl07s77z0002vhvx34uyz6te0","_id":"cl07s783a004yhvx33f8ad5cy"},{"post_id":"cl07s78630051hvx3cxtodi20","tag_id":"cl07s78640052hvx37s5xe3qa","_id":"cl07s78640054hvx344by7ch6"}],"Tag":[{"name":"docker","_id":"cl07s77xm0005hvx36dyn67li"},{"name":"jupyter","_id":"cl07s77xs000dhvx3b36x5ua1"},{"name":"项目","_id":"cl07s77y1000ohvx3abea06nu"},{"name":"lambda","_id":"cl07s77y4000uhvx3afvpebf1"},{"name":"数据库","_id":"cl07s77y8000zhvx31n8ig9wm"},{"name":"mysql","_id":"cl07s77yc0018hvx39xmzfsf6"},{"name":"mongo","_id":"cl07s77yk001mhvx30twadn40"},{"name":"python","_id":"cl07s77z0002vhvx34uyz6te0"},{"name":"爬虫","_id":"cl07s77z10031hvx3h1s4epdr"},{"name":"排序","_id":"cl07s77za004ahvx3hvya2adw"},{"name":"数据分析","_id":"cl07s77zc004fhvx30cnf63wf"},{"name":"requests","_id":"cl07s77zc004jhvx38z48e5mv"},{"name":"jsdom","_id":"cl07s77zd004mhvx33c1f6kej"},{"name":"tcp","_id":"cl07s77ze004qhvx3fiibg0l0"},{"name":"socket","_id":"cl07s77ze004shvx3d8jiaoy3"},{"name":"编码规范","_id":"cl07s78640052hvx37s5xe3qa"}]}}