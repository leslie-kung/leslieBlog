import ClipboardAction from"./clipboard-action";import Emitter from"tiny-emitter";import listen from"good-listener";class Clipboard extends Emitter{constructor(t,e){super(),this.resolveOptions(e),this.listenClick(t)}resolveOptions(t={}){this.action="function"==typeof t.action?t.action:this.defaultAction,this.target="function"==typeof t.target?t.target:this.defaultTarget,this.text="function"==typeof t.text?t.text:this.defaultText,this.container="object"==typeof t.container?t.container:document.body}listenClick(t){this.listener=listen(t,"click",t=>this.onClick(t))}onClick(t){t=t.delegateTarget||t.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new ClipboardAction({action:this.action(t),target:this.target(t),text:this.text(t),container:this.container,trigger:t,emitter:this})}defaultAction(t){return getAttributeValue("action",t)}defaultTarget(t){t=getAttributeValue("target",t);if(t)return document.querySelector(t)}static isSupported(t=["copy","cut"]){const e="string"==typeof t?[t]:t;let i=!!document.queryCommandSupported;return e.forEach(t=>{i=i&&!!document.queryCommandSupported(t)}),i}defaultText(t){return getAttributeValue("text",t)}destroy(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}function getAttributeValue(t,e){t="data-clipboard-"+t;if(e.hasAttribute(t))return e.getAttribute(t)}module.exports=Clipboard;